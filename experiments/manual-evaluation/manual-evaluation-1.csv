Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language,Manual_Evaluation_Score
3375,https://github.com/formatjs/formatjs-old,"name: Node CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 110
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install
      run: |
        yarn install --frozen-lockfile
      env:
        CI: true
    - name: yarn build
      run: |
        yarn build
      env:
        CI: true
    - name: yarn test
      run: |
        yarn test
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build
      run: yarn build

    - name: Test
      run: yarn test
",0.3274647887323944,0.5436708924818202,Valid,0.949874687,TypeScript,
3956,https://github.com/alitajs/alita,"name: CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test-e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build Packages
        run: pnpm build
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright test:e2e
        run: pnpm test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm test
",0.1544064093226511,0.5544463781990274,Valid,0.7722567287784678,JavaScript,
224,https://github.com/mrpt-ros-pkg/mrpt_navigation,"# Based on GTSAM file (by @ProfFan)
name: CI Build colcon

on: [push, pull_request]

jobs:
  build_docker: # On Linux, iterates on all ROS 1 and ROS 2 distributions.
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
    strategy:
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        ros_distribution:
          - humble
          - iron
          - rolling

        # Define the Docker image(s) associated with each ROS distribution.
        # The include syntax allows additional variables to be defined, like
        # docker_image in this case. See documentation:
        # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-including-configurations-in-a-matrix-build
        #
        # Platforms are defined in REP 3 and REP 2000:
        # https://ros.org/reps/rep-0003.html
        # https://ros.org/reps/rep-2000.html
        include:
          # Humble Hawksbill (May 2022 - May 2027)
          - docker_image: ubuntu:jammy
            ros_distribution: humble
            ros_version: 2

          # Iron Irwini (May 2023 - November 2024)
          - docker_image: ubuntu:jammy
            ros_distribution: iron
            ros_version: 2

          # Rolling Ridley (No End-Of-Life)
          - docker_image: ubuntu:jammy
            ros_distribution: rolling
            ros_version: 2

    container:
      image: ${{ matrix.docker_image }}

    steps:
      - name: Checkout
        run: |
          apt-get -y update
          apt-get -y install git
          git clone https://github.com/$GITHUB_REPOSITORY.git --recursive ""$GITHUB_WORKSPACE""

      - name: setup ROS environment
        uses: ros-tooling/setup-ros@v0.7
        with:
          required-ros-distributions: ${{ matrix.ros_distribution }}

      - name: Install rosdep dependencies
        run: |
          . /opt/ros/*/setup.sh
          rosdep update
          rosdep install --from-paths . --ignore-src -r -y

      - name: Build with colcon
        run: |
          . /opt/ros/*/setup.sh
          env
          MAKEFLAGS=""-j2"" colcon build --symlink-install --parallel-workers 2 --event-handlers console_direct+
","name: Build and Test

on:
  push:
    branches:
      - ros2

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up ROS environment
        uses: ros-tooling/setup-ros@v0.2

      - name: Install dependencies
        run: sudo apt update && rosdep install --from-paths src --ignore-src --rosdistro $ROS_DISTRO -y

      - name: Build the project
        run: colcon build

      - name: Source the setup script
        run: source install/local_setup.bash

      - name: Run tests
        if: contains(github.event.head_commit.modified, 'test')
        run: colcon test && colcon test-result --verbose",0.0466689212039228,0.2215830607987056,Valid,0.4777880184331797,C++,
3353,https://github.com/ganlvtech/phaser-catch-the-cat,"name: Build and Deploy
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2.3.1

      - name: Install and Build üîß # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          npm install
          npm run build

      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist # The folder the action should deploy.","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test
        run: npm test
        env:
          CI: true
",0.1555555555555555,0.4780672687016519,Valid,0.6666666666666666,TypeScript,
3383,https://github.com/seth-brown/formd,"name: Build Status

on: [push]

jobs:
  github:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v1
      - name: setup node
        uses: actions/setup-node@v1
      - name: install deps
        run: |
          npm install
      - name: run tests
        run: |
          npm test
      - name: build
        run: |
          npm run build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.1770715096481271,0.5774844547775471,Valid,0.9520697167755992,TypeScript,
1461,https://github.com/pfusik/cito,"name: tests
on: push
jobs:
  c-cl-error:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-c test-cl test-error
  cpp-java:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/checkout@main
      - run: make -j3 test-cpp test-java
  cs:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-dotnet@main
      - uses: actions/checkout@main
      - run: make -j3 test-cs
  d:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest
      - uses: actions/checkout@main
      - run: make -j3 test-d
  js-ts:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-js test-ts
  py-swift:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - run: pip install mypy
      - uses: swift-actions/setup-swift@main
      - uses: actions/checkout@main
      - run: make -j3 test-py test-swift
  host-diff:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/setup-node@main
      - uses: actions/checkout@main
      - run: make -j3 host-diff
      - run: make -j3 java/GenBase.java
      - run: make -j3 host-diff-java
      - run: make -j3 test-error FUT_HOST=cs
      - run: make -j3 test-error FUT_HOST=java
      - run: make -j3 test-error FUT_HOST=node
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Makefile
        run: make
      - name: Run tests
        run: make test
",0.0190400634668782,0.155981244405415,Valid,0.4874785055599009,C++,
35,https://github.com/geotools/geotools,"name: Assembly bundle and test

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3 -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

jobs:
  build:
    runs-on: [ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Maven repository caching
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: gt-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          gt-maven-
    - name: Setup python for docs
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip' # caching pip dependencies from requirements.txt below
    - name: Setup python pip requirements for building docs
      working-directory: docs
      run: |
        pip install -r requirements.txt
    - name: Disable checksum offloading
      # See: https://github.com/actions/virtual-environments/issues/1187#issuecomment-686735760
      run: sudo ethtool -K eth0 tx off rx off
    - name: Build with Maven
      run: |
        mvn -B clean install -DskipTests -Dall -T2 --file pom.xml
    - name: Assemble downloads
      run: |
        mvn -B -DskipTests assembly:single -file release/pom.xml
    - name: Test bin download run and compile
      shell: bash
      working-directory: release/target
      run: |
        echo ""List assemblies:""
        ls geotools-*.zip
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*bin.zip` -d bin-download
        cd bin-download
        cd `ls -d geotools-*/`
        echo ""Running GeoTools.main()...""
        java -cp ""lib/*"" org.geotools.util.factory.GeoTools
        echo ""Compiling Quickstart.java""
        mkdir bin
        javac -cp ""lib/*"" -d bin src/org/geotools/tutorial/quickstart/Quickstart.java
        ls -R bin | grep Quickstart
    - name: Test user guide download
      shell: bash
      working-directory: release/target
      run: |
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*userguide.zip` -d userguide-download
        cd userguide-download
        cd `ls -d geotools-*/`
        
        
    - name: Remove SNAPSHOT jars from repository
      run: |
        find ~/.m2/repository -name ""*SNAPSHOT*"" -type d | xargs rm -rf {}
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Test with Maven
        run: mvn test
",0.1271498771498771,0.2463827902358662,Valid,0.3042724621038318,Java,
5269,https://github.com/metalsmith/metalsmith-layouts,"name: CI
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['master']

jobs:
  pre-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm run format:check
      - run: npm run lint:check

  branch-test:
    if: github.ref_name != 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm test

  test:
    if: github.ref_name == 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0', '16.0', '18.0', '20.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - run: npm install
      - run: npm test
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        run: npm run coverage
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.info
          format: lcov
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Check Code Style (Lint)
      run: npm run lint
      if: contains(github.event.head_commit.message, '[lint]') || github.event_name == 'pull_request'

    - name: Test
      run: npm test

    - name: Build
      run: npm run build
      if: contains(github.event.head_commit.message, '[build]') || github.event_name == 'pull_request'
",0.1600703605980651,0.3272316271658835,Valid,1.0,JavaScript,
569,https://github.com/chrisvin/rubberpicker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin' # Adopt OpenJDK
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test

    - name: Run android tests
      run: ./gradlew connectedAndroidTest",0.3876464323748669,0.4039304052464558,Valid,0.9705882352941176,Kotlin,
575,https://github.com/afollestad/date-picker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.2466422466422466,0.3483309708712561,Valid,0.8333333333333334,Kotlin,
479,https://github.com/alanhamlett/readtime,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./readtime --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev-requirements.txt

    - name: Run setup.py
      run: python setup.py build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r dev-requirements.txt

    - name: Run tests
      run: |
        python -m unittest discover tests
",0.0804407713498622,0.6034014595011872,Valid,0.4274742368267548,Python,
64,https://github.com/junkdog/artemis-odb,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install -Pgwttest","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    # Set up JDK
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'temurin'

    # Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    # Build with Maven
    - name: Build with Maven
      run: mvn -B clean install --file pom.xml
      
    # Run tests with Maven
    - name: Test with Maven
      run: mvn -B test --file pom.xml
",0.0910714285714285,0.2052495303388905,Valid,0.6451612903225806,Java,
613,https://github.com/commit451/modalbottomsheetdialogfragment,"name: Build
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Build the app
        run: chmod +x gradlew && ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon
",0.4024390243902439,0.190961894260804,Valid,0.6792452830188679,Kotlin,
5286,https://github.com/auditdrivencrypto/secret-handshake,"name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run tests
      run: npm test
",0.2039911308203991,0.6830665446261496,Valid,1.0,JavaScript,
3427,https://github.com/emeraldpay/hashicon,"name: Unit Tests

on:
  # if pushed directly to the master
  push:
    branches:
      - master
  # on a pull request
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""

      - name: Instal JS dependencies
        run: yarn install

      - name: Build Sources
        run: yarn build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test
",0.44668008,0.807730183,Valid,0.695652174,TypeScript,
3369,https://github.com/macfire10/react-shortcuts-hook,"name: Node.js CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install --save-dev react react-dom
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: yarn install --frozen-lockfile

    - name: Build
      run: yarn build

    - name: Run Linter
      run: yarn lint

    - name: Run Tests
      run: yarn test
",0.053475935828877,0.6080805950480118,Valid,0.5751633986928104,TypeScript,
557,https://github.com/afollestad/inline-activity-result,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build --stacktrace

  test:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Test with Gradle
      run: ./gradlew test --stacktrace",0.1736930860033727,0.094601235,Valid,0.7346938775510204,Kotlin,
3418,https://github.com/app-outlet/app-outlet,"name: Pipeline

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test:coverage

      - name: Upload code coverage report
        uses: paambaati/codeclimate-action@v3.0.0
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: coverage/lcov.info:lcov

      - name: Generage changelog
        run: npx standard-changelog -r 2 -v -o CHANGELOG.txt
        if: startsWith(github.ref, 'refs/tags/')

      - name: Print changelog
        run: cat CHANGELOG.txt
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build
        run: npm run build
        if: startsWith(github.ref, 'refs/tags/')

      - name: Deploy to releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/App Outlet-*.AppImage
            release/app-outlet-*.tar.gz
            release/app-outlet_*_amd64.deb
            release/app-outlet-*.x86_64.rpm
          body_path: CHANGELOG.txt
          token: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: yarn install --frozen-lockfile

    - name: Run Lint
      run: npx eslint .

    - name: Build Angular App
      run: npx ng build

    - name: Run Unit Tests
      run: npx ng test --watch=false --browsers=ChromeHeadless
",0.074775673,0.295773898,Valid,0.608333333,TypeScript,
550,https://github.com/madrapps/pikolo,"name: Publish

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Check
        run: ./gradlew check --stacktrace

      - name: Build
        run: ./gradlew build --stacktrace

      - name: Publish Artifact
        run: ./gradlew pikolo:publishReleasePublicationToSonatypeRepository --max-workers=1 closeAndReleaseSonatypeStagingRepository --stacktrace
        env:
          OSS_USERNAME: ${{ secrets.OSS_USERNAME }}
          OSS_PASSWORD: ${{ secrets.OSS_PASSWORD }}
          OSS_STAGING_PROFILE_ID: ${{ secrets.OSS_STAGING_PROFILE_ID }}
          OSS_SIGNING_KEY_ID: ${{ secrets.OSS_SIGNING_KEY_ID }}
          OSS_SIGNING_PASSWORD: ${{ secrets.OSS_SIGNING_PASSWORD }}
          OSS_SIGNING_KEY: ${{ secrets.OSS_SIGNING_KEY }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build project
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.3362357669122572,0.4042162297117156,Valid,0.4982680764776974,Kotlin,
611,https://github.com/dhaval2404/imagepicker,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - uses: finnp/create-file-action@master
        env:
          FILE_NAME: ""local.properties""

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build Debug APK
        run: ./gradlew assembleDebug","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test
",0.6464995678478824,0.7152166105826292,Valid,0.8771929824561404,Kotlin,
419,https://github.com/awslabs/smithy-typescript,"name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Java ${{ matrix.java }} ${{ matrix.os }}
    strategy:
      matrix:
        java: [17]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'corretto'

      - name: clean and build
        run: ./gradlew clean build -Plog-tests

  lint-typescript:
    runs-on: ubuntu-latest
    name: TypeScript Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run eslint
        run: yarn lint --concurrency=3

  test-typescript:
    runs-on: smithy-typescript_ubuntu-latest_8-core
    name: TypeScript Test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: ""yarn""
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Install dependencies
        run: yarn
      - name: Build packages
        run: yarn build
      - name: Run unit tests
        run: yarn test
      - name: Run integration tests
        run: |
          yarn config set enableImmutableInstalls false
          yarn test:integration

  ensure-typescript-formatted:
    runs-on: ubuntu-latest
    name: Ensure TypeScript is formatted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run the code formatter
        run: yarn format
      # This checks the output of git diff. If it's not empty (i.e there were
      # changes) it'll return a non-zero error code.
      - name: Ensure there are no changes from running the formatter
        run: |
          git diff
          test -z ""$(git diff)""

  ensure-typescript-packages-have-changesets:
    runs-on: ubuntu-latest
    name: Ensure TypeScript packages have changesets
    steps:
      - uses: actions/checkout@v3
        # Include full git history needed for `yarn changeset status`
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install
        run: yarn
      - name: Ensure changesets exist for each changed package
        run: yarn changeset status --since=origin/main
","name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.json'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - '**/*.json'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build
        run: yarn build
      - name: Run linters
        run: yarn lint
      - name: Run tests
        run: yarn test",0.0672696438665912,0.1829711535799434,Valid,0.6746559088751779,TypeScript,
62,https://github.com/renanse/ardor3d,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: ardor3d-*/build/libs
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test",0.4268585131894484,0.6003425129734263,Valid,1.0,Java,
1101,https://github.com/phatboyg/greenpipes,"name: GreenPipes
env:
  GREENPIPES_VERSION: 4.0.1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: true
on:
  push:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'GreenPipes.sln'
      - 'Directory.Build.props'
      - '**/build.yml'
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - 'GreenPipes.sln'
      - 'Directory.Build.props'
      - '**/build.yml'
  workflow_dispatch:

jobs:
  compile:
    name: Compile and Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Restore NuGet packages
        run: dotnet restore
        working-directory: ./

      - name: Build
        run: dotnet build -c Release --no-restore
        working-directory: ./

      - name: Test
        run: dotnet test -c Release --no-build
        working-directory: tests/GreenPipes.Tests

  calc-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    needs:
      - compile
    outputs:
      version: ${{ steps.v.outputs.version }}
    steps:
      - id: v
        run: |
          if [ ""${{ github.ref }}"" = 'refs/heads/master' ]; then
            echo ""::set-output name=version::${GREENPIPES_VERSION}""
          else
            echo ""::set-output name=version::${GREENPIPES_VERSION}-develop.${{ github.run_number }}""
          fi

  publish:
    name: Build and Publish NuGets
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.repository == 'MassTransit/GreenPipes' && success()
    needs:
      - calc-version
    steps:
      - name: Version Output Check
        run: |
          echo ""${{ needs.calc-version.outputs.version }}""

      - name: Check out code
        uses: actions/checkout@v2

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Build and Publish GreenPipes
        # was: brandedoutcast/publish-nuget@v2.5.5
        uses: drusellers/publish-nuget@master
        with:
          project-file-path: src/GreenPipes/GreenPipes.csproj
          version: ${{ needs.calc-version.outputs.version }}
          tag-commit: false
          nuget-key: ${{secrets.NUGET_API_KEY}}
          include-symbols: true

","name: .NET Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c Release
    - name: Run tests
      run: dotnet test --no-build -c Release --verbosity normal
",0.1174496644295302,0.204973995896593,Valid,0.5498547567175018,C#,
1108,https://github.com/doxense/foundationdb-dotnet-client,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Build with dotnet (net6.0)
      run: dotnet build --configuration Release -f net8.0
    - name: Build NuGet Packages
      run: dotnet pack --configuration Release --output Redist
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: NuGet Packages
        path: Redist/*.nupkg
        if-no-files-found: error
","name: Build and Test Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore -c Release

      - name: Test
        run: dotnet test --no-restore --verbosity normal
",0.2218278615794143,0.6381907360903998,Valid,0.5160871821484172,C#,
5052,https://github.com/sveltejs/svelte,"name: CI
on:
  push:
    branches: [main]
  pull_request:
permissions:
  contents: read # to fetch code (actions/checkout)

env:
  # We only install Chromium manually
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - node-version: 18
            os: windows-latest
          - node-version: 18
            os: macOS-latest
          - node-version: 18
            os: ubuntu-latest
          - node-version: 20
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm playwright install chromium
      - run: pnpm test
        env:
          CI: true
  Lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: 'pnpm i && pnpm check && pnpm lint'
","name: Build and Test Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Linter
        run: npm run lint

      - name: Run Tests
        run: npm test
",0.0215541690300623,0.3493666232056028,Valid,0.9411764705882352,JavaScript,
3662,https://github.com/sindresorhus/callsites,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build application
        run: npm run build
        env:
          CI: true

      - name: Run tests
        run: npm test
        env:
          CI: true
",0.0815899581589958,0.5153310871891792,Valid,1.0,JavaScript,
2083,https://github.com/open-dynamic-robot-initiative/master-board,"# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI - Linux via ROS

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          - {ROS_DISTRO: rolling, BUILDER: colcon}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'ici_with_unset_variables source /root/target_ws/install/setup.bash && cd /root/target_ws/build/master_board_sdk && make test'
      IMMEDIATE_TEST_OUTPUT: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci
      - uses: 'ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e'
        env: ${{ matrix.env }}
","name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up environment
      run: . ./firmware/setup_esp_idf.bash

    - name: Build the firmware
      run: make -C ./firmware

    - name: Run tests (if present)
      run: make -C ./sdk/master_board_sdk test
      if: success()
",0.014954742,0.1432805721119288,Valid,0.0,C++,
524,https://github.com/nemanja-m/gaps,"name: gaps

on:
  push:
    branches: [""main""]
  pull_request:
    branches: [""main""]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.8"", ""3.9"", ""3.10""]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run linter checks
        run: |
          source .venv/bin/activate
          black gaps/ tests/ --check
          mypy gaps/ tests/ --ignore-missing-imports
          ruff check gaps/ tests/

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest
","name: Python CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install poetry
        poetry install

    - name: Lint with pylint
      run: |
        pip install pylint
        pylint gaps/*.py

    - name: Run tests
      run: |
        poetry run pytest tests/
",0.0201245807379012,0.3076387857740725,Valid,0.3448275862068966,Python,
1087,https://github.com/karlwancl/yahoofinanceapi,"name: build

on: 
  push:
    branches: 
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core (Build)
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Build with dotnet
      run: dotnet build --configuration Release
    - name: Test with dotnet
      run: dotnet test
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup .NET Core (Deploy)
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Pack nuget package
        run: dotnet pack --configuration Release
      - name: Push package to nuget
        run: dotnet nuget push YahooFinanceApi/bin/Release/YahooFinanceApi.*.nupkg
          --api-key ${{ secrets.NUGET_DEPLOY_KEY_YAHOOFINANCEAPI }}
          --source https://api.nuget.org/v3/index.json
          --skip-duplicate
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore Dependencies
      run: dotnet restore YahooFinanceApi.sln

    - name: Build
      run: dotnet build YahooFinanceApi.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test YahooFinanceApi.Tests/YahooFinanceApi.Tests.csproj --no-build --verbosity normal
",0.2530197075651621,0.4888637893171648,Valid,0.6375218889453764,C#,
574,https://github.com/jetbrains/ideolog,"name: Run tests 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.6213592233009708,0.3978117304148943,Valid,1.0,Kotlin,
1053,https://github.com/apetrovskiy/stups,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: STUPS.sln                                  # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      if: always()
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      if: always()
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run tests
      run: dotnet test --no-build --verbosity normal
",0.024866785,0.085978521,Valid,0.4287876754551059,C#,
602,https://github.com/afollestad/material-cab,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.3758043758043758,0.4058744,Valid,0.8333333333333334,Kotlin,
1934,https://github.com/llnl/librom,"name: CI
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, labeled, synchronize]
    branches:
      - master

jobs:
  docker-image:
    uses: ./.github/workflows/docker.yml
  code-style:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Artistic Style version (for information)
        run: astyle --version
      - name: Check Stylization
        run: |
            cd ${GITHUB_WORKSPACE}/scripts
            ./stylize.sh astyle
  linux:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
      volumes:
        - /mnt:/mnt
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Build libROM
        run: |
            mkdir ${GITHUB_WORKSPACE}/build
            cd ${GITHUB_WORKSPACE}/build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - name: Build baseline libROM
        if: ${{ github.event.label.name == 'LGTM' || contains(github.event.pull_request.labels.*.name, 'LGTM') }}
        run: |
            cd ${GITHUB_WORKSPACE}/dependencies
            git clone https://github.com/LLNL/libROM.git
            cd libROM
            mkdir build
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - uses: ./.github/workflows/run_tests
  # mac:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install Mac dependencies
  #       run: |
  #           brew install open-mpi
  #           brew install openblas
  #           brew install lapack
  #           brew install scalapack
  #           brew install hdf5
  #     - name: Check out libROM
  #       uses: actions/checkout@v2
  #     - uses: ./.github/workflows/checkout_repo
  #     - name: Build libROM
  #       run: |
  #           export FC=/usr/local/bin/gfortran-10
  #           mkdir ${GITHUB_WORKSPACE}/build
  #           cd ${GITHUB_WORKSPACE}/build
  #           cmake -DCMAKE_BUILD_TYPE=Debug ..
  #           make
  #           cmake -DCMAKE_BUILD_TYPE=Optimized ..
  #           make
  #     - uses: ./.github/workflows/run_tests
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup CMake
      uses: lukka/get-cmake@v3.27.0
    - name: Create Build directory
      run: mkdir -p ${{ github.workspace }}/build
    - name: Configure CMake project
      run: cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }}
    - name: Build project
      run: cmake --build ${{ github.workspace }}/build --config Release
    - name: Test project
      run: cmake --build ${{ github.workspace }}/build --target test --config Release
      continue-on-error: true",0.0683417085427135,0.1628471214378892,Valid,0.1824049874204528,C++,
83,https://github.com/netflix/netflix-graph,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build the project
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.2320987654320987,0.3643497979163855,Valid,0.7692307692307693,Java,
1065,https://github.com/davidfowl/pubbie,"name: CI

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.0.0
      with:
        version: 3.1.100
     
    - name: dotnet build
      run: dotnet build Pubbie.sln -c Release
      
    - name: dotnet test
      run: dotnet test Pubbie.sln -c Release --no-build

    - name: dotnet pack
      run: dotnet pack Pubbie.sln -c Release --no-build --include-source --include-symbols

    - name: setup nuget
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: NuGet/setup-nuget@v1.0.2
      with:
        nuget-version: latest

    - name: Set API key
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: nuget setapikey ${{ secrets.FEEDZ_TOKEN }} -Config nuget.config -Source https://f.feedz.io/davidfowl/pubbie/nuget/index.json

    - name: Set symbols API key
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: nuget setapikey ${{ secrets.FEEDZ_TOKEN }} -Config nuget.config -Source https://f.feedz.io/davidfowl/pubbie/symbols

    - name: push packages
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: dotnet nuget push **/*.nupkg -s https://f.feedz.io/davidfowl/pubbie/nuget/index.json -ss https://f.feedz.io/davidfowl/pubbie/symbols --skip-duplicate","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Install dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build --no-restore
      - name: Run tests
        run: dotnet test --no-build --verbosity normal
",0.1583248212461695,0.2863750767430898,Valid,0.3339823773006405,C#,
3392,https://github.com/yortus/asyncawait,"name: Node CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-18.04]
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, build, and test
      run: |
        npm ci
        npm run build --if-present
        npm test
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install Dependencies
      run: npm install
    - name: Run Build
      run: npm run build
      env:
        CI: true
    - name: Run Tests
      run: npm test
      env:
        CI: true",0.3400966183574879,0.6384459083640592,Valid,0.4642857142857143,TypeScript,
5287,https://github.com/fregante/supports-webp,"env:
  IMPORT_TEXT: import supportsWebP from
  NPM_MODULE_NAME: supports-webp

# FILE GENERATED WITH: npx ghat fregante/ghatemplates/esm-lint
# SOURCE: https://github.com/fregante/ghatemplates

name: ESM
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master
      - main
jobs:
  Pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm install
      - run: npm run build --if-present
      - run: npm pack --dry-run
      - run: npm pack | tail -1 | xargs -n1 tar -xzf
      - uses: actions/upload-artifact@v3
        with:
          path: package
  Webpack:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: webpack --entry ./index.js
      - run: cat dist/main.js
  Parcel:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npx parcel@2 build index.js
      - run: cat dist/index.js
  Rollup:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact rollup@2 @rollup/plugin-node-resolve
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npx rollup -p node-resolve index.js
  Vite:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: >-
          echo '<script type=""module"">${{ env.IMPORT_TEXT }} ""${{
          env.NPM_MODULE_NAME }}""</script>' > index.html
      - run: npx vite build
      - run: cat dist/assets/*
  esbuild:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: echo '{}' > package.json
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npm install ./artifact
      - run: npx esbuild --bundle index.js
  TypeScript:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact && npm install @types/estree
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.ts
      - run: tsc index.ts
      - run: cat index.js
  Node:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.mjs
      - run: npm install ./artifact
      - run: node index.mjs
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js environment
      uses: actions/setup-node@v1
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build
      if: contains(github.event.head_commit.message, '[build]') || contains(toJSON(github.event.commits.*.message), '[build]')

    - name: Run tests
      run: npm test
      if: contains(github.event.head_commit.message, '[test]') || contains(toJSON(github.event.commits.*.message), '[test]')
",0.0692395005675368,0.1645429801176632,Valid,0.4282543412978195,JavaScript,
48,https://github.com/wolpi/prim-ftpd,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Output event
      env:
        EVENT: ${{ github.event_name }}
      run: echo github.event_name $EVENT.
    - name: Publish package
      if: ${{ github.event_name == 'push' }}
      uses: gradle/gradle-build-action@v2
      with:
        arguments: publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Run tests
      run: ./gradlew test",0.3305875892366831,0.5439158220071634,Valid,0.6666666666666666,Java,
773,https://github.com/jontio/jaero,"name: build
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: JAERO
      # install MSYS2 for windows
      - name: if windows install MSYS2
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain autoconf libtool mingw-w64-x86_64-cpputest mingw-w64-x86_64-qt5 mingw-w64-x86_64-cmake mingw-w64-x86_64-libvorbis mingw-w64-x86_64-zeromq zip p7zip unzip
      # build for windows
      - name: Windows-CI-Build
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo 'Running in MSYS2!'
          ./JAERO/ci-windows-build.sh
        shell:  msys2 {0}
      # build for linux
      - name: Linux-CI-Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo 'Running in bash!'
          ./JAERO/ci-linux-build.sh          
      # upload windows artifacts    
      - name: Upload windows binary artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_windows
          retention-days: 1
          path: |
            JAERO/JAERO/release/*.zip
      # upload linux artifacts    
      - name: Upload linux binary artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_linux
          retention-days: 1
          path: |
            JAERO/bin/*.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # download all artifacts for this workflow
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
      # Create a release
      - name: Create a release
        uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          title: ""Development Build""
          files: |
            jaero_linux/*.tar.gz
            jaero_windows/*.zip
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y qt5-default

      - name: Set up Qt environment
        run: echo ""QT_QPA_PLATFORM=offscreen"" >> $GITHUB_ENV

      - name: Configure Project with qmake
        run: qmake JAERO/JAERO.pro

      - name: Build Project
        run: make

      - name: Run Tests
        run: make check
",0.05,0.1724693137326457,Valid,0.2676327120771565,C++,
3781,https://github.com/kyranet/canvas-constructor,"name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/eslint.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Run ESLint
        run: yarn lint --fix=false

  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/tsc.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Build Code
        run: yarn build
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the project
        run: yarn build

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Run unit tests
        run: yarn test
",0.4057142857142857,0.6242648024120769,Valid,0.6170499777437504,JavaScript,
1092,https://github.com/poshsec/poshsecframework,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '3.1.x' # Specify the .NET Core version

      - name: Restore dependencies
        run: dotnet restore PoshSec.Framework.Test/PoshSec.Framework.Test.csproj

      - name: Build the project
        run: dotnet build poshsecframework.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test PoshSec.Framework.Test/PoshSec.Framework.Test.csproj --no-build --verbosity normal
",0.0567400275103163,0.1209662594906289,Valid,0.4229708535451696,C#,
599,https://github.com/jakewharton/timber,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build dokkaHtml

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
        env:
          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}

      - name: Deploy docs to website
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: site
          FOLDER: timber/build/dokka/html/
          TARGET_FOLDER: docs/latest/
          CLEAN: true
","name: Build and Test

on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: $trunk

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.1443553362122147,0.3302426806388416,Valid,0.75,Kotlin,
27,https://github.com/griffon/griffon,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2008-2021 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    name: Build
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cancel previous runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: 'jdk+fx'

      - name: Gradle caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      - name: Build
        run: ./gradlew build -S
","name: Build and Test
on:
  push:
    branches:
      - development_3_X
  pull_request:
    branches:
      - development_3_X
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        run: ./gradlew test",0.0389851485148514,0.3174056356808785,Valid,0.9090909090909092,Java,
487,https://github.com/runfalk/spans,"name: CI

on:
  # This avoids having duplicate builds for a pull request
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Check code formatting
        run: poetry run black --check spans tests
      - name: Check import ordering
        run: poetry run isort --check spans tests

  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10""]
        os: [""ubuntu-latest""]
    name: Pytest (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      # Remove the lock file unless we're using the stable version of Python.
      # This is required because older Python version require ""polyfills"" for
      # some libraries
      - name: Remove poetry.lock file
        run: rm poetry.lock
        if: ${{ matrix.python-version != '3.10' }}
      - name: Install dev dependencies
        run: poetry install
      - name: Run pytest
        run: poetry run pytest

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Build documentation
        run: |
          poetry run sphinx-build -b html doc doc-build
          touch doc-build/.nojekyll
      - name: Deploy
        uses: crazy-max/ghaction-github-pages@v3
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        with:
          allow_empty_commit: false
          build_dir: doc-build/
          author: Andreas Runfalk <andreas@runfalk.se>
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
      - docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Validate that version matches the tag
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        run: test ""$(poetry version --short)"" == ""${{ github.ref_name }}""
      - name: Build package
        run: poetry build
      - name: Deploy
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    - name: Run Benchmark
      run: python benchmark.py
    - name: Run Tests
      run: poetry run pytest",0.092930191,0.1275279643584314,Valid,0.5472384884740685,Python,
505,https://github.com/wkentaro/pytorch-fcn,"name: ci

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v1

    - name: Update submodules
      run: |
        git submodule update --init --recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ ""${{ matrix.python-version }}"" = ""2.7"" ]; then
          pip install numpy==1.16.5
        fi
        pip install -r requirements.txt

    - name: Install main
      run: |
        pip install .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    - name: Test with pytest
      run: |
        pip install pytest
        pytest tests

    - name: Install from dist
      run: |
        rm -f dist/*.tar.gz
        python setup.py sdist
        pip install dist/*.tar.gz
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pip install pytest
          pytest

      - name: Run setup.py
        run: python setup.py install
",0.1114723641430562,0.7080465141581609,Valid,0.6648652644450058,Python,
3401,https://github.com/manekinekko/angular-web-bluetooth,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Angular CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --legacy-peer-deps
    - run: npm run build --if-present
    - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build -- --no-progress

      - name: Run tests
        run: npm test
",0.2253944402704733,0.4699517740828881,Valid,0.875,TypeScript,
562,https://github.com/bnorm/ktor-retrofit,"name: Project Build

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.2764705882352941,0.6668511828394151,Valid,1.0,Kotlin,
3365,https://github.com/gcanti/newtype-ts,"name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm ci

    - name: Build the project
      run: npm run build

    - name: Run lint
      run: npm run lint

    - name: Run tests
      run: npm test
",0.2865064695009242,0.6430224809015023,Valid,0.8333333333333333,TypeScript,
3363,https://github.com/mrmartineau/design-system-utils,"name: Test

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - run: yarn install
    - run: yarn test
      env:
        CI: true
","name: CI Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: yarn install

    - name: Run linter
      run: yarn lint

    - name: Build the application
      run: yarn build

    - name: Test the application
      run: yarn test
",0.0179573512906846,0.4857941496806152,Valid,1.0,TypeScript,
4000,https://github.com/helmetjs/nocache,"name: Node.js CI

on: [push]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm test
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npx eslint .

      - name: Run Prettier Check
        run: npx prettier --check .

      - name: Build
        run: npm run build
        env:
          CI: true

      - name: Test
        run: npm test",0.1036468330134357,0.5027103714654076,Valid,1.0,JavaScript,
454,https://github.com/lamerman/shellpy,"name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.6, 3.7, 3.8, 3.9, pypy-2.7, pypy-3.6]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install mock
          python ./setup.py install
      - name: Test with pytest
        run: |
          python -m unittest discover

      - name: Run test scripts
        run: |
          example/import_from_python/import.py

      - name: Run test scripts python2
        if: matrix.python-version == '2.7' || matrix.python-version == 'pypy-2.7'
        run: |
          shellpy example/allinone/test.spy

      - name: Run test scripts python3
        if: matrix.python-version != '2.7' && matrix.python-version != 'pypy-2.7'
        run: |
          shellpy3 example/allinone/test3.spy
","name: Build and Test Application

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      - name: Lint with Flake8
        run: pip install flake8 && flake8 .

      - name: Test with pytest
        run: pip install pytest && pytest
",0.1994334277620396,0.4011297345497938,Valid,0.377446547653079,Python,
5141,https://github.com/microsoft/typescript-website-localizations,"name: CI
on: pull_request

jobs:
  local-validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      - run: yarn
      - run: yarn docs-sync validate-against-en

  site-builds:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      # Clone this PR, and setup the deps
      - uses: actions/checkout@v1
      - run: yarn

      # Clone the TS website, basically:
      # git clone https://github.com/microsoft/TypeScript-Website website
      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: microsoft/TypeScript-Website
          path: website

      # Both the microsoft/TypeScript-Website & 1 - don't really need to be there, but 
      # this migrates the translated docs into the website
      - run: yarn docs-sync pull microsoft/TypeScript-Website 1 --from-cwd . --to-cwd website

      # Get dependencies for building the ebooks
      - run: sudo apt-get update
      - run: sudo apt install calibre

      - run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: ignore
        working-directory: ./website


      # Verify the website build
      - run: yarn bootstrap
        working-directory: ./website

      - run: yarn workspace typescriptlang-org build
        working-directory: ./website

      # Verify the website build
      - run: yarn test
        working-directory: ./website
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Lint
        run: node scripts/lint.js

      - name: Test
        run: yarn test
        if: contains(github.event.head_commit.message, '[test]') || github.event_name == 'pull_request'
",0.1310408921933085,0.2907548988672583,Valid,1.0,JavaScript,
1928,https://github.com/oscarhiggott/pymatching,"name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - master

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz


  build_wheels:
    runs-on: ${{ matrix.os_dist.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ""10.15""
      CIBW_BUILD: ""${{ matrix.os_dist.dist }}""
      CIBW_ARCHS_MACOS: ""x86_64 universal2 arm64""
      CIBW_BEFORE_BUILD: pip install --upgrade ninja
      CIBW_TEST_REQUIRES: pytest stim~=1.10.dev1666411378
      CIBW_TEST_COMMAND: pytest {project}/tests
    strategy:
      fail-fast: false
      matrix:
        os_dist: [
          # macosx x86_64
          {os: macos-latest, dist: cp36-macosx_x86_64},
          {os: macos-latest, dist: cp37-macosx_x86_64},
          {os: macos-latest, dist: cp38-macosx_x86_64},
          {os: macos-latest, dist: cp39-macosx_x86_64},
          {os: macos-latest, dist: cp310-macosx_x86_64},
          {os: macos-latest, dist: cp311-macosx_x86_64},
          # macosx arm64
          {os: macos-latest, dist: cp38-macosx_arm64},
          {os: macos-latest, dist: cp39-macosx_arm64},
          {os: macos-latest, dist: cp310-macosx_arm64},
          {os: macos-latest, dist: cp311-macosx_arm64},
          # macosx universal2
          {os: macos-latest, dist: cp38-macosx_universal2},
          {os: macos-latest, dist: cp39-macosx_universal2},
          {os: macos-latest, dist: cp310-macosx_universal2},
          {os: macos-latest, dist: cp311-macosx_universal2},

          # windows amd64
          {os: windows-latest, dist: cp36-win_amd64},
          {os: windows-latest, dist: cp37-win_amd64},
          {os: windows-latest, dist: cp38-win_amd64},
          {os: windows-latest, dist: cp39-win_amd64},
          {os: windows-latest, dist: cp310-win_amd64},
          {os: windows-latest, dist: cp311-win_amd64},
          # windows win32
          {os: windows-latest, dist: cp36-win32},
          {os: windows-latest, dist: cp37-win32},
          # scipy install fails
#          {os: windows-latest, dist: cp38-win32},
#          {os: windows-latest, dist: cp39-win32},
#          {os: windows-latest, dist: cp310-win32},
#          {os: windows-latest, dist: cp311-win32},
          # For arm64, get error ""cibuildwheel: No build identifiers selected""
#          {os: windows-latest, dist: cp39-win_arm64},
#          {os: windows-latest, dist: cp310-win_arm64},
#          {os: windows-latest, dist: cp311-win_arm64},

          # ubuntu x86_64
          {os: ubuntu-latest, dist: cp36-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp37-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp38-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp39-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp310-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp311-manylinux_x86_64},
          # ubuntu i686
          {os: ubuntu-latest, dist: cp36-manylinux_i686},
          {os: ubuntu-latest, dist: cp37-manylinux_i686},
          # scipy built distribution not available and build fails on manylinux_i686 for python 3.8 up
#          {os: ubuntu-latest, dist: cp38-manylinux_i686},
#          {os: ubuntu-latest, dist: cp39-manylinux_i686},
#          {os: ubuntu-latest, dist: cp310-manylinux_i686},
#          {os: ubuntu-latest, dist: cp311-manylinux_i686},
          # Don't include musllinux as it has g++-9 (need g++-10 for <bits>)
#          {os: ubuntu-latest, dist: cp36-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp37-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp38-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp39-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp310-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp311-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp36-musllinux_i686},
#          {os: ubuntu-latest, dist: cp37-musllinux_i686},
#          {os: ubuntu-latest, dist: cp38-musllinux_i686},
#          {os: ubuntu-latest, dist: cp39-musllinux_i686},
#          {os: ubuntu-latest, dist: cp310-musllinux_i686},
#          {os: ubuntu-latest, dist: cp311-musllinux_i686},
        ]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install g++
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install gcc-10 g++-10

    - uses: pypa/cibuildwheel@v2.11.1

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl
  benchmark_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: cmake .
      - run: cmake --build . --target pymatching_perf --config Release
      - run: Release\pymatching_perf.exe
  benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_perf
      - run: ./pymatching_perf
  gtest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_tests
      - run: ./pymatching_tests
  pip_install:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [""3.10""]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov

      - name: Build and install
        run: pip install --verbose -e .

      - name: Test without stim
        run: python -m pytest tests

      - name: Add stim
        run: python -m pip install stim~=1.10.dev1666411378

      - name: Test with stim using coverage
        run: python -m pytest tests --cov=./src/pymatching --cov-report term

      - name: flake8
        run: flake8 ./src ./tests

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pandoc
        run: |
          sudo apt install pandoc
          python -m pip install pandoc

      - name: Add sphinx requirements
        run: python -m pip install -r ./docs/sphinx_docs/requirements.txt

      - name: Build and install PyMatching
        run: pip install --verbose .

      - name: Build docs
        run: cd docs/sphinx_docs && make html
  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov stim~=1.10.dev1666411378
      - name: Build and install
        run: pip install --verbose -e .
      - name: Run tests and collect coverage
        run: pytest tests --cov=./src/pymatching --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
#  upload_all:
#    name: Upload to pypi
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ""3.9""
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@v1.5.1
#        with:
#          password: ${{ secrets.pypi_password }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build
        run: cmake . && make

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install test dependencies
        run: |
          pip install pytest
          pip install -r docs/sphinx_docs/requirements.txt

      - name: Run tests
        run: pytest tests/
",0.052110474,0.096972143,Valid,0.4649469786906042,C++,
5266,https://github.com/sakitam-fdd/ol-plot,"name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  test:
    if: ""!contains(github.event.head_commit.message, 'ci skip')""

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18.x]

    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache ~/.pnpm-store
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-test-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-test-
            ${{ runner.os }}-
      - name: Install pnpm
        run: npm i -g pnpm@8.6.5

      - name: Install deps
        run: pnpm i

      # Runs a set of commands using the runners shell
      - name: Build and Test
        run: pnpm test && pnpm coverage
#      - name: Coveralls
#        uses: coverallsapp/github-action@master
#        with:
#          # https://github.com/coverallsapp/github-action/issues/81
#          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
#          git-branch: master
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          flag-name: ${{matrix.os}}-node-${{ matrix.node }}
#          parallel: true

  release:
    runs-on: ubuntu-latest
    needs: ['test']
    if: ""!contains(github.event.head_commit.message, 'skip-release') && !contains(github.event.head_commit.message, 'skip-ci') && github.event_name != 'pull_request'""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache ~/.pnpm-store
        uses: actions/cache@v3
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-release-
            ${{ runner.os }}-
      - run: npm i -g pnpm@8.6.5
      - run: pnpm i

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@master
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
          commit: 'chore(release): publish'
          title: Publish next versions
        env:
          GITHUB_TOKEN: ${{ secrets.PKG_DEPLOY_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PKG_PUBLIC_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    needs: [ 'test' ]
    if: ""!contains(github.event.head_commit.message, 'skip-release') && !contains(github.event.head_commit.message, 'skip-ci') && github.event_name != 'pull_request'""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache ~/.pnpm-store
        uses: actions/cache@v3
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-release-
            ${{ runner.os }}-
      - run: npm i -g pnpm@8.6.5
      - run: pnpm i
      - run: pnpm --filter ""./packages/ol-plot-vue"" build:vue3 && pnpm --filter ""./packages/**"" build
      # ???
      - run: pnpm i
      - run: pnpm --filter ""./playground/vue3"" build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PKG_DEPLOY_TOKEN }}
          publish_dir: playground/vue3/dist
          cname: blog.sakitam.com
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Run Lint
        run: pnpm run lint

      - name: Test
        run: pnpm run test

      - name: Typecheck
        run: pnpm run typecheck
",0.1030646105797384,0.1346898294312871,Valid,0.4615384615384615,JavaScript,
490,https://github.com/ironfroggy/straight.plugin,"# GitHub Action that uses Black to reformat the Python code in an incoming pull request.
# If all Python code in the pull request is compliant with Black then this Action does nothing.
# Othewrwise, Black is run and its changes are committed back to the incoming pull request.
# https://github.com/cclauss/autoblack

name: autoblack
on: [pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install Black
        run: pip install black
      - name: Run black --check .
        run: black --check .
      - name: If needed, commit black changes to the pull request
        if: failure()
        run: |
          black .
          git config --global user.name 'autoblack'
          git config --global user.email 'cclauss@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am ""fixup: Format Python code with Black""
          git push
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Test with tox
        run: |
          VERSION=${{ matrix.python-version }}
          tox -e py${VERSION/./}","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
              pip install -r requirements-dev.txt
          fi
      - name: Build
        run: python setup.py build
      - name: Run application
        run: |
          if [[ -f tests.py ]]; then
            python -m unittest discover -s .
          fi
",0.039712717,0.3337301022500428,Valid,0.3502760254630431,Python,
4036,https://github.com/lucaong/minisearch,"# This is a basic workflow to help you get started with Actions

name: CI Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  coverage:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ""${{ secrets.COVERALLS_REPO_TOKEN }}""
          COVERALLS_GIT_BRANCH: ""${{ github.ref }}""
          COVERALLS_SERVICE_NAME: GitHub Actions
        run: yarn run jest --coverage && yarn run coveralls --verbose < coverage/lcov.info
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build the project
      run: yarn build

    - name: Run Linter
      run: yarn lint

    - name: Run tests
      run: yarn test
",0.16,0.3069458804604011,Valid,0.6214953271028038,JavaScript,
1062,https://github.com/9ee1/capstone.net,"name: PR Workflow
on:
  pull_request:
    branches:
      - ""*""
jobs:
  linux:
    name: Linux Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: ubuntu-22.04
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime linux-x64
  
  mac:
    name: MacOS Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: macos-12
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime mac-x64

  windows:
    name: Windows Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: windows-2022
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime win-x64","name: Build and Test

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore Capstone.NET.sln

      - name: Build
        run: dotnet build --no-restore Capstone.NET.sln

      - name: Test
        run: dotnet test --no-build Tests.Gee.External.Capstone/Tests.Gee.External.Capstone.csproj
",0.1476433844406587,0.2925576698745829,Valid,0.4113764713887187,C#,
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

  build-frontend:
    needs: [build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Build frontend
        run: |
          cd frontend
          npm run build
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
",0.2224948875255623,0.574482163,Valid,0.2425827198104425,TypeScript,
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
","name: Build and Test Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Test with Maven
      run: mvn -B test --file pom.xml
",0.061197339,0.251130566,Valid,0.3454861111111111,Java,
5248,https://github.com/albertorestifo/node-dijkstra,"name: Unit Tests

on:
  push:
    branches: [""master""]
  pull_request:
    branches: [""master""]

jobs:
  tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: ""npm""

      - run: npm ci

      - run: npm test

      - uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Install npm dependencies
      run: npm install
    - name: Lint the code
      run: npx eslint .
    - name: Run the tests
      run: npm test

",0.2816326530612245,0.4955296556087758,Valid,1.0,JavaScript,
1133,https://github.com/runceel/livet,"name: Build and Release

on:
  push:
    branches: [ master, pre-release, release ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Update version number
      if: github.ref != 'refs/heads/release'
      shell: pwsh
      run: |
        $doc = [XML](Get-Content 'Livet.props')
        $doc.Project.PropertyGroup.PackageVersion = $doc.Project.PropertyGroup.Version
        $doc.Project.PropertyGroup.PackageVersion += '-pre' + (Get-Date).ToString(""yyyyMMddHHmm"")
        $doc.Save('Livet.props')
    - name: Install dependencies
      run: |
        dotnet restore Livet.Code.sln
        dotnet restore Livet.Test\Livet.Test.csproj
    - name: Package
      run: |
        dotnet build Livet.Code.sln -p:Configuration=Release -p:Platform=""Any CPU""
        dotnet pack Livet.Code.sln -p:Configuration=Release -p:Platform=""Any CPU"" --include-symbols -p:SymbolPackageFormat=snupkg
    - name: Test
      run: dotnet test Livet.Test\Livet.Test.csproj --verbosity normal
      continue-on-error: true
    - name: Copy package files
      run: |
        mkdir dist
        Copy-Item (Get-ChildItem -Path ""**/Livet*.nupkg"" -Recurse) -Destination dist
        Copy-Item (Get-ChildItem -Path ""**/Livet*.snupkg"" -Recurse) -Destination dist
      shell: pwsh
    - name: Archive NuGet packages
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist

  release-to-nuget:
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/pre-release' || github.ref == 'refs/heads/release')
    steps:
      - name: Download archives
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Publish packages
        run: dotnet nuget push **/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_APIKEY }} -s https://api.nuget.org/v3/index.json
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test_job:
    runs-on: windows-latest # since it's a .NET project and might need Windows for certain tests

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x' # Version of .NET core that matches the project requirement

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --no-restore --verbosity normal",0.073583517,0.2859743980523095,Valid,0.4320102024549657,C#,
1998,https://github.com/openc2e/openc2e,"name: build

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ main ]

env:
  CTEST_OUTPUT_ON_FAILURE: TRUE
  # GitHub runners have two cores each
  MAKEFLAGS: -j3 -k
  # set some variables for Visual Studio
  MultiProcessorCompilation: true
  UseMultiToolTask: true
  EnforceProcessCountAcrossBuilds: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Download clang-format""
      run: ""wget -o- https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-10_linux-amd64 && chmod +x clang-format-10_linux-amd64""
    - name: ""clang-format""
      run: ""./clang-format-10_linux-amd64 -i src/**/*.cpp src/**/*.h && git diff --exit-code""
      
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,ubuntu-latest,macos-latest]
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Install dependencies (Ubuntu)""
      if: ""startsWith(matrix.os, 'ubuntu-')""
      run: sudo apt-get update && sudo apt-get install libpng-dev libsdl2-dev libsdl2-mixer-dev zlib1g-dev
    - name: ""Configure""
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: ""Build""
      run: cmake --build build --config RelWithDebInfo
    - name: ""Test""
      run: cd build && ctest --build-config RelWithDebInfo
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""openc2e-${{ github.sha }}-${{ runner.os }}""
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""mngplayer2-${{ github.sha }}-${{ runner.os }}"" --component mngplayer2
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: openc2e-${{ github.sha }}-${{ runner.os }}
        path: openc2e-${{ github.sha }}-${{ runner.os }}
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: MNGPlayer2-${{ github.sha }}-${{ runner.os }}
        path: mngplayer2-${{ github.sha }}-${{ runner.os }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up CMake
      uses: lukka/get-cmake@v4.0.2

    - name: Create Build Directory
      run: mkdir build

    - name: Change to Build Directory
      run: cd build

    - name: Configure CMake Project
      run: cmake .. -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build .

    - name: Run Tests
      run: ctest -C Release
      if: always() && success()
",0.081688223,0.1938105132906958,Valid,0.4091400130420094,C++,
463,https://github.com/matejak/imreg_dft,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.TWINE_API_TOKEN }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build
        run: |
          python setup.py build

      - name: Run tests (if present)
        run: |
          if [ -d ""tests"" ]; then
            tests=$(find tests -type f -name '*.py' ! -name '__init__.py')
            for test in $tests; do
              python ""$test""
            done
          fi
",0.2411575562700964,0.4628789939941851,Valid,0.7693841382365973,Python,
101,https://github.com/stateos/stateos,"name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    name: build test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install dependencies
      run: |
        sudo apt-get -y -qq update
        sudo apt-get -y -qq install cmake ninja-build
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: |
        cmake -S. -Bbuild -GNinja
        cmake --build build -v
  example:
    name: example test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: bash ./.example-test.sh
  stdcxx:
    name: stdc++ test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: bash ./.stdc++-test.sh
  unit:
    name: unit test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: make all -f .unit-test.make
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up CMake
        uses: lukka/get-cmake@v3.21.3

      - name: Create build directory
        run: mkdir build

      - name: Change to build directory
        run: cd build

      - name: Configure CMake
        run: cmake .. -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build .

      - name: Test
        run: ctest -C Release
",0.05799373,0.1388441278731066,Valid,0.31624462777823,C++,
1106,https://github.com/lightningqueues/lightningqueues,"name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout LightningQueues
      uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          7.0.x
    - name: Install dependencies
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet restore
    - name: Build
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet build --no-restore
    - name: Test
      working-directory: ${{ runner.workspace }}/LightningQueues
      run: dotnet test --blame --no-restore --no-build --verbosity normal","name: Build and Test

on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore LightningQueues.sln
      - name: Build solution
        run: dotnet build LightningQueues.sln --configuration Release --no-restore
      - name: Run tests
        run: dotnet test LightningQueues.sln --no-build --verbosity normal",0.2459132906894101,0.5865278535717773,Valid,0.631811105345096,C#,
592,https://github.com/gaelmarhic/quadrant,"name: Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: bash ./gradlew build

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Unit tests
      run: bash ./gradlew test
","name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test",0.2820838627700127,0.4167636090154235,Valid,0.8528138528138528,Kotlin,
85,https://github.com/apache/tez,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    strategy:
      matrix:
        java-version: [8, 11]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - run: mvn clean install -DskipTests -Dmaven.javadoc.skip=true
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build the project with Maven
        run: mvn clean install -DskipTests

      - name: Run tests
        run: mvn test
",0.073705179,0.3552628851988633,Valid,0.6904761904761905,Java,
566,https://github.com/minecrell/plugin-yml,"name: Build
on: [ push, pull_request ]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17 ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: gradle/wrapper-validation-action@v1
      - name: JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java }}
          cache: 'gradle'
          distribution: 'temurin'
      - name: build
        run: ./gradlew build --stacktrace
","name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Test with Gradle
        run: ./gradlew test

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Run tests
        run: ./gradlew test",0.1953428201811125,0.5260575694165454,Valid,0.6976744186046512,Kotlin,
3354,https://github.com/vercel/uid-promise,"name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    name: Node.js ${{ matrix.node }} on ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16, 18, 20]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use pnpm
        run: corepack enable pnpm && pnpm --version
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm test
      - name: Maybe Release
        if: matrix.os == 'ubuntu-latest' && matrix.node == 16 && github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
        run: pnpm dlx semantic-release@19.0.5
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Run tests
        run: pnpm test
",0.1517467248908297,0.4747459275179557,Valid,1.0,TypeScript,
1132,https://github.com/coreykaylor/lightning.net,"name: .NET Core Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Lightning.NET
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: |
            6.0.x
            7.0.x
      - name: Install dependencies
        working-directory: ${{ runner.workspace }}/Lightning.NET
        run: dotnet restore
      - name: Build
        working-directory: ${{ runner.workspace }}/Lightning.NET
        run: dotnet build --no-restore
      - name: Test
        working-directory: ${{ runner.workspace }}/Lightning.NET
        run: dotnet test --no-build --no-restore --verbosity normal","name: .NET Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x' # Assuming .NET 6.0 is required, adjust the version accordingly

    - name: Restore dependencies
      run: dotnet restore Lightning.Net.sln

    - name: Build
      run: dotnet build Lightning.Net.sln --no-restore

    - name: Run tests
      run: dotnet test Lightning.Net.sln --no-build --verbosity normal
",0.3744107744107744,0.5908897655774904,Valid,0.7304789172306091,C#,
221,https://github.com/serguei-k/maya-math-nodes,"name: Build

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Download
        run: |
          wget https://autodesk-adn-transfer.s3-us-west-2.amazonaws.com/ADN+Extranet/M%26E/Maya/devkit+2023/Autodesk_Maya_2023_3_Update_DEVKIT_Linux.tgz
          tar -xvzf Autodesk_Maya_2023_3_Update_DEVKIT_Linux.tgz
          mkdir maya2023
          mv devkitBase/include maya2023/.
          mv devkitBase/lib maya2023/.
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ../. -G ""CodeBlocks - Unix Makefiles"" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DMAYA_LOCATION=$(pwd)/..
          cmake --build .
","name: CI Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run build
        run: cmake -B build . && cmake --build build

      - name: Run tests (Python)
        run: python -m unittest discover -s python/test

      - name: Run tests (C++)
        run: cmake --build build --target test",0.017808219,0.4761658725040292,Valid,0.2810810810810811,C++,
5250,https://github.com/errcw/gaussian,"name: tests

on: push

env:
  CI: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 10.x # maintainence ends 2021-04-30
          - 11.x # deprecated
          - 12.x # maintainence ends 2022-04-30
          - 13.x # deprecated
          - 14.x # maintainence ends 2023-04-30
          - 15.x
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - run: npm install
      - run: npm run build --if-present
      - run: npm run test:coverage
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install Dependencies
        run: npm install
      - name: Build
        run: npm run build
        continue-on-error: true
      - name: Run Tests
        run: npm test
",0.0123119015047879,0.3988506154204372,Valid,0.8333333333333333,JavaScript,
3398,https://github.com/citycide/trilogy,"name: Test
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        node: [14, 12, 10, 8]
    name: Node ${{ matrix.node }}
    steps:
      - uses: actions/checkout@master
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run tests
      run: npm test",0.1319587628865979,0.6628683802958222,Valid,1.0,TypeScript,
578,https://github.com/yariksoffice/lingver,"name: Build

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  jvm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Assemble and test
        run: ./gradlew build --stacktrace","name: Build and Run Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build the project
      run: ./gradlew build

    - name: Run Detekt
      run: ./gradlew detekt

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Run tests for library module
      run: ./gradlew library:test

    - name: Run tests for sample module
      run: ./gradlew sample:test
",0.2397260273972602,0.3178800026328974,Valid,0.6976744186046512,Kotlin,
1092,https://github.com/poshsec/poshsecframework,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: your-solution-name                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Install dependencies
      run: dotnet restore poshsecframework.sln
    - name: Build the project
      run: dotnet build poshsecframework.sln --configuration Release --no-restore
    - name: Run tests
      run: dotnet test PoshSec.Framework.Test\PoshSec.Framework.Test.csproj --no-build --verbosity normal
",0.0154684478818773,0.1021057707221576,Valid,0.4466276502512293,C#,
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
","name: Build and Test

# This workflow will trigger on every push and pull request to any branch in the repository
on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.3366336633663366,0.5260360581875066,Valid,0.6976744186046512,Java,
250,https://github.com/jmpews/dobby,"name: Builder

on:
  push:
    branches:
      - master

env:
  CMAKE_VERSION: 3.25.2
  LLVM_VERSION: 15.0.6
  NDK_VERSION: r25b

jobs:
  delete_latest_release:
    runs-on: ubuntu-latest
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: delete latest release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux_and_android:
    runs-on: ubuntu-latest
    needs: delete_latest_release
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: init linux cross compile env
      run: |
        sh scripts/setup_linux_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile linux
      run: |
        python3 scripts/platform_builder.py --platform=linux --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION
        cp include/dobby.h build/linux
        tar -zcvf build/dobby-linux-all.tar.gz build/linux
        cp build/dobby-linux-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile android
      run: |
        python3 scripts/platform_builder.py --platform=android --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION --android_ndk_dir=$HOME/opt/ndk-$NDK_VERSION
        cp include/dobby.h build/android
        tar -zcvf build/dobby-android-all.tar.gz build/android
        cp build/dobby-android-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-linux-all.tar.gz,build/dobby-android-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true

  macos_and_iphoneos:
    runs-on: macos-latest
    needs: delete_latest_release
    steps:
    - name: checkout dev
      uses: actions/checkout@master

    - name: init macos compile env
      run: |
        sh scripts/setup_macos_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile macos
      run: |
        python3 scripts/platform_builder.py --platform=macos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/macos
        tar -zcvf build/dobby-macos-all.tar.gz build/macos
        cp build/dobby-macos-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile iphoneos
      run: |
        python3 scripts/platform_builder.py --platform=iphoneos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/iphoneos
        tar -zcvf build/dobby-iphoneos-all.tar.gz build/iphoneos
        cp build/dobby-iphoneos-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-macos-all.tar.gz,build/dobby-iphoneos-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up C++ environment
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Create Build Directory
      run: mkdir -p build

    - name: Configure CMake
      run: cmake -S . -B build

    - name: Build
      run: cmake --build build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up C++ environment
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Run Tests
      run: cmake --build build --target test
",0.0523091423185673,0.1767727072230488,Valid,0.196883824002054,C++,
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean install

      - name: Run tests (structr-core module)
        run: mvn --batch-mode test --file structr-core/pom.xml

      - name: Run tests (structr-db-driver-api module)
        run: mvn --batch-mode test --file structr-db-driver-api/pom.xml

      - name: Run tests (structr-memory-driver module)
        run: mvn --batch-mode test --file structr-memory-driver/pom.xml

      - name: Run tests (structr-rest module)
        run: mvn --batch-mode test --file structr-rest/pom.xml

      - name: Run tests (structr-ui module)
        run: mvn --batch-mode test --file structr-ui/pom.xml
",0.0275802628743805,0.2117613517912743,Valid,0.220420086242871,Java,
61,https://github.com/openrocket/openrocket,"name: Build

on: 
  push:
    branches:
      - unstable
  pull_request:
    branches:
      - unstable

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Ant build
        run: ant -noinput -buildfile build.xml clean check jar unittest
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: openrocket_build_${{ github.run_number }}
          path: ${{github.workspace}}/swing/build/jar/OpenRocket.jar

","name: Build and Test

on:
  push:
    branches:
      - unstable
  pull_request:
    branches:
      - unstable

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Ant
        run: ant
        working-directory: .

      - name: Run tests
        run: ant test
        working-directory: ./core
",0.4508856682769726,0.5752138297534484,Valid,0.2424242424242424,Java,
5255,https://github.com/felixge/node-graphite,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm install
    - run: npm run build --if-present
    - run: npm test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: make

      - name: Run tests
        run: npm test
",0.3433283358320839,0.4325822952350395,Valid,0.7058823529411764,JavaScript,
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm test",0.05354994,0.1514413697866375,Valid,0.5433704629270475,TypeScript,
5233,https://github.com/levelgraph/levelgraph-jsonld,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test
",0.1810397553516819,0.570523957,Valid,0.7777777777777777,JavaScript,
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '1.8'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '1.8'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew test",0.094864978,0.1295412934293478,Valid,0.4626568411172083,Kotlin,
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npx tslint -p ./tsconfig.json -c ./tslint.json

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test
",0.0500147102088849,0.1671509839390157,Valid,0.583053701365085,TypeScript,
574,https://github.com/jetbrains/ideolog,"name: Run tests 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.4914841849148418,0.4069142262304946,Valid,1.0,Kotlin,
5249,https://github.com/svgstore/svgstore,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
          - 14
          - 12
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Build the application
      run: npm run build
    - name: Run tests
      run: npm test
",0.2326980942828485,0.5283236415318011,Valid,1.0,JavaScript,
3428,https://github.com/microsoft/code-push,"name: –°ode-push CI

on:
  pull_request:
    branches:
      - master

jobs:
  Run-tests:
    name: Test code-push-sdk
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup NodeJs
        uses: actions/setup-node@v1
        with:
          node-version: ""14.x""
      - name: Setup dependencies
        run: npm run setup
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm run test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm test
",0.4057672502574665,0.809291717,Valid,0.9,TypeScript,
1068,https://github.com/guryanovev/crystalquartz,"name: dotnet package

on: [push]

jobs:
  build:

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: | 
            2.0.x
            2.1.x
            7.x
      - name: Setup NodeJS
        uses: actions/setup-node@v3
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          node-version: 18.x
      - name: Install extra NuGet packages
        run: nuget install ILRepack -OutputDirectory src/packages
      - name: CI Build
        working-directory: ./src
        run: |
            dotnet build CrystalQuartz.Build/CrystalQuartz.Build.csproj --configuration=Debug
            dotnet ""../tools/Rosalia/Rosalia.dll"" CrystalQuartz.Build/bin/Debug/netstandard2.0/CrystalQuartz.Build.dll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: Artifacts/gh-pages

  deploy:
    needs: build

    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # or the latest ""vX.X.X"" version tag for this action
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Specify the .NET Core version

    - name: Restore dependencies
      run: dotnet restore src/CrystalQuartz.sln

    - name: Build solution
      run: dotnet build src/CrystalQuartz.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test src/CrystalQuartz.sln --no-build --verbosity normal
",0.1130268199233716,0.3320418605778673,Valid,0.4076923076923077,C#,
488,https://github.com/google/importlab,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ['3.6','3.7','3.8', '3.9','3.10', '3.11-dev']
    steps:
    - uses: actions/checkout@v3
    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: pip install networkx>=2 pytype

    - name: Type-Check
      if: matrix.python-version != '3.11-dev'
      run: pytype -j auto

    - name: Run Tests
      run: ./tests/run_all.sh
","name: Build and Run Tests

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Run tests
        run: |
          cd tests
          python -m unittest discover -s .",0.0347222222222222,0.5444319931633714,Valid,0.3355932203389831,Python,
496,https://github.com/edsu/microdata,"name: Run test

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Upgrade setuptools
        run: |
          pip install --upgrade setuptools
      - name: Run tests
        run: python setup.py test
","name: Build and Test Workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        python setup.py install
    - name: Run application
      run: python microdata.py
    - name: Run tests
      run: python test.py
",0.2549222797927461,0.5687279172245906,Valid,0.5931923331130204,Python,
1105,https://github.com/blowdart/idunno.authentication,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches:
      - dev
      - 'feature/*'
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ dev ]
  schedule:
    - cron: '25 4 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          5.0.x
          6.0.x
          7.0.x
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # We can't use autobuild because we want to restrict the build to just src folder solutions
    # and avoid triggering deterministic builds and git commit based versioning
    # (as GitHub workflows shallow clone by default, and that breaks the versioning.)
    - run: dotnet build -c CodeQL

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2","name: Build and Test

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore idunno.Authentication.sln

    - name: Build solution
      run: dotnet build idunno.Authentication.sln --no-restore

    - name: Run tests
      run: dotnet test idunno.Authentication.sln --no-build --logger ""trx;LogFileName=test_results.trx""
",0.0920679886685552,0.2046615699596413,Valid,0.4383561643835616,C#,
1129,https://github.com/mylovecc/netcore.encrypt,"name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@master
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'
        include-prerelease: true
    - name: Install dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --no-restore --verbosity normal
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore NETCore.Encrypt.sln

      - name: Build solution
        run: dotnet build NETCore.Encrypt.sln --configuration Release --no-restore

      - name: Run tests
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: dotnet test ./test/NETCore.Encrypt.Tests/NETCore.Encrypt.Tests.csproj --no-build --verbosity normal
",0.3623304070231444,0.6193625622316984,Valid,0.668775364,C#,
1107,https://github.com/netdevpack/security.identity,"name: Pull Request Analisys

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET 6
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x

      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x' # Specify the .NET Core version

    - name: Restore dependencies
      run: dotnet restore NetDevPack.Identity.sln

    - name: Build
      run: dotnet build NetDevPack.Identity.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test NetDevPack.Identity.sln --no-build --verbosity normal
",0.4176904176904177,0.7108472944348748,Valid,0.5079756040347174,C#,
45,https://github.com/librevault/librevault,"name: CI
on:
  push:
    branches: [ master, develop, ""feature/githubactions"" ]
  pull_request:
    branches: [ master, develop, ""feature/githubactions"" ]
jobs:
  build-windows:
    runs-on: windows-2019
    steps:
      - name: Install system-wide dependencies
        run: |
          choco install innosetup
          python -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: |
            ~/.conan/data
            C:/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          .venv\scripts\activate.ps1
          cd build
          conan profile new --detect --force default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
#      - name: Build application
#        run: |
#          cd build
#          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=built_binaries -DBUILD_UPDATER=OFF ..
#          cmake --build . --config Release
#      - name: Package application
#        run: |
#          .venv\scripts\activate.ps1
#          cd build
#          cmake --install .
#          python ../scripts/configure_innosetup.py --packaging_dir pack --install_dir built_binaries
#          pushd pack
#          iscc librevault.iss
#          popd
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-innosetup-windows-x64
#          path: build/pack/result.exe

  build-linux:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install system-wide dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash git python3-pip python3.8-dev python3.8-venv build-essential libwayland-dev libglib2.0-dev libgl-dev ninja-build ccache
          sudo python3.8 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3.8 -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          cd build
          conan profile new --detect --force default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L ""$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo ""$HOME/.local/bin"" >> $GITHUB_PATH
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
      - name: Build application
        run: |
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache

#  build-linux-snap:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - uses: snapcore/action-build@v1
#        id: snapcraft
#      - uses: actions/upload-artifact@v2
#        with:
#          name: librevault-snap-linux-x64
#          path: ${{ steps.snapcraft.outputs.snap }}
#      - uses: snapcore/action-publish@v1
#        if: github.event_name == 'push'
#        with:
#          store_login: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
#          snap: ${{ steps.snapcraft.outputs.snap }}
#          release: edge
#
  build-macos:
    runs-on: macos-11
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - name: Install system-wide dependencies
        run: |
          brew install cmake ccache ninja sccache
          python3 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3 -m venv .venv
          poetry install
          source .venv/bin/activate
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          mkdir -p build
          pushd build
          conan profile new --detect --force default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: |
            ~/.ccache
            ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Build application
        run: |
          mkdir -p build
          pushd build
          cmake .. -GNinja -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OBJC_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../packaging
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache
#          cpack
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-dmg-macos-x64
#          path: build/Librevault.dmg
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
#        - windows-2019
#        - windows-2022
        - ubuntu-20.04
        - macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run tests
        run: cargo test
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run lint
        run: cargo fmt -- --check
","name: CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev cmake gcc g++ make

      - name: Build Rust components
        run: cargo build

      - name: Run Rust tests
        run: cargo test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install conan

      - name: Build with CMake
        run: cmake -B build . && cmake --build build

      - name: Run C++ tests (if any)
        run: cmake --build build --target test || echo ""No C++ tests to run.""

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install poetry

      - name: Install project dependencies with Poetry
        run: poetry install

      - name: Run Python tests with Poetry (if any)
        run: poetry run pytest || echo ""No Python tests to run.""
",0.054065208,0.1574552363834296,Valid,0.4386585329261235,C++,
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build project with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon",0.1555153707052441,0.6774091219014892,Valid,0.7142857142857143,Java,
3438,https://github.com/dotlottie/player-component,"name: main
on:
  push:
    branches:
      - 'master'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v2

      - name: ‚éî Setup pnpm@v8
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ‚éî Setup Node@18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì• Download deps
        run: pnpm install

      - name: üèó Build
        run: pnpm build

      - name: üîç Verify types
        run: pnpm type-check

      - name: üíÖ Verify format (`pnpm format` committed?)
        run: pnpm format --check --no-write

      - name: üïµÔ∏è Lint
        run: pnpm lint

      - name: üõ°Ô∏è Test
        run: pnpm test

      - name: üìè Report bundle size
        uses: andresz1/size-limit-action@v1
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'dotlottie/player-component' && github.event_name == 'push' }}
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: ‚éî Setup pnpm@v8
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ‚éî Setup Node@18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì• Download deps
        run: pnpm install

      - name: üèó Build
        run: pnpm build

      - name: üöÄ Release
        uses: changesets/action@v1
        with:
          commit: 'chore: ü§ñ update versions'
          title: 'chore: ü§ñ update versions'
          publish: pnpm release:publish
          version: pnpm release:version
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPMJS_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}

      - name: üåêPublish Playground
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          publish_dir: ./apps/dotlottie-playground/dist
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      run: pnpm install

    - name: Build
      run: pnpm run build

    - name: Test
      run: pnpm run test
      continue-on-error: true
",0.098587127,0.2668457373412201,Valid,0.8282828282828283,TypeScript,
347,https://github.com/mediathekview/zapp,"name: Build and test
on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
        
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
  
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'
        
    - name: Build and test with Gradle
      run: ./gradlew build test -Pci
      
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  ","name: Build and Test

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches: 
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build
      run: ./gradlew build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Run tests
      run: ./gradlew test
",0.2055591467356173,0.5911583978295735,Valid,0.75,Kotlin,
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn -B clean verify --file pom.xml

    - name: Run tests
      run: mvn -B test
",0.1006798784898018,0.0975196603552048,Valid,0.3018257523853609,Java,
1075,https://github.com/app-vnext/polly-samples,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    steps:

    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Build and Test
      shell: pwsh
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
        FORCE_COLOR: 1
        NUGET_XMLDOC_MODE: skip
        TERM: xterm
      run: |
        dotnet build --configuration Release
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x' # Specify the .NET version

      - name: Restore dependencies
        run: dotnet restore Polly-Samples.sln

      - name: Build
        run: dotnet build Polly-Samples.sln --no-restore

      - name: Test
        run: dotnet test Polly-Samples.sln --no-build --verbosity normal
",0.2166890982503364,0.469489799,Valid,0.5,C#,
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 1.8
        uses: actions/setup-java@v2
        with:
          java-version: '1.8'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
",0.042742654,0.069663282,Valid,0.2373984000982198,Java,
1135,https://github.com/t-richards/chemo,"name: build
on: [push]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v3

    - name: Setup ducible
      uses: t-richards/setup-ducible@master

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.6
      with:
        sdk-version: 18362

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet Packages
      run: nuget restore Chemo.sln

    - name: Build application
      run: msbuild Chemo.sln /p:Configuration=Release

    - name: Merge assemblies
      shell: cmd
      run: |
        ""%USERPROFILE%""\.nuget\packages\ILRepack\2.0.18\tools\ILRepack.exe /out:build/Chemo.exe src\Chemo\bin\Release\Chemo.exe src\Chemo\bin\Release\Microsoft.Dism.dll
        cp build\Chemo.exe Chemo.exe

    - name: Reproducible build
      run: ducible Chemo.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: Chemo.exe
        path: Chemo.exe
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore Chemo.sln
      - name: Build
        run: dotnet build Chemo.sln --no-restore
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore Chemo.sln
      - name: Build
        run: dotnet build Chemo.sln --no-restore
      - name: Run tests
        run: dotnet test Chemo.sln --no-build --verbosity normal
",0.1402251791197543,0.524924994675768,Valid,0.6174209529072751,C#,
3303,https://github.com/cloudera/hue,"name: Frontend CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.less'
      - '**.scss'
      - '**.vue'
      - 'package*.json'
      - '**commitflow-frontend.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Caching npm with setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: run commit title format check
      run: ./tools/ci/check_for_commit_message.sh 

    - name: run npm version checker
      run: npm run check-pinned-versions

    - name: run npm license checker
      run: npm run check-license

    - name: run npm absolute path detection
      run: npm run check-absolute-paths

    - name: run js lint
      run: npm run lint

    - name: run style lint
      run: npm run style-lint

    - name: run js tests
      run: |
        # https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
        sed -i 's/""test"": ""jest""/""test"": ""jest --runInBand""/g' package.json

        npm run test","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r desktop/core/requirements.txt

      - name: Build the application
        run: make apps

      - name: Run tests
        run: make test
",0.2418162618796198,0.3726511790723598,Valid,0.2036810628796777,JavaScript,
1063,https://github.com/sestoft/c5,"---
name: Main

on:
  push:
    branches:
      - master
    paths-ignore:
      - ""*.md""

  pull_request:
    branches:
      - master

  workflow_dispatch:

env:
  RESOURCE_GROUP_NAME: ondfisk
  WEBAPP_NAME: c5
  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: 6.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Test
        run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover

      - uses: actions/upload-artifact@v2
        with:
          name: lib
          path: bin/**/*.nupkg

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    container:
      image: corentinaltepe/doxygen

    steps:
      - uses: actions/checkout@v2

      - name: Install GraphViz
        run: apk update && apk add graphviz font-bitstream-type1 ghostscript-fonts

      - name: Generate Documentation
        run: doxygen Doxyfile

      - uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/

  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   needs:
  #     - build
  #   environment: Production
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore dependencies
      run: dotnet restore C5.sln

    - name: Build
      run: dotnet build --no-restore -c Release C5.sln

    - name: Test
      run: dotnet test --no-build -c Release C5.Tests/C5.Tests.csproj",0.1785895484525621,0.2679689048084213,Valid,0.3597187253079331,C#,
489,https://github.com/kstaats/karoo_gp,"name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  
jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Run Karoo GP tests
        run: pytest -v
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      - name: Run Application
        run: python karoo-gp.py
      
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt
      - name: Run Tests
        run: |
          pip install pytest
          pytest
",0.0906842539159109,0.2324356669820498,Valid,0.6041041041041041,Python,
681,https://github.com/rive-app/rive-wasm,"name: Build JS
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ""20.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.43
          actions-cache-folder: ""emsdk-cache""
      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
          tar -xvf premake-5.0.0-alpha16-linux.tar.gz
          sudo chmod a+x premake5
          sudo mv premake5 /usr/local/bin
      - name: Install modules
        run: cd js && npm install
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
        run: cd js && ./build.sh
      - name: Run tests
        run: cd js && npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install npm dependencies
      run: npm install
      working-directory: ./js

    - name: Run build
      run: npm run build
      working-directory: ./js

    - name: Run webpack
      run: npm run webpack
      working-directory: ./js

    - name: Run tests
      run: npm test
      working-directory: ./js
",0.1084548104956268,0.4342202203101364,Valid,0.3779809621257331,JavaScript,
572,https://github.com/mozilla/rust-android-gradle,"name: CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events, but only for the `master` branch (generally) or the `citest`
# branch (for testing).
on:
  push:
    branches: [master, citest]
  pull_request:
    branches: [master]

jobs:
  generate_versions:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Gradle test
        run: |
          ./gradlew -p plugin generateTestTasksJson

      - id: setup-matrix
        run: echo ""::set-output name=matrix::$(cat plugin/build/build-resources/androidTestTasks.json)""

      - name: debug
        run: echo ${{ steps.setup-matrix.outputs.matrix }}

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

  samples:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Assemble samples/app
        run: |
          ./gradlew -p samples/app :assembleDebug --info --warning-mode all

      - name: Assemble samples/library
        run: |
          ./gradlew -p samples/library :assembleDebug --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_unversioned_tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin test --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_version_tests:
    needs: [generate_versions] # , sanity_check]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        androidTestTask: ${{ fromJson(needs.generate_versions.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin ${{ matrix.androidTestTask }} --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test
",0.041062802,0.099071365,Valid,0.5053111086127091,Kotlin,
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
","name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test
",0.2007978723404255,0.4467884921567786,Valid,0.825,Java,
1071,https://github.com/microsoft/vs-editor-api,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, windows-latest]
        include:
          - os: macOS-latest
            msbuild: msbuild
          - os: windows-latest
            msbuild: '""%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe""'

    steps:
    - uses: actions/checkout@v1
    
    - name: Dump Environment
      run: |
        set

    - name: Provision Machine
      run: |
        tools/provision-macos.sh
      if: startsWith(matrix.os, 'macOS-')

    - name: Restore NuGet Packages
      run: |
        ${{ matrix.msbuild }} VSEditorCore.proj /noautoresponse /t:Restore /p:BuildTests=false

    - name: Build
      run: |
        ${{ matrix.msbuild }} VSEditorCore.proj /noautoresponse /t:Build /p:BuildTests=false
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore VSEditorCore.sln

    - name: Build
      run: dotnet build VSEditorCore.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test VSEditorCore.sln --no-build --verbosity normal
",0.1306666666666666,0.395964356,Valid,0.3631818976676628,C#,
