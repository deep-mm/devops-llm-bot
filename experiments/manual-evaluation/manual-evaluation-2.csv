Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language,Manual_Evaluation_Score
194,https://github.com/netheril96/staticjson,"name: C/C++ CI

on: [push, pull_request]

env:
  VERBOSE: 1

jobs:
  build_matrix:
    strategy:
      matrix:
        config:
          [
            [windows-latest, x64-windows, OFF],
            [macos-latest, x64-osx, ON],
            [ubuntu-20.04, x64-linux, ON],
          ]
    runs-on: ${{ matrix.config[0] }}
    steps:
      - uses: actions/checkout@v1
      - name: vcpkg build
        uses: johnwason/vcpkg-action@v4
        with:
          pkgs: rapidjson catch2
          triplet: ${{ matrix.config[1] }}
          token: ${{ github.token }}
      - name: configure
        run: mkdir build && cd build && cmake -DSTATICJSON_ASAN=${{ matrix.config[2] }} -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.config[1] }} ..
      - name: build
        run: cmake --build build --config Debug
      - name: test
        run: cd build && ctest -V -C Debug
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: sudo apt-get update && sudo apt-get install -y cmake g++

    - name: Create Build Directory
      run: mkdir build && cd build

    - name: Configure CMake
      run: cd build && cmake ..

    - name: Build
      run: cd build && make

    - name: Test
      run: cd build && ctest
",0.1244083840432724,0.3660575209794489,Valid,0.4430723605594554,C++,
571,https://github.com/mumayank/airlocation,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.4944375772558714,0.6246915742254823,Valid,1.0,Kotlin,
52,https://github.com/ron190/jsql-injection,"on:
  push:
    branches: [ master ]
    
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  MAVEN_NASHORN: """"
  DOCKER_RESOURCES: ./model/src/test/resources/docker

jobs:

  build-jdk11:
    name: Test view on Docker (jdk-11)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      JSQL_DOCKERFILE: 3.8.1-jdk-11-slim
      MAVEN_NASHORN: -Dnashorn.args=--no-deprecation-warning
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Disable shallow clone to prevent Sonar warning
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Set Maven dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests dependency:tree

      - name: Build project container
        run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

      - name: Unit tests
        run: $DOCKER_RESOURCES/scripts/run-on-docker-no-network.sh 'cd view/ && mvn clean install -P tests'

  build:
    name: Tests on Docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - jdk: 3.8.6-eclipse-temurin-18
          nashorn: """"
        - jdk: 3.9.3-eclipse-temurin-20
          nashorn: """"
    env:
      JSQL_DOCKERFILE: ${{ matrix.jdk }}
      MAVEN_NASHORN: ${{ matrix.nashorn }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Disable shallow clone to prevent Sonar warning
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    
    - name: Set Maven dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
              
    - name: Install Maven dependencies
      run: mvn clean install -DskipTests dependency:tree
        
    - name: Run databases and LAMP
      run: |
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml build --parallel
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml up -d

    - name: List images and containers
      run: docker images && docker container ls

    - name: Database health checks and configuration
      run: |
        $DOCKER_RESOURCES/scripts/healthcheck/healthcheck.sh
        $DOCKER_RESOURCES/scripts/buff.sh
        $DOCKER_RESOURCES/scripts/verify.sh

    - name: Build project container
      run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

    - name: Unit and integration tests with Sonar scan
      # Profile usage for skipITs/skipTests (env var MAVEN_OPS not working)
      # Note: 'mvn sonar:sonar' not working, modules reports not found, use 'mvn verify sonar:sonar' for reliability
      # Note: gh actions sonarsource/sonarqube-scan-action not working properly => analysis not reliable
      run: $DOCKER_RESOURCES/scripts/run-on-docker.sh 'mvn clean install sonar:sonar -P tests org.pitest:pitest-maven:mutationCoverage'

    - name: Databases statistics
      run: $DOCKER_RESOURCES/scripts/verify.sh

    - name: Copy files and coverage reports from container
      # Sonar scans unmerged reports, Codacy/Codecov requires scanning each files (or reports merged)
      run: |
        mkdir -p shared-resources/model shared-resources/view
        docker cp docker_jsql-container:view/. shared-resources/view
        docker cp docker_jsql-container:model/. shared-resources/model
        docker cp docker_jsql-container:pom.xml shared-resources

    - name: Codecov scan
      run: cd shared-resources && bash <(curl -s https://codecov.io/bash) || true

    - name: Codacy scan
      run: cd shared-resources && bash <(curl -Ls https://coverage.codacy.com/get.sh) || true

    - name: Publish coverage
      run: |
        git checkout docs
        rm -r view/target/site/ view/target/pit-reports/ model/target/site/ model/target/pit-reports/ || echo 'Folder(s) not found'
        FOLDER=view/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=view/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        git config user.name ""Github Actions""
        git config user.email no-response@github.com    
        git pull -s ours  # ignore remote changes when updated by parallel jobs
        # folders view/target model/target contain other build files from 'Install Maven dependencies'
        git add -f view/target/site/jacoco model/target/site/jacoco view/target/pit-reports model/target/pit-reports
        git commit -m ""Publish jacoco and pitest reports""
        git push

  codeql:
    name: CodeQL
    uses: ./.github/workflows/run-codeql.yml

  release:
    needs: [build-jdk11, build, codeql]
    name: Publish
    uses: ./.github/workflows/release.yml
    secrets: inherit","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B clean install --file pom.xml --no-transfer-progress

    - name: Run tests in 'model' module
      run: mvn -B test --file model/pom.xml --no-transfer-progress

    - name: Run tests in 'view' module
      run: mvn -B test --file view/pom.xml --no-transfer-progress
",0.0490118577075098,0.10039945811264,Valid,0.2465863124160605,Java,
3368,https://github.com/umijs/umi-next,"name: CI

env:
  NODE_OPTIONS: --max-old-space-size=6144

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'examples/**'
      - 'docs/**'
      - '**/*.md'
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo ""::set-output name=pnpm_cache_dir::$(pnpm store path)""

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-

      # We use week in the turbo cache key to keep the cache from infinitely growing
      - name: Get cache expires mark
        id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-

      - name: Install dependencies
        run: pnpm i

      - run: pnpm build
      - run: pnpm tsc --noEmit
      - run: pnpm test
        env:
          CI: true
          NODE_ENV: test
","name: Build and Test

on: [push, pull_request]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    - name: Build the project
      run: pnpm run build
    - name: Run tests
      run: pnpm test
",0.2140651801029159,0.2028348693382168,Valid,0.8076923076923077,TypeScript,
5265,https://github.com/levelgraph/levelgraph,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm install
    - name: Build
      run: npm run build
      env:
        CI: true
    - name: Run lint
      run: npm run lint
      continue-on-error: true
    - name: Run tests
      run: npm test
",0.2969072164948453,0.4822694006062374,Valid,0.7777777777777777,JavaScript,
3377,https://github.com/ethereumjs/ethereumjs-blockchain,"name: blockchain-test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x, 13.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v1
      - run: npm install
      - run: npm test
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14.x'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run lint
        run: npm run lint

      - name: Test
        run: npm test
",0.044776119,0.6095410829286955,Valid,1.0,TypeScript,
481,https://github.com/aarongarrett/inspyred,"name: Continuous builds

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
      fail-fast: false

    steps:

    - uses: actions/checkout@v3
    - name: Set up Python  ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install tox tox-gh-actions

    - name: List packages so far
      run: |
        pip list

    - name: Run tests
      run: |
          tox

    - name: Run example tests
      run: |
          pip install -r ./requirements_dev.txt
          pip install .
          # uses pp, which is not available for py3
          # python3 ./tests/evaluator_tests.py
          python3 ./tests/example_tests.py
          python3 ./tests/observer_tests.py
          # intermittently fails
          python3 ./tests/operator_tests.py || exit 0
          python3 ./tests/supplemental_tests.py
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_dev.txt

      - name: Build
        run: python setup.py build

      - name: Run tests
        run: pytest
",0.3883955002960331,0.4361199736079693,Valid,0.2406990291262135,Python,
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.0419002655650634,0.0795687733570267,Valid,0.4620891024516289,Kotlin,
5269,https://github.com/metalsmith/metalsmith-layouts,"name: CI
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['master']

jobs:
  pre-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm run format:check
      - run: npm run lint:check

  branch-test:
    if: github.ref_name != 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm test

  test:
    if: github.ref_name == 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0', '16.0', '18.0', '20.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - run: npm install
      - run: npm test
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        run: npm run coverage
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.info
          format: lcov
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm test",0.1699471915506481,0.2732063350407651,Valid,1.0,JavaScript,
681,https://github.com/rive-app/rive-wasm,"name: Build JS
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ""20.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.43
          actions-cache-folder: ""emsdk-cache""
      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
          tar -xvf premake-5.0.0-alpha16-linux.tar.gz
          sudo chmod a+x premake5
          sudo mv premake5 /usr/local/bin
      - name: Install modules
        run: cd js && npm install
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
        run: cd js && ./build.sh
      - name: Run tests
        run: cd js && npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies (JavaScript)
      run: npm ci
      working-directory: ./js

    - name: Build JavaScript
      run: npm run build
      working-directory: ./js

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies (WASM)
      run: pip install -r wasm/requirements.txt
      if: ${{ always() }}

    - name: Build WASM
      run: bash wasm/build_all_wasm.sh
      if: ${{ always() }}

    - name: Run tests (JavaScript)
      run: npm test
      working-directory: ./js

    - name: Run tests (WASM)
      run: |
        # Add commands here to run WASM tests if they exist
        echo ""No WASM test commands provided.""
      if: ${{ always() }}
",0.099437148,0.5606817565900699,Valid,0.4056483600305111,JavaScript,
5257,https://github.com/maximelebreton/quick-javascript-switcher,"name: ""Github Release""
on:
  push:
    branches:
      - ""2.0""
jobs:
  pre-release:
    name: ""Release""
    runs-on: ""ubuntu-latest""

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm ci
      - run: npm run build --if-present
      # - run: npm run zip --if-present

      - id: packExtensionDir
        uses: cardinalby/webext-buildtools-pack-extension-dir-action@v1
        with:
          extensionDir: '.build/'
          zipFilePath: 'quick-javascript-switcher.zip'
  
      - id: buildCrx
        uses: cardinalby/webext-buildtools-chrome-crx-action@v2
        with:
          zipFilePath: 'quick-javascript-switcher.zip'
          crxFilePath: 'quick-javascript-switcher.crx'
          privateKey: ${{ secrets.CHROME_CRX_PRIVATE_KEY }}
          updateXmlPath: 'update.xml'
          updateXmlCodebaseUrl: 'https://github.com/maximelebreton/quick-javascript-switcher/releases/download/latest/quick-javascript-switcher.crx'
          
      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          files: |
            quick-javascript-switcher.zip
            quick-javascript-switcher.crx


      # - name: Chrome Extension upload & publish
      #   uses: Passiverecords/chrome-extension-upload-action@1.4.1
      #   with:
      #     client-id: ${{ secrets.CHROME_CLIENT_ID }}
      #     client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
      #     refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
      #     file-name: 'quick-javascript-switcher.zip'
      #     app-id: 'geddoclleiomckbhadiaipdggiiccfje'
      #     publish: false","name: Build and Test

on:
  push:
    branches:
      - '2.0'
  pull_request:
    branches:
      - '2.0'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Lint
        if: success()
        run: npm run lint

      - name: Test
        if: success()
        run: npm test
        env:
          CI: true
",0.1039832285115304,0.2545097860633732,Valid,0.3569032876308418,JavaScript,
4427,https://github.com/modulz/stitches,"name: CI
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
","name: Build and Test

on:
  push:
    branches:
      - canary
  pull_request:
    branches:
      - canary

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install
      - name: Run build script
        run: npm run build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm test
",0.2974742750233863,0.1474891726457087,Valid,0.7058823529411765,JavaScript,
84,https://github.com/loganmc10/m64p,"name: Build project
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:latest
    steps:
      - name: Update and install packages
        run: |
          dnf -y update
          dnf -y install pkgconf-pkg-config which cmake ninja-build make nasm qt6-qtwebsockets-devel hidapi-devel zlib-devel libpng-devel SDL2_net-devel wget zip git ShellCheck
      - uses: actions/checkout@v3
      - name: Check shell scripts
        run: |
          shellcheck -o all build.sh clean.sh link-mac.sh pull_repos.sh
      - name: Run build script
        run: |
          git config --global --add safe.directory /__w/simple64/simple64
          ./build.sh
  build-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-hidapi
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-SDL2_net
            mingw-w64-x86_64-qt6
            mingw-w64-x86_64-python3-pip
            mingw-w64-x86_64-python3-pyopenssl
            mingw-w64-x86_64-nasm
            git
            zip
      - name: Run build script
        run: msys2 -c 'export SIMPLE64_AUTOUPDATE=1; ./build.sh'
      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: simple64-win64
          path: simple64-*.zip
  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - name: brew update
        run: |
          brew update
          brew upgrade || true
          brew install hidapi sdl2_net sdl2 ninja molten-vk vulkan-loader qt@6
      - name: Run build script
        run: |
          sudo sh ./build.sh
      - name: Upload dmg
        uses: actions/upload-artifact@v3
        with:
          name: simple64-osx
          path: simple64/simple64-*.dmg
","name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Dependencies
      run: sudo apt-get update -y && sudo apt-get install -y cmake build-essential
    - name: Configure Build
      run: cmake -S . -B build
    - name: Build
      run: cmake --build build
    - name: Test
      run: cmake --build build --target test
",0.0306242638398115,0.1666539267665288,Valid,0.3127147905278162,C++,
4143,https://github.com/sindresorhus/html-tags,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
          - 8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm run build
      continue-on-error: true

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      run: npm test
",0.076190476,0.4345247859039334,Valid,1.0,JavaScript,
1928,https://github.com/oscarhiggott/pymatching,"name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - master

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz


  build_wheels:
    runs-on: ${{ matrix.os_dist.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ""10.15""
      CIBW_BUILD: ""${{ matrix.os_dist.dist }}""
      CIBW_ARCHS_MACOS: ""x86_64 universal2 arm64""
      CIBW_BEFORE_BUILD: pip install --upgrade ninja
      CIBW_TEST_REQUIRES: pytest stim~=1.10.dev1666411378
      CIBW_TEST_COMMAND: pytest {project}/tests
    strategy:
      fail-fast: false
      matrix:
        os_dist: [
          # macosx x86_64
          {os: macos-latest, dist: cp36-macosx_x86_64},
          {os: macos-latest, dist: cp37-macosx_x86_64},
          {os: macos-latest, dist: cp38-macosx_x86_64},
          {os: macos-latest, dist: cp39-macosx_x86_64},
          {os: macos-latest, dist: cp310-macosx_x86_64},
          {os: macos-latest, dist: cp311-macosx_x86_64},
          # macosx arm64
          {os: macos-latest, dist: cp38-macosx_arm64},
          {os: macos-latest, dist: cp39-macosx_arm64},
          {os: macos-latest, dist: cp310-macosx_arm64},
          {os: macos-latest, dist: cp311-macosx_arm64},
          # macosx universal2
          {os: macos-latest, dist: cp38-macosx_universal2},
          {os: macos-latest, dist: cp39-macosx_universal2},
          {os: macos-latest, dist: cp310-macosx_universal2},
          {os: macos-latest, dist: cp311-macosx_universal2},

          # windows amd64
          {os: windows-latest, dist: cp36-win_amd64},
          {os: windows-latest, dist: cp37-win_amd64},
          {os: windows-latest, dist: cp38-win_amd64},
          {os: windows-latest, dist: cp39-win_amd64},
          {os: windows-latest, dist: cp310-win_amd64},
          {os: windows-latest, dist: cp311-win_amd64},
          # windows win32
          {os: windows-latest, dist: cp36-win32},
          {os: windows-latest, dist: cp37-win32},
          # scipy install fails
#          {os: windows-latest, dist: cp38-win32},
#          {os: windows-latest, dist: cp39-win32},
#          {os: windows-latest, dist: cp310-win32},
#          {os: windows-latest, dist: cp311-win32},
          # For arm64, get error ""cibuildwheel: No build identifiers selected""
#          {os: windows-latest, dist: cp39-win_arm64},
#          {os: windows-latest, dist: cp310-win_arm64},
#          {os: windows-latest, dist: cp311-win_arm64},

          # ubuntu x86_64
          {os: ubuntu-latest, dist: cp36-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp37-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp38-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp39-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp310-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp311-manylinux_x86_64},
          # ubuntu i686
          {os: ubuntu-latest, dist: cp36-manylinux_i686},
          {os: ubuntu-latest, dist: cp37-manylinux_i686},
          # scipy built distribution not available and build fails on manylinux_i686 for python 3.8 up
#          {os: ubuntu-latest, dist: cp38-manylinux_i686},
#          {os: ubuntu-latest, dist: cp39-manylinux_i686},
#          {os: ubuntu-latest, dist: cp310-manylinux_i686},
#          {os: ubuntu-latest, dist: cp311-manylinux_i686},
          # Don't include musllinux as it has g++-9 (need g++-10 for <bits>)
#          {os: ubuntu-latest, dist: cp36-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp37-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp38-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp39-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp310-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp311-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp36-musllinux_i686},
#          {os: ubuntu-latest, dist: cp37-musllinux_i686},
#          {os: ubuntu-latest, dist: cp38-musllinux_i686},
#          {os: ubuntu-latest, dist: cp39-musllinux_i686},
#          {os: ubuntu-latest, dist: cp310-musllinux_i686},
#          {os: ubuntu-latest, dist: cp311-musllinux_i686},
        ]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install g++
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install gcc-10 g++-10

    - uses: pypa/cibuildwheel@v2.11.1

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl
  benchmark_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: cmake .
      - run: cmake --build . --target pymatching_perf --config Release
      - run: Release\pymatching_perf.exe
  benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_perf
      - run: ./pymatching_perf
  gtest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_tests
      - run: ./pymatching_tests
  pip_install:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [""3.10""]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov

      - name: Build and install
        run: pip install --verbose -e .

      - name: Test without stim
        run: python -m pytest tests

      - name: Add stim
        run: python -m pip install stim~=1.10.dev1666411378

      - name: Test with stim using coverage
        run: python -m pytest tests --cov=./src/pymatching --cov-report term

      - name: flake8
        run: flake8 ./src ./tests

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pandoc
        run: |
          sudo apt install pandoc
          python -m pip install pandoc

      - name: Add sphinx requirements
        run: python -m pip install -r ./docs/sphinx_docs/requirements.txt

      - name: Build and install PyMatching
        run: pip install --verbose .

      - name: Build docs
        run: cd docs/sphinx_docs && make html
  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov stim~=1.10.dev1666411378
      - name: Build and install
        run: pip install --verbose -e .
      - name: Run tests and collect coverage
        run: pytest tests --cov=./src/pymatching --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
#  upload_all:
#    name: Upload to pypi
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ""3.9""
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@v1.5.1
#        with:
#          password: ${{ secrets.pypi_password }}
","name: Build and Test

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r docs/sphinx_docs/requirements.txt
        python setup.py install

    - name: Build
      run: cmake . && make

    - name: Run Tests
      run: pytest tests/

",0.045547760388559,0.0624548028802502,Valid,0.4198725932868783,C++,
1054,https://github.com/cwensley/pablodraw,"# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches: [main]
    tags: [""*""]
  pull_request:
    branches: [main]

env:
  DotNetVersion: ""7.0.x""
  BuildConfiguration: ""Release""
  BuildParameters: ""/clp:NoSummary /p:Configuration=Release /p:BuildVersion=${{ github.run_id }} /p:BuildBranch=${{ github.ref }}""

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-windows.binlog

      - name: Build PabloDraw.Console
        run: dotnet publish Source/PabloDraw.Console/PabloDraw.Console.cxproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw.console-windows.binlog
        
      - name: Build msi
        run: dotnet build ${{ env.BuildParameters }} Source/PabloDraw.WindowsInstaller/PabloDraw.WindowsInstaller.wixproj

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-binaries-x64
          path: artifacts/publish/${{ env.BuildConfiguration }}/Windows/*

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-installer-x64
          path: artifacts/installer/${{ env.BuildConfiguration }}/Windows/*.msi

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-linux.binlog
        
      - name: Create gzip
        run: tar -czvf pablodraw-linux-x64.tar.gz -C artifacts/publish/${{ env.BuildConfiguration }}/Linux .

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-linux-binaries-x64
          path: pablodraw-linux-x64.tar.gz

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 13.1

      - name: Import code signing certificate
        if: github.event_name != 'pull_request'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVID_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.DEVID_CERTIFICATE_P12_PASSWORD }}

      - name: Enable code signing
        if: github.event_name != 'pull_request'
        run: echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableCodeSigning=True"" >> $GITHUB_ENV

      - name: Set notarization credentials
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --store-password-in-keychain-item ""AC_PASSWORD"" -u ""${{ secrets.AC_USERNAME }}"" -p ""${{ secrets.AC_PASSWORD }}""
          echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableNotarization=True"" >> $GITHUB_ENV

      - name: Build PabloDraw
        run: sudo dotnet build Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-mac.binlog

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-mac
          path: artifacts/publish/${{ env.BuildConfiguration }}/Mac/*.dmg

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  update-release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2

      - uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          files: |
            **/*.msi
            **/*.dmg
            **/*.tar.gz
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      # Build .NET applications
      - name: Build with dotnet
        run: dotnet build --configuration Release

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      # Run unit tests if present
      - name: Run tests with dotnet test
        run: dotnet test --no-build --verbosity normal
",0.041606887,0.1508709068103234,Valid,0.2483044703467102,C#,
88,https://github.com/spring-guides/gs-scheduling-tasks,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build --no-daemon
    - name: Run tests
      run: ./gradlew test --no-daemon

  test_script:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for test script
      run: chmod +x test/run.sh
    - name: Run custom test script
      run: test/run.sh
",0.3265753424657534,0.6200378865823177,Valid,0.526634382566586,Java,
494,https://github.com/wimglenn/djangorestframework-queryfields,"name: CI

on:
  push:
    branches: [""main""]
  pull_request:
    branches: [""main""]
  workflow_dispatch:

jobs:
  tests:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
        - ""3.7""
        - ""3.8""
        - ""3.9""
        - ""3.10""
        - ""3.11""
        - ""3.12""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          set -xe
          pip install "".[dev]""

      - name: Run tests for ${{ matrix.python-version }}
        run: python -m pytest --cov=drf_queryfields

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@main

  tests-27:
    name: Python 2.7 on ubuntu-20.04
    runs-on: ubuntu-20.04
    container:
      image: python:2.7-buster
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          set -xe
          pip install "".[dev]""

      - name: Run tests for Python 2.7 on Ubuntu 20.04
        run: python -m pytest --cov=drf_queryfields

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@main
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build
      run: python setup.py build

    - name: Run tests
      run: |
        python -m pip install pytest
        pytest
",0.150193263390392,0.3780593887044747,Valid,0.5047817047817048,Python,
5285,https://github.com/derhuerst/tcp-over-websockets,"name: test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14', '16', '18']

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup Node v${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install

    - run: npm run lint
    - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Lint Code
      run: npm run lint
      if: contains(github.event.push.changed_files, '.eslintrc.json') || contains(github.event.pull_request.changed_files, '.eslintrc.json')

    - name: Build Client
      run: npm run build:client
      if: contains(github.event.push.changed_files, 'client.js') || contains(github.event.pull_request.changed_files, 'client.js') || contains(github.event.push.changed_files, 'cli/') || contains(github.event.pull_request.changed_files, 'cli/')

    - name: Build Server
      run: npm run build:server
      if: contains(github.event.push.changed_files, 'server.js') || contains(github.event.pull_request.changed_files, 'server.js') || contains(github.event.push.changed_files, 'cli/') || contains(github.event.pull_request.changed_files, 'cli/')

    - name: Run Tests
      run: npm test
",0.1195079086115993,0.1685426865084707,Valid,1.0,JavaScript,
3381,https://github.com/idered/typescript-expect-plugin,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Run Tests
        run: yarn test
        env:
          CI: true
",0.3684210526315789,0.6046983609331924,Valid,1.0,TypeScript,
181,https://github.com/torarnv/sparsebundlefs,"name: ""Continuous Integration""

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  macos:
    name: macOS
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies
      run: brew install macfuse

    - name: Build
      run: make

    - name: Test
      run: make check

    - name: Install
      run: sudo make install

  linux:
    name: Linux
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, i386]

    env:
      ARCH: ${{ matrix.arch }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo dpkg --add-architecture $ARCH
        sudo apt-get update
        sudo apt-get install -y g++-multilib pkg-config:$ARCH libfuse-dev:$ARCH fuse:$ARCH

    - name: Build
      run: make

    - name: Install
      run: sudo make install
","name: Build and Run Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up the environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      - name: Build the project
        run: make -f Makefile

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Set up the environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      - name: Run tests
        run: |
          chmod +x ./tests/testrunner.sh
          ./tests/testrunner.sh",0.1491178144564598,0.5316510408367033,Valid,0.4341621341621342,C++,
3436,https://github.com/reactivando/validations-br,"name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: yarn

    - name: Check tests
      run: yarn test --coverage

    - name: Check linting
      run: yarn lint

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Lint with ESLint
      run: npx eslint .
    - name: Format with Prettier
      run: npx prettier --check .
    - name: Compile TypeScript
      run: npx tsc

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    - name: Run unit tests with Jest
      run: npx jest
",0.2090464547677261,0.5019223728426715,Valid,0.48,TypeScript,
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Run tests
        run: ./gradlew test
",0.025697504,0.223147992,Valid,0.4593635849153675,Java,
540,https://github.com/cesena/ghidra2dwarf,"name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  test-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""
      
      - name: install 32bit libs
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libc6:i386

      - name: install gdb
        run: sudo apt install gdb

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: install python requirements
        run: |
          cd test
          sudo python3 -m pip install -r requirements.txt

      - name: test
        run: |
          cd test
          #./generate_dbg.py $GHIDRA_INSTALL_DIR
          #cd binaries
          #chmod +x ./passcode_dbg
          #gdb --batch -ex 'start < passcode_input.txt' -ex list -ex continue ./passcode_dbg
          ./run_tests.sh $GHIDRA_INSTALL_DIR

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        shell: cmd
        run: |
          cd lib
          bash fetch_libs_and_build.sh
          move target\libdwarf.jar ..\src

      - name: test
        shell: cmd
        run: |
          cd test
          copy %pythonLocation%\python.exe python3.exe
          call run_tests %GHIDRA_INSTALL_DIR%

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: NextLight/setup-ghidra@octokit-auth
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: test
        run: |
          cd test
          ./generate_dbg.py $GHIDRA_INSTALL_DIR
","name: CI Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f lib/pom.xml ]; then mvn --batch-mode clean install; fi

    - name: Build Application
      run: |
        if [ -f fetch_libs_and_build.sh ]; then bash lib/fetch_libs_and_build.sh; elif [ -f src/*.sh ]; then bash src/*.sh; fi

    - name: Run tests
      run: |
        if [ -f run_tests.sh ]; then bash test/run_tests.sh; elif [ -f run_tests.bat ]; then cmd //c test\run_tests.bat; fi
      env:
        PYTHONPATH: .
",0.1157718120805369,0.2633388083797254,Valid,0.3311992808073173,Python,
71,https://github.com/netflix/blitz4j,"name: Snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon",0.176879343019583,0.3430801125315309,Valid,0.7450980392156863,Java,
3230,https://github.com/orchest/orchest,"# Runs all front-end/UI checks
name: UI

on:
  push:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""
  pull_request:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""

jobs:
  pnpm-fe-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ""${{ steps.nvm.outputs.NVMRC }}""

      # Run our pnpm hook manually, with additional build checks
      - name: Setup pnpm
        run: npm run setup && pnpm install

      - name: Build pnpm packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test

      - name: Lint pnpm packages
        run: pnpm run check

      - name: Type check
        run: pnpm run ts:check
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Run tests
        run: pytest
",0.1362043064596895,0.4762724703603455,Valid,0.7891737891737891,TypeScript,
552,https://github.com/commit451/resourcespoet,"name: Build

on: [push, pull_request]

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 11

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Test
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test
",0.2751219512195122,0.648803306,Valid,1.0,Kotlin,
87,https://github.com/spring-guides/gs-consuming-rest,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: CI Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Build with Maven
        run: ./mvnw clean install -DskipTests

      - name: Test with Maven
        run: ./mvnw test

  build_gradle:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradlew', '**/gradlew.bat') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Test with Gradle
        run: ./gradlew test
",0.2037037037037037,0.4355561789875176,Valid,0.6255060728744939,Java,
613,https://github.com/commit451/modalbottomsheetdialogfragment,"name: Build
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Build the app
        run: chmod +x gradlew && ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build the project
      run: ./gradlew build

    - name: Run unit tests
      run: ./gradlew test",0.2433155080213903,0.254132156,Valid,0.6792452830188679,Kotlin,
73,https://github.com/journeyapps/zxing-android-embedded,"name: Build Android

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build and Lint with Gradle
        run: ./gradlew build
      - name: Archive lint results
        uses: actions/upload-artifact@v2
        with:
          name: lint-results
          path: ""**/build/reports/lint-results*""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.1227229146692233,0.6390986713567235,Valid,1.0,Java,
478,https://github.com/nedbat/cog,"name: ""CI""

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ""${{ github.workflow }}-${{ github.ref }}""
  cancel-in-progress: true

jobs:
  tests:
    name: ""Python ${{ matrix.python }} on ${{ matrix.os }}""
    runs-on: ""${{ matrix.os }}""

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python:
          # When changing this list, be sure to check the [gh] list in
          # tox.ini so that tox will run properly.
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""${{ matrix.python }}""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Run tox for ${{ matrix.python }}""
        run: |
          python -m tox
          python -m coverage debug data

      - name: ""Upload coverage data""
        uses: actions/upload-artifact@v2
        with:
          name: covdata
          path: .coverage.*

  combine:
    name: ""Combine and report coverage""
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""
        with:
          fetch-depth: ""0""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""3.8""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Download coverage data""
        uses: actions/download-artifact@v2
        with:
          name: covdata

      - name: ""Combine and report""
        run: |
          python -m coverage combine
          python -m coverage report -m
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.pip ]; then
          pip install -r requirements.pip
        fi

    - name: Build
      run: |
        if [ -f Makefile ]; then
          make
        fi

    - name: Run tests
      run: |
        if [ -f tox.ini ]; then
          tox
        elif [ -d cogapp ]; then
          python -m unittest discover cogapp
        fi
",0.0544718439455281,0.3068728963758447,Valid,0.4890111758116388,Python,
216,https://github.com/solokiller/halflife-updated,"name: CI/CD

on: [push, pull_request]

jobs:
  linux:
    name: Linux-x86
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [g++, clang++]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install G++ Multilib, Clang++ & OpenGL library
        run: |
          sudo apt update
          sudo apt install -y g++-multilib clang libgl1-mesa-dev
      
      - name: Build
        run: |
          cd linux
          make COMPILER=${{ matrix.compiler }} CFG=release -j2
      
      - name: Deploy
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Linux-x86-${{ matrix.compiler }}
          path: |
            linux/release/client.so
            linux/release/client.so.dbg
            linux/release/hl.so
            linux/release/hl.so.dbg
      
  win32:
    name: Win32
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x86
      
      - name: Build
        run: msbuild projects/vs2019/projects.sln -t:rebuild -property:Configuration=Release -maxcpucount:2
      
      - name: Deploy
        uses: actions/upload-artifact@v3.1.0
        with:
          name: Win32
          path: |
            projects/vs2019/Release/hl_cdll/client.dll
            projects/vs2019/Release/hl_cdll/client.pdb
            projects/vs2019/Release/hldll/hl.dll
            projects/vs2019/Release/hldll/hl.pdb
      
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build the project
        run: python setup.py build

      - name: Run tests
        run: python -m unittest discover
",0.1138287864534336,0.2629803641413294,Valid,0.3122999420032643,C++,
528,https://github.com/raiderrobert/django-multiurl,"name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/django-multiurl/
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@master
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Debug step
      run: ls -al
    - name: Build a binary wheel and a source tarball
      run: >-
        python3 -m
        build
        --sdist
        --wheel
        --outdir dist/
        .

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run application
        run: python multiurl.py

      - name: Run tests
        run: python -m unittest tests.py
",0.048813559,0.5045330780401935,Valid,0.5218446601941747,Python,
115,https://github.com/bk138/multivnc,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install gettext libwxgtk3.0-gtk3-dev libgtk-3-dev libgcrypt20-dev liblzo2-dev
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew uninstall --ignore-dependencies gnutls libgcrypt
          brew install wxwidgets
      - name: Install Windows Build Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        uses: johnwason/vcpkg-action@v4
        id: vcpkg
        with:
          pkgs: wxwidgets
          triplet: x64-windows
          token: ${{ github.token }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} ..
          cmake --build .
          cpack -V -C Debug
      - name: Archive Ubuntu Build Artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Debian Package
          path: build/*.deb
      - name: Archive MacOS Build Artifacts
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC MacOS Package
          path: build/*.dmg
      - name: Archive Windows Build Artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Windows Package
          path: build/*.exe
","name: Build and Test

on: [push, pull_request]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
    - name: Build with Gradle
      run: ./android/gradlew build
    - name: Set up CMake
      uses: lukka/get-cmake@v3.21.3
    - name: Create build directory
      run: mkdir build
    - name: Configure CMake
      run: cmake -S . -B build
    - name: Build with CMake
      run: cmake --build build

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
    - name: Run Gradle test
      run: ./android/gradlew test
    - name: Set up CMake
      uses: lukka/get-cmake@v3.21.3
    - name: Change to build directory
      run: cd build
    - name: Run CMake test
      run: cmake --build build --target test
",0.1368937998772253,0.4636485283877058,Valid,0.3996101520507027,C++,
5265,https://github.com/levelgraph/levelgraph,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Build
        run: npm run build
        continue-on-error: true

      - name: Run Tests
        run: npm test
        env:
          CI: true
",0.2432619212163096,0.481810491,Valid,0.7777777777777777,JavaScript,
1118,https://github.com/orleanscontrib/orleans.clustering.kubernetes,"name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3      
      
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0

      - name: Setup CRDs
        run: |
          kubectl apply -f src/Orleans.Clustering.Kubernetes/Definitions
          kubectl create ns orleans
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.100
      
      - name: Build
        run: dotnet build --configuration Release
      
      - name: Test
        run: dotnet test --configuration Release --no-build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Specify the .NET version needed

    - name: Restore dependencies
      run: dotnet restore Orleans.Clustering.Kubernetes.sln

    - name: Build
      run: dotnet build Orleans.Clustering.Kubernetes.sln --no-restore -c Release

    - name: Run tests
      run: dotnet test test/Orleans.Clustering.Kubernetes.Test/Orleans.Clustering.Kubernetes.Test.csproj --no-build -c Release
",0.215629522431259,0.6667054585267183,Valid,0.4160702667534157,C#,
1121,https://github.com/kirillosenkov/quickinfo,"# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - quickinfo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -f net6.0 -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'quickinfo'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_4255793CEF8E4277A4DC2790D451CC8F }}
          package: .
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x' # Assuming .NET 6 is the target framework version

    - name: Restore dependencies
      run: dotnet restore QuickInfo.sln

    - name: Build
      run: dotnet build QuickInfo.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test QuickInfo.sln --no-restore --verbosity normal
",0.1696045736064792,0.2952054759230692,Valid,0.58954434,C#,
74,https://github.com/calimero-project/calimero-core,"name: CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [17, 19]
    name: Java ${{ matrix.java }} sample

    steps:
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-core
        path: calimero-core
    - name: Checkout calimero-device
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-device
        path: calimero-device
    - name: Checkout calimero-rxtx
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-rxtx
        path: calimero-rxtx
    - name: Checkout calimero-server
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-server
        path: calimero-server
    - name: Checkout calimero-testnetwork
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-testnetwork
        path: calimero-testnetwork
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        path: calimero-core
    - name: setup
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
    - name: Grant execute permission for gradlew
      run: |
        chmod +x calimero-testnetwork/gradlew
        chmod +x calimero-core/gradlew
    - name: Start testnetwork
      run: |
        cd calimero-testnetwork
        ./gradlew build
        ./gradlew run --args ""../calimero-core/test/testnetwork-launcher/server-config.xml"" &
    - name: Build with Gradle
      run: |
        cd calimero-core
        ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Test with Gradle
      run: ./gradlew test
",0.3174464363795365,0.2805697918894199,Valid,0.6125886524822696,Java,
42,https://github.com/dotcms/core,"name: Sonar Qube Scan Gradle
on:
  push:
    branches:
      - master 
      - testing-sonarqube
    paths: ['dotCMS/**']
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - master
      - release-*
    paths: ['dotCMS/**']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_SCANNER_OPTS: ""-Xmx3g""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd dotCMS && ./gradlew generateDependenciesFromMaven && ./gradlew build sonarqube --info
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Copy artifacts
      run: |
        mkdir -p ./artifacts
        cp target/*.jar ./artifacts
        echo ""Artifacts copied to ./artifacts/""

    - name: Run unit tests
      run: mvn test",0.190429688,0.3386683359913188,Valid,0.2937853107344633,Java,
1123,https://github.com/gregtrevellick/cleanarchitecture,"name: .NET Core

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.201
    - name: Build with dotnet
      run: dotnet build --configuration Release
    - name: Test with dotnet
      run: dotnet test ./Clean.Architecture.sln --configuration Release
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '5.0.x' # Define the .NET version (modify as needed)
    - name: Restore dependencies
      run: dotnet restore
    - name: Build solution
      run: dotnet build --no-restore -c Release
    - name: Run tests (Unit Tests)
      run: dotnet test tests/Clean.Architecture.UnitTests/Clean.Architecture.UnitTests.csproj --no-build -c Release
    - name: Run tests (Integration Tests)
      run: dotnet test tests/Clean.Architecture.IntegrationTests/Clean.Architecture.IntegrationTests.csproj --no-build -c Release
    - name: Run tests (Functional Tests)
      run: dotnet test tests/Clean.Architecture.FunctionalTests/Clean.Architecture.FunctionalTests.csproj --no-build -c Release",0.1182197496522948,0.2925774790261845,Valid,0.6199186991869918,C#,
496,https://github.com/edsu/microdata,"name: Run test

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Upgrade setuptools
        run: |
          pip install --upgrade setuptools
      - name: Run tests
        run: python setup.py test
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies (if setup.py is present)
        if: contains(github.event.head_commit.modified_files, 'setup.py') || contains(github.event.head_commit.added_files, 'setup.py')
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Build
        run: python setup.py build
      - name: Run application (if applicable)
        if: contains(github.event.head_commit.modified_files, 'microdata.py') || contains(github.event.head_commit.added_files, 'microdata.py')
        run: python microdata.py
      - name: Run tests (if test.py is present)
        if: contains(github.event.head_commit.modified_files, 'test.py') || contains(github.event.head_commit.added_files, 'test.py')
        run: python -m unittest test.py
",0.1994535519125683,0.1618518933305301,Valid,0.7034969144872172,Python,
558,https://github.com/vanniktech/gradle-code-quality-tools-plugin,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test
",0.1494057724957555,0.5739082881956776,Valid,0.5753125064185138,Kotlin,
451,https://github.com/theonlypwner/crc32,"name: Test

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test:
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""pypy2.7""
          - ""pypy3.7""
          - ""pypy3.8""
          - ""pypy3.9""
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install Coveralls
      run: pip3 install coveralls
    - name: Test
      run: coverage run --branch --source=crc32 test.py
    - name: Upload coverage
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.python }}
        COVERALLS_PARALLEL: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
    - run: pip install --upgrade coveralls
    - run: coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Run Python application
      run: python crc32.py
    - name: Run tests
      run: python -m unittest discover -s . -p 'test*.py'
",0.0530035335689045,0.3136303987532555,Valid,0.4017788397716713,Python,
553,https://github.com/skydoves/lazybones,"name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Spotless check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: spotless
        run: ./gradlew spotlessCheck

  api_check:
    name: API check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: API check
        run: ./gradlew apiCheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle and wrapper
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.2820655191560244,0.3133642261984722,Valid,0.8475506756756757,Kotlin,
2095,https://github.com/python-greenlet/greenlet,"name: tests

on: [push, pull_request, workflow_dispatch]

env:
  PYTHONHASHSEED: 1042466059
  ZOPE_INTERFACE_STRICT_IRO: 1
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONDEVMODE: 1
  PYTHONFAULTHANDLER: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # repo settings.
  TWINE_USERNAME: __token__


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, ""3.10"", ""3.11"", ""3.12""]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U twine
    - name: Install greenlet (non-Mac)
      if: ${{ ! startsWith(runner.os, 'Mac') }}
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
      env:
        # Ensure we test with assertions enabled.
        # As opposed to the manylinux builds, which we distribute and
        # thus only use O3 (because Ofast enables fast-math, which has
        # process-wide effects), we test with Ofast here, because we
        # expect that some people will compile it themselves with that setting.
        CPPFLAGS: ""-Ofast -UNDEBUG""
    - name: Install greenlet (Mac)
      if: startsWith(runner.os, 'Mac')
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
        ls -l dist
        # Something in the build system isn't detecting that we're building for both,
        # so we're getting tagged with just x86_64. Force the universal2 tag.
        # (I've verified that the .so files are in fact universal, with both architectures.)
        # The macosx_11_0 tag is conservative: At this writing,
        # on GHA, Python 3.7/3.8/3.9/3.10  all produce that tag, while
        # 3.11/3.12 produce the less restrictive macosx_10_9 tag. (Locally on JAM's mac,
        # the official CPython builds produce 10_9 for everything from 3.9 onward.)
        wheel tags --remove --platform-tag macosx_11_0_universal2 dist/*whl
      env:
        # Unlike the above, we are actually distributing these
        # wheels, so they need to be built for production use.
        CPPFLAGS: ""-O3""
        # Build for both architectures
        ARCHFLAGS: ""-arch x86_64 -arch arm64""

    - name: Check greenlet build
      run: |
        ls -l dist
        twine check dist/*
    - name: Store greenlet wheel
      uses: actions/upload-artifact@v3
      with:
        name: greenlet-${{ runner.os }}-${{ matrix.python-version }}.whl
        path: dist/*whl
    - name: Test
      run: |
        python -VV
        python -c 'import greenlet._greenlet as G; assert G.GREENLET_USE_STANDARD_THREADING'
        python -m unittest discover -v greenlet.tests
    - name: Doctest
      run: |
        sphinx-build -b doctest -d docs/_build/doctrees2 docs docs/_build/doctest2
    - name: Publish package to PyPI (mac)
      # We cannot 'uses: pypa/gh-action-pypi-publish@v1.4.1' because
      # that's apparently a container action, and those don't run on
      # the Mac.
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && startsWith(runner.os, 'Mac')
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        twine upload --skip-existing dist/*

  CodeQL:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ""3.10""
          cache: 'pip'
          cache-dependency-path: setup.py
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          # Set the `CODEQL-PYTHON` environment variable to the Python executable
          # that includes the dependencies
          echo ""CODEQL_PYTHON=$(which python)"" >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp
          # Override the default behavior so that the action doesn't attempt
          # to auto-install Python dependencies
          setup-python-dependencies: false
      - name: Install greenlet
        run: |
          python setup.py build
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  manylinux:

    runs-on: ubuntu-latest
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]
        image:
          - manylinux_2_28_x86_64
          - manylinux2014_aarch64
          - manylinux2014_ppc64le
          - manylinux2014_s390x
          - manylinux2014_x86_64
          - musllinux_1_1_x86_64
          - musllinux_1_1_aarch64
    name: ${{ matrix.image }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build and test greenlet
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}
        run: bash ./make-manylinux
      - name: Store greenlet wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*whl
          name: ${{ matrix.image }}_wheels.zip
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dev-requirements.txt

    - name: Build
      run: python setup.py build

    - name: Run tests
      run: |
        python setup.py test
",0.0231032515687393,0.0759415836177728,Valid,0.3105628321341374,C++,
103,https://github.com/ff4j/ff4j,"name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install -ntp
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Test with Maven
      run: mvn -B test --file pom.xml",0.3567251461988304,0.7661499083536958,Valid,0.3529411764705882,Java,
5238,https://github.com/bokub/chalk-animation,"name: CI/CD

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm run lint

  test:
    name: Test (Node v${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 12, 16 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm test
      - run: npm run coverage
      - uses: codecov/codecov-action@v3
        if: matrix.node == 16
        with:
          files: ./coverage.lcov

  publish:
    name: Publish on npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - name: Publish on npm
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build --if-present

      - name: Run tests
        run: npm test
",0.0165094339622641,0.3405587618187816,Valid,1.0,JavaScript,
5206,https://github.com/isaacs/once,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js for tests
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies for tests
        run: npm ci
      - name: Run tests
        run: npm test
",0.2197943444730077,0.5919361213844461,Valid,0.6153846153846154,JavaScript,
79,https://github.com/billthefarmer/tuner,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test Workflow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Run unit tests
        run: ./gradlew test",0.1283547257876312,0.3382601670615067,Valid,1.0,Java,
607,https://github.com/guardian/toolargetool,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with gradlew
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon
",0.6729323308270677,0.7316654567353357,Valid,0.7142857142857143,Kotlin,
67,https://github.com/ukanth/afwall,"name: Android CI

on:
  push:
    branches: [ beta ]
  pull_request:
    branches: [ beta ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Gradle
      run: ./gradlew build
","name: Android CI

on:
  push:
    branches:
      - beta
  pull_request:
    branches:
      - beta

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test",0.304635761589404,0.4988747187859139,Valid,1.0,Java,
500,https://github.com/hackebrot/poyo,"name: Run checks

on:
  push:
    branches:
      - main
    tags:
      - ""[0-9]+.[0-9]+.[0-9]+""
      - ""[0-9]+.[0-9]+.[0-9]+rc[0-9]+""

  pull_request:
    branches:
      - main

jobs:
  tox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment:
          - ""py36""
          - ""py37""
          - ""flake8""

        include:
          - environment: ""py36""
            python: ""3.6""
          - environment: ""py37""
            python: ""3.7""
          - environment: ""flake8""
            python: ""3.7""

    container:
      image: python:${{ matrix.python }}

    steps:
      - uses: actions/checkout@master
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Run tox
        run: |
          tox -e ${{ matrix.environment }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: Run tests
        run: pytest tests/
",0.0916249105225483,0.4748797249532534,Valid,0.5182234432234432,Python,
208,https://github.com/cd3/libinterpolate,"name: CMake

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v3
    - uses: turtlebrowser/get-conan@main
      with:
        version: 1.59.0
        
    - name: Make Build Directory
      run: mkdir ${{github.workspace}}/build
      
    - name: Install Dependencies
      working-directory: ${{github.workspace}}/build
      run: conan install .. --build missing

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=""conan_toolchain.cmake""

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@v3.20.3

    - name: Create Build Directory
      run: mkdir build

    - name: Configure CMake
      run: cmake -B build -S .

    - name: Build
      run: cmake --build build --config Release

    - name: Run Tests
      run: cd build && ctest -C Release
",0.08358209,0.2425070445864258,Valid,0.4222508444505101,C++,
3420,https://github.com/ryuugan/sol-merger,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build

  testPublish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run test-docker

  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run lint

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test

  dryPublish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build
    - run: npm publish --dry-run
","name: Build and Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Dependencies
      run: npm install
    - name: Build
      run: npm run build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14.x'
    - name: Install Dependencies
      run: npm ci
    - name: Run Tests
      run: npm test
",0.2638981915606162,0.3207323452693616,Valid,0.8529411764705882,TypeScript,
1818,https://github.com/sodium-friends/sodium-native,"name: Build Status
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        node-version: [lts/*]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm test
",0.2718846549948506,0.5908224766755831,Valid,1.0,JavaScript,
3364,https://github.com/microsoft/fluent-ui-react,"name: Screener
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  test:
    name: Test visuals on Screener
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - run: yarn install
      - run: yarn test:visual
        env:
          CI: true
          SCREENER_API_KEY: ${{secrets.SCREENER_API_KEY}}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build the Project
        run: yarn build

      - name: Run Lint
        run: yarn lint

      - name: Run Tests
        run: yarn test
",0.03815261,0.6049433922585497,Valid,0.72,TypeScript,
124,https://github.com/ossrs/state-threads,"name: ""Test""

# @see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestbranchestags
on: [push, pull_request]

jobs:
  utest:
    name: actions-test-utest
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ################################################################
      # Tests
      - name: Build test image
        run: docker build --tag st:test -f Dockerfile.test .
      # For utest
      - name: Run ST utest
        run: docker run --rm st:test bash -c 'make linux-debug-utest && ./obj/st_utest'

  coverage:
    name: actions-test-coverage
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ################################################################
      # Tests
      - name: Build coverage image
        run: docker build --tag st:cov -f Dockerfile.cov .
      # For coverage, only allow push to branch(refs/heads/4.0release) or pull requests(refs/pull/2536/merge).
      - name: Run ST covergae
        if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/pull/') }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          # The hash of commit.
          ST_SHA=${{ github.sha }}
          # Note that the root of ST, must contains .git, for report fixing.
          ST_PROJECT=/st
          # The github.ref is, for example, refs/heads/4.0release
          ST_BRANCH=$(echo ${{ github.ref }}| awk -F 'refs/heads/' '{print $2}'| awk -F '/' '{print $1}')
          # The github.ref is, for example, refs/pull/2536/merge
          ST_PR=$(echo ${{ github.ref }}| awk -F 'refs/pull/' '{print $2}'| awk -F '/' '{print $1}')
          #
          echo ""For github.ref=${{ github.ref }}, github.sha=${{ github.sha }}""
          echo ""ST_BRANCH=$ST_BRANCH, ST_PR=$ST_PR, ST_SHA=$ST_SHA, ST_PROJECT=$ST_PROJECT""
          docker run --rm --env CODECOV_TOKEN=$CODECOV_TOKEN \
            --env ST_BRANCH=$ST_BRANCH --env ST_PR=$ST_PR --env ST_SHA=$ST_SHA --env ST_PROJECT=$ST_PROJECT \
            st:cov bash -c 'make linux-debug-gcov && ./obj/st_utest && bash auto/codecov.sh'



","name: CI Build and Test

on:
  push:
    branches:
      - $srs
  pull_request:
    branches:
      - $srs

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Docker Image for Tests
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile.test
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build the application with Makefile
        run: make
      - name: Run the tests
        run: make test
",0.0504959422903516,0.3395692892427402,Valid,0.26634375497668,C++,
1054,https://github.com/cwensley/pablodraw,"# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches: [main]
    tags: [""*""]
  pull_request:
    branches: [main]

env:
  DotNetVersion: ""7.0.x""
  BuildConfiguration: ""Release""
  BuildParameters: ""/clp:NoSummary /p:Configuration=Release /p:BuildVersion=${{ github.run_id }} /p:BuildBranch=${{ github.ref }}""

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-windows.binlog

      - name: Build PabloDraw.Console
        run: dotnet publish Source/PabloDraw.Console/PabloDraw.Console.cxproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw.console-windows.binlog
        
      - name: Build msi
        run: dotnet build ${{ env.BuildParameters }} Source/PabloDraw.WindowsInstaller/PabloDraw.WindowsInstaller.wixproj

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-binaries-x64
          path: artifacts/publish/${{ env.BuildConfiguration }}/Windows/*

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-installer-x64
          path: artifacts/installer/${{ env.BuildConfiguration }}/Windows/*.msi

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-linux.binlog
        
      - name: Create gzip
        run: tar -czvf pablodraw-linux-x64.tar.gz -C artifacts/publish/${{ env.BuildConfiguration }}/Linux .

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-linux-binaries-x64
          path: pablodraw-linux-x64.tar.gz

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 13.1

      - name: Import code signing certificate
        if: github.event_name != 'pull_request'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVID_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.DEVID_CERTIFICATE_P12_PASSWORD }}

      - name: Enable code signing
        if: github.event_name != 'pull_request'
        run: echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableCodeSigning=True"" >> $GITHUB_ENV

      - name: Set notarization credentials
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --store-password-in-keychain-item ""AC_PASSWORD"" -u ""${{ secrets.AC_USERNAME }}"" -p ""${{ secrets.AC_PASSWORD }}""
          echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableNotarization=True"" >> $GITHUB_ENV

      - name: Build PabloDraw
        run: sudo dotnet build Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-mac.binlog

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-mac
          path: artifacts/publish/${{ env.BuildConfiguration }}/Mac/*.dmg

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  update-release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2

      - uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          files: |
            **/*.msi
            **/*.dmg
            **/*.tar.gz
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test-job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
    - name: Restore Dependencies
      run: dotnet restore ./Source/Pablo.sln
    - name: Build
      run: dotnet build ./Source/Pablo.sln --configuration Release --no-restore
    - name: Test
      run: dotnet test ./Source/Pablo.UnitTests/Pablo.UnitTests.csproj --no-build --verbosity normal",0.046957175,0.1085930655365921,Valid,0.3754903507779868,C#,
3383,https://github.com/seth-brown/formd,"name: Build Status

on: [push]

jobs:
  github:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v1
      - name: setup node
        uses: actions/setup-node@v1
      - name: install deps
        run: |
          npm install
      - name: run tests
        run: |
          npm test
      - name: build
        run: |
          npm run build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm test
",0.1680365296803653,0.3237370710196726,Valid,0.9520697167755992,TypeScript,
4242,https://github.com/jermbo/sampleapis,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: cd client
    - run: npm run build --if-present
","name: Build and Test Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test-client:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install client dependencies
      run: npm install
    - name: Build client application
      run: npm run build
    - name: Run client tests
      run: npm test
  build-and-test-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16
    - name: Install server dependencies
      run: npm install
    - name: Run server tests
      run: npm test
",0.214123007,0.5276856596813415,Valid,0.6666666666666666,JavaScript,
69,https://github.com/banmanagement/banmanager,"name: Java CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0' # weekly

jobs:
  build:
    runs-on: ubuntu-latest
    name: Java ${{ matrix.java }} - ${{ matrix.storageType }}
    strategy:
      matrix:
        include:
          - storageType: mariadb
            java: 8
          - storageType: h2
            java: 8
          - storageType: mariadb
            java: 11
          - storageType: h2
            java: 11

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        env:
          STORAGE_TYPE: ${{ matrix.storageType }}
        run: ./gradlew build

      - name: Publish to Maven Central
        # only publish once
        if: github.ref == 'refs/heads/master' && matrix.java == '8' && matrix.storageType == 'h2'
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEUSERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEPASSWORD }}
          ORG_GRADLE_PROJECT_signingKey : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
          ORG_GRADLE_PROJECT_signingPassword : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
        run: |
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon",0.1701795472287275,0.4141889246359774,Valid,0.5051982251951644,Java,
201,https://github.com/amadvance/tommyds,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: make all check
","name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Make environment
        run: sudo apt-get install -y make

      - name: Build project using Make
        run: make

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up test environment
        run: | 
          chmod +x makescan.sh
          chmod +x makecov.sh

      - name: Run tests
        run: | 
          ./makescan.sh
          ./makecov.sh
",0.1065088757396449,0.1104133503101263,Valid,0.4444444444444444,C++,
162,https://github.com/cycling74/gen-plugin-export,"name: Release

on:
  create:
    tags:
      - v*
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: package
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        PACKAGE_REV=`echo $GITHUB_SHA | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        mkdir -p $PACKAGE_NAME
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        for f in *.md; do [ -e ""$f"" ] && cp ""$f"" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -e CMakeLists.txt ]; then cp CMakeLists.txt $PACKAGE_NAME; fi
        if [ -d code ]; then cp -r code $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d extensions ]; then cp -r extensions $PACKAGE_NAME; fi
        if [ -d externals ]; then cp -r externals $PACKAGE_NAME; fi
        if [ -d extras ]; then cp -r extras $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi
        if [ -d init ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d interfaces ]; then cp -r interfaces $PACKAGE_NAME; fi
        if [ -d java-classes ]; then cp -r java-classes $PACKAGE_NAME; fi
        if [ -d java-doc ]; then cp -r java-doc $PACKAGE_NAME; fi
        if [ -d javascript ]; then cp -r javascript $PACKAGE_NAME; fi
        if [ -d jsextensions ]; then cp -r jsextensions $PACKAGE_NAME; fi
        if [ -d jsui ]; then cp -r jsui $PACKAGE_NAME; fi
        if [ -d media ]; then cp -r media $PACKAGE_NAME; fi
        if [ -d misc ]; then cp -r misc $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d script ]; then cp -r script $PACKAGE_NAME; fi
        if [ -d support ]; then cp -r support $PACKAGE_NAME; fi
        if [ -d source ]; then cp -r source $PACKAGE_NAME; fi
        if [ -d tests ]; then cp -r tests $PACKAGE_NAME; fi

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}
        path: ${{ github.event.repository.name }}","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Install dependencies
      run: mvn -B dependency:go-offline

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test
",0.1159793814432989,0.1773504504841221,Valid,0.0234134319162045,C++,
497,https://github.com/ines/spacymoji,"name: tests

on:
  push:
    paths-ignore:
      - ""*.md""
  pull_request:
    types: [opened, synchronize, reopened, edited]
    paths-ignore:
      - ""*.md""

env:
  MODULE_NAME: 'spacymoji'
  RUN_MYPY: 'false'

jobs:
  tests:
    name: Test
    if: github.repository_owner == 'explosion'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python_version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        include:
          - os: windows-2019
            python_version: ""3.6""
          - os: ubuntu-20.04
            python_version: ""3.6""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64

      - name: Build sdist
        run: |
          python -m pip install -U build pip setuptools
          python -m pip install -U -r requirements.txt
          python -m build --sdist

      - name: Run mypy
        shell: bash
        if: ${{ env.RUN_MYPY == 'true' }}
        run: |
          python -m mypy $MODULE_NAME

      - name: Delete source directory
        shell: bash
        run: |
          rm -rf $MODULE_NAME

      - name: Uninstall all packages
        run: |
          python -m pip freeze > installed.txt
          python -m pip uninstall -y -r installed.txt

      - name: Install from sdist
        shell: bash
        run: |
          SDIST=$(python -c ""import os;print(os.listdir('./dist')[-1])"" 2>&1)
          python -m pip install dist/$SDIST

      - name: Test import
        shell: bash
        run: |
          python -c ""import $MODULE_NAME"" -Werror

      - name: Install test requirements
        run: |
          python -m pip install -U -r requirements.txt

      - name: Run tests
        shell: bash
        run: |
          python -m pytest --pyargs $MODULE_NAME -Werror
","name: Build and Test Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        python setup.py install

    - name: Build
      run: python setup.py build

    - name: Run tests
      run: python -m unittest discover spacymoji/tests
",0.0984375,0.2340522459769771,Valid,0.4360454233602574,Python,
577,https://github.com/wrbug/developerhelper,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.6390685640362225,0.3856692472036827,Valid,1.0,Kotlin,
5270,https://github.com/kmalakoff/knockback,"name: CI
on:
  push:
    branches:
      - master
jobs:
  test:
    name: Node.js ${{ matrix.node-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [""latest""]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: git config --global user.name ""Github Actions""
      - run: git config --global user.email ""actions@users.noreply.github.com""
      - run: npm uninstall node-version-use -g
      - run: npm install node-version-use -g
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm test
      - run: npm run test:engines
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'
        cache: 'npm'

    - name: Install Dependencies
      run: npm install

    - name: Lint with ESLint
      run: npm run lint
      if: always() && success()

    - name: Build
      run: npm run build
      if: always() && success()

    - name: Run Tests with Mocha
      run: npm test
      if: always() && success()",0.172876304023845,0.4742410312248529,Valid,1.0,JavaScript,
606,https://github.com/afollestad/vvalidator,"name: Android CI
on:
  push:
    branches:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        env:
          BINTRAY_ORG: ${{ secrets.BINTRAY_ORG }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        run: ./gradlew build check","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build --no-daemon

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Test with Gradle
      run: ./gradlew test --no-daemon",0.1482035928143712,0.3311760216534105,Valid,0.7083333333333334,Kotlin,
580,https://github.com/gridstone/debugdrawer,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Setup variables for versions
      run: |
        VERSION_NAME=`cat gradle.properties | grep ""VERSION_NAME"" | cut -d'=' -f2`
        IS_SNAPSHOT=$( [[ ""$VERSION_NAME"" == *""SNAPSHOT""* ]] && echo ""true"" || echo ""false"" )
        IS_NEW_VERSION=$( git tag -l | grep -q ""^$VERSION_NAME$"" && echo ""false"" || echo ""true"" )
        echo ""VERSION_NAME=$VERSION_NAME"" >> $GITHUB_ENV
        echo ""IS_SNAPSHOT=$IS_SNAPSHOT"" >> $GITHUB_ENV
        echo ""IS_NEW_VERSION=$IS_NEW_VERSION"" >> $GITHUB_ENV

    - name: Generate release notes
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false'  }}
      run: ./gradlew -q getChangelog >> RELEASE_NOTES.md

    - name: Release on Github
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' && env.IS_NEW_VERSION == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION_NAME }}
        body_path: RELEASE_NOTES.md
        files: |
          debugdrawer/build/outputs/aar/debugdrawer-debug.aar
          debugdrawer-leakcanary/build/outputs/aar/debugdrawer-leakcanary-release.aar
          debugdrawer-okhttp-logger/build/outputs/aar/debugdrawer-okhttp-logger-release.aar
          debugdrawer-retrofit/build/outputs/aar/debugdrawer-retrofit-release.aar
          debugdrawer-timber/build/outputs/aar/debugdrawer-timber-release.aar

    - name: Publish to sonatype
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo signingInMemoryKeyPassword=""${GPG_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        echo signingInMemoryKey=""${GPG_KEY}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralUsername=""${MAVEN_CENTRAL_USERNAME}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralPassword=""${MAVEN_CENTRAL_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        ./gradlew androidSourcesJar androidJavadocJar publish --info --no-daemon --no-parallel
      env:
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GPG_KEY: ${{ secrets.GPG_KEY }}
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        
    - name: Close and release repository
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' }}
      run: |
        ./gradlew closeAndReleaseRepository --info --no-daemon --no-parallel
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.2138121546961326,0.1770262613535702,Valid,0.3614051470650461,Kotlin,
105,https://github.com/chipsec/chipsec,"name: Run tests

on: [push, pull_request]

jobs:
  build-linux-km:
    name: Linux kernel module
    strategy:
      matrix:
        distro:
          - {name: ""alpine"", tag: ""3.18"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.17"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.16"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.15"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.14"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-zen"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""base"", image_prefix: ""docker.io/library/""}
          - {name: ""centos"", tag: ""stream9"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""stream8"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""7"", image_prefix: ""quay.io/centos/""}
          - {name: ""debian"", tag: ""bookworm-slim"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""11"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""10"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""23.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""22.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""20.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""18.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""16.04"", image_prefix: ""docker.io/library/""}
    runs-on: ubuntu-22.04
    container:
      image: docker://${{ matrix.distro.image_prefix }}${{ matrix.distro.name }}:${{ matrix.distro.tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Alpine dependencies
      if: matrix.distro.name == 'alpine'
      run: |
        apk --no-cache --update add linux${{ matrix.distro.variant }} linux${{ matrix.distro.variant }}-dev nasm

        # DKMS is not yet packaged in Alpine
        apk --no-cache --update add bash gcc git make
        git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
        make -C /opt/dkms install

    - name: Install Arch Linux dependencies
      if: matrix.distro.name == 'archlinux'
      run: |
        pacman -Syu --noconfirm dkms linux${{ matrix.distro.variant }}-headers nasm

    - name: Install CentOS dependencies
      if: matrix.distro.name == 'centos'
      run: |
        if [ ""${{ matrix.distro.tag }}"" = 7 ] ; then
            yum install -y kernel kernel-devel nasm
            yum install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream8 ] ; then
            dnf install -y --enablerepo=powertools kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream9 ] ; then
            dnf install -y --enablerepo=crb kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        fi

        # DKMS is not longer packaged in CentOS Stream
        if ! command -v dkms > /dev/null 2>&1 ; then
            git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
            make -C /opt/dkms install
        fi

    - name: Install Debian dependencies
      if: matrix.distro.name == 'debian'
      run: |
        apt-get update -q
        apt-get install -qqy dkms nasm

    - name: Install Ubuntu dependencies
      if: matrix.distro.name == 'ubuntu'
      run: |
        apt-get update -q
        apt-get install -qqy dkms linux-headers-generic nasm

    - name: Compute packaged kernel version
      id: versions
      run: |
        KERNEL_VER=''
        if [ ""${{ matrix.distro.name }}"" = alpine ] ; then
            # Parse ""lib/modules/5.15.53-0-lts/build""
            KERNEL_VER=""$(apk info --contents ""linux${{ matrix.distro.variant }}-dev"" | sed -n 's:^lib/modules/\([^/][^/]*\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = archlinux ] ; then
            # Parse ""/usr/lib/modules/5.18.0-arch1-1/build/""
            KERNEL_VER=""$(pacman -Qql ""linux${{ matrix.distro.variant }}-headers"" | sed -n 's:^/usr/lib/modules/\([^/]\+\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = centos ] ; then
            # Parse ""Source RPM  : kernel-3.10.0-1160.71.1.el7.src.rpm""
            KERNEL_VER=""$(LANG=C rpm -qi kernel-devel | sed -n 's/^Source RPM *: kernel-\(.*\).src.rpm$/\1.x86_64/p' | tail -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = debian ] ; then
            # Parse ""Depends: linux-headers-5.10.0-15-amd64 (= 5.10.120-1)""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-amd64 | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = ubuntu ] ; then
            # Parse ""Depends: linux-headers-5.15.0-40-generic""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-generic | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        fi
        if [ -z ""${KERNEL_VER}"" ] ; then
            echo >&2 ""Error: no kernel package found""
            exit 1
        fi
        echo ""Found packaged kernel ${KERNEL_VER}""
        echo ""KERNEL_VER=${KERNEL_VER}"" >> ""$GITHUB_ENV""

        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""CHIPSEC_MODULE_VER=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_ENV""

        echo ""kernel=${KERNEL_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""chipsec=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""uname_m=$(uname -m)"" >> ""$GITHUB_OUTPUT""

    - name: Build Linux driver with DKMS for ${{ steps.versions.outputs.kernel }}
      run: |
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        dkms add drivers/linux
        dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Show dkms status
      run: dkms status

    - name: Show modinfo on the kernel module
      id: modinfo
      run: |
        MODULE=""$(ls -1 ""/var/lib/dkms/chipsec/${CHIPSEC_MODULE_VER}/${KERNEL_VER}/$(uname -m)/module/chipsec.ko""* | head -n1)""
        echo ""module_path=${MODULE}"" >> ""$GITHUB_OUTPUT""
        modinfo ""${MODULE}""

    - name: Upload Linux driver from ${{ steps.modinfo.outputs.module_path }}
      uses: actions/upload-artifact@v3
      with:
        name: chipsec-${{ steps.versions.outputs.chipsec }}.${{ matrix.distro.name }}-${{ matrix.distro.tag }}${{ matrix.distro.variant }}-${{ steps.versions.outputs.kernel }}.${{ steps.versions.outputs.uname_m }}
        path: ${{ steps.modinfo.outputs.module_path }}
        if-no-files-found: error

  windows_driver:
    name: Windows driver matrix
    strategy:
      matrix:
        versions:
          - {window: ""2019"", python: ""3.11""}
          - {window: ""2019"", python: ""3.10""}
          - {window: ""2019"", python: ""3.9""}
          - {window: ""2019"", python: ""3.8""}
          - {window: ""2019"", python: ""3.7""}
          
          - {window: ""2022"", python: ""3.11""}
          - {window: ""2022"", python: ""3.10""}
          - {window: ""2022"", python: ""3.9""}
          - {window: ""2022"", python: ""3.8""}
          - {window: ""2022"", python: ""3.7""}
          
    runs-on: windows-${{ matrix.versions.window }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - name: Install dependencies
      shell: bash
      run: pip install -r windows_requirements.txt

    - name: Build Windows driver
      shell: bash
      run: python setup.py build_ext -i

    - name: Upload Windows Main driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/chipsec/x64
        if-no-files-found: error
    
    - name: Upload Windows PCI Filter driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/pcifilter/x64
        if-no-files-found: error

    - name: Run Python unit tests
      shell: bash
      run: python -m unittest
      
    - name: Run xml cfg checker
      shell: bash
      run: |
        python tests/cfg_checker.py
        
    - name: Run chipsec tests
      shell: bash
      run: |
        python chipsec_util.py cpu info

  ubuntu-test:
    name: Test on Ubuntu matrix
    strategy:
      matrix:
        versions:
          - {ubuntu: ""22.04"", python: ""3.11""}
          - {ubuntu: ""22.04"", python: ""3.10""}
          - {ubuntu: ""22.04"", python: ""3.9""}
          - {ubuntu: ""22.04"", python: ""3.8""}
          - {ubuntu: ""22.04"", python: ""3.7""}

          - {ubuntu: ""20.04"", python: ""3.11""}
          - {ubuntu: ""20.04"", python: ""3.10""}
          - {ubuntu: ""20.04"", python: ""3.9""}
          - {ubuntu: ""20.04"", python: ""3.8""}
          - {ubuntu: ""20.04"", python: ""3.7""}
          
    runs-on: ubuntu-${{ matrix.versions.ubuntu }}

    steps:
    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - uses: actions/checkout@v3

    - name: Patch chipsec_main to return true even when some module failed
      run: |
        sed 's/^        return modules_failed$/        return 0/' -i chipsec_main.py

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qqy dkms nasm python3-setuptools
        pip install distro
        pip install -r linux_requirements.txt
        sudo pip install -r linux_requirements.txt

    - name: Build the driver with Python
      run: python3 setup.py build_ext -i

    - name: Build the driver with DKMS
      run: |
        KERNEL_VER=""$(uname -r)""
        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        sudo dkms add drivers/linux
        sudo dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Run Python unit tests
      run: |
        python3 -m unittest
        
    - name: Run xml cfg checker
      run: |
        python3 tests/cfg_checker.py

    - name: pylint pilot for modules folder
      run: |
        pylint chipsec/modules

    - name: Install chipsec
      run: sudo python3 setup.py install

    - name: Run chipsec_main test
      run: |
        PYTHONEXE=""$(which python)""
        CHIPSECEXIT=""$($(sudo ${PYTHONEXE} chipsec_main.py -p PMC_I440FX 1>&2); echo $?)""
        if echo ""0 1 2 4 8"" | grep -qw $CHIPSECEXIT; then $(exit 0); else $(exit $CHIPSECEXIT); fi

","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f windows_requirements.txt ]; then pip install -r windows_requirements.txt; fi
          if [ -f linux_requirements.txt ]; then pip install -r linux_requirements.txt; fi

      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Build the application
        run: python setup.py build

      - name: Run tests
        run: pytest
",0.0355770836813095,0.074962123,Valid,0.3505916769793099,Python,
492,https://github.com/ajcr/rolling,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run setup.py
      run: python setup.py install

    - name: Run tests
      run: pytest tests

",0.5102717031146454,0.5356803901815743,Valid,0.7551200176172649,Python,
343,https://github.com/jdiaz5513/capnp-ts,"name: ci
on:
  pull_request:
  push:
    branches: master
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - ""12""
          - ""14""
          - ""16""
          - ""17""
    name: Test on node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install capnproto libcapnp-dev
          npm i -g npm@latest
          npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
","name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Fetch all history for .GitVersion.yml (if needed)

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Run tests
      run: npm test
",0.2962962962962963,0.6410112069156377,Valid,1.0,TypeScript,
1794,https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation,"name: demo

on:
  push:
    branches: [ main ]
    paths:
    - examples/demo/**
  pull_request:
    branches: [ main ]
    paths:
    - examples/demo/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Test demo
      run: make test
      working-directory: examples/demo
      timeout-minutes: 10
","name: .NET Build and Test Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
",0.1541899441340782,0.4461243850568729,Valid,0.4347826086956521,C++,
5260,https://github.com/rii-mango/nifti-reader-js,"# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: test-linux-node18

on:
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: ""npm""
      - run: rm package-lock.json
      - run: npm install
      - run: npm run build --if-present
      - run: npm run test
      - run: npm run test-js","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test
",0.2274019329164298,0.5670116798498843,Valid,0.6666666666666666,JavaScript,
5247,https://github.com/jkphl/grunt-svg-sprite,"name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  FORCE_COLOR: 2

jobs:
  test:
    name: Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [12, 14, 16, 18]

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install npm dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Upload failed tests' screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: grunt-svg-sprite-ci-${{ matrix.node }}-${{ matrix.os }}-${{ github.sha }}
          path: tmp/
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install
    
    - name: Run Grunt tasks
      run: npx grunt

    - name: Run tests
      run: npm test
",0.2388268156424581,0.3753870592445483,Valid,0.7978723404255319,JavaScript,
89,https://github.com/spring-guides/gs-uploading-files,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Grant execute permission for mvnw
      run: chmod +x ./mvnw

    - name: Build with Maven Wrapper
      run: ./mvnw clean install

    - name: Run Tests
      run: |
        if [ -e ./gradlew ]; then
          ./gradlew test
        fi
        if [ -e ./mvnw ]; then
          ./mvnw test
        fi
",0.2778816199376947,0.5926584187194448,Valid,0.7641509433962264,Java,
45,https://github.com/netflix/archaius,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - 2.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8' # For publishing build with 8 for compatibility
          distribution: 'zulu'
      - uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v3
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - $2.x
  pull_request:
    branches:
      - $2.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test",0.2378190255220417,0.3664838526835086,Valid,0.7692307692307693,Java,
3380,https://github.com/wessouza/calendar-base,"# ⚠️ WARNING
# This file is auto-generated by https://github.com/WesSouza/wes-cli

name: Lint, Type Check, Test, Build

on:
  pull_request:
  push:

jobs:
  check:
    name: Using Node ${{ matrix.node }}/${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ['16.x', '18.x']
        os: [ubuntu-latest, macOS-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install wes-cli
        run: |
          npm i -g wes-cli@3.0.0
          wes install

      - name: Use Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Lint
        run: yarn lint

      - name: Check Types
        run: yarn check:types

      - name: Test
        run: yarn test:ci

      - name: Build
        run: yarn build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install
      working-directory: .wes-defaults/local

    - name: Build Project
      run: npm run build
      working-directory: .wes-defaults/local

    - name: Run Tests
      run: npm test
      working-directory: .wes-defaults/local
      if: github.workspace == '.wes-defaults/local'",0.1938983050847457,0.4796704917970992,Valid,0.6478260869565218,TypeScript,
46,https://github.com/find-sec-bugs/find-sec-bugs,"# CI Task using https://github.com/jwgmeligmeyling/spotbugs-github-action

name: Java CI with SpotBugs

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run: mvn clean install -DskipTests com.github.spotbugs:spotbugs-maven-plugin:3.1.12:spotbugs
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'","name: Build and Test Java Project

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/LICENSE'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
      - '**/LICENSE'

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Test with Maven
        run: mvn -B test --file pom.xml
",0.2358722358722358,0.5360805362018433,Valid,0.2654867256637168,Java,
4768,https://github.com/wkich/creevey,"name: Build and Test
on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: install
        run: yarn
      - name: lint
        run: yarn lint
      - name: build
        run: yarn build
      - name: pack
        run: yarn pack
      - uses: actions/upload-artifact@v2
        with:
          name: creevey
          path: creevey-*.tgz
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: checkout lfs
        run: git lfs checkout
      - name: install
        run: yarn
      - name: unit tests
        run: yarn test:unit
      - name: storybook
        run: yarn start:storybook &
      - name: creevey
        run: yarn creevey:github
      - uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Run Build
        run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test
",0.2913021101389603,0.4874357476931367,Valid,0.6205533596837944,JavaScript,
95,https://github.com/googlemaps/android-maps-utils,"# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow that runs tests on every new pull request
name: Run unit tests

on:
  repository_dispatch:
    types: [test]
  push:
    branches-ignore: ['gh-pages']
  pull_request:
    branches-ignore: ['gh-pages']
  workflow_dispatch:
  workflow_call: 

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1.1.0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build modules
      run: ./gradlew build jacocoTestReport --stacktrace
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Test with Gradle
        run: ./gradlew test --no-daemon
",0.2384246939861628,0.3185733198896943,Valid,0.5555555555555556,Java,
1774,https://github.com/itsmattkc/legoislandrebuilder,"name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Visual C++ 6.0
      run: |
        git clone --depth 1 https://github.com/itsmattkc/MSVC600

    - name: Build
      shell: cmd
      run: |
        call MSVC600/VC98/Bin/vcvars32.bat
        msdev Rebuilder.dsw /make

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.1
      with:
        path:
          Rebuilder/Release/Rebuilder.exe

    - name: Upload to Releases
      shell: bash
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TRAVIS_REPO_SLUG: itsmattkc/LEGOIslandRebuilder
        TRAVIS_COMMIT: ${{ github.sha }}
      run: |
        curl -fLOSs --retry 2 --retry-delay 60 https://github.com/probonopd/uploadtool/raw/master/upload.sh
        ./upload.sh Rebuilder/Release/Rebuilder.exe
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Run tests
      run: |
        cd build
        ctest
",0.1718009478672985,0.3757559043910293,Valid,0.3207303974221268,C++,
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Run tests
        run: ./gradlew test --no-daemon
",0.1446740858505564,0.1625573572578436,Valid,0.4683055517375505,Kotlin,
5179,https://github.com/gloriajs/gloria,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn install
      - run: npm test

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
      - run: yarn install
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Run ESLint
      run: npx eslint .

    - name: Run Prettier Check
      run: npx prettier --check .

    - name: Execute tests
      run: npm test
",0.202339986235375,0.39816801,Valid,0.7941176470588236,JavaScript,
3404,https://github.com/viadee/sonarquest,"# This is the CI Action for SonarQuest to automatically build Docker images on master push and release.

name: SonarQuest-CI

# Controls when the action will run. 
on:
  push:
  release:
    types: [ released, prereleased, edited ]
  workflow_dispatch:

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build backend with Maven
        run: mvn -f ./sonarQuest-backend/pom.xml --batch-mode --update-snapshots verify 
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image - Release
        uses: docker/build-push-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          context: ./sonarQuest-backend
          push: true
          tags: | 
            ghcr.io/viadee/sonarquest-backend:latest
            ghcr.io/viadee/sonarquest-backend:${{ github.event.release.tag_name }}
      - name: Build and push Docker image - Nightly
        uses: docker/build-push-action@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          context: ./sonarQuest-backend
          push: true
          tags: ghcr.io/viadee/sonarquest-backend:nightly
            
          
        
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup node.js
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - name: Install dependencies
      run: |
        cd sonarQuest-frontend
        npm ci
    - name: Build Angular app
      run: |
        cd sonarQuest-frontend
        npm run build:prod
    - name: Test
      run: |
        cd sonarQuest-frontend
        npm test
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image - Release
      uses: docker/build-push-action@v2
      if: ${{ github.event_name == 'release' }}
      with:
        context: ./sonarQuest-frontend
        push: true
        tags: | 
            ghcr.io/viadee/sonarquest-frontend:latest
            ghcr.io/viadee/sonarquest-frontend:${{ github.event.release.tag_name }}
    - name: Build and push Docker image - Nightly
      uses: docker/build-push-action@v2
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      with:
        context: ./sonarQuest-frontend
        push: true
        tags: ghcr.io/viadee/sonarquest-frontend:nightly
  
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  backend-job:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    - name: Build backend with Maven
      run: ./mvnw -B package --file sonarQuest-backend/pom.xml
    - name: Run backend tests with Maven
      run: ./mvnw test --file sonarQuest-backend/pom.xml
  frontend-job:
    runs-on: ubuntu-latest
    needs: backend-job
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install dependencies
      run: npm install --prefix sonarQuest-frontend
    - name: Build frontend
      run: npm run build --prefix sonarQuest-frontend
    - name: Run frontend tests
      run: npm run test --prefix sonarQuest-frontend
",0.1995720676911107,0.3587644186509353,Valid,0.4709440029940323,TypeScript,
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Test with Gradle
        run: ./gradlew test
",0.0434622467771639,0.2189315803224132,Valid,0.515719697,Java,
5231,https://github.com/sunesimonsen/ukkonen,"name: Checks

on: [push]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12, 14, 16, 18, 20]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: yarn lint
        if: ${{ matrix.node-version == 18 }}
      - run: npm test
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install Dependencies
      run: npm install
    - name: Run Lint
      run: npm run lint
    - name: Build the Application
      run: npm run build
    - name: Run Tests
      run: npm test
",0.032786885,0.6032926880757269,Valid,1.0,JavaScript,
621,https://github.com/touk/krush,"name: Snapshot
on:
  push:
    branches:
      - 'sonatype*'
      - 'master'

jobs:
  build:
    name: Build and upload snapshot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Build project
        run: ./gradlew build --stacktrace
      - name: Publish package
        run: ./gradlew publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Test with Gradle
        run: ./gradlew test
",0.2232486528098537,0.4971616706154825,Valid,0.7238372093023255,Kotlin,
3355,https://github.com/tb/ng2-nouislider,"name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install
      - run: pnpm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Install Dependencies
        run: pnpm install
      - name: Build Projects
        run: pnpm run build
      - name: Run Linter
        run: pnpm run lint
      - name: Run Tests
        run: pnpm run test
",0.2302483069977426,0.428327515441635,Valid,0.8181818181818182,TypeScript,
60,https://github.com/lmax-exchange/disruptor,"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 17 ]
    name: Java ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: libs-and-reports
          path: |
            build/libs
            build/reports
","name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.4282238442822384,0.6048234192756698,Valid,1.0,Java,
3385,https://github.com/reedsy/quill-cursors,"name: Test

on:
  push:
    branches:
    - main
    - lint
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://npm.pkg.github.com'
    - name: Install
      # Skip post-install to avoid malicious scripts stealing PAT
      run: npm install --ignore-script
      env:
        # GITHUB_TOKEN can't access packages hosted in private repos,
        # even within the same organisation
        NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Post-install
      run: npm rebuild && npm run prepare --if-present
    - name: Build
      run: npm run build
    - name: Test
      run: npm test
","name: Build and Test

# Triggers the workflow on push or pull request events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Run ESLint
      run: npx eslint .

    - name: Build
      run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Run Tests
      run: npm test
",0.2415280345040049,0.6493931502294363,Valid,1.0,TypeScript,
5240,https://github.com/notninja/europa,"name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        node: [ 14 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: |
          npm install
          npm run bootstrap
      - name: Build packages
        run: |
          npm run build
          npm run bootstrap
      - name: Lint packages
        run: npm run lint
      - name: Test packages
        run: npm test
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run Tests
      run: npm test
",0.4550819672131148,0.7223397229530326,Valid,0.7888888888888889,JavaScript,
570,https://github.com/vanniktech/lint-rules,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.1946202531645569,0.5792532801616538,Valid,0.5753125064185138,Kotlin,
37,https://github.com/marytts/marytts,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 12 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew build

      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.1232704402515723,0.4134439137087471,Valid,1.0,Java,
1038,https://github.com/logosbible/bsdiff.net,"name: Build

on: [push, pull_request]

env:
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:BuildNumber=${{ github.run_number }}
      - name: Test
        run: dotnet test --configuration Release --no-build
      - name: Pack
        run: dotnet pack --configuration Release --no-build
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NuGet Packages
          path: '**/*.nupkg'
          if-no-files-found: error
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore BsDiff.sln

    - name: Build solution
      run: dotnet build BsDiff.sln --configuration Release --no-restore

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore tests/BsDiff.Tests/BsDiff.Tests.csproj

    - name: Build test project
      run: dotnet build tests/BsDiff.Tests/BsDiff.Tests.csproj --configuration Release --no-restore

    - name: Run tests
      run: dotnet test tests/BsDiff.Tests/BsDiff.Tests.csproj --no-build --verbosity normal",0.1781668383110195,0.5432188937319329,Valid,0.6873496264404204,C#,
3945,https://github.com/react-component/upload,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: cache package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: create package-lock.json
        run: npm i --package-lock-only

      - name: hack for singe file
        run: |
          if [ ! -d ""package-temp-dir"" ]; then
            mkdir package-temp-dir
          fi
          cp package-lock.json package-temp-dir

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: install
        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
        run: npm ci
  
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: lint
        run: npm run lint

    needs: setup
  
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: compile
        run: npm run compile

    needs: setup
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: coverage
        run: npm test -- --coverage && bash <(curl -s https://codecov.io/bash)

    needs: setup
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Linter
        run: npm run lint

      - name: Build
        run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test",0.1297968397291196,0.2334590432670489,Valid,0.2564102564102564,JavaScript,
584,https://github.com/afollestad/recyclical,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
","name: CI Build and Test

on:
  push:
    branches: [""master""]
  pull_request:
    branches: [""master""]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run tests
      run: ./gradlew test",0.3804627249357326,0.4033892619253194,Valid,0.8333333333333334,Kotlin,
24,https://github.com/hibernate/hibernate-tools,"name: Build and Test

on:
  pull_request

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        java-package: jdk
        architecture: x64

    - name: Build and Test
      uses: GabrielBB/xvfb-action@v1
      with: 
        run: mvn clean install 

","name: Build and Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test
",0.1342512908777969,0.5569124715490081,Valid,0.4,Java,
3430,https://github.com/cipchk/ngx-weui,"name: Ci

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run test
          cat ./coverage/lcov.info | ./node_modules/.bin/codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run lint
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test",0.034267913,0.442782472,Valid,0.962962963,TypeScript,
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build --no-daemon

    - name: Run tests
      run: ./gradlew test --no-daemon",0.032608696,0.110973985049125,Valid,0.32,Java,
44,https://github.com/romraider/romraider,"name: RomRaider build

on: [push,pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
      - name: set JRE_DIR environment variable
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo ::set-env name=JRE_DIR::$(echo $JAVA_HOME)/jre

      - name: Test Compiler
        run: javac -version

      - name: All
        run: |
          echo JRE_DIR=$JRE_DIR
          ant all
","name: CI_Build_and_Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Ant
        run: ant build

      - name: Run tests
        run: ant test
",0.0294882914137033,0.5027556068312602,Valid,0.3636363636363636,Java,
556,https://github.com/saschpe/android-customtabs,"name: Gradle Build
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Android problem matchers
        uses: jonasb/android-problem-matchers-action@v1
      - name: Build with Gradle
        run: ./gradlew build
","name: Build-and-Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.3058623619371283,0.6089963119194161,Valid,1.0,Kotlin,
598,https://github.com/wasabeef/recyclerview-animators,"name: ""Gradle build""
on: [push, pull_request]

jobs:
  gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.07751938,0.3996443168963509,Valid,1.0,Kotlin,
95,https://github.com/googlemaps/android-maps-utils,"# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow that runs tests on every new pull request
name: Run unit tests

on:
  repository_dispatch:
    types: [test]
  push:
    branches-ignore: ['gh-pages']
  pull_request:
    branches-ignore: ['gh-pages']
  workflow_dispatch:
  workflow_call: 

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1.1.0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build modules
      run: ./gradlew build jacocoTestReport --stacktrace
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Run unit tests
        run: ./gradlew test
",0.2316017316017316,0.3140950275689135,Valid,0.5,Java,
196,https://github.com/tomstewart89/basiclinearalgebra,"name: run_tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      run: cd test && cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -rerun-failed --output-on-failure -C ${{env.BUILD_TYPE}}
","name: CI Workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Arduino CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=$HOME/bin sh
        echo ""$HOME/bin"" >> $GITHUB_PATH
    - name: Update index files
      run: arduino-cli core update-index
    - name: Install Arduino AVR core
      run: arduino-cli core install arduino:avr
    - name: Build Arduino Examples
      run: |
        arduino-cli compile --fqbn arduino:avr:uno examples/CustomMatrix
        arduino-cli compile --fqbn arduino:avr:uno examples/HowToUse
        arduino-cli compile --fqbn arduino:avr:uno examples/References
        arduino-cli compile --fqbn arduino:avr:uno examples/SolveLinearEquations
        arduino-cli compile --fqbn arduino:avr:uno examples/Tensor
    - name: Set up CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
    - name: Build Test
      run: |
        mkdir test/build
        cd test/build
        cmake ..
        make
    - name: Run Test
      run: ./test/build/test_basic_linear_algebra",0.1205479452054794,0.1935438544583371,Valid,0.2489569543860761,C++,
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build --no-daemon

    - name: Run tests
      run: ./gradlew test --no-daemon",0.087912088,0.3745352479356497,Valid,0.4745621351125938,Kotlin,
575,https://github.com/afollestad/date-picker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
","name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.396039603960396,0.3758858274700167,Valid,0.8333333333333334,Kotlin,
1085,https://github.com/mattleibow/skiasharpfiddle,"name: Build WPF App
on: [push]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: Build with dotnet
      run: dotnet build --configuration Release
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'
      - name: Restore dependencies
        run: dotnet restore SkiaSharpFiddle/SkiaSharpFiddle.csproj
      - name: Build project
        run: dotnet build SkiaSharpFiddle/SkiaSharpFiddle.csproj --configuration Release --no-restore
      - name: Test project
        run: dotnet test SkiaSharpFiddle/SkiaSharpFiddle.csproj --no-build --verbosity normal
",0.3983983983983984,0.2416872804437367,Valid,0.5806451612903226,C#,
257,https://github.com/robloach/node-raylib,"name: Test

on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: Install System Dependencies
        if: matrix.os == 'ubuntu'
        run: sudo apt-get update && sudo apt-get install -y xorg-dev libglu1-mesa-dev
      - name: Build Node Addon
        run: npm run compile
      - name: Test
        run: npm test
  build-linux-arm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild.sh
  build-linux-arm-drm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild-drm.sh","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm ci
    - name: Build the project
      run: npm run build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Install dependencies
      run: npm ci
    - name: Run tests
      run: npm test
",0.1483021483021483,0.294149739992122,Valid,0.5238440898544338,JavaScript,
