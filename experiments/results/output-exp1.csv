Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language
1110,https://github.com/meowv/blog,"name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.406570841889117,0.6683440532763748,Valid,0.33235867446393763,C#
1086,https://github.com/mazyod/phoenixsharp,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'
        include-prerelease: true
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore Phoenix.sln

      - name: Build solution
        run: dotnet build Phoenix.sln --no-restore

      - name: Run tests
        run: dotnet test Phoenix.sln --no-build --verbosity normal
",0.2984531392174704,0.7339566601279085,Valid,0.8393960192175703,C#
1058,https://github.com/nunit/nunit-csharp-samples,"# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:   [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore Samples.sln

    - name: Build the project
      run: dotnet build Samples.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test Samples.sln --no-build --verbosity normal
",0.454468085106383,0.7213294089725385,Valid,0.7268678871845622,C#
1040,https://github.com/geri-borbas/triangle.net,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Triangle.sln
      working-directory: ./src
    - name: Build
      run: dotnet build Triangle.sln --no-restore
      working-directory: ./src
    - name: Test
      run: dotnet test Triangle.sln --no-build --verbosity normal
      working-directory: ./src
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x' # Assuming .NET 6 as it's the latest LTS version

    - name: Restore dependencies
      run: dotnet restore src/

    - name: Build the project
      run: dotnet build src/ --no-restore

    - name: Run tests
      run: dotnet test src/ --no-build --verbosity normal
",0.4305901911886949,0.7795996728226161,Valid,0.8270588235294117,C#
1051,https://github.com/richardszalay/mockhttp,"name: MockHttp Build
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ""Build""
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./RichardSzalay.MockHttp.sln
    - name: Build
      run: dotnet build -c Release --no-restore ./RichardSzalay.MockHttp.sln
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal ./RichardSzalay.MockHttp.sln
    - name: Package
      run: dotnet pack -c Release --no-build ./RichardSzalay.MockHttp/RichardSzalay.MockHttp.csproj
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'

    - name: ""Upload artifact: RichardSzalay.MockHttp.nupkg""
      uses: actions/upload-artifact@v3.1.1
      with:
        name: RichardSzalay.MockHttp.nupkg
        path: RichardSzalay.MockHttp/bin/Release/*.nupkg
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x' # Specify the .NET version

      - name: Restore dependencies
        run: dotnet restore RichardSzalay.MockHttp.sln

      - name: Build
        run: dotnet build RichardSzalay.MockHttp.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test RichardSzalay.MockHttp.sln --no-build --verbosity normal
",0.3464566929133858,0.4793499764563234,Valid,0.6982678626662543,C#
1095,https://github.com/praeclarum/ooui,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        git submodule sync
        git submodule update --init --recursive
    - name: Update Versions
      env:
        VERSION_PREFIX: 0.14
        VERSION_SUFFIX: ${{github.run_number}}
      run: |
        VERSION=$VERSION_PREFIX.$VERSION_SUFFIX
        sed -ibak ""s:// Ooui v1.0.0:// Ooui v$VERSION:g"" Ooui/Client.js
        sed -ibak ""s:<Version>1.0.0</Version>:<Version>$VERSION</Version>:g"" Ooui/Ooui.csproj
        sed -ibak ""s:<Version>1.0.0</Version>:<Version>$VERSION</Version>:g"" Ooui.AspNetCore/Ooui.AspNetCore.csproj
        sed -ibak ""s:<Version>1.0.0</Version>:<Version>$VERSION</Version>:g"" Ooui.Forms/Ooui.Forms.csproj
        sed -ibak ""s:version=\""1.0.0\"":version=\""$VERSION\"":g"" Ooui.Wasm/Ooui.Wasm.nuspec
        sed -ibak2 ""s:<version>1.0.0</version>:<version>$VERSION</version>:g"" Ooui.Wasm/Ooui.Wasm.nuspec
        cat Ooui.Wasm/Ooui.Wasm.nuspec    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal
    - name: Package
      run: |
        mkdir PackageOut
        cd Ooui
        dotnet pack --include-symbols --no-build -c Release -v normal -o ../PackageOut
        cd ../Ooui.AspNetCore
        dotnet pack --include-symbols --no-build -c Release -v normal -o ../PackageOut
        cd ../Ooui.Forms
        dotnet pack --include-symbols --no-build -c Release -v normal -o ../PackageOut
        cd ../Ooui.Wasm
        nuget pack -OutputDirectory ../PackageOut
    - name: Upload Packages
      uses: actions/upload-artifact@master
      with:
        path: PackageOut
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '5.0.x'

      - name: Restore dependencies
        run: dotnet restore Ooui.sln

      - name: Build
        run: dotnet build Ooui.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test Ooui.sln --no-build --verbosity normal
",0.22683583237216456,0.27131145958518665,Valid,0.8045473508552357,C#
1076,https://github.com/perrich/hangfire.memorystorage,"name: build-ci
on: [push, pull_request]

jobs:
  build-lib:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore Hangfire.MemoryStorage.sln

    - name: Build solution
      run: dotnet build Hangfire.MemoryStorage.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test Hangfire.MemoryStorage.sln --no-build --verbosity normal
",0.14192495921696574,0.7079408590168867,Valid,0.7163243243243244,C#
1069,https://github.com/icsharpcode/wpfdesigner,"name: Build WPF Designer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest
    strategy:
      matrix:
        Configuration: [ Debug, Release ]
    env:
        BuildPlatform: 'Any CPU'
        BuildVersion: '8.1.${{ github.run_number }}'
    steps:
    - uses: actions/checkout@v2
    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        projectFilter: '**/*.csproj'
        version: ${{ env.BuildVersion }}
        assemblyVersion: ${{ env.BuildVersion }}
        fileVersion: ${{ env.BuildVersion }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v1
    - run: nuget restore WpfDesign.sln
    - name: Build
      run: dotnet build WpfDesign.sln --no-restore -c ${{ matrix.configuration }}
    - name: Test
      run: dotnet test WpfDesign.sln --no-build --verbosity normal -c ${{ matrix.configuration }}
    - name: Pack
      if: matrix.configuration == 'release'    
      run:  .\nuget\pack.ps1
    - name: Upload NuGet
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: NuGet Packages (${{ matrix.configuration }})
        path: '**/*.nupkg'
        if-no-files-found: error      
 ","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build_and_test:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Restore dependencies
      run: dotnet restore WpfDesign.sln

    - name: Build solution
      run: dotnet build WpfDesign.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test WpfDesign.sln --no-build --verbosity normal
",0.21184738955823293,0.38076137142851674,Valid,0.7786164314719746,C#
1047,https://github.com/velcrophysics/velcrophysics,"name: Generic build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Build VelcroPhysics and samples
      run: dotnet build -c LinuxRelease src/VelcroPhysics.All.sln","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Restore dependencies
      run: dotnet restore src/

    - name: Build
      run: dotnet build src/ --configuration Release --no-restore

    - name: Run tests
      run: dotnet test src/ --no-build --verbosity normal
",0.3323442136498516,0.582968972982281,Valid,0.5,C#
1099,https://github.com/fals/cqrs-clean-eventual-consistency,"name: .NET

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore ./src/Ametista.sln
      - name: Build
        run: dotnet build ./src/Ametista.sln --no-restore
      - name: Test
        run: dotnet test ./src/Ametista.sln --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal
",0.45054945054945056,0.8242516287527284,Valid,0.7682594346391161,C#
172,https://github.com/kthohr/mcmc,"
# modified version of:
# https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60

name: CI

on: [push, pull_request, release]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: ""ubuntu_latest_gcc_arma"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc"",
            cxx: ""g++"",
            fc: ""gfortran"",
            linalg: ""arma""
          }
        - {
            name: ""ubuntu_latest_gcc_eigen"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc"",
            cxx: ""g++"",
            fc: ""gfortran"",
            linalg: ""eigen""
          }
        - {
            name: ""ubuntu_latest_gcc9_arma"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc-9"",
            cxx: ""g++-9"",
            fc: ""gfortran-9"",
            linalg: ""arma""
          }
        - {
            name: ""ubuntu_latest_gcc9_eigen"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc-9"",
            cxx: ""g++-9"",
            fc: ""gfortran-9"",
            linalg: ""eigen""
          }
        - {
            name: ""macos_latest_clang_arma"",
            os: macos-latest,
            build_type: ""Release"",
            cc: ""clang"",
            cxx: ""clang++"",
            linalg: ""arma""
          }
        - {
            name: ""macos_latest_clang_eigen"",
            os: macos-latest,
            build_type: ""Release"",
            cc: ""clang"",
            cxx: ""clang++"",
            linalg: ""eigen""
          }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ${{ matrix.config.cc }} ${{ matrix.config.cxx }} ${{ matrix.config.fc }} libblas-dev liblapack-dev
          ${{ matrix.config.cc }} --version
          
      - name: Configure
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export FC=${{ matrix.config.fc }}
          WDIR=${PWD}
          if [[ ""${{ matrix.config.linalg }}"" == ""arma"" ]]; then 
            export OPTIM_TEST_USE_ARMA=""y""
            mkdir ${WDIR}/arma_tmp
            git clone --single-branch https://gitlab.com/conradsnicta/armadillo-code.git ${WDIR}/arma_tmp > /dev/null 2>&1
            mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
            rm -rf ${WDIR}/arma_tmp
            export ARMA_INCLUDE_PATH=""${WDIR}/include""
          elif [[ ""${{ matrix.config.linalg }}"" == ""eigen"" ]]; then 
            export OPTIM_TEST_USE_EIGEN=""y""
            mkdir ${WDIR}/eigen_tmp
            git clone --single-branch https://gitlab.com/libeigen/eigen.git ${WDIR}/eigen_tmp > /dev/null 2>&1
            mv ${WDIR}/eigen_tmp/* ${WDIR}/include
            rm -rf ${WDIR}/eigen_tmp
            export EIGEN_INCLUDE_PATH=""${WDIR}/include""
          else
            echo -e ""  \x1B[31m- error: unrecognized linear algebra library.\033[0m"" >&2 ;
            echo """"
            exit 1
          fi
          #
          git submodule update --init
          ./configure -c -l ${{ matrix.config.linalg }}
      
      - name: Build
        shell: bash
        run: make
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install breathe==4.34.0
        pip install docutils==0.17.1
        pip install sphinx==5.1.1
        pip install sphinx-rtd-theme==1.0.0
        pip install sphinxcontrib-contentui==0.2.5
        pip install sphinxcontrib-katex==0.8.6

    - name: Configure the project
      run: ./configure

    - name: Build the project
      run: make

    - name: Run tests
      run: make test
",0.04354801741920697,0.1379698077599942,Valid,1.0,C++
1994,https://github.com/pine64/bl_iot_sdk,"name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - run: make
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
      
  build-msys:
    runs-on: windows-latest
    steps:
    - name: setup msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: make
        msystem: MSYS

    - uses: actions/checkout@v2

    - run: make
      shell: msys2 {0}
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
        MAX_MAKE_JOBS: 2
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build the application
        run: make

      - name: Run tests
        run: make test
        if: always() && steps.build.outcome == 'success'
",,,Invalid,,C++
11,https://github.com/mikeakohn/naken_asm,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: ""Windows Latest Mingw"",
            os: ""windows-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: false
          }
        - {
            name: ""Ubuntu Latest GCC"",
            os: ""ubuntu-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: true
          }
        - {
            name: ""MacOS Latest Clang"",
            os: ""macos-latest"",
            cc: ""clang"",
            cxx: ""clang++"",
            runtests: true
          }

    steps:
      - uses: actions/checkout@v2

      - name: Update apt (Ubuntu only)
        if: startsWith(matrix.config.os, 'ubuntu')
        run: sudo apt update

      - name: Configure
        shell: bash
        run: ./configure

      - name: Make
        shell: bash
        run: make

      - name: Tests
        if: matrix.config.runtests == true
        shell: bash
        run: make tests
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Configure the project
        run: ./configure

      - name: Build the project
        run: make

      - name: Run tests
        run: make test
        if: always() && steps.build.outcome == 'success'
",,,Invalid,,C++
1794,https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation,"name: demo

on:
  push:
    branches: [ main ]
    paths:
    - examples/demo/**
  pull_request:
    branches: [ main ]
    paths:
    - examples/demo/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Test demo
      run: make test
      working-directory: examples/demo
      timeout-minutes: 10
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore OpenTelemetry.AutoInstrumentation.sln

    - name: Build
      run: dotnet build OpenTelemetry.AutoInstrumentation.sln --configuration Release --no-restore

    - name: Test
      run: dotnet test OpenTelemetry.AutoInstrumentation.sln --no-build --verbosity normal

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Install NPM dependencies
      run: npm install

    - name: Run NPM tests
      run: npm test
",0.29421487603305785,0.20641490777360566,Valid,0.7058823529411765,C++
159,https://github.com/kdr2/redis-leveldb,"name: Redis-LevelDB Testing
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
        arch:
          - x64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      # - name: Checkout submodules
      #   run: git submodule update --init --recursive
      - name: Install Dependencies
        run: |
          if [ `uname` = ""Linux"" ]; then
            sudo apt-get update -qq -y;
            sudo apt-get install libsnappy-dev libev-dev libgmp-dev cpanminus perl -y;
            sudo cpanm --quiet --notest --skip-satisfied --force Redis;
          elif [ `uname` = ""Darwin"" ]; then
            brew update;
            brew install snappy;
            brew install libev;
            brew install gmp;
            brew install cpanminus;
            sudo cpanm --quiet --notest --skip-satisfied --force Redis;
          fi
      - name: Build
        run: make
      - name: Unit Testing
        run: |
          make test
          echo ""Ready for packaging...""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up dependencies
      run: |
        git submodule update --init --recursive
        sudo apt-get update
        sudo apt-get install -y libsnappy-dev

    - name: Build the application
      run: make

    - name: Run tests
      run: make test
",0.15516188149053145,0.3488421106101471,Valid,0.6836734693877551,C++
161,https://github.com/keiichiw/constexpr-8cc,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install g++
        run: |
             sudo apt update
             sudo apt install g++

      # Runs a single command using the runners shell
      - name: Run test
        run: ./ci_test.sh
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: |
        git clone https://github.com/keiichiw/constexpr-8cc.git
        # Add additional dependency installation steps here if necessary

    - name: Build
      run: g++ -o out/8cc 8cc.cpp elc.cpp

    - name: Run Application
      run: python run_8cc.py

    - name: Run Tests
      run: ./ci_test.sh
      if: "".github/workflows/ci_test.sh""
",,,Invalid,,C++
916,https://github.com/norbusan/debian-mu,"name: Build & run tests

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - if: contains(matrix.os, 'ubuntu')
        name: ubuntu-deps
        run: |
          sudo apt update
          sudo apt-get install automake autoconf-archive autotools-dev libglib2.0-dev libxapian-dev libgmime-3.0-dev m4 make libtool pkg-config

      - if: contains(matrix.os, 'macos')
        name: macos-deps
        run: |
          brew install autoconf automake libgpg-error libtool pkg-config gettext glib gmime xapian

      - name: configure
        run: ./autogen.sh --disable-guile

      - name: build
        run: make

      - name: test
        run: make test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake autopoint libtool make

      - name: Run autogen.sh
        run: ./autogen.sh

      - name: Configure the project
        run: ./configure

      - name: Build the project
        run: make

      - name: Run tests
        run: make check
",0.29130141604855025,0.5545787606348727,Valid,0.6495048332496685,C++
203,https://github.com/msokalski/ascii-patrol,"name: ci

on:
  push:
    paths:
      - ""**.cpp""
      - ""**.cmake""
      - ""**/CMakeLists.txt""
      - "".github/workflows/ci.yml""
  pull_request:
    paths:
      - ""**.cpp""
      - ""**.cmake""
      - ""**/CMakeLists.txt""
      - "".github/workflows/ci.yml""

jobs:

  windows-msvc:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -Bbuild -G ""Visual Studio 17 2022""

    - name: Build
      run: cmake --build build --config Release --parallel

  windows-gcc:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure
      run: cmake -Bbuild -G ""MinGW Makefiles""

    - name: Build
      run: cmake --build build --parallel

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        cxx: [g++, clang++]

    steps:
    - uses: actions/checkout@v2

    - name: install prereqs
      run: |
        sudo apt update
        sudo apt install --no-install-recommends libxi-dev libx11-dev libpulse-dev

    - name: Configure
      run: cmake -Bbuild
      env:
        CXX: ${{ matrix.cxx }}

    - name: Build
      run: cmake --build build --parallel

  mac:
    runs-on: mac-latest
    steps:
    - uses: actions/checkout@v2

    - name: install prereqs
      run: brew install libxi libx11 pulseaudio

    - name: Configure
      run: cmake -Bbuild

    - name: Build
      run: cmake --build build --parallel
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential
      - name: Run build script
        run: chmod +x ./build.sh && ./build.sh
      - name: Run tests
        run: |
          if [ -f run.sh ]; then
            chmod +x ./run.sh
            ./run.sh
          else
            echo ""No test script found. Skipping tests.""
          fi
",0.09077598828696926,0.31279787245364576,Valid,0.3901015415033232,C++
206,https://github.com/behdad/glyphy,"name: Linux CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Cache Harfbuzz
        uses: actions/cache@v3
        with:
          path: harfbuzz-7.3.0
          key: ${{ runner.os }}-build
      - name: Install build dependencies
        run: sudo apt install -y curl gcc g++ libfreetype6-dev libglib2.0-dev libcairo2-dev make cmake automake autoconf libtool libharfbuzz-dev meson freeglut3-dev libglew-dev
      - name: Download a recent harfbuzz archive
        # TODO: Ubuntu 22.04 has harfbuzz < 4.0.0. Ubuntu 24.04 will have harfbuzz >= 4.0.0.
        # The harfbuzz build will not be required when Github updates the runners.
        run: curl -L https://github.com/harfbuzz/harfbuzz/releases/download/7.3.0/harfbuzz-7.3.0.tar.xz -O
      - name: Decompress harfbuzz archive
        run: tar xvf harfbuzz-7.3.0.tar.xz
      - name: Configure harfbuzz build
        run: cd harfbuzz-7.3.0; meson setup build
      - name: Build harfbuzz
        run: cd harfbuzz-7.3.0; meson compile -C build
      - name: Install harfbuzz
        run: cd harfbuzz-7.3.0; sudo meson install -C build
      - name: Configure glyphy
        run: ./autogen.sh
      - name: Make glyphy
        run: make
      - name: Meson setup
        run: meson setup build
      - name: Meson compile
        run: meson compile -C build
      - name: Run Validator against default font
        run: ./demo/glyphy-validate ./demo/default-font.ttf
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache
            !~/.cache/exclude
          key: ${{ runner.os }}-build-${{ hashFiles('**/meson.build', '**/meson_options.txt') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y meson libharfbuzz-dev

      - name: Run autogen.sh
        run: ./autogen.sh

      - name: Configure build
        run: meson setup builddir

      - name: Build
        run: meson compile -C builddir

      - name: Test
        run: meson test -C builddir
",0.1927710843373494,0.4479995844612927,Valid,0.5786402998375562,C++
181,https://github.com/torarnv/sparsebundlefs,"name: ""Continuous Integration""

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  macos:
    name: macOS
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install dependencies
      run: brew install macfuse

    - name: Build
      run: make

    - name: Test
      run: make check

    - name: Install
      run: sudo make install

  linux:
    name: Linux
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, i386]

    env:
      ARCH: ${{ matrix.arch }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo dpkg --add-architecture $ARCH
        sudo apt-get update
        sudo apt-get install -y g++-multilib pkg-config:$ARCH libfuse-dev:$ARCH fuse:$ARCH

    - name: Build
      run: make

    - name: Install
      run: sudo make install
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        run: docker build -f Dockerfile.linux-gcc -t my-application .

      - name: Run Docker Image
        run: docker run --rm my-application

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Load cached Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Build Docker Image
        run: docker build -f Dockerfile.linux-gcc -t my-application-test .

      - name: Run tests
        run: docker run --rm my-application-test tests/run_tests.sh
",0.14362806143628062,0.46343656857686144,Valid,0.2750588995878941,C++
79,https://github.com/billthefarmer/tuner,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.1567251461988304,0.3452481062615875,Valid,1.0,Java
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test Java Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.11764705882352941,0.6891102699549669,Valid,1.0,Java
38,https://github.com/kaljurand/k6nele,"name: Android CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.4352720450281426,0.6768560636712789,Valid,1.0,Java
40,https://github.com/gentlecat/counter,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.5299145299145299,0.7429426735535238,Valid,1.0,Java
62,https://github.com/renanse/ardor3d,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: ardor3d-*/build/libs
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.41928079571537874,0.619761210936157,Valid,1.0,Java
73,https://github.com/journeyapps/zxing-android-embedded,"name: Build Android

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build and Lint with Gradle
        run: ./gradlew build
      - name: Archive lint results
        uses: actions/upload-artifact@v2
        with:
          name: lint-results
          path: ""**/build/reports/lint-results*""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.1219047619047619,0.6326519919025912,Valid,1.0,Java
43,https://github.com/kshoji/usb-midi-driver,"name: Android CI

on:
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.5808893093661306,0.7270779914068711,Valid,1.0,Java
77,https://github.com/square/android-times-square,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: gradle/wrapper-validation-action@v1.0.4
    - name: set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'temurin'
        cache: gradle

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run Tests
        run: ./gradlew test
",0.32908912830558273,0.6599672574772792,Valid,1.0,Java
37,https://github.com/marytts/marytts,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 12 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew build

      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Run tests
        run: ./gradlew test",0.20098643649815043,0.4244956253972861,Valid,1.0,Java
98,https://github.com/billthefarmer/sig-gen,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.1519903498190591,0.37751503140586606,Valid,1.0,Java
5234,https://github.com/rexxars/react-lowlight,"name: Github Pages

on:
  push:
    branches: main

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - run: node --version
      - run: npm --version
      - run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./demo/build
          user_name: ""github-actions[bot]""
          user_email: ""github-actions[bot]@users.noreply.github.com""
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test
",0.23045267489711935,0.48168942813559656,Valid,1.0,JavaScript
5262,https://github.com/morungos/node-word-extractor,"# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - run: yarn test

","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Lint with ESLint
        run: yarn eslint .

      - name: Run tests
        run: yarn test

      - name: Build
        run: yarn build
",0.26900584795321636,0.4830425231074086,Valid,1.0,JavaScript
5271,https://github.com/ember-cli/ember-ajax,"name: CI

on:
  push:
    branches:
      - main
      - master
      - 'v*'
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.4.0
      with:
        # necessary for commitlint-github-action
        fetch-depth: 0

    - uses: actions/setup-node@v2.4.1
      with:
        node-version: '6'
        cache: yarn

    - run: yarn install --frozen-lockfile
    - run: yarn lint:js
    - uses: wagoid/commitlint-github-action@v4
    - run: yarn ember ts:precompile

  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '6'
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: yarn test

  try-scenarios:
    name: ember-try
    runs-on: ubuntu-latest
    needs: [lint, test]

    strategy:
      fail-fast: false
      matrix:
        ember-try-scenario:
          - ember-lts-2.12
          - ember-lts-2.16
          - ember-lts-2.18
          - ember-lts-3.4
          - ember-lts-3.8
          # disabled because the Ember.js 4 scenarios are not passing yet
          # - ember-release
          # - ember-beta
          # - ember-canary
          # disabled for now because it fails with a strange ember-data
          # installation error
          #- fastboot-addon-tests

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          # some of the unlocked dependency versions that ember-try installs
          # are incompatible with Node.js 6
          node-version: '10'
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: node_modules/.bin/ember try:one ${{ matrix.ember-try-scenario }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Application
        run: yarn build

      - name: Run Tests
        run: yarn test
",0.16170212765957448,0.33623052564355993,Valid,1.0,JavaScript
5270,https://github.com/kmalakoff/knockback,"name: CI
on:
  push:
    branches:
      - master
jobs:
  test:
    name: Node.js ${{ matrix.node-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [""latest""]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: git config --global user.name ""Github Actions""
      - run: git config --global user.email ""actions@users.noreply.github.com""
      - run: npm uninstall node-version-use -g
      - run: npm install node-version-use -g
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm test
      - run: npm run test:engines
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npx eslint .

      - name: Run build
        run: npm run build

      - name: Run tests
        run: npm test
",0.22356495468277945,0.5265174033759195,Valid,1.0,JavaScript
5269,https://github.com/metalsmith/metalsmith-layouts,"name: CI
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['master']

jobs:
  pre-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm run format:check
      - run: npm run lint:check

  branch-test:
    if: github.ref_name != 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm test

  test:
    if: github.ref_name == 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0', '16.0', '18.0', '20.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - run: npm install
      - run: npm test
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        run: npm run coverage
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.info
          format: lcov
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.1548076923076923,0.2707893608976273,Valid,1.0,JavaScript
5175,https://github.com/outatime/grunt-replace,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run build
        run: npm run build

      - name: Run tests
        run: npm test
",0.08299595141700405,0.5732973393917922,Valid,1.0,JavaScript
5177,https://github.com/drudge/node-keychain,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        node: [ 14, 16, 18 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Build the application
      run: npm run build

    - name: Run tests
      run: npm test
",0.2887323943661972,0.5889816183660784,Valid,1.0,JavaScript
5178,https://github.com/sunhuawei/sourcedetector,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: npm i
      - run: npm run build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.26350710900473934,0.5966538236709847,Valid,1.0,JavaScript
5180,https://github.com/okturtles/group-income,"name: NodeJS with Grunt

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    - run: npm ci
    - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Run tests
        run: npm test
",0.3460620525059666,0.4565542694986261,Valid,1.0,JavaScript
5207,https://github.com/gottox/terminal.js,"name: CI

on: [push]

jobs:
  lib-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version:
        - ""15""
        - ""16""
        - ""17""
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node_version }}
    - run: npm install
    - run: npm test
    - name: IRC Message Action
      uses: Gottox/irc-message-action@main
      if: failure()
      with:
        channel: ""Gottox""
        nickname: gh-gottox
        message: |-
          [${{ github.workflow }} failed] ${{ github.ref }} https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Dependencies
      run: npm install

    - name: Run Grunt
      run: npm run grunt

    - name: Run Tests
      run: npm test
",0.24021838034576887,0.43968934659904585,Valid,1.0,JavaScript
625,https://github.com/serbelga/material-motion-samples,"name: Android CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Set up JDK 11
        uses: actions/setup-java@3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.5492589363557105,0.8205560549162566,Valid,1.0,Kotlin
596,https://github.com/deweyreed/clipboardcleaner,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.5280898876404494,0.7803861673928745,Valid,1.0,Kotlin
547,https://github.com/hashlin/rally,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v1

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test",0.2842767295597484,0.3617813000401182,Valid,1.0,Kotlin
564,https://github.com/cottacush/hiddencam,"name: ci

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build and Run Tests with Gradle
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",,,Invalid,,Kotlin
607,https://github.com/guardian/toolargetool,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with gradlew
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.6903163950143816,0.7833608556438992,Valid,1.0,Kotlin
567,https://github.com/rumboalla/apkupdater,"name: Android Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - '3.x'
  pull_request:
    branches:
      - '3.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.49491525423728816,0.40553176029774574,Valid,1.0,Kotlin
568,https://github.com/ftomassetti/langsandbox,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Run tests
        run: ./gradlew test
",,,Invalid,,Kotlin
618,https://github.com/uchuhimo/konf,"name: Konf CI

on: [push]

jobs:
  build:
    name: Build on JDK ${{ matrix.java_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java_version: [8, 11, 16]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java_version }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java_version }}
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",,,Invalid,,Kotlin
574,https://github.com/jetbrains/ideolog,"name: Run tests 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.4309133489461358,0.35259846986700893,Valid,1.0,Kotlin
579,https://github.com/cottacush/currencyedittext,"name: ci

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Build and Run Tests with Gradle
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.4743465634075508,0.6492115096921126,Valid,1.0,Kotlin
452,https://github.com/gogotanaka/hilbert,"name: Python

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -
    - name: Poetry Version
      run: |
        poetry --version
    - name: Poetry Install Dependencies
      run: |
        poetry install --no-interaction
    - name: Test with pytest
      run: |
        poetry run pytest","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Build
        run: poetry build

      - name: Run tests
        run: poetry run pytest
",0.3083264633140973,0.6465770350721949,Valid,1.0,Python
492,https://github.com/ajcr/rolling,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run setup.py
        run: python setup.py install
      - name: Run tests
        run: pytest
",0.4176394293125811,0.5392737209701215,Valid,0.7981721249047982,Python
482,https://github.com/xilopaint/alfred-pdf-tools,"# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: macos-latest-xlarge

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.11
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10.11""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint bandit
    - name: Lint with Pylint
      run: |
        pylint $(git ls-files '*.py')
    - name: Lint with Bandit
      run: |
        bandit -c .bandit src/alfred_pdf_tools.py src/workflow/*.py tests/*.py
    - name: Test with unittest
      run: |
        python -m unittest discover tests
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build the application
      run: python setup.py build

    - name: Run tests
      run: python -m unittest discover tests
",0.294006309148265,0.5284645847024577,Valid,0.9002296211251435,Python
515,https://github.com/pmbarrett314/curses-menu,"on:
  push:
    branches: [master, develop]
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

name: Tests

env:
  PYTHONWARNINGS: all
  TERM: xterm-256color

jobs:
  pre-commit:
    name: Various quality checks with pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ""3.11""
      - uses: pre-commit/action@v3.0.0
        env:
          SKIP: ""mypy,ruff,black,poetry-lock""

  black-format:
    name: Check format with black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
  ruff-lint:
    name: Lint with ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ""3.11""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: ruff .
  mypy:
    name: Type check with mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run mypy .
  initial-test:
    name: Test One Version First
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true

  test:
    name: Pytest via poetry
    needs:
      - pre-commit
      - black-format
      - ruff-lint
      - mypy
      - initial-test

    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"",""3.8"", ""pypy3.8"", ""pypy3.9"", ""3.12.0-beta.3"" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: windows-latest
            python-version: pypy3
          - os: ubuntu-latest
            python-version: 3.11
            #we already did this one
    continue-on-error: ${{ matrix.python-version=='3.12.0-beta.3' || (matrix.python-version == 'pypy3.11' && matrix.os == 'windows-latest') || matrix.python-version == 'pypy3.8' || (matrix.python-version == 'pypy3.9' && matrix.os == 'windows-latest') }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true
  coveralls:
    name: Finalize coveralls data
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel-finished: true

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Status of final test results
    needs: [ test ]
    steps:
      - run: |
          result=""${{ needs.test.result }}""
          if [[ $result == ""success"" || $result == ""skipped"" ]]; then
            exit 0
          else
            exit 1
          fi



  build-and-publish:
    name: Build and publish Python distributions to PyPI and TestPyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    permissions:
      id-token: write
    needs:
      - pre-commit
      - black-format
      - ruff-lint
      - mypy
      - test

    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Run tests
        run: |
          poetry run pytest
",0.05162992274354626,0.10525470678587227,Valid,0.8391899288451014,Python
495,https://github.com/dolezsa/thermal_comfort,"name: Run PyTest Unit Tests

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.11""]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements_test.txt ]; then pip install -r requirements_test.txt; fi
      - name: Test with pytest
        run: |
          pytest
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_test.txt
          pip install -r requirements_test_pre_commit.txt

      - name: Run tests
        run: pytest

      - name: Lint with yamllint
        run: yamllint .

      - name: Lint with black
        run: black --check .

      - name: Lint with ruff
        run: ruff check

      - name: Check spelling with codespell
        run: codespell --skip=""*.json,*.png,*.jpg"" --quiet-level=2
",0.20153061224489796,0.5807903595629151,Valid,0.8850678733031674,Python
463,https://github.com/matejak/imreg_dft,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.TWINE_API_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install test dependencies
      if: contains(github.event.pull_request.labels.*.name, 'tests') || github.ref == 'refs/heads/master'
      run: |
        pip install -r requirements_docs.txt

    - name: Build
      run: python setup.py build

    - name: Run tests
      if: contains(github.event.pull_request.labels.*.name, 'tests') || github.ref == 'refs/heads/master'
      run: python -m unittest discover tests
",0.31963001027749227,0.5077702753655964,Valid,0.779143897996357,Python
489,https://github.com/kstaats/karoo_gp,"name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  
jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Run Karoo GP tests
        run: pytest -v
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Application
        run: python karoo-gp.py

      - name: Run Tests
        run: pytest
",0.25077720207253884,0.4762003626338463,Valid,0.7727272727272727,Python
538,https://github.com/plainas/tq,"name: Install and test

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install
      run: |
        pip install .
    - name: Run tests
      run: ./tqtest.sh
","name: Build and Test

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools==39.0.1
        pip install beautifulsoup4==4.8.1
    - name: Install tq
      run: python setup.py install
    - name: Run tests
      run: |
        chmod +x ./tqtest.sh
        ./tqtest.sh
",0.3747178329571106,0.46582650328846825,Valid,0.5202702702702703,Python
498,https://github.com/scaleway/postal-address,"name: Test

on:
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10""]
        poetry-version: [""1.1.12""]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Poetry ${{ matrix.poetry-version }}
      uses: abatilo/actions-poetry@v2.1.3
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Install dependencies
      run: poetry install
    - name: Lint
      run: poetry run invoke lint
    - name: Test with pytest
      run: poetry run invoke test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.1.3

      - name: Install Dependencies
        run: poetry install

      - name: Run Tests
        run: poetry run pytest
",0.1085972850678733,0.5879403306535839,Valid,0.7692307692307693,Python
527,https://github.com/klen/muffin,"# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tests

on:
  pull_request:
    branches: [master, develop]

  push:
    branches: [master, develop]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@main
    - name: install poetry
      run: pip install poetry

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@main
      with:
        cache: poetry
        python-version: ${{ matrix.python-version }}

    - name: Setup requirements
      run: poetry install --with dev

    - name: Check code
      run: poetry run ruff muffin

    - name: Check typing
      run: poetry run mypy

    - name: Test with pytest
      run: poetry run pytest tests

  notify:
    runs-on: ubuntu-latest
    needs: tests
    steps:

    - name: Notify Success
      uses: archive/github-actions-slack@master
      with:
          slack-channel: C2CRL4C4V
          slack-text: Tests are passed *[${{ github.repository }}] (${{ github.ref }})* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-optional-as_user: false
          slack-optional-icon_emoji: "":white_check_mark:""
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      - name: Build the application
        run: make build

      - name: Run tests
        run: make test
",0.0585693710993759,0.32953015549701475,Valid,0.5336538461538461,Python
3378,https://github.com/mdevils/css-selector-parser,"name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci --prefer-offline --no-audit --no-update-notifier
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - run: npm run test:dist
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test
",0.26765799256505574,0.6167293304092757,Valid,1.0,TypeScript
3363,https://github.com/mrmartineau/design-system-utils,"name: Test

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - run: yarn install
    - run: yarn test
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm test
",0.09453197405004633,0.27365026305405027,Valid,0.7058823529411765,TypeScript
3373,https://github.com/jetbridge/axios-jwt,"name: Build, lint and test

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: Run prettier
        run: ./node_modules/.bin/prettier -c ./src

      - name: Run eslint
        run: ./node_modules/.bin/eslint ./src --color --max-warnings 0

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: 'Build Project'
        id: build
        run: npm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage axios@1.4.0

      - name: Run rests
        run: npm run test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run build

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test
",0.17784877529286475,0.3645258390379351,Valid,1.0,TypeScript
3433,https://github.com/davguij/rxios,"name: CI
on: [push]

jobs:
  lint_test:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Install peer dependencies
        run: npm i axios rxjs --no-save
        env:
          CI: true

      - name: Test
        run: npm test
        env:
          CI: true

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: lint_test
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Install peer dependencies
        run: npm i axios rxjs --no-save
        env:
          CI: true

      - name: Build
        run: npm run build
        env:
          CI: true

      - uses: actions/upload-artifact@v2
        name: Store dist folder to artifacts
        with:
          name: dist
          path: dist/ # or path/to/artifact

  release:
    runs-on: ubuntu-latest
    name: Release version to npm registry
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - uses: actions/download-artifact@v2
        name: Load dist folder from artifacts
        with:
          name: dist
          path: dist

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test
",0.11690584529226461,0.18680312089159673,Valid,1.0,TypeScript
3377,https://github.com/ethereumjs/ethereumjs-blockchain,"name: blockchain-test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x, 13.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v1
      - run: npm install
      - run: npm test
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install
      - name: Build the project
        run: npm run build
      - name: Run tests
        run: npm test
",0.03194888178913738,0.6096079454813256,Valid,1.0,TypeScript
3414,https://github.com/react-native-toolkit/react-native-responsive-dimensions,"name: build
on:
  push:
    branches:
      - master
    tags:
      - ""!*"" # Do not execute on tags
    paths:
      - src/*
      - test/*
      - __tests__/*
      - ""*.json""
      - yarn.lock
      - .github/**/*.yml
  pull_request:
    paths:
      - ""!*.MD""
jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, macOS-latest]
        node: [""12"", ""10""]
    name: test/node ${{ matrix.node }}/${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node }}
      - run: npm install -g yarn
      - run: yarn install
      - run: yarn test
  coverage:
    needs: [test]
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: ""12""
      - run: npm install -g yarn
      - run: yarn install
      - uses: paambaati/codeclimate-action@v2.5.3
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageCommand: yarn coverage
          debug: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test
",0.09923213230950975,0.34318525980387626,Valid,1.0,TypeScript
3379,https://github.com/jamiemason/imageoptim-cli,"name: verify

on:
  pull_request:
  push:

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 20.x

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color

      - name: Lint
        run: yarn lint
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build the project
        run: yarn build

      - name: Run tests
        run: yarn test
",0.4565425023877746,0.7316663998694422,Valid,1.0,TypeScript
3381,https://github.com/idered/typescript-expect-plugin,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test
",0.5741007194244604,0.7248316115678847,Valid,1.0,TypeScript
3385,https://github.com/reedsy/quill-cursors,"name: Test

on:
  push:
    branches:
    - main
    - lint
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://npm.pkg.github.com'
    - name: Install
      # Skip post-install to avoid malicious scripts stealing PAT
      run: npm install --ignore-script
      env:
        # GITHUB_TOKEN can't access packages hosted in private repos,
        # even within the same organisation
        NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Post-install
      run: npm rebuild && npm run prepare --if-present
    - name: Build
      run: npm run build
    - name: Test
      run: npm test
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Lint
      run: npm run lint

    - name: Build
      run: npm run build

    - name: Run tests
      run: npm test
",0.2967032967032967,0.49333439713246197,Valid,1.0,TypeScript
3432,https://github.com/probot/smee-client,"name: Release
""on"":
  push:
    branches:
      - master
      - next
      - beta
      - ""*.x""
jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
      - run: npm ci
      - run: npm run build
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.PROBOTBOT_NPM_TOKEN }}","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm test
",0.31431431431431434,0.6689960576180572,Valid,1.0,TypeScript
1090,https://github.com/renelergner/wpinternals,"name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x86, x64, arm64]
        platform: [win]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ""7.0.x""

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build utilities
        shell: pwsh
        run: |
          msbuild /m /t:restore,wpinternals:publish /p:Platform=${{ matrix.architecture }} /p:RuntimeIdentifier=${{ matrix.platform }}-${{ matrix.architecture }} /p:PublishDir=${{ github.workspace }}/artifacts/${{ matrix.platform }}-${{ matrix.architecture }} /p:PublishSingleFile=true /p:PublishTrimmed=false WPinternals.sln

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}-${{ matrix.architecture }}
          path: ${{ github.workspace }}/artifacts/${{ matrix.platform }}-${{ matrix.architecture }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Install dependencies
        run: dotnet restore WPinternals.sln

      - name: Build solution
        run: dotnet build WPinternals.sln --configuration Release --no-restore

      - name: Run tests
        run: dotnet test WPinternals.sln --no-build --verbosity normal
",0.35600907029478457,0.4158562745780515,Valid,0.336405278656342,C#
393,https://github.com/subhra74/xdm,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: windows-latest

    defaults:
      run:
        working-directory: ./app/XDM/XDM.Wpf.UI/

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run Tests
      run: npm test
",0.17836498761354252,0.5687903840167015,Valid,0.33235867446393763,C#
1094,https://github.com/app-vnext/polly,"name: github-pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  publish-docs:
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.event_name == 'pull_request' && github.event.ref || github.workflow }}
      cancel-in-progress: false

    permissions:
      contents: write
      pages: write

    steps:
    - name: Checkout
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Lint Markdown files
      uses: DavidAnson/markdownlint-cli2-action@ed4dec634fd2ef689c7061d5647371d8248064f1 # v13.0.0
      with:
        config: '.markdownlint.json'
        globs: |
          **/*.md
          !**/BenchmarkDotNet.Artifacts/**/*.md

    - name: Spellcheck
      uses: rojopolis/spellcheck-github-actions@737c1f7be0fa441a9d64a3763f9dcacf20a284d4 # v0.35.0
      with:
        config_path: .github/spellcheck.yml

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Generate documentation
      run: |
        dotnet tool restore
        dotnet build --configuration Release /p:SKIP_POLLY_ANALYZERS=true
        dotnet docfx docs/docfx.json

    - name: Deploy to GitHub Pages
      if: |
        github.event.repository.fork == false &&
        github.ref_name == github.event.repository.default_branch
      uses: peaceiris/actions-gh-pages@373f7f263a76c20808c831209c920827a82a2847 # v3.9.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_site
        cname: www.pollydocs.org
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Setup .NET
        uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2
        with:
          dotnet-version: '6.0.x'

      - name: Restore dependencies
        run: dotnet restore Polly.sln

      - name: Build
        run: dotnet build Polly.sln --no-restore

      - name: Test
        run: dotnet test Polly.sln --no-build --verbosity normal
",0.22378854625550662,0.3156156797913951,Valid,0.3132530120481928,C#
1091,https://github.com/spreads/spreads,"name: Build & Test Spreads.Core

on:
  push:
    branches: [ main ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:

  test_net60:
    name: Test .NET 6.0 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Test 6.0 Debug
        run: dotnet test tests/Spreads.Core.Tests/Spreads.Core.Tests.csproj -f net6.0 -c Debug --filter TestCategory=CI -v m
      - name: Test 6.0 Release
        run: dotnet test tests/Spreads.Core.Tests/Spreads.Core.Tests.csproj -f net6.0 -c Release --filter TestCategory=CI -v m


  test_net48:
    name: Test .NET 4.8
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Test .NET 4.8
        run: |
          dotnet restore tests/Spreads.Core.Tests/Spreads.Core.Tests.csproj
          msbuild tests/Spreads.Core.Tests/Spreads.Core.Tests.csproj /p:Configuration=Release
          dotnet test tests/Spreads.Core.Tests/Spreads.Core.Tests.csproj -f net48 -c Release --no-build --no-restore --filter TestCategory=CI -v m
      - name: Pack
        shell: cmd
        run: dotnet pack src/Spreads.Core/Spreads.Core.csproj -c Release -o artifacts --version-suffix ""%build%"" -p:AutoSuffix=True
      - name: Push
        run: dotnet nuget push ""artifacts\**\*.nupkg"" -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/Spreads/index.json --skip-duplicate

","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal
",0.15636822194199243,0.2306302511198122,Valid,0.2992833590432321,C#
1057,https://github.com/huiyadanli/pasteex,"name: .Net Build

on:
  workflow_dispatch:
    inputs:
      Reason:
        description: 'Reasons for temporary build'     
        required: true
        default: 'No reason.Just do it.'
  push:
        branches:
          - master
        paths-ignore:
          - '**/*.md'
          - .gitignore
          - .editorconfig
          - appveyor.yml
          - 'azure-pipelines*.yml'
          - 'ci/azure-pipelines/template*.yml'

  pull_request:
          branches:
            - master
          paths-ignore:
            - '**/*.md'
            - .gitignore
            - .editorconfig
            - appveyor.yml
            - 'azure-pipelines*.yml'
            - 'ci/azure-pipelines/template*.yml'

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #BUILD_CONFIGURATION: [Debug , Release]

jobs:
  build:
    name: ${{matrix.BUILD_CONFIGURATION}}
    runs-on: windows-latest
    strategy:
        matrix:
          BUILD_CONFIGURATION: ['Release']
    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build ${{matrix.BUILD_CONFIGURATION}}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: PasteEx-${{ runner.os }}-${{matrix.BUILD_CONFIGURATION}}
        path: |
          .\PasteEx\bin
          !.\PasteEx\bin\**\PasteEx.exe.config
          !.\PasteEx\bin\**\PasteEx.pdb
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install npm dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
        continue-on-error: true
",0.07689463955637708,0.20036256133089855,Valid,0.2910337468320662,C#
1041,https://github.com/snape/rvo2-cs,"#
# ci.yml
# RVO2 Library C#
#
# SPDX-FileCopyrightText: 2008 University of North Carolina at Chapel Hill
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Please send all bug reports to <geom@cs.unc.edu>.
#
# The authors may be contacted via:
#
# Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
# Dept. of Computer Science
# 201 S. Columbia St.
# Frederick P. Brooks, Jr. Computer Science Bldg.
# Chapel Hill, N.C. 27599-3175
# United States of America
#
# <https://gamma.cs.unc.edu/RVO2/>
#

---
name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: '0 5 * * *'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  bazel_arch:
    name: bazel arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            bazel \
            ca-certificates \
            curl \
            gcc \
            git \
            icu \
            lttng-ust \
            python \
            which \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  bazel_macos:
    name: bazel macos latest
    runs-on: macos-latest
    steps:
      - name: pre-checkout setup
        run: |
          rm -f \
            /usr/local/bin/2to3 \
            /usr/local/bin/2to3-3.* \
            /usr/local/bin/go \
            /usr/local/bin/gofmt \
            /usr/local/bin/idle3 \
            /usr/local/bin/idle3.* \
            /usr/local/bin/pydoc3 \
            /usr/local/bin/pydoc3.* \
            /usr/local/bin/python3 \
            /usr/local/bin/python3.* \
            /usr/local/bin/python3-config \
            /usr/local/bin/python3.*-config \
            /usr/local/lib/libtcl8.*.dylib \
            /usr/local/lib/libtk8.*.dylib
          brew update-reset -q
          brew upgrade -f -q
          brew unlink -q bazelisk
          brew install -q \
            bazel \
            buildifier \
            git \
            python \
            jsonlint \
            markdownlint-cli \
            yamllint
          brew cleanup -q -s
          rm -rf $(brew --cache)
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        shell: zsh -efuo pipefail {0}
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: zsh -efuo pipefail {0}

  bazel_ubuntu:
    name: bazel ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:latest
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            g++ \
            git \
            gnupg \
            libicu70 \
            liblttng-ust1 \
            python-is-python3 \
            zlib1g
          curl -sS https://bazel.build/bazel-release.pub.gpg | gpg --dearmor - \
            > /usr/share/keyrings/bazel-archive-keyring.gpg
          echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8' \
            > /etc/apt/sources.list.d/bazel.list
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            bazel
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  dotnet_alpine:
    name: dotnet alpine 3
    runs-on: ubuntu-22.04
    container: alpine:3
    steps:
      - name: pre-checkout setup
        run: |
          apk upgrade -q --no-cache
          apk add -q --no-cache \
            bash \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
        shell: sh
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh

  dotnet_arch:
    name: dotnet arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_fedora:
    name: dotnet fedora latest
    runs-on: ubuntu-22.04
    container: fedora:latest
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_macos:
    name: dotnet macos latest
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}
      - name: build and pack release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}

  dotnet_rockylinux:
    name: dotnet rockylinux 9
    runs-on: ubuntu-22.04
    container: rockylinux:9
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl-minimal \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_ubuntu:
    name: dotnet ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            git \
            libicu70 \
            liblttng-ust1 \
            zlib1g
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/snape/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: push
        run: |
          dotnet nuget push --no-symbols true --skip-duplicate RVOCS/bin/Release/RVOCS.*.nupkg
        shell: bash
        if: ${{ github.event.release.published }}

  dotnet_windows:
    name: dotnet windows latest
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug RVOCS.sln
          dotnet pack --configuration Debug --no-build RVOCS\RVOCS.csproj
        shell: pwsh
      - name: build and pack release
        run: |
          dotnet build --configuration Release RVOCS.sln
          dotnet pack --configuration Release --no-build RVOCS\RVOCS.csproj
        shell: pwsh
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        run: |
          pip install cffconvert
          pip install reuse

      - name: Build with Bazel
        run: bazel build //...

      - name: Run tests
        run: bazel test //...
",0.03270198283515833,0.0394123496231023,Valid,0.24994650295333487,C#
1114,https://github.com/microsoft/tx,"name: .NET Core

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.400
    - name: Install dependencies
      run: |
           cd ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\""
           .\MSBuild.exe /t:restore /p:Configuration=Release /p:Platform=""Any CPU"" $Env:GITHUB_WORKSPACE\source\Tx.sln
    - name: Build
      run: |
           cd ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\""
           .\MSBuild.exe /t:build /p:Configuration=Release /p:Platform=""Any CPU"" $Env:GITHUB_WORKSPACE\source\Tx.sln
    - name: Restore Test
      run:  dotnet restore $Env:GITHUB_WORKSPACE\Test\Tx.Tests.sln
    - name: Test
      run:  dotnet test --no-restore --framework:""net46"" -c Debug $Env:GITHUB_WORKSPACE\Test\Tx.Tests.sln
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x' # Specify the .NET Core version

    - name: Install dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --no-build --verbosity normal
",0.29721362229102166,0.4719857262196372,Valid,0.3333204178088788,C#
1083,https://github.com/henalbrod/blazor.auth0,"name: Github Actions CI

on: [push]

jobs:
  build:    
    
    container: 
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.102-bionic
    
    runs-on: ubuntu-16.04    
    
    steps:    
    
    - uses: actions/checkout@v1
    - name: Initializacion message
      run: echo Initializatin Blazor.Auth0 build!    
      
      
    - name: Build Blazor-Auth0-Shared project.
      run: |        
        dotnet build src/Blazor.Auth0.Shared
        
        
    - name: Build Blazor-Auth0-ClientSide project.   
      run: |
        dotnet build src/Blazor.Auth0.ClientSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build Blazor-Auth0-ServerSide project.
      run: |
        dotnet build src/Blazor.Auth0.ServerSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build AspNetCoreHosted Example.
      run: |        
        dotnet build examples/Examples.AspNetCoreHosted/Server --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build ClientSide Example.
      run: |                
        dotnet build examples/Examples.ClientSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build ServerSide Example.
      run: |                      
        dotnet build examples/Examples.ServerSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
       
       
    - name: Publish Blazor-Auth0-Share Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |            
        dotnet nuget push packages/Blazor-Auth0-Share*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 

    - name: Publish Blazor-Auth0-ClientSide Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |
        dotnet nuget push packages/Blazor-Auth0-ClientSide*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 

    - name: Publish Blazor-Auth0-ServerSide Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |            
        dotnet nuget push packages/Blazor-Auth0-ServerSide*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal
",0.037221668328348285,0.142862779799152,Valid,0.27090746818152384,C#
1068,https://github.com/guryanovev/crystalquartz,"name: dotnet package

on: [push]

jobs:
  build:

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: | 
            2.0.x
            2.1.x
            7.x
      - name: Setup NodeJS
        uses: actions/setup-node@v3
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          node-version: 18.x
      - name: Install extra NuGet packages
        run: nuget install ILRepack -OutputDirectory src/packages
      - name: CI Build
        working-directory: ./src
        run: |
            dotnet build CrystalQuartz.Build/CrystalQuartz.Build.csproj --configuration=Debug
            dotnet ""../tools/Rosalia/Rosalia.dll"" CrystalQuartz.Build/bin/Debug/netstandard2.0/CrystalQuartz.Build.dll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: Artifacts/gh-pages

  deploy:
    needs: build

    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # or the latest ""vX.X.X"" version tag for this action
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Run tests
        run: npm test
",0.1360613810741688,0.2854851732763433,Valid,0.08,C#
1042,https://github.com/electroly/sqlnotebook,"name: SQL Notebook

on: push

jobs:
  build:
    runs-on: windows-2022
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build
      shell: pwsh
      run: |
        Write-Output ""Decoding code signing certificate.""
        Set-Content -Path certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
        certutil -decode certificate.txt certificate.pfx
        $certificatePath = (Resolve-Path ""certificate.pfx"").Path
        $certificatePassword = ""${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}""

        Write-Output ""Finding msbuild.""
        $msbuildPath = & vswhere.exe -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
        Write-Output ""Found msbuild at: $msbuildPath""

        Write-Output ""Building x64.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x64
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-64bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-64bit.zip

        Write-Output ""Building x86.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x86
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-32bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-32bit.zip

    - name: Upload x64 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.msi
        path: SqlNotebook-64bit.msi

    - name: Upload x64 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.zip
        path: SqlNotebook-64bit.zip

    - name: Upload x86 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.msi
        path: SqlNotebook-32bit.msi

    - name: Upload x86 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.zip
        path: SqlNotebook-32bit.zip
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x' # Specify the .NET version

      - name: Restore dependencies
        run: dotnet restore src/

      - name: Build the project
        run: dotnet build src/ --configuration Release --no-restore

      - name: Run tests
        run: dotnet test src/ --no-build --verbosity normal
",0.0947867298578199,0.19346479594813829,Valid,0.049586776859504134,C#
87,https://github.com/skyline-emu/skyline,"name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  build:
    # Skip 'labeled' events that didn't add the 'ci' label
    if: |
      github.event_name != 'pull_request' ||
      github.event.action != 'labeled' ||
      github.event.label.name == 'ci'
    runs-on: ubuntu-latest
    env:
      JVM_OPTS: -Xmx6G
      IS_SKYLINE_SIGNED: ${{ secrets.KEYSTORE != '' }}
      UPLOAD_ARTIFACTS: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
      CMAKE_VERSION: ""3.22.1""
      NDK_VERSION: ""25.0.8775105""

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Restore CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 3Gi

      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-${{ hashFiles('app/**.kt', 'app/**.java') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-
            ${{ runner.os }}-gradle-

      - name: Install Ninja Build
        run: |
          sudo apt-get install -y ninja-build
          ln -s /usr/bin/ninja .

      - name: Install CMake & Android NDK
        run: echo ""yes"" | $ANDROID_HOME/tools/bin/sdkmanager ""cmake;${{ env.CMAKE_VERSION }}"" ""ndk;${{ env.NDK_VERSION }}"" --channel=3 | grep -v = || true

      - name: Decode Keystore
        if: env.IS_SKYLINE_SIGNED == 'true'
        env:
          KEYSTORE_ENCODED: ${{ secrets.KEYSTORE }}
        run: echo $KEYSTORE_ENCODED | base64 --decode > ""/home/runner/keystore.jks""

      - name: Android Assemble
        env:
          SIGNING_STORE_PATH: ""/home/runner/keystore.jks""
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          CMAKE_C_COMPILER_LAUNCHER: ""ccache""
          CMAKE_CXX_COMPILER_LAUNCHER: ""ccache""
          CCACHE_COMPILERCHECK: ""string:${{ env.NDK_VERSION }}""
        run: ./gradlew --stacktrace --configuration-cache --build-cache --parallel --configure-on-demand assembleFullRelease assembleFullReldebug

      - name: Rename APKs (Signed)
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk skyline-$GITHUB_RUN_NUMBER-reldebug.apk
          mv app/build/outputs/apk/full/release/app-full-release.apk skyline-$GITHUB_RUN_NUMBER-release.apk

      - name: Upload Signed Debug APK
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-reldebug.apk
          path: skyline-${{ github.run_number }}-reldebug.apk

      - name: Upload Signed Release APK
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-release.apk
          path: skyline-${{ github.run_number }}-release.apk

      - name: Rename APKs (Unsigned)
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk skyline-$GITHUB_RUN_NUMBER-unsigned-reldebug.apk
          mv app/build/outputs/apk/full/release/app-full-release.apk skyline-$GITHUB_RUN_NUMBER-unsigned-release.apk

      - name: Upload Unsigned Debug APK
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-unsigned-reldebug.apk
          path: skyline-${{ github.run_number }}-unsigned-reldebug.apk

      - name: Upload Unsigned Release APK
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-unsigned-release.apk
          path: skyline-${{ github.run_number }}-unsigned-release.apk
","name: Build and Test

on:
  push:
    branches: [ $ftx1 ]
  pull_request:
    branches: [ $ftx1 ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.10496292070735881,0.1464430821897867,Valid,0.1888830236812288,C++
1934,https://github.com/llnl/librom,"name: CI
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, labeled, synchronize]
    branches:
      - master

jobs:
  docker-image:
    uses: ./.github/workflows/docker.yml
  code-style:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Artistic Style version (for information)
        run: astyle --version
      - name: Check Stylization
        run: |
            cd ${GITHUB_WORKSPACE}/scripts
            ./stylize.sh astyle
  linux:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
      volumes:
        - /mnt:/mnt
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Build libROM
        run: |
            mkdir ${GITHUB_WORKSPACE}/build
            cd ${GITHUB_WORKSPACE}/build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - name: Build baseline libROM
        if: ${{ github.event.label.name == 'LGTM' || contains(github.event.pull_request.labels.*.name, 'LGTM') }}
        run: |
            cd ${GITHUB_WORKSPACE}/dependencies
            git clone https://github.com/LLNL/libROM.git
            cd libROM
            mkdir build
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - uses: ./.github/workflows/run_tests
  # mac:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install Mac dependencies
  #       run: |
  #           brew install open-mpi
  #           brew install openblas
  #           brew install lapack
  #           brew install scalapack
  #           brew install hdf5
  #     - name: Check out libROM
  #       uses: actions/checkout@v2
  #     - uses: ./.github/workflows/checkout_repo
  #     - name: Build libROM
  #       run: |
  #           export FC=/usr/local/bin/gfortran-10
  #           mkdir ${GITHUB_WORKSPACE}/build
  #           cd ${GITHUB_WORKSPACE}/build
  #           cmake -DCMAKE_BUILD_TYPE=Debug ..
  #           make
  #           cmake -DCMAKE_BUILD_TYPE=Optimized ..
  #           make
  #     - uses: ./.github/workflows/run_tests
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up swap space
        uses: pierotofy/set-swap-space@master

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build the project
        run: cmake --build build

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up swap space
        uses: pierotofy/set-swap-space@master

      - name: Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Configure CMake for tests
        run: cmake -S . -B build

      - name: Build the project for tests
        run: cmake --build build

      - name: Run unit tests
        run: cmake --build build --target test
",0.10850239343514931,0.27146664692198497,Valid,0.16820051618050258,C++
182,https://github.com/electron/rcedit,"name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        fetch-depth: 1
    - name: Build
      run: |
        cmake -E make_directory build/x64
        cmake -E make_directory build/Win32
        cd build/x64
        cmake -A x64 ../../
        cmake --build . --config RelWithDebInfo
        cd ../../build/Win32
        cmake -A Win32 ../../
        cmake --build . --config RelWithDebInfo
    - name: Copy to dist
      run: |
        cmake -E make_directory dist
        cmake -E copy build/x64/RelWithDebInfo/rcedit.exe dist/rcedit-x64.exe 
        cmake -E copy build/Win32/RelWithDebInfo/rcedit.exe dist/rcedit-x86.exe 
    - name: Print help
      shell: bash
      run: |
        set -eo pipefail
        dist/rcedit-x86.exe -h
        dist/rcedit-x64.exe -h
    - name: Upload artifacts
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
      with:
        name: dist
        path: dist/

  release:
    name: Release
    runs-on: windows-2022
    needs: build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: dist
          path: dist/
      - run: npm install -g semantic-release@22.0.6 semantic-release-export-data@v1.0.1
      - run: npx semantic-release@22.0.6 --dry-run
        id: get-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Stamp version
        if: steps.get-next-version.outputs.new-release-published == 'true'
        shell: bash
        run: |
          set -eo pipefail
          dist/rcedit-x64.exe dist/rcedit-x86.exe --set-product-version $VERSION --set-file-version $VERSION
          dist/rcedit-x86.exe -h | grep -q ""Rcedit v$VERSION""
          dist/rcedit-x86.exe dist/rcedit-x64.exe --set-product-version $VERSION --set-file-version $VERSION
          dist/rcedit-x64.exe -h | grep -q ""Rcedit v$VERSION""
        env:
          VERSION: ${{ steps.get-next-version.outputs.new-release-version }}
      - name: Run semantic release
        run: npx semantic-release@22.0.6
        if: steps.get-next-version.outputs.new-release-published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11

      - name: Set up CMake
        uses: actions/setup-cmake@v1

      - name: Create Build directory
        run: mkdir build

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build

      - name: Test
        run: cmake --build build --target test
        continue-on-error: true
",0.056672760511883,0.19319896410581658,Valid,0.19261911009483823,C++
322,https://github.com/garux/netradiant-custom,"name: build

on: [workflow_dispatch]

jobs:
  windows-msys:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        include:
          - arch: x86
            msystem: MINGW32
            prefix: mingw-w64-i686

          - arch: x86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-qt5-base ${{ matrix.prefix }}-libxml2 git
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build
      run: |
        make DOWNLOAD_GAMEPACKS=no MAKEFILE_CONF=msys2-Makefile.conf BUILD=release -j$(nproc)
        wget https://www.dropbox.com/s/b1xpajzfa6yjlzf/netradiant-custom-extra-gamepacks.zip
        unzip -o netradiant-custom-extra-gamepacks.zip -d ""install""
        wget https://www.dropbox.com/s/hcgkwzzmja3m6c0/netradiant-custom-extra-win.zip
        unzip -o netradiant-custom-extra-win.zip -d ""install""

    - uses: actions/upload-artifact@v3
      with:
        name: Windows-${{ matrix.arch }}
        path: install/
        if-no-files-found: error

  linux:
    name: ${{ matrix.config }} Linux ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]

    steps:
    - name: Install tools
      run: |
          sudo apt-get -qq update
          sudo apt-get -y install mesa-common-dev qtbase5-dev
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build
      run: |
        make -j 4 DOWNLOAD_GAMEPACKS=no CXXFLAGS=""-Wno-deprecated-copy""
        wget https://www.dropbox.com/s/b1xpajzfa6yjlzf/netradiant-custom-extra-gamepacks.zip
        unzip -o netradiant-custom-extra-gamepacks.zip -d ""install""

    - uses: actions/upload-artifact@v3
      with:
        name: Linux-${{ matrix.arch }}
        path: install/
        if-no-files-found: error

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [windows-msys, linux]
    runs-on: windows-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create binary archives
        shell: cmd
        run: |
          ""%programfiles%\7-Zip\7z.exe"" a -r netradiant-custom-windows-x86_64.zip  ""%CD%\Windows-x86_64\*""
          ""%programfiles%\7-Zip\7z.exe"" a -r netradiant-custom-linux-x86_64.zip    ""%CD%\Linux-x86_64\*""

      - name: Create latest build
        uses: ec-/action-automatic-releases@test
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ""latest""
          prerelease: true
          title: Development Build
          files: |
            *.zip
","name: CI Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: make

      - name: Build the application
        run: make

      - name: Run tests
        run: |
          if [ -d ""regression_tests"" ]; then
            cd regression_tests
            make test
          else
            echo ""No tests to run.""
          fi
",0.05888767720828789,0.16239902260289785,Valid,0.17236401050186348,C++
250,https://github.com/jmpews/dobby,"name: Builder

on:
  push:
    branches:
      - master

env:
  CMAKE_VERSION: 3.25.2
  LLVM_VERSION: 15.0.6
  NDK_VERSION: r25b

jobs:
  delete_latest_release:
    runs-on: ubuntu-latest
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: delete latest release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux_and_android:
    runs-on: ubuntu-latest
    needs: delete_latest_release
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: init linux cross compile env
      run: |
        sh scripts/setup_linux_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile linux
      run: |
        python3 scripts/platform_builder.py --platform=linux --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION
        cp include/dobby.h build/linux
        tar -zcvf build/dobby-linux-all.tar.gz build/linux
        cp build/dobby-linux-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile android
      run: |
        python3 scripts/platform_builder.py --platform=android --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION --android_ndk_dir=$HOME/opt/ndk-$NDK_VERSION
        cp include/dobby.h build/android
        tar -zcvf build/dobby-android-all.tar.gz build/android
        cp build/dobby-android-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-linux-all.tar.gz,build/dobby-android-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true

  macos_and_iphoneos:
    runs-on: macos-latest
    needs: delete_latest_release
    steps:
    - name: checkout dev
      uses: actions/checkout@master

    - name: init macos compile env
      run: |
        sh scripts/setup_macos_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile macos
      run: |
        python3 scripts/platform_builder.py --platform=macos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/macos
        tar -zcvf build/dobby-macos-all.tar.gz build/macos
        cp build/dobby-macos-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile iphoneos
      run: |
        python3 scripts/platform_builder.py --platform=iphoneos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/iphoneos
        tar -zcvf build/dobby-iphoneos-all.tar.gz build/iphoneos
        cp build/dobby-iphoneos-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-macos-all.tar.gz,build/dobby-iphoneos-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set up CMake
        uses: actions/setup-cmake@v1.1.3

      - name: Create Build Directory
        run: mkdir -p build

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build

      - name: Run tests
        run: cmake --build build --target test
        if: always() && github.event_name != 'push' || contains(github.event.pull_request.labels.*.name, 'run tests')
",0.01897810218978102,0.14527477549943535,Valid,0.19741737075408813,C++
212,https://github.com/datatechnology/cornerstone,"name: Build and test

on: 
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    - name: run build and test
      run: |
        sudo apt-get install -y gdb
        ulimit -c unlimited -S
        git submodule update --init --recursive
        mkdir build
        cd build
        cmake ..
        cmake --build .
        ./testr
        COREFILE=$(find . -maxdepth 3 -name ""core*"" | head -n 1)
        if [[ -f ""$COREFILE"" ]]; then gdb -c ""$COREFILE"" testr -ex ""thread apply all bt"" -ex ""set pagination 0"" -batch; fi
        
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: builds and logs
        path: |
          build
          !build/**/*.o
          !build/Makefile*
","name: CI Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up CMake
      uses: lukka/get-cmake@v4.0.2

    - name: Create Build Directory
      run: mkdir -p build

    - name: Configure CMake
      run: cmake -S . -B build

    - name: Build
      run: cmake --build build

    - name: Run Tests
      run: cmake --build build --target test
      if: always() && steps.build.outcome == 'success'",,,Invalid,,C++
167,https://github.com/kshk123/hashmap,"name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: macos-latest
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: ""https://sonarcloud.io""
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-macosx.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo ""$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-macosx/bin"" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-macosx-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-macosx-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-macosx-x86.zip -d $HOME/.sonar/
          echo ""$HOME/.sonar/build-wrapper-macosx-x86"" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-macosx-x86 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
          cd build
          ./hashMap
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url=""${{ env.SONAR_SERVER_URL }}"" --define sonar.cfamily.build-wrapper-output=""${{ env.BUILD_WRAPPER_OUT_DIR }}""

","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential cmake

    - name: Build project with CMake
      run: |
        mkdir build
        cd build
        cmake ..
        make

    - name: Run tests
      run: ./build/test
",0.13647912885662433,0.21239266042231697,Valid,0.21127450980392157,C++
757,https://github.com/9chu/luastgplus,"name: Build Windows

on:
  push:
    branches: [ master ]
    paths:
      - "".github/workflows/build_windows.yaml""
      - ""**.c""
      - ""**.h""
      - ""**.hpp""
      - ""**.cpp""
      - ""**.cmake""
      - ""**.patch""
      - ""**.ico""
      - ""**.rc""
      - ""**.json""
      - ""**.hpp.in""
      - ""**.py""
      - ""**/CMakeLists.txt""
  repository_dispatch:
    types: [ update ]

jobs:
  build_windows:
    #runs-on: windows-2022
    runs-on: self-hosted

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Prepare
        shell: powershell
        run: |
          # Set git tag
          $PROJECT_TAG=git describe --tags --dirty --match ""v*""
          Add-Content -Path $env:GITHUB_ENV -Value ""PROJECT_TAG=$PROJECT_TAG""
          # Find compiler
          $VCVAR_PATH=vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -find ""VC\**\vcvars64.bat""
          if (-Not (Test-Path -Path ""$VCVAR_PATH"")) { Write-Error ""VC++ compiler not found"" -ErrorAction Stop }
          Add-Content -Path $env:GITHUB_ENV -Value ""VCVAR_PATH=$VCVAR_PATH""
          # Create CPM cache folder
          mkdir /cpm_cache -ErrorAction SilentlyContinue
          Add-Content -Path $env:GITHUB_ENV -Value ""CPM_SOURCE_CACHE=/cpm_cache""
          # Create intermediate folders
          mkdir cmake-build-x64
          mkdir dist

      - name: Build x64 Shipping
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja""
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy shipping build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.exe

      - name: Build x64 Development
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja"" -DLSTG_SHIPPING=OFF
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy development build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.dev.exe
          
      - uses: actions/upload-artifact@v3
        with:
          name: LuaSTGPlus2-${{ env.PROJECT_TAG }}
          path: |
             dist/*.exe
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install Node.js dependencies
      run: npm install

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test
",0.052971137521222414,0.15527767920098176,Valid,0.11495123596860442,C++
162,https://github.com/cycling74/gen-plugin-export,"name: Release

on:
  create:
    tags:
      - v*
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: package
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        PACKAGE_REV=`echo $GITHUB_SHA | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        mkdir -p $PACKAGE_NAME
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        for f in *.md; do [ -e ""$f"" ] && cp ""$f"" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -e CMakeLists.txt ]; then cp CMakeLists.txt $PACKAGE_NAME; fi
        if [ -d code ]; then cp -r code $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d extensions ]; then cp -r extensions $PACKAGE_NAME; fi
        if [ -d externals ]; then cp -r externals $PACKAGE_NAME; fi
        if [ -d extras ]; then cp -r extras $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi
        if [ -d init ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d interfaces ]; then cp -r interfaces $PACKAGE_NAME; fi
        if [ -d java-classes ]; then cp -r java-classes $PACKAGE_NAME; fi
        if [ -d java-doc ]; then cp -r java-doc $PACKAGE_NAME; fi
        if [ -d javascript ]; then cp -r javascript $PACKAGE_NAME; fi
        if [ -d jsextensions ]; then cp -r jsextensions $PACKAGE_NAME; fi
        if [ -d jsui ]; then cp -r jsui $PACKAGE_NAME; fi
        if [ -d media ]; then cp -r media $PACKAGE_NAME; fi
        if [ -d misc ]; then cp -r misc $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d script ]; then cp -r script $PACKAGE_NAME; fi
        if [ -d support ]; then cp -r support $PACKAGE_NAME; fi
        if [ -d source ]; then cp -r source $PACKAGE_NAME; fi
        if [ -d tests ]; then cp -r tests $PACKAGE_NAME; fi

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}
        path: ${{ github.event.repository.name }}","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install dependencies
      run: npm install
    - name: Build
      run: npm run build
    - name: Run tests
      run: npm test
      env:
        CI: true",0.10270840661273303,0.12233313375927102,Valid,0.012461059190031152,C++
2083,https://github.com/open-dynamic-robot-initiative/master-board,"# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI - Linux via ROS

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          - {ROS_DISTRO: rolling, BUILDER: colcon}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'ici_with_unset_variables source /root/target_ws/install/setup.bash && cd /root/target_ws/build/master_board_sdk && make test'
      IMMEDIATE_TEST_OUTPUT: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci
      - uses: 'ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e'
        env: ${{ matrix.env }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache
          !~/.cache/exclude
        key: ${{ runner.os }}-cache-${{ hashFiles('**/lockfiles') }}

    - name: Setup ROS Industrial CI
      uses: ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e

    - name: Build project
      run: |
        # Add build commands here

    - name: Run tests
      run: |
        # Add test commands here
",0.12208258527827648,0.24217349862697574,Valid,0.0,C++
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
",0.10123315170633783,0.1066756667543365,Valid,0.23903292938627393,Java
28,https://github.com/liquibase/liquibase,"name: Build and Test



concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      archive_test_results:
        description: 'If set to true, the unit and integration test results will be archived to the build artifacts page.'
        required: false
        default: 'false'
  # DAT branches can get triggered from this logic
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

  push:
    branches:
      - master
      - main
      - github-action-**
    paths-ignore:
      - '**.md'

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  check_build_safety:
    permissions:
      contents: none
    name: Check if Build should be done
    runs-on: ubuntu-22.04
    steps:
      - name: Emit failure code for unsafe fork PRs
        if: github.event.pull_request && github.event.pull_request.head.repo.full_name != 'liquibase/liquibase' && github.event.label.name != 'SafeToBuild'
        run: |
          echo ""PR from Fork is NOT safe to build""
          echo ""A member of Liquibase team needs to apply label 'SafeToBuild'! ""
          exit 1

  setup:
    name: Setup
    needs: check_build_safety
    runs-on: ubuntu-22.04
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepoName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepoName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
      timestamp: ${{ steps.get-date.outputs.date }}
      setupSuccessful: ""true""
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed(""Fail every 5 run attempts to catch accidental infinite loops"");
            }
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Get current date
        id: get-date
        run: echo ""::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S %Z')""

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput(""thisSha"", helper.getCurrentSha());
            core.setOutput(""thisBranchName"", helper.getCurrentBranch());
            core.setOutput(""thisBranchFileName"", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_\.]/g, ""_""));
            core.setOutput(""thisRepoName"", helper.getRepositoryName());
            core.setOutput(""thisRepoOwner"", helper.getRepositoryOwner());

            let proStatusMessage = ""success"";
            let proFailed = false;

            let branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput(""standAlonePR"", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput(""standAlonePR"", true);
            }

            if (!branch.lastSuccessfulRunNumber) {
              proFailed = true;
              proStatusMessage = ""Matching pro branch has never passed. Falling back to master""
              branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"", [""main"", ""master""])
            }
            core.setOutput(""proBranchName"", branch.name);
            core.setOutput(""proBranchSha"", branch.sha);

            if (!proFailed) {
              if (!branch.workflowId) {
                proStatusMessage = ""does not have a ran workflow"";
                proFailed = true
              } else if ( branch.runStatus != ""completed"") {
                proStatusMessage = ""build is ""+ branch.runStatus;
                proFailed = true
              } else if ( branch.runConclusion != ""success"") {
                proStatusMessage = ""build conclusion was ""+branch.runConclusion;
                proFailed = true
              }
            }

            statusMessage = ""liquibase/liquibase-pro:""+branch.name+""@"" + branch.sha.substring(0, 7) + "" "" + proStatusMessage;
            console.log(""Pro failed?"" + proFailed + "": ""+statusMessage);

            github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": (proFailed ? ""failure"" : ""success""),
              ""target_url"": branch.runHtmlUrl,
              ""context"": ""Stable Liquibase Pro"",
              ""description"": statusMessage
            });

            core.setOutput(""stablePro"", !proFailed);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build:
    name: Build & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 20 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 20
          - os: windows-2019
            java: 20
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 11}}
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Build & Test Java 8
        if: ${{ matrix.java == 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" -pl '!liquibase-cdi-jakarta' clean verify -DskipITs
      - name: Build & Test Java non-jdk-8
        if: ${{ matrix.java != 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" clean verify -DskipITs

      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Save Jacoco Report for Sonar
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-jacoco-test-results
          path: |
            ./liquibase-standard/target/jacoco.exec

      - name: Archive Modules
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        testSystem:
           - db2
           - h2
           #- h2:1.4
           - hsqldb
           - mariadb
           - mssql
           - mysql
           - oracle
           - postgresql
           - sqlite
           - firebird
    needs: setup
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Prepare
        id: prepare
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput(""testResultsArtifact"", ""liquibase-test-results-integration-${{ matrix.testSystem }}"".replace(/[^a-zA-Z0-9\-_]/g, ""_""));

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Restore Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v2
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Run Tests
        run: mvn -B clean verify -DtrimStackTrace=false -Dliquibase.sdk.testSystem.test=${{ matrix.testSystem }} -Dliquibase.sdk.testSystem.acceptLicenses=${{ matrix.testSystem }} -Dtest='*IntegrationTest,*ExecutorTest' -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.testResultsArtifact }}
          path: |
            ./**/target/surefire-reports

      - name: Save Jacoco Report for Sonar
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-integration-jacoco-test-results-${{ matrix.testSystem }}
          path: |
            ./liquibase-integration-tests/target/jacoco.exec

  sonar:
    needs: [ build, integration-test ]
    uses: liquibase/build-logic/.github/workflows/sonar-test-scan.yml@v0.4.7
    with:
      thisBranchName: ${{ needs.setup.outputs.thisBranchName }}
      thisSha: ${{ needs.setup.outputs.thisSha }}
      liquibaseBranchName: ${{ needs.setup.outputs.liquibaseBranchName }}
      pullRequestNumber: ${{ github.event.pull_request.number }}
      pullRequestBranchName: ${{ github.event.pull_request.head.ref }}
      pullRequestBaseBranchName: ${{ github.event.pull_request.base.ref }}
      testedClassesModuleName: liquibase-standard
      dbPlatforms: h2,hsqldb,mariadb,mssql,mysql,oracle,postgresql,sqlite,firebird
    secrets: inherit

  package:
    name: Package Artifacts
    runs-on: macos-latest
    needs: [ setup, build ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      # this includes all the tar files included in the previous runs. So in the next step we deploy what was previously build
      - name: Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      ##Cache based on install4j file, since changes to JVM is seen in there. If install4j version changes without changing the file, change the prefix letter before hashFiles to force a new cache
      - name: Install4j Cache
        uses: actions/cache@v3.3.1
        with:
          key: install4j-A${{ hashFiles('liquibase-dist/src/main/install4j/liquibase.install4j') }}
          path: ~/.install4j8/**

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'
          overwrite-settings: false
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: |
            [
              {
                ""id"": ""liquibase"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              },
              {
                ""id"": ""liquibase-pro"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase-pro"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              }
            ]
          servers: |
            [
              {
                ""id"": ""liquibase-pro"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              },
              {
                ""id"": ""liquibase"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              }
            ]

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Version artifact based off of branch
      - name: Version Artifact
        run: |
          version=${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          # Replace / with - in branch name
          version=$(echo ""$version"" | sed 's/\//-/g')
          mvn versions:set -DnewVersion=""$version""

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo ""Saving apple key""
          echo ""$INSTALL4J_APPLE_KEY"" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo ""Saving windows key""
          echo ""$INSTALL4J_WINDOWS_KEY"" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx
          # we are packaging and deploying liquibase tar which includes liquibase-commercial
          mvn -B -pl liquibase-dist -P liquibase-commercial source:jar package -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}""

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && tar -xzf ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz)

          ## verify that the contents of the tar matches the expectation
          echo ""Comparing the contents of the tar.gz with the expected contents (using baseline file in liquibase-dist directory) to ensure that no new files were accidentally added. A failure here indicates that a new file was added to the tar.gz, and it should either be rectififed or added to the baseline.""
          brew install tree --quiet
          tree liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT -o actual-distribution-contents.txt --noreport
          # remove first line of actual, because it contains the folder name, which the expected will not have
          echo ""$(tail -n +2 actual-distribution-contents.txt)"" > actual-distribution-contents.txt
          diff actual-distribution-contents.txt liquibase-dist/expected-distribution-contents.txt
          rm -rf actual-distribution-contents.txt
          
          ##create zip file from tar content
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && zip -r ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip *)
          ls liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          
          ##create installer - disabled here but run as nightly job and as part of release workflow
          # (cd liquibase-dist && ${{ github.workspace }}/.github/util/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;
          
          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts/liquibase-core-0-SNAPSHOT.jar
          cp liquibase-core/target/liquibase-core-0-SNAPSHOT-sources.jar artifacts/liquibase-core-0-SNAPSHOT-sources.jar
          cp target/liquibase-0-SNAPSHOT-javadoc.jar artifacts/liquibase-core-0-SNAPSHOT-javadoc.jar

          ##create installer - disabled here but run as nightly job and as part of release workflow
          #cp liquibase-dist/target/liquibase-*-installer-* artifacts

          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-javadoc.jar artifacts

          echo ""Source code not available for liquibase-commercial"" > /tmp/readme.source.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar readme.source.txt)

          echo ""Javadocs not available for liquibase-commercial"" > /tmp/readme.javadocs.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar readme.javadocs.txt)

          commercialJarM2Location=/Users/runner/.m2/repository/org/liquibase/liquibase-commercial/${{ needs.setup.outputs.proBranchName }}-SNAPSHOT/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT.jar
          cp $commercialJarM2Location artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar artifacts

          .github/util/sign-artifacts.sh artifacts

          ##prepare branch-named convenience artifacts directories
          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.tar.gz
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          #cp liquibase-core/target/liquibase-core-0-SNAPSHOT.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts-named/liquibase-maven-plugin-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-jakarta-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT-deps.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}-deps.jar
          cp $commercialJarM2Location artifacts-named/liquibase-commercial-${{ needs.setup.outputs.thisBranchFileName }}.jar

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchFileName }}
          path: liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchFileName }}
          path: artifacts-named/*


      # Publish to GitHub Packages. We are building a tar file which includes liquibase-commercial hence we need ""-Dliquibase-pro.version""
      - name: Publish tar.gz package to GPM
        run: |
          mvn -B -pl liquibase-dist -P liquibase-commercial clean deploy -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # this triggers the pro-tests and test-harness to run
  finish:
    name: Finish Build
    runs-on: ubuntu-22.04
    needs: [ setup, build, package, sonar]
    if: ${{ needs.setup.outputs.setupSuccessful }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Coordinate Liquibase-Pro
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            let currentBranchInfo = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");

            let thisStatus = ""${{ needs.package.result }}"" == ""success"" ? ""success"" : ""failure"";
            let stablePro = (""${{ needs.setup.outputs.stablePro }}"" == ""true"");
            let standalonePR = ""${{ needs.setup.outputs.standAlonePR }}"" == ""true"";

            console.log(""Stand alone PR: ""+standalonePR);

            let runFunctionalTests = false;
            let markFunctionalTestsStatus = ""failure"";
            let markFunctionalTestsDescription = ""Unexpected setup"";

            if (stablePro) {
              console.log(""Pro is stable"");

              runFunctionalTests = true;
              markFunctionalTestsStatus = ""pending"";
              markFunctionalTestsDescription = ""Trigger internal functional tests"";
            } else {
              console.log(""Last pro was unstable"");

              runFunctionalTests = false;
              markFunctionalTestsStatus = ""failure"";
              markFunctionalTestsDescription = ""Liquibase Pro is unstable"";

              let checks = await github.rest.repos.listCommitStatusesForRef({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""ref"": currentBranchInfo.sha
              });

              let failedCheckingUs = false;
              if (standalonePR) {
                for (let status of checks.data) {
                  if (status.context == ""Stable Liquibase Core"") {
                    console.log(""Stable Liquibase Core is ""+ status.state);
                    failedCheckingUs = (status.state == ""failure"");
                  }
                }
              }

              if (failedCheckingUs) {
                console.log(""Rerun liquibase-commercial that was waiting on us"");

                //octokit removed the retryWorkflow function
                github.request(""POST ""+currentBranchInfo.runRerunUrl);

                //await github.rest.actions.retryWorkflow({
                //    ""owner"": ""liquibase"",
                //    ""repo"": ""liquibase-pro"",
                //    ""run_id"": currentBranchInfo.workflowId
                //});
              }
            }

            if (standalonePR) {
              console.log(""Do not mark base pro branch as included in this"");
            } else {
              console.log(""Mark 'Included in Liquibase Core' status as ""+thisStatus);
              github.rest.repos.createCommitStatus({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""sha"": currentBranchInfo.sha,
                ""state"": thisStatus,
                ""context"": ""Stable Liquibase Core"",
                ""target_url"": currentBranchInfo.runHtmlUrl,
                ""description"": ""Latest Liquibase Core build""
              });
            }

            if (runFunctionalTests) {
              let testsBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro-tests"");

              let notices = [];
              if (context.payload.pull_request) {
                console.log(""Sending pull request information"");
                notices = [""Triggered by PR "" + context.payload.pull_request.html_url];
              }
              console.log(""Trigger functional tests"");
              let workflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro-tests"",
                ""workflow_id"": ""test.yml"",
                ""ref"": testsBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });

              let testHarnessBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-test-harness"");
              if (testHarnessBranch.name == ""main"" || testHarnessBranch.name == ""master"") {
                testHarnessBranch.name = ""develop"";
              }
            
              console.log(""Trigger Test Harness tests"");
              let testHarnessWorkflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-test-harness"",
                ""workflow_id"": ""main.yml"",
                ""ref"": testHarnessBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""liquibaseRepo"": ""liquibase/liquibase"",
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });
            }

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Functional Tests"",
              ""description"": markFunctionalTestsDescription
            });

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Test Harness"",
              ""description"": markFunctionalTestsDescription
            });
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
",0.018116971246409746,0.022031384385342488,Valid,0.22402440094480713,Java
93,https://github.com/rackerlabs/blueflood,"name: ""Run tests on pull requests""

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        java-version: [ 8 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - name: Build and test
        run: |
          mvn clean install
          mvn jacoco:report jacoco:report-integration
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            */target/site
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Test with Maven
        run: mvn test
",0.03498542274052478,0.6282791794220167,Valid,0.43956043956043955,Java
52,https://github.com/ron190/jsql-injection,"on:
  push:
    branches: [ master ]
    
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  MAVEN_NASHORN: """"
  DOCKER_RESOURCES: ./model/src/test/resources/docker

jobs:

  build-jdk11:
    name: Test view on Docker (jdk-11)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      JSQL_DOCKERFILE: 3.8.1-jdk-11-slim
      MAVEN_NASHORN: -Dnashorn.args=--no-deprecation-warning
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Disable shallow clone to prevent Sonar warning
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Set Maven dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests dependency:tree

      - name: Build project container
        run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

      - name: Unit tests
        run: $DOCKER_RESOURCES/scripts/run-on-docker-no-network.sh 'cd view/ && mvn clean install -P tests'

  build:
    name: Tests on Docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - jdk: 3.8.6-eclipse-temurin-18
          nashorn: """"
        - jdk: 3.9.3-eclipse-temurin-20
          nashorn: """"
    env:
      JSQL_DOCKERFILE: ${{ matrix.jdk }}
      MAVEN_NASHORN: ${{ matrix.nashorn }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Disable shallow clone to prevent Sonar warning
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    
    - name: Set Maven dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
              
    - name: Install Maven dependencies
      run: mvn clean install -DskipTests dependency:tree
        
    - name: Run databases and LAMP
      run: |
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml build --parallel
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml up -d

    - name: List images and containers
      run: docker images && docker container ls

    - name: Database health checks and configuration
      run: |
        $DOCKER_RESOURCES/scripts/healthcheck/healthcheck.sh
        $DOCKER_RESOURCES/scripts/buff.sh
        $DOCKER_RESOURCES/scripts/verify.sh

    - name: Build project container
      run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

    - name: Unit and integration tests with Sonar scan
      # Profile usage for skipITs/skipTests (env var MAVEN_OPS not working)
      # Note: 'mvn sonar:sonar' not working, modules reports not found, use 'mvn verify sonar:sonar' for reliability
      # Note: gh actions sonarsource/sonarqube-scan-action not working properly => analysis not reliable
      run: $DOCKER_RESOURCES/scripts/run-on-docker.sh 'mvn clean install sonar:sonar -P tests org.pitest:pitest-maven:mutationCoverage'

    - name: Databases statistics
      run: $DOCKER_RESOURCES/scripts/verify.sh

    - name: Copy files and coverage reports from container
      # Sonar scans unmerged reports, Codacy/Codecov requires scanning each files (or reports merged)
      run: |
        mkdir -p shared-resources/model shared-resources/view
        docker cp docker_jsql-container:view/. shared-resources/view
        docker cp docker_jsql-container:model/. shared-resources/model
        docker cp docker_jsql-container:pom.xml shared-resources

    - name: Codecov scan
      run: cd shared-resources && bash <(curl -s https://codecov.io/bash) || true

    - name: Codacy scan
      run: cd shared-resources && bash <(curl -Ls https://coverage.codacy.com/get.sh) || true

    - name: Publish coverage
      run: |
        git checkout docs
        rm -r view/target/site/ view/target/pit-reports/ model/target/site/ model/target/pit-reports/ || echo 'Folder(s) not found'
        FOLDER=view/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=view/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        git config user.name ""Github Actions""
        git config user.email no-response@github.com    
        git pull -s ours  # ignore remote changes when updated by parallel jobs
        # folders view/target model/target contain other build files from 'Install Maven dependencies'
        git add -f view/target/site/jacoco model/target/site/jacoco view/target/pit-reports model/target/pit-reports
        git commit -m ""Publish jacoco and pitest reports""
        git push

  codeql:
    name: CodeQL
    uses: ./.github/workflows/run-codeql.yml

  release:
    needs: [build-jdk11, build, codeql]
    name: Publish
    uses: ./.github/workflows/release.yml
    secrets: inherit","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn -B clean package --file pom.xml

      - name: Run tests with Maven
        run: mvn -B test --file pom.xml",0.12330263773997191,0.12267457603504255,Valid,0.22474411197107988,Java
55,https://github.com/qiniu/android-sdk,"on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
name: Run Test Cases
jobs:
  test-on-mac:
    runs-on: macos-12
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Setup Java Version
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: Run Cases
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 22
          profile: Nexus 6
          arch: x86_64
          script: |
            ./gradlew connectedCheck
            ./gradlew build
            ./gradlew :library:createDebugAndroidTestCoverageReport --info --stacktrace
            ./gradlew connectedAndroidTest  --info --stacktrace
      - name: Upload coverage.txt
        run: |
          bash <(curl -s https://codecov.io/bash)
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.125,0.46224995801004876,Valid,0.21294342475386566,Java
65,https://github.com/apache/druid,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Cron Job ITs""
on:
  schedule: # Runs by default on master branch
    - cron: '0 3 * * *' # Runs every day at 3:00 AM UTC
  pull_request:
    paths:
      - 'owasp-dependency-check-suppressions.xml'
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches

jobs:
  build:
    if: (github.event_name == 'schedule' && github.repository == 'apache/druid')
    name: build (jdk8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'

      - name: Cache Maven m2 repository
        id: maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-8-${{ github.sha }}

      - name: Maven build
        id: maven_build
        run: |
          ./it.sh ci

  integration-index-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [batch-index, input-format, input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-index-slow, kafka-transactional-index, kafka-transactional-index-slow, kafka-data-format, ldap-security, realtime-index, append-ingestion, compaction]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      group: ${{ matrix.testing_group }}

  integration-index-tests-indexer:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-transactional-index, kafka-index-slow, kafka-transactional-index-slow, kafka-data-format, append-ingestion, compaction ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: indexer
      group: ${{ matrix.testing_group }}

  integration-query-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ query, query-retry, query-error, security, high-availability ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      override_config_path: ./environment-configs/test-groups/prepopulated-data
      group: ${{ matrix.testing_group }}

  integration-other-tests:
    strategy:
      fail-fast: false
      matrix:
        indexer: [ middleManager, indexer ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -DexcludedGroups=batch-index,input-format,input-source,perfect-rollup-parallel-batch-index,kafka-index,query,query-retry,query-error,realtime-index,security,ldap-security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage,append-ingestion,compaction,high-availability,upgrade,shuffle-deep-store,custom-coordinator-duties
      use_indexer: ${{ matrix.indexer }}
      group: other

  security_vulnerabilities:
    if: github.repository == 'apache/druid'
    name: security vulnerabilities
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: maven

      - name: maven build # needed to rebuild incase of maven snapshot resolution fails
        run: mvn clean install dependency:go-offline -P dist -P skip-static-checks,skip-tests -Dmaven.javadoc.skip=true -Dcyclonedx.skip=true -Dweb.console.skip=true

      - name: security vulnerabilities check
        run: |
          mvn dependency-check:purge dependency-check:check || { echo ""
          The OWASP dependency check has found security vulnerabilities. Please use a newer version
          of the dependency that does not have vulnerabilities. To see a report run
          `mvn dependency-check:check`
          If the analysis has false positives,
          they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
          information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
          "" && false; }
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Test with Maven
        run: mvn test
",0.07376798285889195,0.1175803228277098,Valid,0.19824098633095952,Java
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test
",0.029804849201655825,0.037870228510434985,Valid,0.20556361078696928,Java
42,https://github.com/dotcms/core,"name: Sonar Qube Scan Gradle
on:
  push:
    branches:
      - master 
      - testing-sonarqube
    paths: ['dotCMS/**']
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - master
      - release-*
    paths: ['dotCMS/**']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_SCANNER_OPTS: ""-Xmx3g""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd dotCMS && ./gradlew generateDependenciesFromMaven && ./gradlew build sonarqube --info
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: ./mvnw clean install -DskipTests

      - name: Run tests
        run: ./mvnw test
",0.2979915927136852,0.4392541779786325,Valid,0.2,Java
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
",0.02403393025447691,0.17895198741195947,Valid,0.1887549377699854,Java
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run tests
        run: mvn test
",0.03238491788110109,0.15641129654779284,Valid,0.16493422678939343,Java
602,https://github.com/wq/django-rest-pandas,"name: Tests

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.variant }} py=${{ matrix.python-version }} dj=${{ matrix.django-version }} drf=${{ matrix.drf-version }} pandas=${{ matrix.pandas-version }}
    runs-on: ubuntu-22.04
    env:
      TEST_VARIANT: ${{ matrix.variant }}
    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"", ""3.8""]
        django-version: [4.1.7]
        drf-version: [3.14.0]
        pandas-version: [1.5.3]
        variant: ['']
        include:
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: matplotlib
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: django-pandas
        - python-version: ""3.11""
          django-version: 3.2.14
          drf-version: 3.13.1
          pandas-version: 1.5.3
          variant: ''
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m pip install flake8 wheel
        python -m pip install django==${{ matrix.django-version }}
        python -m pip install djangorestframework==${{ matrix.drf-version }}
        python -m pip install pandas==${{ matrix.pandas-version }}
        python -m pip install itertable[oldexcel]
    - name: Install matplotlib
      if: ${{ matrix.variant == 'matplotlib' }}
      run: python -m pip install matplotlib
    - name: Install django-pandas
      if: ${{ matrix.variant == 'django-pandas' }}
      run: python -m pip install django-pandas
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: python -m unittest discover -s tests -t . -v
    - name: Test build
      run: python -m build
  npm:
    name: ""@wq/${{ matrix.package }}""
    runs-on: ubuntu-22.04
    env:
      PACKAGE: ${{ matrix.package }}
    strategy:
      matrix:
        python-version: [""3.11""]
        node-version: [18]
        package:
          - pandas
          - chart
          - analyst
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Node ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        npm ci
        npm run build
    - name: Lint with ESLint
      run: npm run lint
    - name: Test with Jest
      run: |
         cd packages/$PACKAGE
         npm run test
    - uses: smartsquaregmbh/delete-old-packages@v0.4.0
      if: github.event_name == 'push'
      with:
         keep: 5
         names: ${{ matrix.package }}
    - name: Publish to Github Packages
      if: github.event_name == 'push'
      run: |
         python -m pip install setuptools-scm
         ./set_dev_version.sh
         echo ""registry=https://npm.pkg.github.com/wq"" > .npmrc
         echo ""//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}"" >> .npmrc
         cd packages/$PACKAGE
         npm publish
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npx eslint .

      - name: Run tests
        run: npm test

      - name: Build the project
        run: npm run build
",0.004152249134948097,0.12421777196115687,Valid,0.345656222826931,JavaScript
5112,https://github.com/tw-in-js/twind,"name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  build:
    name: 🏗️  Build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
      deployments: write # to create deployments (cloudflare/pages)

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: 🔧  Setup
        uses: ./.github/actions/setup

      - name: 🩺  Check
        run: pnpm check

      - name: 🤘  Test
        run: pnpm test:coverage

      - name: 📖  Coveralls
        continue-on-error: true
        # prevents this step from running on forks
        if: ${{ github.repository == 'tw-in-js/twind' }}
        # until https://github.com/coverallsapp/github-action/issues/135 is closed
        uses: chenrui333/github-action@a1a1a8a300a7e89df3630639df8fb23de5cc6368
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      - name: 🚚  Create Release PR or Publish to npm
        id: changesets
        if: ${{ github.repository == 'tw-in-js/twind' && github.event_name == 'push' }}
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          publish: pnpm changeset:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # wait a bit and then set latest for twind back to v0.16
      # because some are using CDNs without specifing a version
      - name: 📝  Keep latest tag on twind@v0.16.19
        if: steps.changesets.outputs.published == 'true'
        run: |
          sleep 20
          cat << EOF > ""$HOME/.npmrc""
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
          npm dist-tag add twind@0.16.19 latest || true
          npm deprecate twind@1.x ""use @twind/core instead"" || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🌎  Deploy twind.style
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: main

      - name: 🌎  Deploy twind.run
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: main

  publish-pre-releases:
    name: 🚚  Publish pre-releases
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ needs.build.outputs.published != 'true' }}
    permissions:
      contents: read
      pull-requests: write
      deployments: write

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3

      - name: 🔧  Setup
        uses: ./.github/actions/setup
        with:
          # only install dependencies for packages that are published and for the sites
          installArgs: --filter=""."" --filter=""./packages/*"" --filter=""./sites/*""

      - name: 🚚  Publish pre-release to npm
        id: publish
        uses: ./.github/actions/publish-prerelease
        with:
          tag: ${{ (github.event_name == 'push' && 'next') || 'canary'}}
          template: ${{ (github.event_name == 'push' && '{tag}-{datetime}') || '{tag}-{commit}'}}
          hasChangesets: ${{ needs.build.outputs.hasChangesets }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # deploy sites using the published package versions
      - name: 🌎  Deploy twind.style
        id: deploy_twind_style
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 🌎  Deploy twind.run
        id: deploy_twind_run
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 📝  Comment PR
        if: ${{ github.event.number }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment_tag: '## Deployed site previews with [![Cloudflare Pages]'
          message: |
            > **Latest commit**: ${{ github.sha }}

            ## Deployed site previews with [![Cloudflare Pages](https://img.shields.io/badge/Cloudflare%20Pages-F38020?style=for-the-badge&logo=Cloudflare&logoColor=white)](https://pages.dev)

            ### twind.style

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.url }}'>${{ steps.deploy_twind_style.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.branch }}'>${{ steps.deploy_twind_style.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.version }}'>${{ steps.deploy_twind_style.outputs.version }}</a></td></tr>
            </table>

            ### twind.run

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.url }}'>${{ steps.deploy_twind_run.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.branch }}'>${{ steps.deploy_twind_run.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.version }}'>${{ steps.deploy_twind_run.outputs.version }}</a></td></tr>
            </table>

            ## Published to [npm](https://www.npmjs.com)

            **Dist Tag**: ${{ steps.publish.output.tag }}

            **Packages**:

            ${{ steps.publish.output.packages }}
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies with pnpm
        run: |
          npm install -g pnpm
          pnpm install

      - name: Build the project
        run: pnpm run build

      - name: Run tests
        run: pnpm run test
",0.03161320316132032,0.06340713187214657,Valid,0.3483582949308756,JavaScript
5268,https://github.com/pillarjs/parseurl,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: beautify-benchmark benchmark fast-url-parser nyc

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.3 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.3 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 10.x
          node-version: ""10.24""
          npm-i: mocha@8.4.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 12.x
          node-version: ""12.22""
          npm-i: mocha@9.2.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 13.x
          node-version: ""13.14""
          npm-i: mocha@9.2.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 14.x
          node-version: ""14.21""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 15.x
          node-version: ""15.14""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 16.x
          node-version: ""16.19""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 17.x
          node-version: ""17.9""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 18.x
          node-version: ""18.13""
          npm-rm: beautify-benchmark benchmark fast-url-parser

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls nyc | grep -q nyc; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.nyc != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Lint with ESLint
        run: npx eslint .

      - name: Run benchmarks
        run: npm run benchmark

      - name: Run tests
        run: npm test
",0.03588098016336056,0.079048285513167,Valid,0.3100414078674948,JavaScript
5291,https://github.com/pillarjs/csrf,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: beautify-benchmark benchmark nyc

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.2 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.2 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0

        - name: Node.js 10.x
          node-version: ""10.23""
          npm-i: mocha@8.4.0

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0

        - name: Node.js 12.x
          node-version: ""12.22""

        - name: Node.js 13.x
          node-version: ""13.14""

        - name: Node.js 14.x
          node-version: ""14.20""

        - name: Node.js 15.x
          node-version: ""15.14""

        - name: Node.js 16.x
          node-version: ""16.17""

        - name: Node.js 17.x
          node-version: ""17.7""

        - name: Node.js 18.x
          node-version: ""18.7""

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls nyc | grep -q nyc; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.nyc != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Lint with ESLint
      run: npx eslint . --ext .js

    - name: Run benchmarks
      run: npm run benchmark

    - name: Run tests
      run: npm test
",0.01518474776446769,0.08835964848022142,Valid,0.3100414078674948,JavaScript
5280,https://github.com/jshttp/fresh,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: istanbul

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.3

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.3

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0

        - name: Node.js 10.x
          node-version: ""10.24""
          npm-i: mocha@8.4.0

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0

        - name: Node.js 12.x
          node-version: ""12.22""

        - name: Node.js 13.x
          node-version: ""13.14""

        - name: Node.js 14.x
          node-version: ""14.19""

        - name: Node.js 15.x
          node-version: ""15.14""

        - name: Node.js 16.x
          node-version: ""16.15""

        - name: Node.js 17.x
          node-version: ""17.9""

        - name: Node.js 18.x
          node-version: ""18.4""

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove non-test npm modules
      run: |
        echo beautify-benchmark benchmark | \
          xargs -n1 npm rm --silent --save-dev

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls istanbul | grep -q istanbul; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.istanbul != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Dependencies
        run: npm install

      - name: Lint with ESLint
        run: npm run lint

      - name: Run Benchmark Tests
        run: npm run benchmark

      - name: Run Unit Tests
        run: npm test

      - name: Upload Coverage to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
",0.052328623757195186,0.12907438630634638,Valid,0.291078133381012,JavaScript
4736,https://github.com/shd101wyy/mume,"name: ""Test""
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: ""Test""
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 'Install nodejs 18'
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: 'Build and test'
        run: |
          corepack enable
          yarn install
          yarn check:all
          yarn test
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build

      - name: Run tests
        run: npm test
",0.5285338015803336,0.6510083103859815,Valid,0.27692307692307694,JavaScript
3945,https://github.com/react-component/upload,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: cache package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: create package-lock.json
        run: npm i --package-lock-only

      - name: hack for singe file
        run: |
          if [ ! -d ""package-temp-dir"" ]; then
            mkdir package-temp-dir
          fi
          cp package-lock.json package-temp-dir

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: install
        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
        run: npm ci
  
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: lint
        run: npm run lint

    needs: setup
  
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: compile
        run: npm run compile

    needs: setup
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: coverage
        run: npm test -- --coverage && bash <(curl -s https://codecov.io/bash)

    needs: setup
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'

    - name: Cache node modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run Tests
      run: npm test
",0.1424817518248175,0.20268111875851008,Valid,0.2564102564102564,JavaScript
2079,https://github.com/dfinity/examples,"name: hosting-photo-storage
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - hosting/photo-storage/**
      - .github/workflows/provision-darwin.sh
      - .github/workflows/provision-linux.sh
      - .github/workflows/hosting-photo-storage-example.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  hosting-photo-storage-darwin:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Provision Darwin
        run: bash .github/workflows/provision-darwin.sh
      - name: Hosting Photo Storage Darwin
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
  hosting-photo-storage-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Provision Linux
        run: bash .github/workflows/provision-linux.sh
      - name: Hosting Photo Storage Linux
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Install npm dependencies
      run: npm install

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test
",0.15400955921402018,0.2656249594780381,Valid,0.19252120809955323,JavaScript
3303,https://github.com/cloudera/hue,"name: Frontend CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.less'
      - '**.scss'
      - '**.vue'
      - 'package*.json'
      - '**commitflow-frontend.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Caching npm with setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: run commit title format check
      run: ./tools/ci/check_for_commit_message.sh 

    - name: run npm version checker
      run: npm run check-pinned-versions

    - name: run npm license checker
      run: npm run check-license

    - name: run npm absolute path detection
      run: npm run check-absolute-paths

    - name: run js lint
      run: npm run lint

    - name: run style lint
      run: npm run style-lint

    - name: run js tests
      run: |
        # https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
        sed -i 's/""test"": ""jest""/""test"": ""jest --runInBand""/g' package.json

        npm run test","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run linters
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Python tests
        run: pytest
",0.2662337662337662,0.5268604603503769,Valid,0.2073704333647139,JavaScript
5107,https://github.com/aws/aws-cdk,"# https://octokit.github.io/rest.js
# https://github.com/actions/toolkit/blob/master/packages/github/src/context.ts

name: PR Linter
on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - edited
      - opened
      - synchronize
      - reopened
  workflow_run:
    workflows: [PR Linter Trigger]
    types:
      - completed
  status:

jobs:
  download-if-workflow-run:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.pr_output.outputs.pr_number }}
      pr_sha: ${{ steps.pr_output.outputs.pr_sha }}
    # if conditions on all individual steps because subsequent jobs depend on this job
    # and we cannot skip it entirely
    steps:
      - name: 'Download artifact'
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == ""pr_info""
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_info.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        if: github.event_name == 'workflow_run'
        run: unzip pr_info.zip

      - name: 'Make GitHub output'
        if: github.event_name == 'workflow_run'
        id: 'pr_output'
        run: |
          echo ""cat pr_number""
          echo ""pr_number=$(cat pr_number)"" >> ""$GITHUB_OUTPUT""
          echo ""cat pr_sha""
          echo ""pr_sha=$(cat pr_sha)"" >> ""$GITHUB_OUTPUT""

  validate-pr:
    # Necessary to have sufficient permissions to write to the PR
    permissions:
      contents: read
      pull-requests: write
      statuses: read
      issues: read
    runs-on: ubuntu-latest
    needs: download-if-workflow-run
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install & Build prlint
        run: yarn install --frozen-lockfile && cd tools/@aws-cdk/prlint && yarn build+test

      - name: Validate
        uses: ./tools/@aws-cdk/prlint
        env:
          GITHUB_TOKEN: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          # PR_NUMBER and PR_SHA is empty if triggered by pull_request_target, since we already have that info
          PR_NUMBER: ${{ needs.download-if-workflow-run.outputs.pr_number }}
          PR_SHA: ${{ needs.download-if-workflow-run.outputs.pr_sha }}
          REPO_ROOT: ${{ github.workspace }}
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.02918855808523059,0.13658968103755667,Valid,0.12870183988802547,JavaScript
572,https://github.com/mozilla/rust-android-gradle,"name: CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events, but only for the `master` branch (generally) or the `citest`
# branch (for testing).
on:
  push:
    branches: [master, citest]
  pull_request:
    branches: [master]

jobs:
  generate_versions:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Gradle test
        run: |
          ./gradlew -p plugin generateTestTasksJson

      - id: setup-matrix
        run: echo ""::set-output name=matrix::$(cat plugin/build/build-resources/androidTestTasks.json)""

      - name: debug
        run: echo ${{ steps.setup-matrix.outputs.matrix }}

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

  samples:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Assemble samples/app
        run: |
          ./gradlew -p samples/app :assembleDebug --info --warning-mode all

      - name: Assemble samples/library
        run: |
          ./gradlew -p samples/library :assembleDebug --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_unversioned_tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin test --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_version_tests:
    needs: [generate_versions] # , sanity_check]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        androidTestTask: ${{ fromJson(needs.generate_versions.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin ${{ matrix.androidTestTask }} --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.044585987261146494,0.11248393380337496,Valid,0.5053111086127091,Kotlin
582,https://github.com/jakewharton/diffuse,"name: build

on:
  pull_request:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 20

      - uses: gradle/gradle-build-action@v2

      - run: ./gradlew build

      - uses: actions/upload-artifact@v3
        with:
          name: diffuse-latest-binary.jar
          path: diffuse/build/libs/diffuse-*-binary.jar
          if-no-files-found: error

      #- run: ./gradlew uploadArchives
      #  if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/diffuse' }}
      #  env:
      #    ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
      #    ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: diffuse/build/libs/diffuse-*-binary.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Set SHA
        id: shasum
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=sha::""$(shasum -a 256 diffuse/build/libs/diffuse-*-binary.jar | awk '{printf $1}')""

      - name: Bump Brew
        if: startsWith(github.ref, 'refs/tags/')
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GH_HOMEBREW_TOKEN }}
        run: |
          git config --global user.email ""41898282+github-actions@users.noreply.github.com""
          git config --global user.name ""github-actions""
          # Update to ensure we have the latest version which supports arbitrary default branches.
          brew update
          brew tap JakeWharton/repo
          brew bump-formula-pr -f --version=${{ steps.get_version.outputs.version }} --no-browse --no-audit \
            --sha256=${{ steps.shasum.outputs.sha }} \
            --url=""https://github.com/JakeWharton/diffuse/releases/download/${{ steps.get_version.outputs.version }}/diffuse-${{ steps.get_version.outputs.version }}-binary.jar"" \
            JakeWharton/repo/diffuse
","name: Build and Test

on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Run tests
        run: ./gradlew test
",0.120625,0.20395316259613294,Valid,0.4654783484463473,Kotlin
406,https://github.com/jetbrains-research/astminer,"name: Build with lint

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    needs: setup
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build astminer
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-report
          path: build/astminer/reports/tests/**/*

      - name: Upload Detekt Report
        uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: build/astminer/reports/detekt/detekt.sarif

  run-on-configs:
    needs: build
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Prepare shadowJar
        run: ./gradlew shadowJar

      - name: Run antlr_java_js_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_java_js_ast.yaml

      - name: Run antlr_python_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_python_paths.yaml

      - name: Run gumtree_java_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_ast.yaml

      - name: Run gumtree_java_function_names_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_function_names_paths.yaml
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.05718529520980319,0.21263129861127725,Valid,0.4594141332490809,Kotlin
616,https://github.com/oolong-kt/oolong,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Test
        run: |
          ./gradlew -Dkjs=false -Dknative=false build --stacktrace


  all-platforms:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Test
        run: |
          ./gradlew build

  publish:
    runs-on: macos-11
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Upload Artifacts
        run: |
          ./gradlew clean publish --stacktrace
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  publish-windows:
    runs-on: windows-latest
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Upload Artifacts
        run: |
          ./gradlew clean publishMingwX64PublicationToMavenCentralRepository --stacktrace
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  publish-website:
    runs-on: ubuntu-latest
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Prepare docs
        run: .buildscript/prepare_mkdocs.sh

      - name: Build mkdocs
        run: |
          pip3 install mkdocs-material mkdocs-macros-plugin
          mkdocs build

#      - name: Restore 1.x docs
#        run: .buildscript/restore_v1_docs.sh

      - name: Deploy docs
        if: success()
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GH_CLIPPY_TOKEN }}
          BRANCH: gh-pages
          FOLDER: site
          SINGLE_COMMIT: true
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: ./gradlew build

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install click==7.1.2 future==0.18.2 jinja2==2.11.3 livereload==2.6.3 lunr==0.5.8 markdown==3.2.2 markupsafe==1.1.1 mkdocs==1.2.3 mkdocs-macros-plugin==0.4.9 mkdocs-material==5.5.7 mkdocs-material-extensions==1.0 pygments==2.7.4 pymdown-extensions==8.0 python-dateutil==2.8.1 pyyaml==5.4 repackage==0.7.3 six==1.15.0 termcolor==1.1.0 tornado==6.0.4

    - name: Run tests
      run: ./gradlew test
",0.08101062763184279,0.2054719045007473,Valid,0.44745972523030036,Kotlin
615,https://github.com/kotlin/kotlin-spec,"name: Build Kotlin spec on PRs

on: [pull_request]

jobs:
  build-spec:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: 'gradle'
      - name: Setup pandoc
        env:
          PANDOC_VERSION: 2.14.2
          PANDOC_DEB: pandoc-2.14.2-1-amd64.deb
        run: |
          curl -sLO https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/$PANDOC_DEB
          sudo dpkg -i $PANDOC_DEB
          rm $PANDOC_DEB
      - name: Setup Kotlin spec dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gpp
          sudo apt-get install -y librsvg2-bin
          sudo apt-get install -y npm
          curl -sL https://deb.nodesource.com/setup_18.x | sudo bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y --no-install-recommends texlive-latex-extra
          sudo apt-get install -y --no-install-recommends texlive-fonts-extra
          sudo apt-get install -y --no-install-recommends texlive-bibtex-extra
          sudo apt-get install -y --no-install-recommends texlive-science
          sudo apt-get install -y --no-install-recommends fontconfig
          sudo apt-get install -y --no-install-recommends lmodern
      - name: Build Kotlin spec
        run: |
          ./gradlew buildPdf buildWeb
      - name: Smoke test Kotlin grammar
        run: |
          ./gradlew :grammar:jar
      - name: 'Upload Kotlin spec artifacts'
        uses: ./.github/actions/upload-spec-artifacts
","name: Build and Test

on:
  push:
    branches:
      - release
  pull_request:
    branches:
      - release

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.20526550647032574,0.273602832225308,Valid,0.420477402081012,Kotlin
339,https://github.com/gotify/android,"on: [push, pull_request]

name: Build

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ./gradlew build --stacktrace
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify.apk
          tag: ${{ github.ref }}
          overwrite: true
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install NPM dependencies
        run: npm install

      - name: Run NPM tests
        run: npm test
",0.1471950591868245,0.3960510921891474,Valid,0.4093210802700675,Kotlin
378,https://github.com/taboolib/taboolib,"name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    if: ""contains(github.event.head_commit.message, 'dev')""
    runs-on: ubuntu-latest
    steps:
      # 环境配置
      - name: checkout repository
        uses: actions/checkout@v2
      - name: cache gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 8.0
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8.0

      # 设置权限
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      # 编译测试
      - name: build test
        id: publish_1
        continue-on-error: true
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew build -Pbuild=$GITHUB_RUN_NUMBER -PtaboolibUsername=$NEXUS_USERNAME -PtaboolibPassword=$NEXUS_PASSWORD","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: 
          ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Run tests
      run: ./gradlew test
",0.1831907398087569,0.5981351605502552,Valid,0.39936023622047245,Kotlin
609,https://github.com/jakewharton/dependency-tree-diff,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - uses: actions/upload-artifact@v2
        with:
          name: dependency-tree-diff.jar
          path: build/dependency-tree-diff.jar
          if-no-files-found: error

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: build/dependency-tree-diff.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Set SHA
        id: shasum
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=sha::""$(shasum -a 256 build/dependency-tree-diff.jar | awk '{printf $1}')""

      - name: Bump Brew
        if: startsWith(github.ref, 'refs/tags/')
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GH_HOMEBREW_TOKEN }}
        run: |
          git config --global user.email ""41898282+github-actions@users.noreply.github.com""
          git config --global user.name ""github-actions""
          # Update to ensure we have the latest version which supports arbitrary default branches.
          brew update
          brew tap JakeWharton/repo
          brew bump-formula-pr -f --version=${{ steps.get_version.outputs.version }} --no-browse --no-audit \
            --sha256=${{ steps.shasum.outputs.sha }} \
            --url=""https://github.com/JakeWharton/dependency-tree-diff/releases/download/${{ steps.get_version.outputs.version }}/dependency-tree-diff.jar"" \
            JakeWharton/repo/dependency-tree-diff
","name: Build and Test

on:
  push:
    branches:
      - trunk
  pull_request:
    branches:
      - trunk

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",,,Invalid,,Kotlin
580,https://github.com/gridstone/debugdrawer,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Setup variables for versions
      run: |
        VERSION_NAME=`cat gradle.properties | grep ""VERSION_NAME"" | cut -d'=' -f2`
        IS_SNAPSHOT=$( [[ ""$VERSION_NAME"" == *""SNAPSHOT""* ]] && echo ""true"" || echo ""false"" )
        IS_NEW_VERSION=$( git tag -l | grep -q ""^$VERSION_NAME$"" && echo ""false"" || echo ""true"" )
        echo ""VERSION_NAME=$VERSION_NAME"" >> $GITHUB_ENV
        echo ""IS_SNAPSHOT=$IS_SNAPSHOT"" >> $GITHUB_ENV
        echo ""IS_NEW_VERSION=$IS_NEW_VERSION"" >> $GITHUB_ENV

    - name: Generate release notes
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false'  }}
      run: ./gradlew -q getChangelog >> RELEASE_NOTES.md

    - name: Release on Github
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' && env.IS_NEW_VERSION == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION_NAME }}
        body_path: RELEASE_NOTES.md
        files: |
          debugdrawer/build/outputs/aar/debugdrawer-debug.aar
          debugdrawer-leakcanary/build/outputs/aar/debugdrawer-leakcanary-release.aar
          debugdrawer-okhttp-logger/build/outputs/aar/debugdrawer-okhttp-logger-release.aar
          debugdrawer-retrofit/build/outputs/aar/debugdrawer-retrofit-release.aar
          debugdrawer-timber/build/outputs/aar/debugdrawer-timber-release.aar

    - name: Publish to sonatype
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo signingInMemoryKeyPassword=""${GPG_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        echo signingInMemoryKey=""${GPG_KEY}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralUsername=""${MAVEN_CENTRAL_USERNAME}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralPassword=""${MAVEN_CENTRAL_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        ./gradlew androidSourcesJar androidJavadocJar publish --info --no-daemon --no-parallel
      env:
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GPG_KEY: ${{ secrets.GPG_KEY }}
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        
    - name: Close and release repository
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' }}
      run: |
        ./gradlew closeAndReleaseRepository --info --no-daemon --no-parallel
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test
",0.2132373303793963,0.1756848427532652,Valid,0.3614051470650461,Kotlin
581,https://github.com/nhaarman/mockito-kotlin,"#
# CI build that assembles artifacts and runs tests.
# If validation is successful this workflow releases from the main dev branch.
#
# - skipping CI: add [skip ci] to the commit message
# - skipping release: add [skip release] to the commit message
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - 5.*
  pull_request:
    branches:
      - main

jobs:

  #
  # SINGLE-JOB
  #
  verify:
    runs-on:  ubuntu-latest
    if: ""! contains(toJSON(github.event.commits.*.message), '[skip ci]')""

    steps:

      - name: 1. Check out code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: 2. Set up Java 11
        uses: actions/setup-java@v1 # https://github.com/actions/setup-java
        with:
          java-version: 11

      - name: 3. Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1 # https://github.com/gradle/wrapper-validation-action

  #
  # Main build job
  #
  build:
    needs: [verify]
    runs-on:  ubuntu-latest

    # Definition of the build matrix
    strategy:
      matrix:
        mock-maker: ['mock-maker-default', 'mock-maker-inline']
        kotlin: ['1.3.50', '1.4.21']
        # Note that the old Travis CI referenced other Kotlin versions: '1.0.7', '1.1.61', '1.2.50'
        # However, those versions of Kotlin don't work with latest Gradle

    steps:

    - name: 1. Check out code
      uses: actions/checkout@v2 # https://github.com/actions/checkout

    - name: 2. Set up Java 11
      uses: actions/setup-java@v1 # https://github.com/actions/setup-java
      with:
        java-version: 11

    - name: 3. Build with Kotlin ${{ matrix.kotlin }} and mock-maker ${{ matrix.mock-maker }}
      run: |
        ops/mockMakerInline.sh
        ./gradlew build
      env:
        KOTLIN_VERSION: ${{ matrix.kotlin }}
        MOCK_MAKER: ${{ matrix.mock-maker }}

  #
  # Release job, only for pushes to the main development branch
  #
  release:
    runs-on: ubuntu-latest
    needs: [build] # build job must pass before we can release

    if: github.event_name == 'push'
        && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/5.'))
        && github.repository == 'mockito/mockito-kotlin'
        && !contains(toJSON(github.event.commits.*.message), '[skip release]')

    steps:

    - name: Check out code
      uses: actions/checkout@v2 # https://github.com/actions/checkout
      with:
        fetch-depth: '0' # https://github.com/shipkit/shipkit-changelog#fetch-depth-on-ci

    - name: Set up Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build and release
      run: ./gradlew githubRelease publishToSonatype closeAndReleaseStagingRepository releaseSummary
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        NEXUS_TOKEN_USER: ${{secrets.NEXUS_TOKEN_USER}}
        NEXUS_TOKEN_PWD: ${{secrets.NEXUS_TOKEN_PWD}}
        PGP_KEY: ${{secrets.PGP_KEY}}
        PGP_PWD: ${{secrets.PGP_PWD}}
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Run tests
      run: ./gradlew test
",,,Invalid,,Kotlin
508,https://github.com/codelv/enaml-native,"name: CI
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: pip install -U wheel tornado msgpack codecov pytest pytest-cov pytest-asyncio
      - name: Install latest dependencies
        run: |
            pip install --user git+https://github.com/nucleic/atom.git
            pip install --user git+https://github.com/frmdstryr/enaml.git@d-change-types
      - name: Install cli
        run: |
            pip install --user git+https://github.com/codelv/enaml-native-cli.git
            enaml-native -h
      - name: Install enaml-native
        run: pip install -e ./
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Install android system image and emulator
        run: |
          sdkmanager --list
          sdkmanager --install ""system-images;android-30;google_apis;x86_64""
          sdkmanager --install ""emulator""
      - name: Create avd
        run: |
          echo no | avdmanager create avd --force --name test -k ""system-images;android-30;google_apis;x86_64""
          avdmanager list avd
      - name: Start emulator
        run: |
          export PATH=""$PATH:$ANDROID_HOME/emulator""
          emulator -avd test -no-audio -no-window -no-accel &
          timeout 300 adb wait-for-device
          adb devices
      - name: Run tests
        run: pytest -v tests --cov enamlnative --cov-report xml --asyncio-mode auto
      - name: Coverage
        run: codecov
  check-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install -U mypy black isort flake8
      - name: Run checks
        run: |
            isort src --check --diff
            isort tests --check --diff
            isort docs --check --diff
            black src --check --diff
            black tests --check --diff
            black docs --check --diff
            flake8 --ignore=E501,W503 src
            flake8 --ignore=E501,W503 tests
            flake8 --ignore=E501,W503 docs
            mypy src/enamlnative --ignore-missing-imports


","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build the project
        run: ./build.sh

      - name: Run tests
        if: "".github/workflows | grep -q 'tests'""
        run: |
          pytest tests
",,,Invalid,,Python
465,https://github.com/kinegratii/django-echarts,"name: unittest
on:
  push:
    branches:
      - master
      - dev
      - 'release/**'
  pull_request:
    branches:
      - master
jobs:
  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
        django-version: [ '2.2', '3.2' ]
        pyecharts-version: ['1.9.1', '2.0.2']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django~=${{ matrix.django-version }}
          pip install borax~=4.0
          pip install pyecharts~=${{ matrix.pyecharts-version }}
          pip install typing_extensions~=4.5
          pip install htmlgenerator~=1.2
          pip install flake8~=3.9
          pip install nose2~=0.10
      - name: Lint with flake8
        run: |
          flake8 django_echarts tests
      - name: Test with pytest
        run: |
          nose2 --with-coverage --coverage django_echarts --coverage-report xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements_dev.txt
        pip install -r requirements_doc.txt

    - name: Run setup.py
      run: python setup.py install

    - name: Lint with flake8
      run: flake8 .

    - name: Run tests
      run: |
        coverage run -m pytest
        coverage report

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true",0.13360655737704918,0.604710384822336,Valid,0.447165203616923,Python
541,https://github.com/danielvdende/data-testing-with-airflow,"name: CI
on:
  push

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        run: flake8 dags/

  integrity_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install integrity test requirements
        run: pip install -r integrity_tests/requirements.txt

      - name: Initialize Airflow DB
        run: airflow db init

      - name: Run integrity tests
        run: coverage run -m pytest integrity_tests/*

#  mock_pipeline_test:
#    runs-on: ubuntu-latest
#    needs:
#      - lint
#      - integrity_test
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Install system dependencies
#        run: sudo apt-get install -y libsasl2-dev build-essential
#
#      - name: Install mock_pipeline test requirements
#        run: pip install -r mock_pipeline_requirements.txt
#
#      - name: Generate mock-pipeline data
#        run: spark-submit --name spark-data-generate dags/spark/generate_data.py --warehouse-path ./spark-warehouse
#
#      - name: Run dbt
#        working-directory: dags/dbt
#        run : dbt run --target mock_pipeline
#
#      - name: Run dbt tests
#        working-directory: dags/dbt
#        run : dbt test --target mock_pipeline

","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dbt-core==1.7.0b1
        pip install dbt-spark==1.7.0b1
        pip install pyspark==3.4.0
        pip install apache-airflow
        pip install coverage
        pip install pytest

    - name: Build
      run: |
        # Add build commands here

    - name: Run tests
      run: |
        pytest integrity_tests
",0.1440677966101695,0.35796449891427595,Valid,0.5113175893663698,Python
977,https://github.com/docopt/docopt.c,"name: PyPi publish

on:
  push:
    branches:
    - 'master'
  pull_request:
    types:
    - opened
    - reopened

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.9]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
            -   name: PyPi release
                run: |
                    pip install twine
                    python setup.py sdist bdist_wheel
                    python -m twine upload --repository pypi dist/*
                env:
                    TWINE_USERNAME: __token__
                    TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
                    TWINE_NON_INTERACTIVE: 1
                if: matrix.python-version == '3.9' && matrix.os.name == 'Linux' && github.ref == 'refs/heads/master'
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install docopt

      - name: Build
        run: python setup.py build

      - name: Run tests
        run: python -m unittest discover test
",0.09187620889748549,0.34548613659571803,Valid,0.5133640552995392,Python
481,https://github.com/aarongarrett/inspyred,"name: Continuous builds

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
      fail-fast: false

    steps:

    - uses: actions/checkout@v3
    - name: Set up Python  ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install tox tox-gh-actions

    - name: List packages so far
      run: |
        pip list

    - name: Run tests
      run: |
          tox

    - name: Run example tests
      run: |
          pip install -r ./requirements_dev.txt
          pip install .
          # uses pp, which is not available for py3
          # python3 ./tests/evaluator_tests.py
          python3 ./tests/example_tests.py
          python3 ./tests/observer_tests.py
          # intermittently fails
          python3 ./tests/operator_tests.py || exit 0
          python3 ./tests/supplemental_tests.py
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest coverage matplotlib click sphinx tox wheel

      - name: Run flake8
        run: flake8 .

      - name: Run tests with pytest
        run: pytest

      - name: Run coverage
        run: coverage run -m pytest

      - name: Generate coverage report
        run: coverage report",0.2509147935180345,0.5191418943802996,Valid,0.2793888186355531,Python
530,https://github.com/mjumbewu/django-proxy,"name: Tests

on:
  - push
  - pull_request

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [""3.9"", ""3.10"", ""3.11""]
        django: [""3.2"", ""4.0"", ""4.1""]
        exclude:
          - python: ""3.11""
            django: ""3.2""
          - python: ""3.11""
            django: ""4.0""

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: pip install tox
      - name: Run tox
        # Run tox using the version of Python in `PATH`
        run: tox -e django${{ matrix.django }}","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build the application
      run: python setup.py build

    - name: Run tests
      run: python manage.py test
",0.21536025336500395,0.5899702748491907,Valid,0.29908979089230775,Python
516,https://github.com/niklasrosenstein/myo-python,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.5', '3.6', '3.7', '3.8', '3.9' ]
    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: latest
        python-version: 3.8
        activate-environment: testenv
        channels: conda-forge
    - name: Setup Python ${{ matrix.python-version }} with Conda
      run: conda create -q -n env python=${{ matrix.python-version }}
    - name: Install Shut
      run: python -m pip install shut==0.18.2 -q
    - name: Test
      run: PYTHON=$CONDA/envs/env/bin/python shut pkg test --isolate
    - name: Verify package metadata
      run: shut pkg update --verify

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: pip install -q shut==0.18.2 -q
    - name: Shut publish
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        shut pkg update --verify-tag ""$GITHUB_REF""
        shut pkg publish warehouse:pypi --test
        shut pkg publish warehouse:pypi
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cffi>=1.11.5,<2.0.0 six>=1.11.0,<2.0.0

      - name: Install Application
        run: python setup.py install

      - name: Run Tests
        run: |
          if [ -d ""test"" ]; then
            python -m unittest discover test
          fi
",0.08322929671244278,0.3434687633954365,Valid,0.3456547731938796,Python
509,https://github.com/alex/pretend,"name: CI

on:
  push:
    branches:
  pull_request:
    branches:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        JOB:
          - PYTHON: ""3.7""
            TOXENV: ""py37""
          - PYTHON: ""3.8""
            TOXENV: ""py38""
          - PYTHON: ""3.9""
            TOXENV: ""py39""
          - PYTHON: ""3.10""
            TOXENV: ""py310""
          - PYTHON: ""3.11""
            TOXENV: ""py311""
          - PYTHON: ""pypy-3.9""
            TOXENV: ""pypy3""
          - PYTHON: ""pypy-3.10""
            TOXENV: ""pypy3""

          - PYTHON: ""3.11""
            TOXENV: ""pep8""
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        timeout-minutes: 3
        with:
          persist-credentials: false
      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version: ${{ matrix.JOB.PYTHON }}
      - run: pip install tox
      - run: tox -e ""${{ matrix.JOB.TOXENV }}""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9

      - name: Set up Python
        uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install 'com.github.alex/pretend'

      - name: Run Tests
        run: |
          python -m unittest discover
",0.304921968787515,0.4632224874532304,Valid,0.2562635323229199,Python
475,https://github.com/bundestag/gesetze-tools,"name: bundestag gesetze tool test CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ##############################################################################
  # JOB: Test ##################################################################
  ##############################################################################
  test:
    name: test
    runs-on: ubuntu-latest
    #needs: [nothing]
    strategy:
      matrix:
        python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11""]
    steps:
    ##########################################################################
    # CHECKOUT CODE ##########################################################
    ##########################################################################
    - uses: actions/checkout@v2
    ##########################################################################
    # SETUP SYSTEM ###########################################################
    ##########################################################################
    - name: Install system dependencies
      run: sudo apt-get install libxml2-utils libxml2-dev libxslt1-dev -y
    ##########################################################################
    # SETUP PYTHON ###########################################################
    ##########################################################################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    ##########################################################################
    # LINT ###################################################################
    ##########################################################################
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-line-length=127 --statistics
    ##########################################################################
    # TEST ###################################################################
    ##########################################################################
    #- name: Test with pytest
    #  run: |
    #    pytest
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python scripts
      run: |
        python banz_scraper.py
        python bgbl_scraper.py
        python lawde.py
        python lawdown.py
        python lawgit.py
        python vkbl_scraper.py

    - name: Run tests
      run: |
        if [ -f tests.py ]; then
          python tests.py
        fi
",0.14656934306569344,0.236889640863412,Valid,0.42504187604690113,Python
513,https://github.com/dinotools/python-overpy,"# SPDX-FileCopyrightText: none
# SPDX-License-Identifier: CC0-1.0

name: Python CI Tests

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'

jobs:
  tests:
    name: ""Python ${{ matrix.name }} on ${{ matrix.os }}""
    runs-on: ""${{ matrix.os }}""

    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: Linux, python: '3.9', os: ubuntu-latest, tox: py39}
          - {name: Windows, python: '3.9', os: windows-latest, tox: py39}
          # ToDo: There are errors on Mac, but I don't know why: Connection timeout or reset
          # - {name: Mac, python: '3.9', os: macos-latest, tox: py39}
          - {name: '3.11', python: '3.11', os: ubuntu-latest, tox: py311}
          - {name: '3.10', python: '3.10', os: ubuntu-latest, tox: py310}
          - {name: '3.9', python: '3.9', os: ubuntu-latest, tox: py39}
          - {name: '3.8', python: '3.8', os: ubuntu-latest, tox: py38}
          - {name: '3.7', python: '3.7', os: ubuntu-latest, tox: py37}
          - {name: 'PyPy 3.9', python: pypy3.9, os: ubuntu-latest, tox: pypy39}

    steps:
      - uses: ""actions/checkout@v3""

      - uses: ""actions/setup-python@v4""
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip' # caching pip dependencies

      - name: Install tox and any other packages
        run: pip install tox

      - name: ""Run tox targets for ${{ matrix.python }}""
        run: tox -e ${{ matrix.tox }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install sphinx sphinx-autodoc-typehints pytest

      - name: Build
        run: python setup.py build

      - name: Run tests
        run: pytest
",0.12388591800356506,0.312806663413766,Valid,0.2761904761904762,Python
3352,https://github.com/rhysd/shiba,"name: Watchdogs
on: [push, pull_request]
env:
  TERM: xterm
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1
defaults:
  run:
    working-directory: v2

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - run: sudo bash ./scripts/install_apt_deps.bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: npm ci
      - run: npm run bundle
      - run: cargo clippy --all --benches --tests -- -D warnings
      - run: cargo test
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Clippy runs on each platforms in `test` job
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - uses: actions/setup-python@v4
        with:
          python-version: '3'
      - run: pip install yamllint
      - run: sudo bash ./scripts/install_apt_deps.bash
      - run: npm ci
      - run: npm run lint:tsc
      - run: npm run lint:prettier
      - run: npm run lint:eslint
      - run: npm run lint:stylelint
      - run: cargo fmt --all --check
      - run: shellcheck ./scripts/gen_macos_app.bash ./scripts/install_apt_deps.bash
      - run: yamllint --strict ./src/assets/default_config.yml
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Run Build
      run: npm run build

    - name: Run Tests
      run: npm test
",0.05477107402652974,0.17489396850353012,Valid,0.3909840662923069,TypeScript
3357,https://github.com/sfeir-open-source/angular-search-experience,"name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: ""upload""
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: ""/"" # App source code path
          api_location: """" # Api source code path - optional
          output_location: ""dist/angular-search-experience"" # Built app content directory - optional
          app_build_command: ""npm run build:prod""
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          action: ""close""
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Build the project
      run: npm run build

    - name: Run tests
      run: npm test
",0.08528428093645485,0.23233503518900342,Valid,0.34615384615384615,TypeScript
3246,https://github.com/jupyterlab/extension-examples,"name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build_extensions:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        example:
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - notifications
          - react-widget
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: ${{ matrix.example }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - '${{ matrix.example }}/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff ../hello-world/setup.py setup.py
          diff ../hello-world/tsconfig.json tsconfig.json
          diff ../hello-world/.yarnrc.yml .yarnrc.yml
          diff ../hello-world/ui-tests/jupyter_server_test_config.py ./ui-tests/jupyter_server_test_config.py
          diff ../hello-world/ui-tests/playwright.config.js ./ui-tests/playwright.config.js
        shell: bash
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip ""jupyterlab>=4.0.0""
      # This is challenging to test in collaboration;
      # got trouble with the file ID service and the uncontrolled auto-save
      # - if: steps.filter.outputs.extension == 'true' && matrix.example == 'documents'
      #   run: |
      #     python -m pip install jupyter-collaboration
      - name: Build the extension
        if: steps.filter.outputs.extension == 'true'
        run: |
          # Same commands as in TL;DR to ensure it works
          touch yarn.lock
          pip install -e . -v
          jupyter labextension develop . --overwrite
        shell: bash
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: jlpm run lint:check
      - name: Check extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/*.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: ${{ matrix.example }}/ui-tests
      - name: Install kernel-output dependencies
        if: steps.filter.outputs.extension == 'true' && matrix.example == 'kernel-output'
        run: pip install numpy pandas
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            ${{ matrix.example }}/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_serverextension:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - 'server-extension/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('server-extension/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff hello-world/setup.py server-extension/setup.py
          diff hello-world/tsconfig.json server-extension/tsconfig.json
          diff hello-world/.yarnrc.yml server-extension/.yarnrc.yml
          diff hello-world/ui-tests/jupyter_server_test_config.py server-extension/ui-tests/jupyter_server_test_config.py
          diff hello-world/ui-tests/playwright.config.js server-extension/ui-tests/playwright.config.js
        shell: bash
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip jupyterlab~=4.0.0 build
      - name: Install the NPM dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm run lint:check
      - name: Build extension as user
        if: steps.filter.outputs.extension == 'true'
        # Force the usage of the source distribution (good practice)
        run: |
          cd server-extension
          python -m build --sdist
          pip install ./dist/jupyterlab_examples_server* --pre --find-links=dist --no-cache-dir
          python -m jupyterlab.browser_check
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
      - name: Clean extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          pip uninstall -y jupyterlab_examples_server
          jupyter lab clean
          jupyter server extension list
          jupyter labextension list
      - name: Build extension as dev
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          pip install .
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: server-extension/ui-tests
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            server-extension/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('server-extension/pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache lerna
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyterlab~=4.0.0 pytest pytest-check-links ""pytest-jupyter[server]>=0.6.0""
      - name: Bootstrap the jlpm deps
        run: jlpm
      - name: Build all the extensions
        run: |
          # Check embedded snippets
          jlpm lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in main)
          jlpm run lerna exec --concurrency 4 -- ""pytest --check-links""
","name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Cache Node Modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Run Linters
      run: npm run lint

    - name: Run Tests
      run: npm test

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Cache Python Packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python Tests
      run: pytest
",0.06477071710436794,0.08604218949036455,Valid,0.4222126223233755,TypeScript
3431,https://github.com/data-uri/datauri,"name: DataURI
on:
  push:
    branches:
      - main
  pull_request_target:
    types: [assigned, opened, synchronize, reopened]
jobs:
  check-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['10', '12', '14', '16']
    name: Check package on Node.js ${{ matrix.node }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: ${{ github.event_name == 'pull_request_target' }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build and test
        run: |
          npm ci --prefer-offline --no-audit
          npm test
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.19496021220159152,0.3940170141630127,Valid,0.3076923076923077,TypeScript
53,https://github.com/birkir/react-native-carplay,"name: ci/packages

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn config get cacheFolder)""

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-
      - name: Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo
            ${{ github.workspace }}/**/.eslintcache
          key: ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('packages/**.[jt]sx?', 'packages/**.json') }}
          restore-keys: |
            ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Typecheck
        run: |
          yarn workspaces foreach -tv --from 'react-native-carplay' --since=origin/master --recursive run typecheck
      - name: Linter
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master --recursive run lint --cache
      - name: Run build for changed packages
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master run build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Run tests
        run: yarn test
",0.18935729094678647,0.1913257632146403,Valid,0.22764227642276422,TypeScript
3400,https://github.com/manfredsteyer/angular-crud,"name: Angular CRUD CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
        app:
          - demo
          - demo-bootstrap
          - demo-material
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.7.0
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install latest Chrome
      run: |
        sudo apt update
        sudo apt --only-upgrade install google-chrome-stable
        google-chrome --version
    - name: npm install, build, and test
      run: |
        npm ci
        npm run build --if-present
        npm test
        npm run coverage
      working-directory: ./angular-crud
    - name: package angular-crud
      run: npm pack
      working-directory: ./angular-crud
    - name: generate CRUD and run tests
      run: |
        npm i -g @angular/cli
        npm i
        npm i --no-save ../angular-crud/*.tgz
        mkdir -p src/app/hotel
        mv model.json src/app/hotel/.
        ng g angular-crud:crud-module hotel
        xvfb-run npm test -- --watch=false
      working-directory: ./${{ matrix.app }}
      env:
        CI: true
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3.7.0
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.16525183927560838,0.32970207239147753,Valid,0.21731042431781855,TypeScript
3376,https://github.com/davfoundation/missioncontrol,"name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1

      - name: Login to Image Registry
        run: echo ""${{ secrets.GITHUB_TOKEN }}"" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Node Setup
        uses: actions/setup-node@v1
        with:
          node-version: ""11.x""

      - name: NPM Install
        run: |
          npm i

      - name: Test/Verify
        run: |
          make tslint tsc jest

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDD-HHmm

      - name: Build
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make build

      - name: Push Images
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make push-images

      - name: Commit distribution files
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          git config --local user.email ""action@github.com""
          git config --local user.name ""GitHub Action""
          git add k8s/dist/.
          git commit -m ""Version Distribution $TIMESTAMP"" -a

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.17307692307692307,0.2495133114714621,Valid,0.21947441666113396,TypeScript
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install npm dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install pip dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      - name: Run tests
        run: npm test
        env:
          CI: true",0.216548463356974,0.44581540254096574,Valid,0.17626299403505116,TypeScript
3423,https://github.com/deepkit/deepkit-ml,"name: CI

on:
  push:
    branches:
      - master

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
#  build:
#    runs-on: [ubuntu-latest]
#    steps:
#      - uses: actions/checkout@v2
#      - run: git fetch --prune --unshallow
#      - run: git fetch --tags
#      - run: echo ""::set-env name=VERSION::`sh ./release-version.sh`""
#      - run: echo ""::set-env name=VERSION_FILE_PATH::`sh ./release-version-file-path.sh`""
#      - run: |
#          if [ ""${{runner.os}}"" = ""macOS"" ]; then
#           echo ::set-env name=PLATFORM::darwin
#          fi
#          if [ ""${{runner.os}}"" = ""Linux"" ]; then
#           echo ::set-env name=PLATFORM::linux
#          fi
#      - uses: actions/setup-node@v1
#        with:
#          node-version: '12.x'
#      - name: Cache ~/.npm
#        uses: actions/cache@v1
#        with:
#          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
#
#      - name: Cache node_modules core
#        uses: actions/cache@v1
#        with:
#          path: packages/core/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/core/package-lock.json') }}
#      - name: Cache node_modules core-node
#        uses: actions/cache@v1
#        with:
#          path: packages/core-node/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/core-node/package-lock.json') }}
#
#      - name: Cache node_modules cli
#        uses: actions/cache@v1
#        with:
#          path: packages/cli/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/cli/package-lock.json') }}
#      - name: Cache node_modules server
#        uses: actions/cache@v1
#        with:
#          path: packages/server/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/server/package-lock.json') }}
#      - name: Cache node_modules deepkit
#        uses: actions/cache@v1
#        with:
#          path: packages/deepkit/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/deepkit/package-lock.json') }}
#      - name: Cache build
#        uses: actions/cache@v1
#        with:
#          path: build
#          key: build-${{env.VERSION}}
#
#      - name: Setup
#        run: npm install -g lerna@3.20.2 npm-local-development
#        shell: bash
#      - name: Lerna bootstrap
#        run: |
#          if [ ! -d packages/core/node_modules ] || [ ! -d packages/core-node/node_modules ] || [ ! -d packages/cli/node_modules ] || [ ! -d packages/deepkit/node_modules ] || [ ! -d packages/server/node_modules ] || [ ! -d packages/electron/node_modules ]; then
#            lerna bootstrap --nohoist \* --ignore @deepkit/website
#          fi
#          npm-local-development --no-watcher
#
#      - name: Build
#        run: |
#          mkdir -p build/cli
#          mkdir -p build/server
#          mkdir -p build/frontend
#
#          if [ ! -f build/cli/main.js ]; then
#              echo ""build now build/cli""
#              cd packages/cli && npm run build && cd - && mv packages/cli/dist/main.js build/cli/
#          fi
#          if [ ! -f build/server/main.js ]; then
#              echo ""build now build/server""
#              cd packages/server && npm run build && cd - && mv packages/server/dist/main.js build/server/
#          fi
#          if [ ! -f build/frontend/index.html ]; then
#              echo ""build now build/frontend""
#              rm -rf build/frontend
#              cd packages/deepkit && npm run build && cd - && mv packages/deepkit/dist/deepkit build/frontend
#              rm build/frontend/emoji_apple_32.*.png
#              rm build/frontend/statistics.html
#          fi
#
#      - name: Package cli Linux
#        run: |
#          mkdir -p build/linux/cli/
#          cp packages/cli/package.json build/linux/cli/
#          cp build/cli/main.js build/linux/cli/
#          cd build/linux/cli/ && npm version ${{env.VERSION}} && cd -
#          if [ ! -d build/linux/cli/node_modules ]; then
#              cp packages/cli/package-lock.json build/linux/cli/
#              cd build/linux/cli/ && npm install --only=prod --unsafe --scripts-prepend-node-path && cd -
#              rm build/linux/cli/package-lock.json
#          fi
#          make build/linux/cli/bin
#
#          tar -C build/linux/cli -czf build/linux/deepkit-cli-linux.tar.gz .
#          rm -rf build/linux/cli
#
#      - name: Package server Linux
#        run: |
#          mkdir -p build/${{env.PLATFORM}}/server/
#          cp build/server/main.js build/${{env.PLATFORM}}/server/
#          cp packages/server/package.json build/${{env.PLATFORM}}/server/
#          cd build/${{env.PLATFORM}}/server/ && npm version ${{env.VERSION}} && cd -
#          if [ ! -d build/${{env.PLATFORM}}/server/node_modules ]; then
#              cp packages/server/package-lock.json build/${{env.PLATFORM}}/server/
#              cd build/${{env.PLATFORM}}/server/ && npm install --only=prod --unsafe --scripts-prepend-node-path && cd -
#              rm build/${{env.PLATFORM}}/server/package-lock.json
#          fi
#          make build/${{env.PLATFORM}}/server/libs
#          make build/${{env.PLATFORM}}/server/bin
#
#          cp -r build/frontend build/linux/server/frontend
#          mkdir -p build/linux/server/build/linux/
#          cp build/linux/deepkit-cli-linux.tar.gz build/linux/server/build/linux/deepkit-cli-linux.tar.gz
#
#      - name: Build app.deepkit.ai
#        if: runner.os == 'Linux' && success()
#        run: |
#          cp -r build/linux/server prebuild-server
#          docker build -t docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}} -f docker-build/app.Dockerfile .;
#
#          echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
#          docker push docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}}
#          docker tag docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}} docker.pkg.github.com/deepkit/deepkit/app:latest
#          docker push docker.pkg.github.com/deepkit/deepkit/app:latest
#
#      - name: Deploy app.deepkit.ai
#        uses: appleboy/ssh-action@master
#        with:
#          host: marcjschmidt.de
#          username: deploy
#          password: ${{secrets.SSH_PW}}
#          script_stop: true
#          script: |
#            echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
#            docker pull docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}}
#            docker stop deepkit-app || true;
#            docker rm -f deepkit-app || true;
#            docker run -d --name deepkit-app -v /root/deepkit/app.deepkit.ai-fs:/app/data/fs -v /root/deepkit/app.deepkit.ai-project-git:/app/data/project-git -v /root/deepkit/app.deepkit.ai-mongo:/app/data/mongo -e DEEPKIT_VERSION=${{env.VERSION}} --restart=unless-stopped --network nginx-proxy -e VIRTUAL_HOST=app.deepkit.ai -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=app.deepkit.ai docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}};

  website:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - run: git fetch --tags
      - run: echo ""::set-env name=VERSION::`sh ./release-version.sh`""
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache ~/.npm
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Setup
        run: npm install -g lerna@3.20.2 npm-local-development @angular/cli@9
        shell: bash
      - name: Lerna bootstrap
        run: lerna bootstrap --nohoist \* --ci --scope @deepkit/website
      - name: Image build
        run: |
          echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
          COMMIT=$(git log -n 1 --pretty=format:%h packages/website)
          VERSION=$(git describe --tag $COMMIT)

          docker build -t docker.pkg.github.com/deepkit/deepkit/website:latest -f docker-build/website.Dockerfile .;

          docker push docker.pkg.github.com/deepkit/deepkit/website:latest

      - name: Deploy website
        uses: appleboy/ssh-action@master
        with:
          host: marcjschmidt.de
          username: deploy
          password: ${{secrets.SSH_PW}}
          script_stop: true
          script: |
            echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
            docker pull docker.pkg.github.com/deepkit/deepkit/website:latest
            docker rm -f deepkit-website || true;
            docker rm -f next-deepkit-website || true;
            docker run -d --name deepkit-website --restart=unless-stopped --network nginx-proxy -e CONTENTFUL_ACCESS_TOKEN=""${{secrets.CONTENTFUL_ACCESS_TOKEN}}"" -e VIRTUAL_HOST=ml.deepkit.io -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=ml.deepkit.io docker.pkg.github.com/deepkit/deepkit/website:latest;
#            docker run -d --name next-deepkit-website --restart=unless-stopped --network nginx-proxy -e VIRTUAL_HOST=next.deepkit.ai -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=next.deepkit.ai docker.pkg.github.com/deepkit/deepkit/website:latest;
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Run tests
        run: npm test
",0.022429535529972212,0.047364291049655366,Valid,0.20009842229184527,TypeScript
1496,https://github.com/mamba-org/gator,"name: Publish Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ""3.x""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine jupyterlab~=3.0 jupyter_packaging~=0.7.9
      - name: Build and publish NPM package
        if: ${{ startsWith(github.event.release.tag_name, 'npm') }}
        run: |
          if [[ ${PRE_RELEASE} == ""true"" ]]; then export TAG=""next""; else export TAG=""latest""; fi
          echo Publishing ${VERSION} with distribution tag ${TAG}
          npm install -g yarn
          yarn install
          # yarn lerna version ${VERSION} --yes --no-git-tag-version
          pushd packages/common
          yarn run publish --access public --tag ${TAG}
          popd
          pushd packages/labextension
          yarn run publish --access public --tag ${TAG}
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
          VERSION: ${{ github.event.release.name }}
      - name: Publish Python package
        if: ${{ !startsWith(github.event.release.tag_name, 'npm') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          npm install -g yarn
          yarn install
          yarn build
          python setup.py sdist bdist_wheel
          twine upload dist/*
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: yarn install

      - name: Build the project
        run: yarn build

      - name: Lint the code
        run: yarn lint

      - name: Run tests
        run: yarn test
",0.12006861063464837,0.24315727712141358,Valid,0.14649071358748778,TypeScript
