Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language,Syntax_Check_Count_Valid,Syntax_Check_Count_Invalid
393,https://github.com/subhra74/xdm,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: windows-latest

    defaults:
      run:
        working-directory: ./app/XDM/XDM.Wpf.UI/

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#,2,1
1004,https://github.com/webbju/android-plus-plus,"name: CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:

  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore .\src\AndroidPlusPlus.sln

    - name: Build AndroidPlusPlus
      run: msbuild /m /p:Configuration=Release .\src\AndroidPlusPlus.sln
",,,,,,C#,3,0
1038,https://github.com/logosbible/bsdiff.net,"name: Build

on: [push, pull_request]

env:
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:BuildNumber=${{ github.run_number }}
      - name: Test
        run: dotnet test --configuration Release --no-build
      - name: Pack
        run: dotnet pack --configuration Release --no-build
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NuGet Packages
          path: '**/*.nupkg'
          if-no-files-found: error
",,,,,,C#,3,0
1039,https://github.com/lithander/minimal-bitcoin-miner,"name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: MiniMiner/MiniMiner.csproj

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}} /p:DeployOnBuild=true /p:PublishProfile=FolderProfile
   
    - name: Upload Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: Releases
        path: MiniMiner/bin/Release
",,,,,,C#,3,0
1040,https://github.com/geri-borbas/triangle.net,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Triangle.sln
      working-directory: ./src
    - name: Build
      run: dotnet build Triangle.sln --no-restore
      working-directory: ./src
    - name: Test
      run: dotnet test Triangle.sln --no-build --verbosity normal
      working-directory: ./src
",,,,,,C#,3,0
1041,https://github.com/snape/rvo2-cs,"#
# ci.yml
# RVO2 Library C#
#
# SPDX-FileCopyrightText: 2008 University of North Carolina at Chapel Hill
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Please send all bug reports to <geom@cs.unc.edu>.
#
# The authors may be contacted via:
#
# Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
# Dept. of Computer Science
# 201 S. Columbia St.
# Frederick P. Brooks, Jr. Computer Science Bldg.
# Chapel Hill, N.C. 27599-3175
# United States of America
#
# <https://gamma.cs.unc.edu/RVO2/>
#

---
name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: '0 5 * * *'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  bazel_arch:
    name: bazel arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            bazel \
            ca-certificates \
            curl \
            gcc \
            git \
            icu \
            lttng-ust \
            python \
            which \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  bazel_macos:
    name: bazel macos latest
    runs-on: macos-latest
    steps:
      - name: pre-checkout setup
        run: |
          rm -f \
            /usr/local/bin/2to3 \
            /usr/local/bin/2to3-3.* \
            /usr/local/bin/go \
            /usr/local/bin/gofmt \
            /usr/local/bin/idle3 \
            /usr/local/bin/idle3.* \
            /usr/local/bin/pydoc3 \
            /usr/local/bin/pydoc3.* \
            /usr/local/bin/python3 \
            /usr/local/bin/python3.* \
            /usr/local/bin/python3-config \
            /usr/local/bin/python3.*-config \
            /usr/local/lib/libtcl8.*.dylib \
            /usr/local/lib/libtk8.*.dylib
          brew update-reset -q
          brew upgrade -f -q
          brew unlink -q bazelisk
          brew install -q \
            bazel \
            buildifier \
            git \
            python \
            jsonlint \
            markdownlint-cli \
            yamllint
          brew cleanup -q -s
          rm -rf $(brew --cache)
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        shell: zsh -efuo pipefail {0}
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: zsh -efuo pipefail {0}

  bazel_ubuntu:
    name: bazel ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:latest
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            g++ \
            git \
            gnupg \
            libicu70 \
            liblttng-ust1 \
            python-is-python3 \
            zlib1g
          curl -sS https://bazel.build/bazel-release.pub.gpg | gpg --dearmor - \
            > /usr/share/keyrings/bazel-archive-keyring.gpg
          echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8' \
            > /etc/apt/sources.list.d/bazel.list
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            bazel
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  dotnet_alpine:
    name: dotnet alpine 3
    runs-on: ubuntu-22.04
    container: alpine:3
    steps:
      - name: pre-checkout setup
        run: |
          apk upgrade -q --no-cache
          apk add -q --no-cache \
            bash \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
        shell: sh
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh

  dotnet_arch:
    name: dotnet arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_fedora:
    name: dotnet fedora latest
    runs-on: ubuntu-22.04
    container: fedora:latest
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_macos:
    name: dotnet macos latest
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}
      - name: build and pack release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}

  dotnet_rockylinux:
    name: dotnet rockylinux 9
    runs-on: ubuntu-22.04
    container: rockylinux:9
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl-minimal \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_ubuntu:
    name: dotnet ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            git \
            libicu70 \
            liblttng-ust1 \
            zlib1g
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/snape/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: push
        run: |
          dotnet nuget push --no-symbols true --skip-duplicate RVOCS/bin/Release/RVOCS.*.nupkg
        shell: bash
        if: ${{ github.event.release.published }}

  dotnet_windows:
    name: dotnet windows latest
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug RVOCS.sln
          dotnet pack --configuration Debug --no-build RVOCS\RVOCS.csproj
        shell: pwsh
      - name: build and pack release
        run: |
          dotnet build --configuration Release RVOCS.sln
          dotnet pack --configuration Release --no-build RVOCS\RVOCS.csproj
        shell: pwsh
",,,,,,C#,3,0
1042,https://github.com/electroly/sqlnotebook,"name: SQL Notebook

on: push

jobs:
  build:
    runs-on: windows-2022
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build
      shell: pwsh
      run: |
        Write-Output ""Decoding code signing certificate.""
        Set-Content -Path certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
        certutil -decode certificate.txt certificate.pfx
        $certificatePath = (Resolve-Path ""certificate.pfx"").Path
        $certificatePassword = ""${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}""

        Write-Output ""Finding msbuild.""
        $msbuildPath = & vswhere.exe -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
        Write-Output ""Found msbuild at: $msbuildPath""

        Write-Output ""Building x64.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x64
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-64bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-64bit.zip

        Write-Output ""Building x86.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x86
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-32bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-32bit.zip

    - name: Upload x64 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.msi
        path: SqlNotebook-64bit.msi

    - name: Upload x64 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.zip
        path: SqlNotebook-64bit.zip

    - name: Upload x86 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.msi
        path: SqlNotebook-32bit.msi

    - name: Upload x86 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.zip
        path: SqlNotebook-32bit.zip
",,,,,,C#,3,0
1043,https://github.com/kakone/googlecast,"name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#,3,0
1044,https://github.com/nettitude/sharpsocks,"name: SharpSocks Server

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore SharpSocksServer/SharpSocksServer.csproj
    - name: Build
      run: dotnet build --no-restore --configuration ""Release Linux"" SharpSocksServer/SharpSocksServer.csproj
",,,,,,C#,3,0
1045,https://github.com/mat-mcloughlin/patientmangement,"name: Build Patient Management

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v1

      - name: Start containers
        run: docker-compose -f ""docker-compose.yml"" up -d

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ""6.0.x""

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Stop containers
        if: always()
        run: docker-compose -f ""docker-compose.yml"" down
",,,,,,C#,3,0
1046,https://github.com/zyzsdy/negativeencoder,"name: Build Test

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
",,,,,,C#,3,0
1047,https://github.com/velcrophysics/velcrophysics,"name: Generic build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Build VelcroPhysics and samples
      run: dotnet build -c LinuxRelease src/VelcroPhysics.All.sln",,,,,,C#,3,0
1048,https://github.com/deanhume/html-minifier,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#,3,0
1049,https://github.com/uuksu/rpgmakerdecrypter,"name: .NET

on:
  push:
    tags:
      - v*

jobs:
  build_cli:
  
    env:
      BUILD_CONFIG: 'Release'
      CLI_PROJECT: 'RPGMakerDecrypter.Cli/RPGMakerDecrypter.Cli.csproj'
      GUI_PROJECT: 'RPGMakerDecrypter.Gui/RPGMakerDecrypter.Gui.csproj'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Fetch tags
      run: git fetch --all --tags
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration $Env:BUILD_CONFIG --no-restore
      
    - name: Publish Linux CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r linux-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - name: Publish Windows CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
          
    - name: Publish Windows GUI
      run: dotnet publish $Env:GUI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - uses: ncipollo/release-action@v1.12.0
      with:
        bodyFile: CHANGELOG.MD
        artifacts: ""RPGMakerDecrypter-cli,RPGMakerDecrypter-cli.exe,RPGMakerDecrypter.exe""
",,,,,,C#,3,0
1050,https://github.com/uknowsec/sharpsqltools,"name: ""Build SharpSQLTools ""

on:
  push:
    branches:
      - master
      - releases/*

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Build DotNET40
        run: |
           cd ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\""
           .\MSBuild.exe -p:Configuration=Release $Env:GITHUB_WORKSPACE\
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with: 
          # Artifact name
          name: SharpSQLTools.exe
          path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe
      - name: zip_exe
        shell: powershell
        run: Compress-Archive -Path D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe -DestinationPath D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip
          asset_name: SharpSQLTools.zip
          asset_content_type: application/zip
",,,,,,C#,3,0
1051,https://github.com/richardszalay/mockhttp,"name: MockHttp Build
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ""Build""
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./RichardSzalay.MockHttp.sln
    - name: Build
      run: dotnet build -c Release --no-restore ./RichardSzalay.MockHttp.sln
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal ./RichardSzalay.MockHttp.sln
    - name: Package
      run: dotnet pack -c Release --no-build ./RichardSzalay.MockHttp/RichardSzalay.MockHttp.csproj
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'

    - name: ""Upload artifact: RichardSzalay.MockHttp.nupkg""
      uses: actions/upload-artifact@v3.1.1
      with:
        name: RichardSzalay.MockHttp.nupkg
        path: RichardSzalay.MockHttp/bin/Release/*.nupkg
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
",,,,,,C#,3,0
1052,https://github.com/gmershad/fooddelivery,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    - name: Build with dotnet
      run: dotnet build --configuration Release
",,,,,,C#,3,0
1053,https://github.com/apetrovskiy/stups,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: STUPS.sln                                  # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      if: always()
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      if: always()
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
",,,,,,C#,3,0
1054,https://github.com/cwensley/pablodraw,"# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches: [main]
    tags: [""*""]
  pull_request:
    branches: [main]

env:
  DotNetVersion: ""7.0.x""
  BuildConfiguration: ""Release""
  BuildParameters: ""/clp:NoSummary /p:Configuration=Release /p:BuildVersion=${{ github.run_id }} /p:BuildBranch=${{ github.ref }}""

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-windows.binlog

      - name: Build PabloDraw.Console
        run: dotnet publish Source/PabloDraw.Console/PabloDraw.Console.cxproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw.console-windows.binlog
        
      - name: Build msi
        run: dotnet build ${{ env.BuildParameters }} Source/PabloDraw.WindowsInstaller/PabloDraw.WindowsInstaller.wixproj

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-binaries-x64
          path: artifacts/publish/${{ env.BuildConfiguration }}/Windows/*

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-installer-x64
          path: artifacts/installer/${{ env.BuildConfiguration }}/Windows/*.msi

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-linux.binlog
        
      - name: Create gzip
        run: tar -czvf pablodraw-linux-x64.tar.gz -C artifacts/publish/${{ env.BuildConfiguration }}/Linux .

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-linux-binaries-x64
          path: pablodraw-linux-x64.tar.gz

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 13.1

      - name: Import code signing certificate
        if: github.event_name != 'pull_request'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVID_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.DEVID_CERTIFICATE_P12_PASSWORD }}

      - name: Enable code signing
        if: github.event_name != 'pull_request'
        run: echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableCodeSigning=True"" >> $GITHUB_ENV

      - name: Set notarization credentials
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --store-password-in-keychain-item ""AC_PASSWORD"" -u ""${{ secrets.AC_USERNAME }}"" -p ""${{ secrets.AC_PASSWORD }}""
          echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableNotarization=True"" >> $GITHUB_ENV

      - name: Build PabloDraw
        run: sudo dotnet build Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-mac.binlog

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-mac
          path: artifacts/publish/${{ env.BuildConfiguration }}/Mac/*.dmg

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  update-release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2

      - uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          files: |
            **/*.msi
            **/*.dmg
            **/*.tar.gz
",,,,,,C#,3,0
1055,https://github.com/rbmkio/radish,"name: Publish

on:
  push:
    branches: master

jobs:

  build-win:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      shell: pwsh
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish x64 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: publish x86 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x86 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: download nsis
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/rbmkio/nsis/raw/master/nsis.zip -OutFile $env:GITHUB_WORKSPACE\build\nsis\nsis.zip
        Expand-Archive -Path $env:GITHUB_WORKSPACE\build\nsis\nsis.zip -DestinationPath $env:GITHUB_WORKSPACE\build\nsis
    - name: build nsis
      shell: pwsh
      run: |
        copy $env:GITHUB_WORKSPACE\build\nsis\64bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish
        copy $env:GITHUB_WORKSPACE\build\nsis\32bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\installer.nsi
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\installer.nsi
    - name: upload x64 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x64
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\radish-setup.exe
    - name: upload x86 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x86
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\radish-setup.exe

  build-mac:
    runs-on: macOS-10.14
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: bundle app
      run: dotnet msbuild src/Rbmk.Radish/Rbmk.Radish.csproj -t:BundleApp -p:Configuration=Release -p:RuntimeIdentifier=osx-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: build dmg
      run: |
        cd build/dmg-builder
        ./build-dmg $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/osx-x64/publish/Radish.app
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: dmg
        path: build/dmg-builder/Radish.dmg

  build-linux:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish app
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r linux-x64 --version-suffix ""$(git rev-list --count HEAD)""
    - name: tar gz
      run: |
        tar -cvzf radish.tar.gz -C $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/linux-x64/publish radish
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: targz-x64
        path: radish.tar.gz
",,,,,,C#,3,0
115,https://github.com/bk138/multivnc,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install gettext libwxgtk3.0-gtk3-dev libgtk-3-dev libgcrypt20-dev liblzo2-dev
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew uninstall --ignore-dependencies gnutls libgcrypt
          brew install wxwidgets
      - name: Install Windows Build Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        uses: johnwason/vcpkg-action@v4
        id: vcpkg
        with:
          pkgs: wxwidgets
          triplet: x64-windows
          token: ${{ github.token }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} ..
          cmake --build .
          cpack -V -C Debug
      - name: Archive Ubuntu Build Artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Debian Package
          path: build/*.deb
      - name: Archive MacOS Build Artifacts
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC MacOS Package
          path: build/*.dmg
      - name: Archive Windows Build Artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Windows Package
          path: build/*.exe
",,,,,,C++,3,0
757,https://github.com/9chu/luastgplus,"name: Build Windows

on:
  push:
    branches: [ master ]
    paths:
      - "".github/workflows/build_windows.yaml""
      - ""**.c""
      - ""**.h""
      - ""**.hpp""
      - ""**.cpp""
      - ""**.cmake""
      - ""**.patch""
      - ""**.ico""
      - ""**.rc""
      - ""**.json""
      - ""**.hpp.in""
      - ""**.py""
      - ""**/CMakeLists.txt""
  repository_dispatch:
    types: [ update ]

jobs:
  build_windows:
    #runs-on: windows-2022
    runs-on: self-hosted

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Prepare
        shell: powershell
        run: |
          # Set git tag
          $PROJECT_TAG=git describe --tags --dirty --match ""v*""
          Add-Content -Path $env:GITHUB_ENV -Value ""PROJECT_TAG=$PROJECT_TAG""
          # Find compiler
          $VCVAR_PATH=vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -find ""VC\**\vcvars64.bat""
          if (-Not (Test-Path -Path ""$VCVAR_PATH"")) { Write-Error ""VC++ compiler not found"" -ErrorAction Stop }
          Add-Content -Path $env:GITHUB_ENV -Value ""VCVAR_PATH=$VCVAR_PATH""
          # Create CPM cache folder
          mkdir /cpm_cache -ErrorAction SilentlyContinue
          Add-Content -Path $env:GITHUB_ENV -Value ""CPM_SOURCE_CACHE=/cpm_cache""
          # Create intermediate folders
          mkdir cmake-build-x64
          mkdir dist

      - name: Build x64 Shipping
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja""
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy shipping build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.exe

      - name: Build x64 Development
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja"" -DLSTG_SHIPPING=OFF
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy development build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.dev.exe
          
      - uses: actions/upload-artifact@v3
        with:
          name: LuaSTGPlus2-${{ env.PROJECT_TAG }}
          path: |
             dist/*.exe
",,,,,,C++,3,0
767,https://github.com/jcash/voronoi,"name: Build

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64"", ""-m32""]
        cversion: [c99, c11, c2x]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: sudo apt-get install -y gcc-multilib g++-multilib
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-darwin:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64""]
        cversion: [c99, c11, c2x]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-windows:
    strategy:
      matrix:
        arch:       [amd64, amd64_x86] #, amd64_arm64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Build main
        run: scripts\compile_cl.bat
      - name: Build tests
        run: |
          cd test
          .\compile_cl.bat
      - name: Build examples
        run: |
          cd src\examples
          .\compile_cl.bat
      - name: Run Tests
        run: |
          .\build\main.exe -?
          .\build\main.exe -w 512 -h 512 -n 100 -o citest.png
          .\build\test.exe
          .\build\test_double.exe
          .\build\simple.exe
",,,,,,C++,3,0
773,https://github.com/jontio/jaero,"name: build
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: JAERO
      # install MSYS2 for windows
      - name: if windows install MSYS2
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain autoconf libtool mingw-w64-x86_64-cpputest mingw-w64-x86_64-qt5 mingw-w64-x86_64-cmake mingw-w64-x86_64-libvorbis mingw-w64-x86_64-zeromq zip p7zip unzip
      # build for windows
      - name: Windows-CI-Build
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo 'Running in MSYS2!'
          ./JAERO/ci-windows-build.sh
        shell:  msys2 {0}
      # build for linux
      - name: Linux-CI-Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo 'Running in bash!'
          ./JAERO/ci-linux-build.sh          
      # upload windows artifacts    
      - name: Upload windows binary artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_windows
          retention-days: 1
          path: |
            JAERO/JAERO/release/*.zip
      # upload linux artifacts    
      - name: Upload linux binary artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_linux
          retention-days: 1
          path: |
            JAERO/bin/*.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # download all artifacts for this workflow
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
      # Create a release
      - name: Create a release
        uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          title: ""Development Build""
          files: |
            jaero_linux/*.tar.gz
            jaero_windows/*.zip
",,,,,,C++,3,0
789,https://github.com/marcocicognani/meetixos,"name: MeetiX CI Build

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Packages
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y gcc g++ nasm build-essential libgmp-dev libmpfr-dev libmpc-dev cmake make ninja-build xorriso grub-common patch wget tar

      - name: Toolchains
        run: |
          pushd Toolchain
          bash Build.sh --rebuild
          popd

      - name: CMake Config
        run: |
          mkdir -p Build/{Debug,Release}

          pushd Build/Debug
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Debug -GNinja
          popd

          pushd Build/Release
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Release -GNinja
          popd

      - name: Build MeetiX Debug
        run: |
          pushd Build/Debug
          ninja repack
          popd

      - name: Build MeetiX Release
        run: |
          pushd Build/Release
          ninja repack
          popd

      - name: Uploading image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: MeetixOS
          path: Build/Release/MeetixOS.iso",,,,,,C++,3,0
877,https://github.com/patriciogonzalezvivo/glslviewer,"name: Build and Release
on:
  pull_request:
  push:
env:
  CMAKE_BUILD_TYPE: Release
jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=DEB ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-amd64.deb
          - os: windows-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP -G ""NMake Makefiles"" ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              dir
            build_artifact: glslViewer-*-win64-AMD64.zip
          - os: macos-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-x86_64.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake xorg-dev libglu1-mesa-dev libavcodec-dev libavfilter-dev \
            libavdevice-dev libavformat-dev libavutil-dev libswscale-dev \
            libv4l-dev libjpeg-dev libpng-dev libtiff-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          conda install ffmpeg

      - name: Set up MSVC environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $FfmpegUri = 'https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-lgpl-shared-4.4.zip'
          $FfmpegZipPath = ""$Env:GITHUB_WORKSPACE\ffmpeg.zip""
          $ZlibUri = 'https://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-lib.zip/download'
          $ZlibZipPath = ""$Env:GITHUB_WORKSPACE\zlib.zip""

          $FfmpegPath = ""$Env:GITHUB_WORKSPACE\ffmpeg""

          Start-BitsTransfer -Source ""$FfmpegUri"",""$ZlibUri"" -Destination ""$FfmpegZipPath"",""$ZlibZipPath""

          Expand-Archive -Path ""$FfmpegZipPath"" -DestinationPath ""$FfmpegPath""
          Move-Item -Path ""$FfmpegPath\ffmpeg-*\*"" -Destination ""$FfmpegPath""

          Expand-Archive -Path ""$ZlibZipPath"" -DestinationPath ""$FfmpegPath""

          echo ""CMAKE_PREFIX_PATH=$FfmpegPath"" >>$Env:GITHUB_ENV

      - name: Build
        run: ${{ matrix.build_command }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: glslViewer-${{ matrix.os }}-build
          path: build/${{ matrix.build_artifact }}
          retention-days: 7

  release:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: GlslViewer ${{ github.ref_name }}
          files: |
            glslViewer-ubuntu-latest-build/*
            glslViewer-windows-latest-build/*
            glslViewer-macos-latest-build/*
          generate_release_notes: true
          body: |
            To use the Windows build, please download [FFmpeg 4.4][ffmpeg] and copy `bin\*.dll` alongside `glslViewer.exe`.

            [ffmpeg]: https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-gpl-shared-4.4.zip
",,,,,,C++,3,0
916,https://github.com/norbusan/debian-mu,"name: Build & run tests

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - if: contains(matrix.os, 'ubuntu')
        name: ubuntu-deps
        run: |
          sudo apt update
          sudo apt-get install automake autoconf-archive autotools-dev libglib2.0-dev libxapian-dev libgmime-3.0-dev m4 make libtool pkg-config

      - if: contains(matrix.os, 'macos')
        name: macos-deps
        run: |
          brew install autoconf automake libgpg-error libtool pkg-config gettext glib gmime xapian

      - name: configure
        run: ./autogen.sh --disable-guile

      - name: build
        run: make

      - name: test
        run: make test
",,,,,,C++,3,0
1461,https://github.com/pfusik/cito,"name: tests
on: push
jobs:
  c-cl-error:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-c test-cl test-error
  cpp-java:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/checkout@main
      - run: make -j3 test-cpp test-java
  cs:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-dotnet@main
      - uses: actions/checkout@main
      - run: make -j3 test-cs
  d:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest
      - uses: actions/checkout@main
      - run: make -j3 test-d
  js-ts:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-js test-ts
  py-swift:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - run: pip install mypy
      - uses: swift-actions/setup-swift@main
      - uses: actions/checkout@main
      - run: make -j3 test-py test-swift
  host-diff:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/setup-node@main
      - uses: actions/checkout@main
      - run: make -j3 host-diff
      - run: make -j3 java/GenBase.java
      - run: make -j3 host-diff-java
      - run: make -j3 test-error FUT_HOST=cs
      - run: make -j3 test-error FUT_HOST=java
      - run: make -j3 test-error FUT_HOST=node
",,,,,,C++,3,0
1774,https://github.com/itsmattkc/legoislandrebuilder,"name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Visual C++ 6.0
      run: |
        git clone --depth 1 https://github.com/itsmattkc/MSVC600

    - name: Build
      shell: cmd
      run: |
        call MSVC600/VC98/Bin/vcvars32.bat
        msdev Rebuilder.dsw /make

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.1
      with:
        path:
          Rebuilder/Release/Rebuilder.exe

    - name: Upload to Releases
      shell: bash
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TRAVIS_REPO_SLUG: itsmattkc/LEGOIslandRebuilder
        TRAVIS_COMMIT: ${{ github.sha }}
      run: |
        curl -fLOSs --retry 2 --retry-delay 60 https://github.com/probonopd/uploadtool/raw/master/upload.sh
        ./upload.sh Rebuilder/Release/Rebuilder.exe
",,,,,,C++,3,0
1794,https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation,"name: demo

on:
  push:
    branches: [ main ]
    paths:
    - examples/demo/**
  pull_request:
    branches: [ main ]
    paths:
    - examples/demo/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Test demo
      run: make test
      working-directory: examples/demo
      timeout-minutes: 10
",,,,,,C++,3,0
1932,https://github.com/wysaid/xege,"name: 测试构建项目

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  TESTING:
    runs-on: windows-2019
    steps:
      - name: 获取源码
        uses: actions/Checkout@v2

      - name: 尝试构建 MSVC 2019 X64 Release
        run: |
          mkdir build
          cd build
          cmake .. -G ""Visual Studio 16 2019"" -A x64
          cmake --build . -j 

",,,,,,C++,3,0
1934,https://github.com/llnl/librom,"name: CI
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, labeled, synchronize]
    branches:
      - master

jobs:
  docker-image:
    uses: ./.github/workflows/docker.yml
  code-style:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Artistic Style version (for information)
        run: astyle --version
      - name: Check Stylization
        run: |
            cd ${GITHUB_WORKSPACE}/scripts
            ./stylize.sh astyle
  linux:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
      volumes:
        - /mnt:/mnt
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Build libROM
        run: |
            mkdir ${GITHUB_WORKSPACE}/build
            cd ${GITHUB_WORKSPACE}/build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - name: Build baseline libROM
        if: ${{ github.event.label.name == 'LGTM' || contains(github.event.pull_request.labels.*.name, 'LGTM') }}
        run: |
            cd ${GITHUB_WORKSPACE}/dependencies
            git clone https://github.com/LLNL/libROM.git
            cd libROM
            mkdir build
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - uses: ./.github/workflows/run_tests
  # mac:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install Mac dependencies
  #       run: |
  #           brew install open-mpi
  #           brew install openblas
  #           brew install lapack
  #           brew install scalapack
  #           brew install hdf5
  #     - name: Check out libROM
  #       uses: actions/checkout@v2
  #     - uses: ./.github/workflows/checkout_repo
  #     - name: Build libROM
  #       run: |
  #           export FC=/usr/local/bin/gfortran-10
  #           mkdir ${GITHUB_WORKSPACE}/build
  #           cd ${GITHUB_WORKSPACE}/build
  #           cmake -DCMAKE_BUILD_TYPE=Debug ..
  #           make
  #           cmake -DCMAKE_BUILD_TYPE=Optimized ..
  #           make
  #     - uses: ./.github/workflows/run_tests
",,,,,,C++,2,1
1994,https://github.com/pine64/bl_iot_sdk,"name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - run: make
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
      
  build-msys:
    runs-on: windows-latest
    steps:
    - name: setup msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: make
        msystem: MSYS

    - uses: actions/checkout@v2

    - run: make
      shell: msys2 {0}
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
        MAX_MAKE_JOBS: 2
",,,,,,C++,1,2
1998,https://github.com/openc2e/openc2e,"name: build

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ main ]

env:
  CTEST_OUTPUT_ON_FAILURE: TRUE
  # GitHub runners have two cores each
  MAKEFLAGS: -j3 -k
  # set some variables for Visual Studio
  MultiProcessorCompilation: true
  UseMultiToolTask: true
  EnforceProcessCountAcrossBuilds: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Download clang-format""
      run: ""wget -o- https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-10_linux-amd64 && chmod +x clang-format-10_linux-amd64""
    - name: ""clang-format""
      run: ""./clang-format-10_linux-amd64 -i src/**/*.cpp src/**/*.h && git diff --exit-code""
      
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,ubuntu-latest,macos-latest]
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Install dependencies (Ubuntu)""
      if: ""startsWith(matrix.os, 'ubuntu-')""
      run: sudo apt-get update && sudo apt-get install libpng-dev libsdl2-dev libsdl2-mixer-dev zlib1g-dev
    - name: ""Configure""
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: ""Build""
      run: cmake --build build --config RelWithDebInfo
    - name: ""Test""
      run: cd build && ctest --build-config RelWithDebInfo
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""openc2e-${{ github.sha }}-${{ runner.os }}""
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""mngplayer2-${{ github.sha }}-${{ runner.os }}"" --component mngplayer2
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: openc2e-${{ github.sha }}-${{ runner.os }}
        path: openc2e-${{ github.sha }}-${{ runner.os }}
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: MNGPlayer2-${{ github.sha }}-${{ runner.os }}
        path: mngplayer2-${{ github.sha }}-${{ runner.os }}
",,,,,,C++,3,0
2050,https://github.com/stardustcfw/haku33,"
name: Build Homebrew

on: [push,workflow_dispatch]
jobs:
  build:

    runs-on: ubuntu-latest
    container:
      image: d3fau4/nx-dev:latest
    steps:
    - uses: actions/checkout@v1
    - name: Update repo.
      run: |
        git submodule update --init --recursive
        
    - name: Make app
      run: |
        make -j$(nproc)
        
    - uses: actions/upload-artifact@master
      with:
        name: Homebrew
        path: Haku33.nro
",,,,,,C++,3,0
2083,https://github.com/open-dynamic-robot-initiative/master-board,"# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI - Linux via ROS

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          - {ROS_DISTRO: rolling, BUILDER: colcon}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'ici_with_unset_variables source /root/target_ws/install/setup.bash && cd /root/target_ws/build/master_board_sdk && make test'
      IMMEDIATE_TEST_OUTPUT: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci
      - uses: 'ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e'
        env: ${{ matrix.env }}
",,,,,,C++,3,0
2095,https://github.com/python-greenlet/greenlet,"name: tests

on: [push, pull_request, workflow_dispatch]

env:
  PYTHONHASHSEED: 1042466059
  ZOPE_INTERFACE_STRICT_IRO: 1
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONDEVMODE: 1
  PYTHONFAULTHANDLER: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # repo settings.
  TWINE_USERNAME: __token__


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, ""3.10"", ""3.11"", ""3.12""]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U twine
    - name: Install greenlet (non-Mac)
      if: ${{ ! startsWith(runner.os, 'Mac') }}
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
      env:
        # Ensure we test with assertions enabled.
        # As opposed to the manylinux builds, which we distribute and
        # thus only use O3 (because Ofast enables fast-math, which has
        # process-wide effects), we test with Ofast here, because we
        # expect that some people will compile it themselves with that setting.
        CPPFLAGS: ""-Ofast -UNDEBUG""
    - name: Install greenlet (Mac)
      if: startsWith(runner.os, 'Mac')
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
        ls -l dist
        # Something in the build system isn't detecting that we're building for both,
        # so we're getting tagged with just x86_64. Force the universal2 tag.
        # (I've verified that the .so files are in fact universal, with both architectures.)
        # The macosx_11_0 tag is conservative: At this writing,
        # on GHA, Python 3.7/3.8/3.9/3.10  all produce that tag, while
        # 3.11/3.12 produce the less restrictive macosx_10_9 tag. (Locally on JAM's mac,
        # the official CPython builds produce 10_9 for everything from 3.9 onward.)
        wheel tags --remove --platform-tag macosx_11_0_universal2 dist/*whl
      env:
        # Unlike the above, we are actually distributing these
        # wheels, so they need to be built for production use.
        CPPFLAGS: ""-O3""
        # Build for both architectures
        ARCHFLAGS: ""-arch x86_64 -arch arm64""

    - name: Check greenlet build
      run: |
        ls -l dist
        twine check dist/*
    - name: Store greenlet wheel
      uses: actions/upload-artifact@v3
      with:
        name: greenlet-${{ runner.os }}-${{ matrix.python-version }}.whl
        path: dist/*whl
    - name: Test
      run: |
        python -VV
        python -c 'import greenlet._greenlet as G; assert G.GREENLET_USE_STANDARD_THREADING'
        python -m unittest discover -v greenlet.tests
    - name: Doctest
      run: |
        sphinx-build -b doctest -d docs/_build/doctrees2 docs docs/_build/doctest2
    - name: Publish package to PyPI (mac)
      # We cannot 'uses: pypa/gh-action-pypi-publish@v1.4.1' because
      # that's apparently a container action, and those don't run on
      # the Mac.
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && startsWith(runner.os, 'Mac')
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        twine upload --skip-existing dist/*

  CodeQL:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ""3.10""
          cache: 'pip'
          cache-dependency-path: setup.py
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          # Set the `CODEQL-PYTHON` environment variable to the Python executable
          # that includes the dependencies
          echo ""CODEQL_PYTHON=$(which python)"" >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp
          # Override the default behavior so that the action doesn't attempt
          # to auto-install Python dependencies
          setup-python-dependencies: false
      - name: Install greenlet
        run: |
          python setup.py build
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  manylinux:

    runs-on: ubuntu-latest
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]
        image:
          - manylinux_2_28_x86_64
          - manylinux2014_aarch64
          - manylinux2014_ppc64le
          - manylinux2014_s390x
          - manylinux2014_x86_64
          - musllinux_1_1_x86_64
          - musllinux_1_1_aarch64
    name: ${{ matrix.image }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build and test greenlet
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}
        run: bash ./make-manylinux
      - name: Store greenlet wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*whl
          name: ${{ matrix.image }}_wheels.zip
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/
",,,,,,C++,3,0
11,https://github.com/mikeakohn/naken_asm,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: ""Windows Latest Mingw"",
            os: ""windows-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: false
          }
        - {
            name: ""Ubuntu Latest GCC"",
            os: ""ubuntu-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: true
          }
        - {
            name: ""MacOS Latest Clang"",
            os: ""macos-latest"",
            cc: ""clang"",
            cxx: ""clang++"",
            runtests: true
          }

    steps:
      - uses: actions/checkout@v2

      - name: Update apt (Ubuntu only)
        if: startsWith(matrix.config.os, 'ubuntu')
        run: sudo apt update

      - name: Configure
        shell: bash
        run: ./configure

      - name: Make
        shell: bash
        run: make

      - name: Tests
        if: matrix.config.runtests == true
        shell: bash
        run: make tests
",,,,,,C++,3,0
16,https://github.com/hamletdufromage/aio-switch-updater,"name: Build AIO-switch-updater

on: 
  push:
  workflow_dispatch:

jobs:
  AIO-switch-updater:
    runs-on: ubuntu-latest
    #container: hamletdufromage/devkita64_devkitarm
    container: devkitpro/devkita64
    steps:
    - uses: actions/checkout@v1

    - name: update repo
      run: |
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater/lib/borealis
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater/TegraExplorer
        git submodule update --init --recursive

    - name: install dependencies
      run: |
        sudo apt update -y
        sudo apt install build-essential -y

    - name: Building aio-switch-updater
      run: |
        make -C aiosu-forwarder -f Makefile
        make -j$(nproc)
        
    - uses: actions/upload-artifact@master
      with:
        name: aio-switch-updater
        path: aio-switch-updater.nro
",,,,,,C++,3,0
45,https://github.com/librevault/librevault,"name: CI
on:
  push:
    branches: [ master, develop, ""feature/githubactions"" ]
  pull_request:
    branches: [ master, develop, ""feature/githubactions"" ]
jobs:
  build-windows:
    runs-on: windows-2019
    steps:
      - name: Install system-wide dependencies
        run: |
          choco install innosetup
          python -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: |
            ~/.conan/data
            C:/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          .venv\scripts\activate.ps1
          cd build
          conan profile new --detect --force default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
#      - name: Build application
#        run: |
#          cd build
#          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=built_binaries -DBUILD_UPDATER=OFF ..
#          cmake --build . --config Release
#      - name: Package application
#        run: |
#          .venv\scripts\activate.ps1
#          cd build
#          cmake --install .
#          python ../scripts/configure_innosetup.py --packaging_dir pack --install_dir built_binaries
#          pushd pack
#          iscc librevault.iss
#          popd
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-innosetup-windows-x64
#          path: build/pack/result.exe

  build-linux:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install system-wide dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash git python3-pip python3.8-dev python3.8-venv build-essential libwayland-dev libglib2.0-dev libgl-dev ninja-build ccache
          sudo python3.8 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3.8 -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          cd build
          conan profile new --detect --force default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L ""$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo ""$HOME/.local/bin"" >> $GITHUB_PATH
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
      - name: Build application
        run: |
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache

#  build-linux-snap:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - uses: snapcore/action-build@v1
#        id: snapcraft
#      - uses: actions/upload-artifact@v2
#        with:
#          name: librevault-snap-linux-x64
#          path: ${{ steps.snapcraft.outputs.snap }}
#      - uses: snapcore/action-publish@v1
#        if: github.event_name == 'push'
#        with:
#          store_login: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
#          snap: ${{ steps.snapcraft.outputs.snap }}
#          release: edge
#
  build-macos:
    runs-on: macos-11
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - name: Install system-wide dependencies
        run: |
          brew install cmake ccache ninja sccache
          python3 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3 -m venv .venv
          poetry install
          source .venv/bin/activate
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          mkdir -p build
          pushd build
          conan profile new --detect --force default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: |
            ~/.ccache
            ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Build application
        run: |
          mkdir -p build
          pushd build
          cmake .. -GNinja -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OBJC_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../packaging
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache
#          cpack
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-dmg-macos-x64
#          path: build/Librevault.dmg
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
#        - windows-2019
#        - windows-2022
        - ubuntu-20.04
        - macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run tests
        run: cargo test
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run lint
        run: cargo fmt -- --check
",,,,,,C++,3,0
2,https://github.com/connectbot/connectbot,"name: Continuous Integration

on:
  push:
    branches: [ main ]
    tags:
      - ""v*.*.*""
  pull_request:
    branches: [ main ]
  schedule:
    - cron: ""0 7 */3 * *""
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-latest

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Home files
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          GITHUB_TAG=""git-$(git describe)""
          GITHUB_TITLE=""$(git log -1 --pretty=%B | head -1)""
          echo ""${GITHUB_TAG}"" > tag.txt
          echo ""${GITHUB_TAG}: ${GITHUB_TITLE}"" > release-title.txt
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab

      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  upload:
    name: Upload to GitHub releases
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""RELEASE_TITLE=$(cat release-title.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          body: ""Untested build""
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  signing:
    name: Trigger remote signing
    needs: upload
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Call remote signer
        uses: joelwmale/webhook-action@814998dae0915eaf4faec992291eb956ad37d902
        with:
          url: ${{ secrets.SIGNER_WEBHOOK_URL }}
          body: '{""TAG_ID"": ""${{ steps.name.outputs.GITHUB_TAG }}""}'
",,,,,,Java,3,0
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
",,,,,,Java,3,0
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Java,3,0
5,https://github.com/rzwitserloot/lombok,"name: Tests

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Build with Ant
        run: ant -noinput dist
        
      - uses: actions/upload-artifact@v3
        with:
          name: lombok.jar
          path: dist/lombok.jar
    
  
  test-javac:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
        goal: [javacCurrent]
        include:
          - jdk: 11
            goal: javac6
          - jdk: 11
            goal: javac8
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ matrix.jdk }}
        if: ${{ matrix.jdk != 21 }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'zulu'
      
      - name: Set up JDK 21-ea
        if: ${{ matrix.jdk == 21 }}
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 21
          version: latest
          
      - name: Install Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.zip
          unzip apache-ant-1.10.13-bin.zip -d ""${HOME}""
          echo ""ANT_HOME=${HOME}/apache-ant-1.10.13"" >> $GITHUB_ENV
          echo ""${HOME}/apache-ant-1.10.13/bin"" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Run tests
        run: ant -noinput test.${{ matrix.goal }}
  
  test-eclipse:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        version:
        - eclipse-oxygen
        - eclipse-202006
        - eclipse-202006-jdk8
        - eclipse-202212
        - eclipse-oxygen-full
        - eclipse-2022-03-full
        - ecj11
        - ecj14
        - ecj16
        - ecj19
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
          
      - name: Build with Ant
        run: xvfb-run ant -noinput dist test.${{ matrix.version }}
        
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [8, 11, 17, 21]
        tool: 
          - {name: ""maven"",  cmd: ""mvn compile""}
          - {name: ""gradle"", cmd: ""gradle assemble""}
          - {name: ""ant"",    cmd: ""ant dist""}
          - {name: ""bazel"",  cmd: ""bazel build //:ProjectRunner""}
      fail-fast: false
    env:
      IMAGE_NAME: lombok-${{ matrix.tool.name }}-jdk${{ matrix.jdk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/download-artifact@v3
        with:
          name: lombok.jar
        
      - name: Build container
        working-directory: ./docker
        run: docker build --build-arg jdk=${{ matrix.jdk }} -t $IMAGE_NAME -f ${{ matrix.tool.name }}/Dockerfile .
        
      - name: Compile in container
        run: docker run --entrypoint="""" -v $(pwd)/lombok.jar:/workspace/lombok.jar $IMAGE_NAME /bin/bash -c ""cd classpath; ${{ matrix.tool.cmd }}""
",,,,,,Java,3,0
6,https://github.com/apache/hive,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  macos-jdk8:
    name: 'macOS (JDK 8)'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build project'
        run: |
          mvn clean install -DskipTests -Pitests
",,,,,,Java,3,0
7,https://github.com/apache/directory-studio,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '42 18 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        mvn -f pom-first.xml clean install
        mvn clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
",,,,,,Java,3,0
9,https://github.com/github-api/github-api,"name: CI

on: 
  push:
    branches:
      - main
      - '!/refs/heads/dependabot/*'
  pull_request:
    branches:
      - '*'
      - '!/refs/heads/patch*'

# this is required by spotless for JDK 16+
env:
  JAVA_11_PLUS_MAVEN_OPTS: ""--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED""

permissions:
  contents: read

jobs:
  build:
    name: build-only (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Install (skipTests)
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -DskipTests --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
        name: maven-target-directory
        path: target/
        retention-days: 3
  site:
    name: site (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Site
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean site -D enable-ci --file pom.xml
  test:
    name: test (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows ]
        java: [ 11, 17 ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    # JDK 11+
    - name: Maven Install without Code Coverage
      if: matrix.os == 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D japicmp.skip=true --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Maven Install with Code Coverage
      if: matrix.os != 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D enable-ci --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Codecov Report 
      if: matrix.os == 'ubuntu' && matrix.java == '17'
      uses: codecov/codecov-action@v3.1.4

  test-java-8:
    name: test Java 8 (no-build)
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: maven-target-directory
        path: target
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: 'maven'   
    - name: Maven Test (no build) Java 8
      run: mvn -B surefire:test -DfailIfNoTests -Dsurefire.excludesFile=src/test/resources/slow-or-flaky-tests.txt
",,,,,,Java,3,0
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
",,,,,,Java,3,0
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
",,,,,,Java,3,0
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
",,,,,,Java,3,0
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
",,,,,,Java,3,0
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Java,3,0
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java,3,0
17,https://github.com/enginehub/worldedit,"name: Gradle Build
on: [push, pull_request]

jobs:
  build:
    name: Build WorldEdit on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        cache: 'gradle'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build -s
    - uses: actions/upload-artifact@v3
      name: Archive Reports
      if: always()
      with:
        name: reports for ${{ matrix.os }}
        path: '**/build/reports/**'
    - uses: actions/upload-artifact@v3
      name: Archive Logs
      if: always()
      with:
        name: logs for ${{ matrix.os }}
        path: '**/*.log'

",,,,,,Java,3,0
18,https://github.com/bartdag/py4j,"name: test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        java-version: [ 8 ]
        python-version: [ '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10' ]
        include:
          - os: windows-2019
            java-version: 17
            python-version: '3.10'
          - os: ubuntu-18.04
            java-version: 11
            python-version: '2.7'
          - os: ubuntu-18.04
            java-version: 17
            python-version: '3.8'
    name: Py ${{ matrix.python-version }}, Java ${{ matrix.java-version }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # pin@v2.3.5

      - name: Setup Java 8 JDK for build
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6 # pin @v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Install dependencies
        run: |
          pip install pytest
          cd py4j-java
          # Useful in case the build stops working because of version issues.
          ./gradlew --version
          echo `java -version` && echo `javac -version` && echo `python --version`
          echo $PATH
          echo $JAVA_HOME
          ./gradlew clean
        shell: bash

      - name: Enable IPV6
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

      - name: Run gradle tests
        run: |
          cd py4j-java
          ./gradlew check
          ./gradlew assemble

      - name: Setup Java ${{ matrix.java-version }} JDK for PyTest
        if: ${{ matrix.java-version != '8' }}
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Run PyTest
        run: |
          cd py4j-python
          echo `java -version`
          echo $JAVA_HOME
          # Java TLS tests are disabled until they can be fixed (refs #441)
          pytest -k ""not java_tls_test.""

  test-doc:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: |
          python3 -m pip install -r py4j-web/requirements-doc.txt
          python3 -m pip list

      - name: Setup Java 8 JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Javadoc build
        run: |
          cd py4j-java && ./gradlew javadoc && cd ..
          mv py4j-java/build/docs/javadoc py4j-web/_static/

      - name: Sphinx build
        run: |
          cd py4j-web && make clean html && cd ..
          mv py4j-web/_build/html ../ # Move out of the current repo for GitHub Pages.

      # Publishing documentation only for commits in the master branch.
      - name: Checkout GitHub Pages branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Copy the generated site
        if: github.event_name != 'pull_request'
        run: |
          # Include Javadoc if the commit is tagged (for releases only).
          if [ -z ""`git describe --tags --exact-match 2>/dev/null`"" ]; then
            rm -fr ../html/_static/javadoc
            [ -d _static/javadoc ]  && mv _static/javadoc ../html/_static
          fi

          rm -fr * # Remove existing site
          touch .nojekyll # See https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages
          echo ""www.py4j.org"" > CNAME # Custom domain for GitHub Actions
          cp -r ../html/* . # Move generated site to the current repo.

      - name: Push new site
        uses: EndBug/add-and-commit@v8
        if: github.event_name != 'pull_request'
        with:
          default_author: github_actions
          message: Push new site by ${{ github.sha }}
          add: ""*""
          push: ""--force"" # In case it conflicts with the same step in another workflow.
",,,,,,Java,3,0
19,https://github.com/plantuml/plantuml,"name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
      do_javadoc: ${{ steps.config.outputs.do_javadoc }}
      do_test_linux: ${{ steps.config.outputs.do_test_linux }}
      do_test_windows: ${{ steps.config.outputs.do_test_windows }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          if [[ ""${GITHUB_EVENT_NAME}"" == ""create"" && ""${REF_TYPE}"" == ""tag"" && ""${REF}"" == v* && \
                ( ""${ACTOR}"" == ""arnaudroques"" || ""${ACTOR}"" == ""${GITHUB_REPOSITORY_OWNER}"" ) \
             ]]; then
            echo ""::notice title=::This run will release '${REF}'""
            echo ""do_release=true"" >> $GITHUB_OUTPUT
            echo ""pom_version=${REF#v}""
            echo ""pom_version=${REF#v}"" >> $GITHUB_OUTPUT # pom_version is the tag without the 'v' prefix
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          elif [[ ""${GITHUB_EVENT_NAME}"" =~ push|workflow_dispatch && ""${REF}"" == ""refs/heads/master"" && ""${ACTOR}"" == ""arnaudroques"" ]]; then
            echo ""::notice title=::This run will release a snapshot""
            echo ""do_snapshot_release=true"" >> $GITHUB_OUTPUT
            V=$(perl -ne 'if (/return (\d{6,7});/) {$v=$1} if (/final int beta = (\d+);/) {$b=$1} END{print(substr($v, 0, 1),""."", substr($v, 1, 4),"".""); if ($b) {print(int(substr($v+1, 5)), ""beta"", $b);} else {print(int(substr($v, 5)))}}' src/net/sourceforge/plantuml/version/Version.java)
            echo ""pom_version=$V-SNAPSHOT""
            echo ""pom_version=$V-SNAPSHOT"" >> $GITHUB_OUTPUT # pom_version is taken from Version.java
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          else
            echo ""This run will NOT make a release""
            echo ""do_javadoc=false"" >> $GITHUB_OUTPUT
            echo ""This run will NOT update the Javadoc""
          fi
          echo ""do_test_linux=true"" >> $GITHUB_OUTPUT
          echo ""do_test_windows=false"" >> $GITHUB_OUTPUT

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  # We split windows and ubuntu because windows is so slow...
  test_linux:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        java_version: [ 8, 17 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/checkout@v4

      - name: Set up java
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: gradle

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle -q compileJava --no-daemon

      - name: Test
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle test --no-daemon -i

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing from several builds
          name: ${{ github.run_number }}-${{ matrix.os }}-java-${{ matrix.java_version }}-test-reports
          path: build/reports/tests/


  build_artifacts:
    needs: [ workflow_config ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
#      - name: Set version in gradle.properties
#        if: env.POM_VERSION
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
#        run: |
#          sed -i ""s/version = .*/version = $POM_VERSION/"" gradle.properties
#          cat gradle.properties
      - name: Generate artifacts
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          gradle clean build \
            pdfJar \
            generateMetadataFileForMavenPublication generatePomFileForMavenPublication \
            -x test
          find . -name ""*.jar""
      - name: Sign artifacts
        if: env.ORG_GRADLE_PROJECT_signingKey
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          gradle -i signMavenPublication signPdfJar
          ls -l build/libs
          ls -l plantuml-asl/build/libs
          ls -l plantuml-bsd/build/libs
          ls -l plantuml-epl/build/libs
          ls -l plantuml-lgpl/build/libs
          ls -l plantuml-mit/build/libs
          ls -l plantuml-gplv2/build/libs
      - name: Get release version
        id: version
        run: |
          echo ""release_version=$(gradle properties -q | grep ""version:"" | awk '{print $2}')"" >> $GITHUB_OUTPUT
      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          enableCrossOsArchive: true

  deploy_javadoc:
    needs: [ build_artifacts, test_linux ]
    if: needs.workflow_config.outputs.do_javadoc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build Javadoc
        run: gradle javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/javadoc


  upload:
    if: |
      needs.workflow_config.outputs.do_release == 'true' ||
      needs.workflow_config.outputs.do_snapshot_release == 'true'
    needs: [ workflow_config, build_artifacts, test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds
          name: ${{ github.run_number }}-artifacts
          path: |
            build/libs/*
            build/publications/maven/*
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs

      - name: Create snapshot
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release-snapshot.sh

      - name: Create release in GitHub and OSSRH
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.ref }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release.sh
          gradle --debug publish

  push_to_docker_registry:
    needs: [ workflow_config, upload, test_linux ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PLANTUML_VERSION=${{ github.event.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
",,,,,,Java,3,0
20,https://github.com/kordamp/json-lib,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2006-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on:
  pull_request:

env:
  JAVA_VERSION: '8'
  JAVA_DISTRO: 'zulu'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build -S
",,,,,,Java,3,0
21,https://github.com/json-path/jsonpath,"---
name: Java CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 18]
      fail-fast: false
      max-parallel: 4
    name: JDK ${{ matrix.java }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run Tests
        run: ./gradlew check

      - name: Maven Install
        run: ./gradlew clean publishToMavenLocal

...
",,,,,,Java,3,0
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
",,,,,,Java,3,0
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
",,,,,,Java,3,0
11,https://github.com/bigbluebutton/bigbluebutton,"name: Build and Deploy Docs

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
    paths:
      - 'docs/**'

# Do not build the docs concurrently
concurrency:
  group: docs
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./docs/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build static docs
      - name: Build all versions
        run: ./build.sh
      - name: Build website
        run: yarn build
      - name: upload build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./docs/build

  deploy:
    name: Deploy docs to gh-pages
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: Documentation
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
",,,,,,JavaScript,3,0
941,https://github.com/harfbuzz/harfbuzzjs,"name: Build

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

env:
  EM_VERSION: 3.1.16
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{runner.os}}
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Build hb.wasm
        run: ./build.sh
      - name: Build hb-subset.wasm
        run: ./build-subset.sh

      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: NPM install
        run: npm install
      - name: Run tests
        run: npm test
      - name: Test hb.wasm
        run: node examples/hbjs.example.node.js
      - name: Test hb-subset.wasm
        run: node examples/hb-subset.example.node.js
",,,,,,JavaScript,2,1
1727,https://github.com/microsoft/botbuilder-samples,"name: ci-javascript-samples

env:
  ROOT_FOLDER: BotBuilder-Samples/samples/

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - ""samples/**/*.js""
      - ""samples/**/*.ts""

jobs:
  generate:
    name: detect and generate bot matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: git diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: samples/**/*.+(ts|js)
          ABSOLUTE: true

      - name: generate matrix
        id: set-matrix
        shell: pwsh
        if: env.GIT_DIFF
        run: |
          function UpSearchFolder {
            param ([String] $path, [String] $file)

            while ($path -and !(Test-Path (Join-Path $path $file))) {
              $path = Split-Path $path -Parent
            }

            return $path
          }

          $paths = @(""${{ env.GIT_DIFF_FILTERED }}"" -replace ""'"", """" -split "" "")
          $rootFolder = ""${{ env.ROOT_FOLDER }}""
          $pkg = ""package.json""

          $result = $paths | ForEach-Object { UpSearchFolder -path $_ -file $pkg } | Get-Unique | ForEach-Object {
            $folder = $_
            $json = Get-Content -Raw -Path (Join-Path $folder $pkg) | ConvertFrom-Json
            $files = @($paths | Where-Object { $_.StartsWith($folder) })
            return @{ 
              name = $folder.Substring($folder.IndexOf($rootFolder) + $rootFolder.Length);
              scripts = @($json.scripts | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name);
              folder = $folder;
              files = $files
            } 
          }

          ""Generated matrix:""
          ConvertTo-Json @($result)

          $matrix = ConvertTo-Json -Compress @($result)

          echo ""::set-output name=matrix::$($matrix)""

  build:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{fromJSON(needs.generate.outputs.matrix)}}
      fail-fast: false

    name: bot - ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3

      - name: use node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: yarn install
        run: yarn install
        working-directory: ${{ matrix.folder }}

      - name: yarn build
        if: ${{ contains(matrix.scripts, 'build') }}
        run: yarn build
        working-directory: ${{ matrix.folder }}

      - name: yarn lint
        run: |
          if ${{ endsWith(matrix.files[0], '.js') }}; then
            yarn eslint ${{ join(matrix.files, ' ') }}
          else
            yarn tslint ${{ join(matrix.files, ' ') }}
          fi
        working-directory: ${{ matrix.folder }}
",,,,,,JavaScript,2,1
1818,https://github.com/sodium-friends/sodium-native,"name: Build Status
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        node-version: [lts/*]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
",,,,,,JavaScript,3,0
2079,https://github.com/dfinity/examples,"name: hosting-photo-storage
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - hosting/photo-storage/**
      - .github/workflows/provision-darwin.sh
      - .github/workflows/provision-linux.sh
      - .github/workflows/hosting-photo-storage-example.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  hosting-photo-storage-darwin:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Provision Darwin
        run: bash .github/workflows/provision-darwin.sh
      - name: Hosting Photo Storage Darwin
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
  hosting-photo-storage-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Provision Linux
        run: bash .github/workflows/provision-linux.sh
      - name: Hosting Photo Storage Linux
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
",,,,,,JavaScript,3,0
602,https://github.com/wq/django-rest-pandas,"name: Tests

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.variant }} py=${{ matrix.python-version }} dj=${{ matrix.django-version }} drf=${{ matrix.drf-version }} pandas=${{ matrix.pandas-version }}
    runs-on: ubuntu-22.04
    env:
      TEST_VARIANT: ${{ matrix.variant }}
    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"", ""3.8""]
        django-version: [4.1.7]
        drf-version: [3.14.0]
        pandas-version: [1.5.3]
        variant: ['']
        include:
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: matplotlib
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: django-pandas
        - python-version: ""3.11""
          django-version: 3.2.14
          drf-version: 3.13.1
          pandas-version: 1.5.3
          variant: ''
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m pip install flake8 wheel
        python -m pip install django==${{ matrix.django-version }}
        python -m pip install djangorestframework==${{ matrix.drf-version }}
        python -m pip install pandas==${{ matrix.pandas-version }}
        python -m pip install itertable[oldexcel]
    - name: Install matplotlib
      if: ${{ matrix.variant == 'matplotlib' }}
      run: python -m pip install matplotlib
    - name: Install django-pandas
      if: ${{ matrix.variant == 'django-pandas' }}
      run: python -m pip install django-pandas
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: python -m unittest discover -s tests -t . -v
    - name: Test build
      run: python -m build
  npm:
    name: ""@wq/${{ matrix.package }}""
    runs-on: ubuntu-22.04
    env:
      PACKAGE: ${{ matrix.package }}
    strategy:
      matrix:
        python-version: [""3.11""]
        node-version: [18]
        package:
          - pandas
          - chart
          - analyst
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Node ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        npm ci
        npm run build
    - name: Lint with ESLint
      run: npm run lint
    - name: Test with Jest
      run: |
         cd packages/$PACKAGE
         npm run test
    - uses: smartsquaregmbh/delete-old-packages@v0.4.0
      if: github.event_name == 'push'
      with:
         keep: 5
         names: ${{ matrix.package }}
    - name: Publish to Github Packages
      if: github.event_name == 'push'
      run: |
         python -m pip install setuptools-scm
         ./set_dev_version.sh
         echo ""registry=https://npm.pkg.github.com/wq"" > .npmrc
         echo ""//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}"" >> .npmrc
         cd packages/$PACKAGE
         npm publish
",,,,,,JavaScript,3,0
763,https://github.com/archtaurus/retropiebios,"name: ALL BIOS FILES MD5SUM CHECK

on: push

jobs:
    all-bios-files-md5sum-check:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org/
            - run: npm ci
            - run: npm test
",,,,,,JavaScript,3,0
79,https://github.com/react-native-masked-view/masked-view,"name: Build
on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: ESLint Checks
        run: yarn test:lint
  tsc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: TypeScript type check
        run: yarn test:typescript
  flow:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Flow type check
        run: yarn test:flow
",,,,,,JavaScript,3,0
257,https://github.com/robloach/node-raylib,"name: Test

on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: Install System Dependencies
        if: matrix.os == 'ubuntu'
        run: sudo apt-get update && sudo apt-get install -y xorg-dev libglu1-mesa-dev
      - name: Build Node Addon
        run: npm run compile
      - name: Test
        run: npm test
  build-linux-arm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild.sh
  build-linux-arm-drm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild-drm.sh",,,,,,JavaScript,3,0
681,https://github.com/rive-app/rive-wasm,"name: Build JS
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ""20.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.43
          actions-cache-folder: ""emsdk-cache""
      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
          tar -xvf premake-5.0.0-alpha16-linux.tar.gz
          sudo chmod a+x premake5
          sudo mv premake5 /usr/local/bin
      - name: Install modules
        run: cd js && npm install
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
        run: cd js && ./build.sh
      - name: Run tests
        run: cd js && npm test
",,,,,,JavaScript,3,0
3303,https://github.com/cloudera/hue,"name: Frontend CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.less'
      - '**.scss'
      - '**.vue'
      - 'package*.json'
      - '**commitflow-frontend.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Caching npm with setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: run commit title format check
      run: ./tools/ci/check_for_commit_message.sh 

    - name: run npm version checker
      run: npm run check-pinned-versions

    - name: run npm license checker
      run: npm run check-license

    - name: run npm absolute path detection
      run: npm run check-absolute-paths

    - name: run js lint
      run: npm run lint

    - name: run style lint
      run: npm run style-lint

    - name: run js tests
      run: |
        # https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
        sed -i 's/""test"": ""jest""/""test"": ""jest --runInBand""/g' package.json

        npm run test",,,,,,JavaScript,3,0
3359,https://github.com/rich-harris/devalue,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript,3,0
3454,https://github.com/charlesstover/use-force-update,"name: use-force-update

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable

  eslint:
    name: ESLint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Lint
        run: yarn run eslint

  jest:
    name: Jest
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Unit test
        run: yarn run jest
      - name: Upload coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: jest--coverage
          path: jest/coverage

  rollup:
    name: Rollup
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Build
        run: yarn run rollup
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  github-packages:
    name: GitHub Packages
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn config set npmScopes.${{ github.repository_owner }}.npmPublishRegistry 'https://npm.pkg.github.com';
          yarn npm publish --tolerate-republish;

  npm:
    name: NPM
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn npm publish --tolerate-republish;

on:
  pull_request:
  push:
    branches: [main]
",,,,,,JavaScript,3,0
3477,https://github.com/thanhtunguet/grapesjs-react,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        yarn install
        yarn test grapesjs-react
",,,,,,JavaScript,3,0
3560,https://github.com/padloc/padloc,"name: Run Tests

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version-file: "".nvmrc""
            - uses: actions/cache@v3
              with:
                  path: |
                      ~/.npm
                      ~/.nvm
                      node_modules
                      packages/app/node_modules
                      packages/cordova/node_modules
                      packages/core/node_modules
                      packages/electron/node_modules
                      packages/extension/node_modules
                      packages/locale/node_modules
                      packages/manage/node_modules
                      packages/pwa/node_modules
                      packages/server/node_modules
                      packages/tauri/node_modules
                  key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Run prettier check
              run: npm run prettier:check
            - name: Run translation checks
              run: |
                  npm run locale:extract
                  if [ $(git status --porcelain | wc -l) -ne ""0"" ]; then
                    echo ""Missing translations detected.""
                    exit 1
                  fi
            - name: Run pwa test build
              run: npm run pwa:build
            - name: Run web extention test build
              run: npm run web-extension:build
            - name: Test starting zero-config server
              run: npm run server:start-dry
            - name: Run tests
              run: npm test
            # - name: Run e2e tests
            #   run: npm run test:e2e
",,,,,,JavaScript,3,0
3660,https://github.com/rich-harris/code-red,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (github.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript,3,0
3662,https://github.com/sindresorhus/callsites,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript,3,0
3781,https://github.com/kyranet/canvas-constructor,"name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/eslint.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Run ESLint
        run: yarn lint --fix=false

  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/tsc.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Build Code
        run: yarn build
",,,,,,JavaScript,3,0
3945,https://github.com/react-component/upload,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: cache package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: create package-lock.json
        run: npm i --package-lock-only

      - name: hack for singe file
        run: |
          if [ ! -d ""package-temp-dir"" ]; then
            mkdir package-temp-dir
          fi
          cp package-lock.json package-temp-dir

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: install
        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
        run: npm ci
  
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: lint
        run: npm run lint

    needs: setup
  
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: compile
        run: npm run compile

    needs: setup
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: coverage
        run: npm test -- --coverage && bash <(curl -s https://codecov.io/bash)

    needs: setup
",,,,,,JavaScript,3,0
3956,https://github.com/alitajs/alita,"name: CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test-e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build Packages
        run: pnpm build
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright test:e2e
        run: pnpm test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
",,,,,,JavaScript,3,0
121,https://github.com/splitwise/tokenautocomplete,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-split: [
          {model: ""NexusLowRes"", version: 23},
          {model: ""NexusLowRes"", version: 24},
          {model: ""NexusLowRes"", version: 25},
          {model: ""NexusLowRes"", version: 26},
          {model: ""NexusLowRes"", version: 27},
          {model: ""NexusLowRes"", version: 28},
          {model: ""NexusLowRes"", version: 29},
          {model: ""NexusLowRes"", version: 30},

          {model: ""oriole"", version: 31},
          {model: ""oriole"", version: 32},
          {model: ""oriole"", version: 33}
        ]

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
    - name: Build integration test target
      run: ./gradlew assembleAndroidTest
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_CLOUD_SERVICE_KEY: ${{secrets.GOOGLE_CLOUD_SERVICE_KEY}}
        GOOGLE_PROJECT_ID: ${{secrets.GOOGLE_PROJECT_ID}}
      run: |
        echo $GOOGLE_CLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - name: Run Instrumented Tests with Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app example/build/outputs/apk/debug/example-debug.apk --test example/build/outputs/apk/androidTest/debug/example-debug-androidTest.apk --device model=$DEVICE,version=$API_VERSION,locale=en,orientation=portrait --timeout 30m
      env:
        API_VERSION: ${{ matrix.device-split.version }}
        DEVICE: ${{ matrix.device-split.model }}
",,,,,,Kotlin,2,1
162,https://github.com/jetbrains/idea-gitignore,"# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin,2,1
166,https://github.com/jakewharton/byteunits,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin,3,0
167,https://github.com/openmrs/openmrs-contrib-android-client,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
    types:
      - opened
      - synchronize

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew buildDebug
",,,,,,Kotlin,3,0
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
",,,,,,Kotlin,3,0
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
",,,,,,Kotlin,3,0
189,https://github.com/coolerfall/android-httpdownloadmanager,"name: Android CI

on:
  pull_request:
    branches: [ develop]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin,3,0
226,https://github.com/googlesamples/android-custom-lint-rules,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # AGP 8.2 requires 34.0.0-rc3 - see https://issuetracker.google.com/issues/236167971#comment36
      # and https://github.com/actions/runner-images/issues/7506#issuecomment-1533097084
      # TODO: Remove when AGP updates Build Tools to 34.0.0 and pre-installed in the runner
      #- name: Install Android Build Tools 34.0.0-rc3
      #  run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager ""build-tools;34.0.0-rc3""
      #  shell: bash
      - name: Build with Gradle
        run: ./gradlew build test
",,,,,,Kotlin,3,0
243,https://github.com/bailuk/aat,"name: Build on ubuntu

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Build with Gradle
      run: ./gradlew build

    - name: Collect files for distribution
      run: ci/collect-artifacts.sh

    - name: Upload artifacts (gtk)
      uses: actions/upload-artifact@v2
      with:
        name: aat-gtk
        path: dist/gtk
        if-no-files-found: error

    - name: Upload artifacts (android)
      uses: actions/upload-artifact@v2
      with:
        name: aat-android
        path: dist/android
        if-no-files-found: error
",,,,,,Kotlin,3,0
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin,3,0
301,https://github.com/tommyettinger/gdx-liftoff,"name: build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [8, 11, 17]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: JDK setup
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Gradle setup
        uses: gradle/gradle-build-action@v2
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - name: Build
        run: ./gradlew build check
      - name: Generate sample project
        run: ./gradlew sample
",,,,,,Kotlin,3,0
316,https://github.com/theredspy15/ltecleanerfoss,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin,3,0
332,https://github.com/burhanrashid52/photoeditor,"name: UI test in android emulator CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
      - kotlin-conversion

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - name: Build with Gradle
      run: ./gradlew build

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Run all checks
        run: ./gradlew check --stacktrace

  ui-test:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: run ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
",,,,,,Kotlin,3,0
333,https://github.com/instacart/truetime-android,"name: CI
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Spotless checks
        run: ./gradlew spotlessCheck --stacktrace
      - name: Build the app
        run: ./gradlew build
",,,,,,Kotlin,3,0
339,https://github.com/gotify/android,"on: [push, pull_request]

name: Build

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ./gradlew build --stacktrace
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify.apk
          tag: ${{ github.ref }}
          overwrite: true
",,,,,,Kotlin,3,0
347,https://github.com/mediathekview/zapp,"name: Build and test
on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
        
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
  
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'
        
    - name: Build and test with Gradle
      run: ./gradlew build test -Pci
      
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  ",,,,,,Kotlin,3,0
368,https://github.com/esafirm/android-image-picker,"name: Android CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2.4.0
        with:
          distribution: adopt-openj9
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          cache-name: gradle
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('build.gradle') }}
          restore-keys: |
            gradle-${{ hashFiles('build.gradle') }}
            gradle-

      - name: Build with Gradle
        run: ./gradlew build -x lint

      - name: Build test
        run: ./gradlew sample:assembleAndroidTest

      - name: Run tests on Firebase Test Lab
        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
        if: github.ref == 'refs/heads/master'
        with:
          arg-spec: 'firebasetest.yml:android-pixel-4'
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
",,,,,,Kotlin,3,0
378,https://github.com/taboolib/taboolib,"name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    if: ""contains(github.event.head_commit.message, 'dev')""
    runs-on: ubuntu-latest
    steps:
      # 环境配置
      - name: checkout repository
        uses: actions/checkout@v2
      - name: cache gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 8.0
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8.0

      # 设置权限
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      # 编译测试
      - name: build test
        id: publish_1
        continue-on-error: true
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew build -Pbuild=$GITHUB_RUN_NUMBER -PtaboolibUsername=$NEXUS_USERNAME -PtaboolibPassword=$NEXUS_PASSWORD",,,,,,Kotlin,3,0
406,https://github.com/jetbrains-research/astminer,"name: Build with lint

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    needs: setup
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build astminer
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-report
          path: build/astminer/reports/tests/**/*

      - name: Upload Detekt Report
        uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: build/astminer/reports/detekt/detekt.sarif

  run-on-configs:
    needs: build
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Prepare shadowJar
        run: ./gradlew shadowJar

      - name: Run antlr_java_js_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_java_js_ast.yaml

      - name: Run antlr_python_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_python_paths.yaml

      - name: Run gumtree_java_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_ast.yaml

      - name: Run gumtree_java_function_names_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_function_names_paths.yaml
",,,,,,Kotlin,3,0
545,https://github.com/skydoves/baserecyclerviewadapter,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin,3,0
495,https://github.com/returntocorp/semgrep-rules,"name: validate-r2c-registry-metadata

# Test this workflow using github.com/nektos/act
# > brew install act
# > echo '{""pull_request"":{""head"":{""ref"":develop""}},{""base"":{""ref"":""release""}}}' > act-env.json
# > act pull_request --verbose --eventpath act-env.json -j validate-metadata

on:
  pull_request:
    branches: [develop, release]
  push:
    branches: [develop, release]

jobs:
  validate-metadata:
    if: github.repository == 'semgrep/semgrep-rules'
    name: Validate r2c registry metadata
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: changed-files
        name: get changed files
        env:
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          echo ""CHANGED_FILES=$(git diff --name-only origin/${BASE_REF} origin/${HEAD_REF} | xargs )"" >> $GITHUB_OUTPUT
      - id: print-changed-files
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        name: debugging step - print changed files
        run: echo $CHANGED_FILES
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9.2
      - name: install deps
        run: pip install jsonschema pyyaml
      - name: validate metadata
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        run: |
          python .github/scripts/validate-metadata.py -s ./metadata-schema.yaml.schm -f $CHANGED_FILES
",,,,,,Python,3,0
540,https://github.com/cesena/ghidra2dwarf,"name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  test-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""
      
      - name: install 32bit libs
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libc6:i386

      - name: install gdb
        run: sudo apt install gdb

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: install python requirements
        run: |
          cd test
          sudo python3 -m pip install -r requirements.txt

      - name: test
        run: |
          cd test
          #./generate_dbg.py $GHIDRA_INSTALL_DIR
          #cd binaries
          #chmod +x ./passcode_dbg
          #gdb --batch -ex 'start < passcode_input.txt' -ex list -ex continue ./passcode_dbg
          ./run_tests.sh $GHIDRA_INSTALL_DIR

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        shell: cmd
        run: |
          cd lib
          bash fetch_libs_and_build.sh
          move target\libdwarf.jar ..\src

      - name: test
        shell: cmd
        run: |
          cd test
          copy %pythonLocation%\python.exe python3.exe
          call run_tests %GHIDRA_INSTALL_DIR%

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: NextLight/setup-ghidra@octokit-auth
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: test
        run: |
          cd test
          ./generate_dbg.py $GHIDRA_INSTALL_DIR
",,,,,,Python,3,0
815,https://github.com/arcadelab/deepdrr,"name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python,2,1
977,https://github.com/docopt/docopt.c,"name: PyPi publish

on:
  push:
    branches:
    - 'master'
  pull_request:
    types:
    - opened
    - reopened

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.9]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
            -   name: PyPi release
                run: |
                    pip install twine
                    python setup.py sdist bdist_wheel
                    python -m twine upload --repository pypi dist/*
                env:
                    TWINE_USERNAME: __token__
                    TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
                    TWINE_NON_INTERACTIVE: 1
                if: matrix.python-version == '3.9' && matrix.os.name == 'Linux' && github.ref == 'refs/heads/master'
",,,,,,Python,3,0
1886,https://github.com/electronstudio/raylib-python-cffi,"name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-mac:
    runs-on: macos-11
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install

      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name macosx_10_15_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

#  build-mac12-arm64:
#    runs-on: macos-12
#    strategy:
#      matrix:
#        python-version: ['3.10', '3.11.0-alpha - 3.11.0' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      # Only build raylib for arm64 (although we could make a fat universal2 binary by asking for x86_64 as well)
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64""  -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#      # Name defaults to universal2 and it technically is, but we override name to arm64.  Why don't we make a working universal2 wheel?  Because
#      # I'd rather have a separate x86_64 that I can test, and I want it to work on 10_15 but I'm not sure a 'macosx_10_15_universal2' is valid
#      # given that there is no SDK for universal until macosx_11_0
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_12_0_arm64
#
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#
#
#  build-mac11-arm64:
#    runs-on: macos-11
#    strategy:
#      matrix:
#        python-version: [ '3.10.5' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    env:
#      MACOSX_DEPLOYMENT_TARGET: 11.6
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      #  build raylib for arm64 and x86_64 as well
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64"" -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_11_0_arm64
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#


  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/
      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name manylinux2014_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*


#  build-rpi:
#    runs-on: rpi
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
#          make -j2
#          make install
#      - name: Copy extras
#        run: |
#          cp physac/src/physac.h /usr/local/include/
#          cp raygui/src/raygui.h /usr/local/include/
#
#      - name: Build raylib-python-cffi
#        run: |
#          python3 setup.py bdist_wheel
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version:  [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          msbuild raylib.sln /target:raylib /property:Configuration=Release
          copy raylib\Release\raylib.lib ..\..
          cd ..\..
        shell: cmd

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          del raylib\dynamic\*.so* >nul 2>&1
          del raylib\dynamic\*.dll >nul 2>&1
          del raylib\dynamic\*.dylib >nul 2>&1
          del raylib\dynamic\32bit\* >nul 2>&1
          python setup.py bdist_wheel
        shell: cmd
          
      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/* 
          
  source-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

  dynamic-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib-python-cffi-dynamic
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          cd dynamic
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dynamic/dist/*
",,,,,,Python,3,0
1955,https://github.com/pydata/bottleneck,"name: Github Actions

on: [""push"", ""pull_request""]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        os:
          [
            ubuntu-latest,
            macos-latest,
            windows-latest,
            windows-2022,
            macos-10.15,
          ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          pip install .

      - name: Test with pytest
        run: |
          pip install pytest
          pytest --pyargs bottleneck

  check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder for CI checks in PRs
        run: echo ""Done""

  build_wheels:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_SKIP: pp*

      - name: Store wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN}}
",,,,,,Python,3,0
105,https://github.com/chipsec/chipsec,"name: Run tests

on: [push, pull_request]

jobs:
  build-linux-km:
    name: Linux kernel module
    strategy:
      matrix:
        distro:
          - {name: ""alpine"", tag: ""3.18"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.17"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.16"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.15"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.14"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-zen"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""base"", image_prefix: ""docker.io/library/""}
          - {name: ""centos"", tag: ""stream9"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""stream8"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""7"", image_prefix: ""quay.io/centos/""}
          - {name: ""debian"", tag: ""bookworm-slim"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""11"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""10"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""23.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""22.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""20.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""18.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""16.04"", image_prefix: ""docker.io/library/""}
    runs-on: ubuntu-22.04
    container:
      image: docker://${{ matrix.distro.image_prefix }}${{ matrix.distro.name }}:${{ matrix.distro.tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Alpine dependencies
      if: matrix.distro.name == 'alpine'
      run: |
        apk --no-cache --update add linux${{ matrix.distro.variant }} linux${{ matrix.distro.variant }}-dev nasm

        # DKMS is not yet packaged in Alpine
        apk --no-cache --update add bash gcc git make
        git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
        make -C /opt/dkms install

    - name: Install Arch Linux dependencies
      if: matrix.distro.name == 'archlinux'
      run: |
        pacman -Syu --noconfirm dkms linux${{ matrix.distro.variant }}-headers nasm

    - name: Install CentOS dependencies
      if: matrix.distro.name == 'centos'
      run: |
        if [ ""${{ matrix.distro.tag }}"" = 7 ] ; then
            yum install -y kernel kernel-devel nasm
            yum install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream8 ] ; then
            dnf install -y --enablerepo=powertools kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream9 ] ; then
            dnf install -y --enablerepo=crb kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        fi

        # DKMS is not longer packaged in CentOS Stream
        if ! command -v dkms > /dev/null 2>&1 ; then
            git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
            make -C /opt/dkms install
        fi

    - name: Install Debian dependencies
      if: matrix.distro.name == 'debian'
      run: |
        apt-get update -q
        apt-get install -qqy dkms nasm

    - name: Install Ubuntu dependencies
      if: matrix.distro.name == 'ubuntu'
      run: |
        apt-get update -q
        apt-get install -qqy dkms linux-headers-generic nasm

    - name: Compute packaged kernel version
      id: versions
      run: |
        KERNEL_VER=''
        if [ ""${{ matrix.distro.name }}"" = alpine ] ; then
            # Parse ""lib/modules/5.15.53-0-lts/build""
            KERNEL_VER=""$(apk info --contents ""linux${{ matrix.distro.variant }}-dev"" | sed -n 's:^lib/modules/\([^/][^/]*\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = archlinux ] ; then
            # Parse ""/usr/lib/modules/5.18.0-arch1-1/build/""
            KERNEL_VER=""$(pacman -Qql ""linux${{ matrix.distro.variant }}-headers"" | sed -n 's:^/usr/lib/modules/\([^/]\+\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = centos ] ; then
            # Parse ""Source RPM  : kernel-3.10.0-1160.71.1.el7.src.rpm""
            KERNEL_VER=""$(LANG=C rpm -qi kernel-devel | sed -n 's/^Source RPM *: kernel-\(.*\).src.rpm$/\1.x86_64/p' | tail -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = debian ] ; then
            # Parse ""Depends: linux-headers-5.10.0-15-amd64 (= 5.10.120-1)""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-amd64 | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = ubuntu ] ; then
            # Parse ""Depends: linux-headers-5.15.0-40-generic""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-generic | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        fi
        if [ -z ""${KERNEL_VER}"" ] ; then
            echo >&2 ""Error: no kernel package found""
            exit 1
        fi
        echo ""Found packaged kernel ${KERNEL_VER}""
        echo ""KERNEL_VER=${KERNEL_VER}"" >> ""$GITHUB_ENV""

        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""CHIPSEC_MODULE_VER=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_ENV""

        echo ""kernel=${KERNEL_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""chipsec=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""uname_m=$(uname -m)"" >> ""$GITHUB_OUTPUT""

    - name: Build Linux driver with DKMS for ${{ steps.versions.outputs.kernel }}
      run: |
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        dkms add drivers/linux
        dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Show dkms status
      run: dkms status

    - name: Show modinfo on the kernel module
      id: modinfo
      run: |
        MODULE=""$(ls -1 ""/var/lib/dkms/chipsec/${CHIPSEC_MODULE_VER}/${KERNEL_VER}/$(uname -m)/module/chipsec.ko""* | head -n1)""
        echo ""module_path=${MODULE}"" >> ""$GITHUB_OUTPUT""
        modinfo ""${MODULE}""

    - name: Upload Linux driver from ${{ steps.modinfo.outputs.module_path }}
      uses: actions/upload-artifact@v3
      with:
        name: chipsec-${{ steps.versions.outputs.chipsec }}.${{ matrix.distro.name }}-${{ matrix.distro.tag }}${{ matrix.distro.variant }}-${{ steps.versions.outputs.kernel }}.${{ steps.versions.outputs.uname_m }}
        path: ${{ steps.modinfo.outputs.module_path }}
        if-no-files-found: error

  windows_driver:
    name: Windows driver matrix
    strategy:
      matrix:
        versions:
          - {window: ""2019"", python: ""3.11""}
          - {window: ""2019"", python: ""3.10""}
          - {window: ""2019"", python: ""3.9""}
          - {window: ""2019"", python: ""3.8""}
          - {window: ""2019"", python: ""3.7""}
          
          - {window: ""2022"", python: ""3.11""}
          - {window: ""2022"", python: ""3.10""}
          - {window: ""2022"", python: ""3.9""}
          - {window: ""2022"", python: ""3.8""}
          - {window: ""2022"", python: ""3.7""}
          
    runs-on: windows-${{ matrix.versions.window }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - name: Install dependencies
      shell: bash
      run: pip install -r windows_requirements.txt

    - name: Build Windows driver
      shell: bash
      run: python setup.py build_ext -i

    - name: Upload Windows Main driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/chipsec/x64
        if-no-files-found: error
    
    - name: Upload Windows PCI Filter driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/pcifilter/x64
        if-no-files-found: error

    - name: Run Python unit tests
      shell: bash
      run: python -m unittest
      
    - name: Run xml cfg checker
      shell: bash
      run: |
        python tests/cfg_checker.py
        
    - name: Run chipsec tests
      shell: bash
      run: |
        python chipsec_util.py cpu info

  ubuntu-test:
    name: Test on Ubuntu matrix
    strategy:
      matrix:
        versions:
          - {ubuntu: ""22.04"", python: ""3.11""}
          - {ubuntu: ""22.04"", python: ""3.10""}
          - {ubuntu: ""22.04"", python: ""3.9""}
          - {ubuntu: ""22.04"", python: ""3.8""}
          - {ubuntu: ""22.04"", python: ""3.7""}

          - {ubuntu: ""20.04"", python: ""3.11""}
          - {ubuntu: ""20.04"", python: ""3.10""}
          - {ubuntu: ""20.04"", python: ""3.9""}
          - {ubuntu: ""20.04"", python: ""3.8""}
          - {ubuntu: ""20.04"", python: ""3.7""}
          
    runs-on: ubuntu-${{ matrix.versions.ubuntu }}

    steps:
    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - uses: actions/checkout@v3

    - name: Patch chipsec_main to return true even when some module failed
      run: |
        sed 's/^        return modules_failed$/        return 0/' -i chipsec_main.py

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qqy dkms nasm python3-setuptools
        pip install distro
        pip install -r linux_requirements.txt
        sudo pip install -r linux_requirements.txt

    - name: Build the driver with Python
      run: python3 setup.py build_ext -i

    - name: Build the driver with DKMS
      run: |
        KERNEL_VER=""$(uname -r)""
        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        sudo dkms add drivers/linux
        sudo dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Run Python unit tests
      run: |
        python3 -m unittest
        
    - name: Run xml cfg checker
      run: |
        python3 tests/cfg_checker.py

    - name: pylint pilot for modules folder
      run: |
        pylint chipsec/modules

    - name: Install chipsec
      run: sudo python3 setup.py install

    - name: Run chipsec_main test
      run: |
        PYTHONEXE=""$(which python)""
        CHIPSECEXIT=""$($(sudo ${PYTHONEXE} chipsec_main.py -p PMC_I440FX 1>&2); echo $?)""
        if echo ""0 1 2 4 8"" | grep -qw $CHIPSECEXIT; then $(exit 0); else $(exit $CHIPSECEXIT); fi

",,,,,,Python,2,1
298,https://github.com/aio-libs/multidict,"name: CI

on:
  push:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-2-dev
        pip install -r requirements/doc.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
      env:
        MULTIDICT_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9', '3.10', '3.11']
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: windows
            no-extensions: 'Y'
        include:
          - pyver: pypy-3.8
            no-extensions: 'Y'
            os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo ""::set-output name=dir::$(pip cache dir)""    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
      env:
        MULTIDICT_NO_EXTENSIONS: ${{ matrix.no-extensions }}
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        python -m pytest tests -vv
    - name: Prepare coverage artifact
      # combining Linux and Windows paths is tricky, left this exercise for others
      # multidict has no Winows or MacOS specific code paths anyway
      if: ${{ matrix.os == 'ubuntu' }}
      uses: aio-libs/prepare-coverage@v22.1.2

  test-summary:
    name: Tests status
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Checkout
      uses: actions/checkout@v4
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v22.1.4

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Dummy
        run: |
            echo ""Predeploy step""

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        qemu: ['']
        include:
          # Split ubuntu job for the sake of speed-up
        - os: ubuntu
          qemu: aarch64
        - os: ubuntu
          qemu: ppc64le
        - os: ubuntu
          qemu: s390x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      if: ${{ matrix.qemu }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
      id: qemu
    - name: Prepare emulation
      run: |
        if [[ -n ""${{ matrix.qemu }}"" ]]; then
          # Build emulated architectures only if QEMU is set,
          # use default ""auto"" otherwise
          echo ""CIBW_ARCHS_LINUX=${{ matrix.qemu }}"" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.1
      env:
        CIBW_ARCHS_MACOS: x86_64 arm64 universal2
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./wheelhouse/*.whl

  deploy:
    name: Deploy
    needs: [build-tarball, build-wheels]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    environment:
      name: pypi
      url: https://pypi.org/p/multidict

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Login
      run: |
        echo ""${{ secrets.GITHUB_TOKEN }}"" | gh auth login --with-token
    - name: Download dists
      uses: actions/download-artifact@v3
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: multidict
        version_file: multidict/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        artifact: dist
        fix_issue_regex: "":issue:`(\\d+)`""
        fix_issue_repl: ""(#\\1)""

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v1
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**
",,,,,,Python,3,0
451,https://github.com/theonlypwner/crc32,"name: Test

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test:
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""pypy2.7""
          - ""pypy3.7""
          - ""pypy3.8""
          - ""pypy3.9""
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install Coveralls
      run: pip3 install coveralls
    - name: Test
      run: coverage run --branch --source=crc32 test.py
    - name: Upload coverage
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.python }}
        COVERALLS_PARALLEL: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
    - run: pip install --upgrade coveralls
    - run: coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python,3,0
452,https://github.com/gogotanaka/hilbert,"name: Python

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -
    - name: Poetry Version
      run: |
        poetry --version
    - name: Poetry Install Dependencies
      run: |
        poetry install --no-interaction
    - name: Test with pytest
      run: |
        poetry run pytest",,,,,,Python,3,0
453,https://github.com/salimane/flask-mvc,"name: Flask-mvc

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
",,,,,,Python,3,0
454,https://github.com/lamerman/shellpy,"name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.6, 3.7, 3.8, 3.9, pypy-2.7, pypy-3.6]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install mock
          python ./setup.py install
      - name: Test with pytest
        run: |
          python -m unittest discover

      - name: Run test scripts
        run: |
          example/import_from_python/import.py

      - name: Run test scripts python2
        if: matrix.python-version == '2.7' || matrix.python-version == 'pypy-2.7'
        run: |
          shellpy example/allinone/test.spy

      - name: Run test scripts python3
        if: matrix.python-version != '2.7' && matrix.python-version != 'pypy-2.7'
        run: |
          shellpy3 example/allinone/test3.spy
",,,,,,Python,3,0
455,https://github.com/mbforbes/py-factorgraph,"name: build

on: [""push"", ""pull_request""]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-cov coveralls
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          py.test --cov=factorgraph tests/

      - name: Coveralls
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python,3,0
456,https://github.com/pycqa/flake8-docstrings,"name: main

on:
  push:
    branches: [main]
    tags:
  pull_request:

jobs:
  main:
    strategy:
      matrix:
        include:
        # linux
        - os: ubuntu-latest
          python: 3.7
        - os: ubuntu-latest
          python: 3.8
        - os: ubuntu-latest
          python: 3.9
        - os: ubuntu-latest
          python: '3.10'
        # windows
        - os: windows-latest
          python: 3.7
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - run: python -mpip install --upgrade setuptools pip tox virtualenv
    - run: tox -e py
",,,,,,Python,3,0
457,https://github.com/pinterest/ptracer,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [2.7, 3.7, 3.8, 3.9, ""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: matrix.python-version == '2.7'
      run: |
        python -m pip install --upgrade pip
        pip install mock
    - name: Tests
      run: |
        python setup.py test
",,,,,,Python,3,0
458,https://github.com/smarr/latex-to-html5,"name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: texlive/texlive:latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
            apt-get update
            apt-get install -y tidy python3-pip
            python -m pip install --break-system-packages beautifulsoup4 html5lib

      - name: Run Tests
        run: |
            python run-tests.py
",,,,,,Python,3,0
459,https://github.com/samuelcolvin/dnserver,"name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: >
            lint
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('requirements/linting.txt') }}

      - name: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements/linting.txt

      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files --verbose

  test:
    name: test ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        # test 3.11-dev and pypy on ubuntu only to speed up CI, no reason why macos X pypy should fail separately
        include:
          - os: 'ubuntu'
            python-version: '3.11-dev'
          - os: 'ubuntu'
            python-version: 'pypy-3.7'
          - os: 'ubuntu'
            python-version: 'pypy-3.8'
          - os: 'ubuntu'
            python-version: 'pypy-3.9'

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/pyproject.txt') }}-${{ hashFiles('requirements/testing.txt') }}

      - run: pip install -r requirements/pyproject.txt -r requirements/testing.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - run: coverage run -m pytest

      - run: coverage xml

      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          env_vars: PYTHON,OS

  docker-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: docker build . -t dnserver
      - run: docker run --rm dnserver --help

  deploy:
    name: Deploy
    needs: [lint, test, docker-build]
    if: ""success() && startsWith(github.ref, 'refs/tags/')""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: samuelcolvin
          password: ${{ secrets.dockerhub_token }}

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install
        run: pip install -U twine build packaging

      - name: check version
        id: check-version
        run: python <(curl -Ls https://gist.githubusercontent.com/samuelcolvin/4e1ad439c5489e8d6478cdee3eb952ef/raw/check_version.py)
        env:
          VERSION_PATH: 'dnserver/version.py'

      - name: build
        run: python -m build

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: samuelcolvin/dnserver:latest,samuelcolvin/dnserver:v${{ steps.check-version.outputs.VERSION }}
",,,,,,Python,3,0
460,https://github.com/condemil/gist,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  black:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q black
      - run: black --check --diff --skip-string-normalization --target-version py33

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q pylint
      - run: pylint *.py

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q coveralls pytest-cov
      - run: pytest --cov
      - run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python,3,0
461,https://github.com/pennersr/django-trackstats,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  testenv:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        django-version: ['3.2', '4.0', '4.1']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions coveralls
    - name: Tox Test
      run: tox
      env:
        PYTHON_VER: ${{ matrix.python-version }}
        DJANGO: ${{ matrix.django-version }}
  extra:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        extra-env: ['checkqa']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Tox Test
      run: tox
      env:
        TOXENV: ${{ matrix.extra-env }}
",,,,,,Python,3,0
462,https://github.com/wakatime/wakadump,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./wakadump --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
",,,,,,Python,3,0
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
",,,,,,TypeScript,2,1
250,https://github.com/venkataravuri/e-commerce-microservices-sample,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    defaults:
      run:
        working-directory: ./products-cna-microservice

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: products-cna-microservice/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript,3,0
419,https://github.com/awslabs/smithy-typescript,"name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Java ${{ matrix.java }} ${{ matrix.os }}
    strategy:
      matrix:
        java: [17]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'corretto'

      - name: clean and build
        run: ./gradlew clean build -Plog-tests

  lint-typescript:
    runs-on: ubuntu-latest
    name: TypeScript Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run eslint
        run: yarn lint --concurrency=3

  test-typescript:
    runs-on: smithy-typescript_ubuntu-latest_8-core
    name: TypeScript Test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: ""yarn""
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Install dependencies
        run: yarn
      - name: Build packages
        run: yarn build
      - name: Run unit tests
        run: yarn test
      - name: Run integration tests
        run: |
          yarn config set enableImmutableInstalls false
          yarn test:integration

  ensure-typescript-formatted:
    runs-on: ubuntu-latest
    name: Ensure TypeScript is formatted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run the code formatter
        run: yarn format
      # This checks the output of git diff. If it's not empty (i.e there were
      # changes) it'll return a non-zero error code.
      - name: Ensure there are no changes from running the formatter
        run: |
          git diff
          test -z ""$(git diff)""

  ensure-typescript-packages-have-changesets:
    runs-on: ubuntu-latest
    name: Ensure TypeScript packages have changesets
    steps:
      - uses: actions/checkout@v3
        # Include full git history needed for `yarn changeset status`
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install
        run: yarn
      - name: Ensure changesets exist for each changed package
        run: yarn changeset status --since=origin/main
",,,,,,TypeScript,3,0
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
",,,,,,TypeScript,3,0
2159,https://github.com/codetrixstudio/capacitorgoogleauth,"name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NpmToken}}
",,,,,,TypeScript,3,0
53,https://github.com/birkir/react-native-carplay,"name: ci/packages

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn config get cacheFolder)""

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-
      - name: Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo
            ${{ github.workspace }}/**/.eslintcache
          key: ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('packages/**.[jt]sx?', 'packages/**.json') }}
          restore-keys: |
            ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Typecheck
        run: |
          yarn workspaces foreach -tv --from 'react-native-carplay' --since=origin/master --recursive run typecheck
      - name: Linter
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master --recursive run lint --cache
      - name: Run build for changed packages
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master run build
",,,,,,TypeScript,3,0
343,https://github.com/jdiaz5513/capnp-ts,"name: ci
on:
  pull_request:
  push:
    branches: master
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - ""12""
          - ""14""
          - ""16""
          - ""17""
    name: Test on node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install capnproto libcapnp-dev
          npm i -g npm@latest
          npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
",,,,,,TypeScript,3,0
1496,https://github.com/mamba-org/gator,"name: Publish Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ""3.x""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine jupyterlab~=3.0 jupyter_packaging~=0.7.9
      - name: Build and publish NPM package
        if: ${{ startsWith(github.event.release.tag_name, 'npm') }}
        run: |
          if [[ ${PRE_RELEASE} == ""true"" ]]; then export TAG=""next""; else export TAG=""latest""; fi
          echo Publishing ${VERSION} with distribution tag ${TAG}
          npm install -g yarn
          yarn install
          # yarn lerna version ${VERSION} --yes --no-git-tag-version
          pushd packages/common
          yarn run publish --access public --tag ${TAG}
          popd
          pushd packages/labextension
          yarn run publish --access public --tag ${TAG}
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
          VERSION: ${{ github.event.release.name }}
      - name: Publish Python package
        if: ${{ !startsWith(github.event.release.tag_name, 'npm') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          npm install -g yarn
          yarn install
          yarn build
          python setup.py sdist bdist_wheel
          twine upload dist/*
",,,,,,TypeScript,3,0
1808,https://github.com/norkator/open-intelligence,"name: Frontend test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
      working-directory: ./front-end/
    - run: npm install react-scripts
      working-directory: ./front-end/
    - run: npm run build --if-present
      working-directory: ./front-end/
    - run: npm run test-ci
      working-directory: ./front-end/
",,,,,,TypeScript,3,0
2068,https://github.com/compilelife/loginsight,"name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Release Files
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release_on_${{ matrix. os }}
          path: release/loginsight[-_]*
          retention-days: 5",,,,,,TypeScript,2,1
3230,https://github.com/orchest/orchest,"# Runs all front-end/UI checks
name: UI

on:
  push:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""
  pull_request:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""

jobs:
  pnpm-fe-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ""${{ steps.nvm.outputs.NVMRC }}""

      # Run our pnpm hook manually, with additional build checks
      - name: Setup pnpm
        run: npm run setup && pnpm install

      - name: Build pnpm packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test

      - name: Lint pnpm packages
        run: pnpm run check

      - name: Type check
        run: pnpm run ts:check
",,,,,,TypeScript,3,0
3246,https://github.com/jupyterlab/extension-examples,"name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build_extensions:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        example:
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - notifications
          - react-widget
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: ${{ matrix.example }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - '${{ matrix.example }}/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff ../hello-world/setup.py setup.py
          diff ../hello-world/tsconfig.json tsconfig.json
          diff ../hello-world/.yarnrc.yml .yarnrc.yml
          diff ../hello-world/ui-tests/jupyter_server_test_config.py ./ui-tests/jupyter_server_test_config.py
          diff ../hello-world/ui-tests/playwright.config.js ./ui-tests/playwright.config.js
        shell: bash
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip ""jupyterlab>=4.0.0""
      # This is challenging to test in collaboration;
      # got trouble with the file ID service and the uncontrolled auto-save
      # - if: steps.filter.outputs.extension == 'true' && matrix.example == 'documents'
      #   run: |
      #     python -m pip install jupyter-collaboration
      - name: Build the extension
        if: steps.filter.outputs.extension == 'true'
        run: |
          # Same commands as in TL;DR to ensure it works
          touch yarn.lock
          pip install -e . -v
          jupyter labextension develop . --overwrite
        shell: bash
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: jlpm run lint:check
      - name: Check extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/*.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: ${{ matrix.example }}/ui-tests
      - name: Install kernel-output dependencies
        if: steps.filter.outputs.extension == 'true' && matrix.example == 'kernel-output'
        run: pip install numpy pandas
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            ${{ matrix.example }}/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_serverextension:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - 'server-extension/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('server-extension/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff hello-world/setup.py server-extension/setup.py
          diff hello-world/tsconfig.json server-extension/tsconfig.json
          diff hello-world/.yarnrc.yml server-extension/.yarnrc.yml
          diff hello-world/ui-tests/jupyter_server_test_config.py server-extension/ui-tests/jupyter_server_test_config.py
          diff hello-world/ui-tests/playwright.config.js server-extension/ui-tests/playwright.config.js
        shell: bash
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip jupyterlab~=4.0.0 build
      - name: Install the NPM dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm run lint:check
      - name: Build extension as user
        if: steps.filter.outputs.extension == 'true'
        # Force the usage of the source distribution (good practice)
        run: |
          cd server-extension
          python -m build --sdist
          pip install ./dist/jupyterlab_examples_server* --pre --find-links=dist --no-cache-dir
          python -m jupyterlab.browser_check
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
      - name: Clean extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          pip uninstall -y jupyterlab_examples_server
          jupyter lab clean
          jupyter server extension list
          jupyter labextension list
      - name: Build extension as dev
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          pip install .
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: server-extension/ui-tests
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            server-extension/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('server-extension/pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache lerna
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyterlab~=4.0.0 pytest pytest-check-links ""pytest-jupyter[server]>=0.6.0""
      - name: Bootstrap the jlpm deps
        run: jlpm
      - name: Build all the extensions
        run: |
          # Check embedded snippets
          jlpm lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in main)
          jlpm run lerna exec --concurrency 4 -- ""pytest --check-links""
",,,,,,TypeScript,2,1
3351,https://github.com/bashleigh/nestjs-blog,"# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: ./docker-compose.yml

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: env sync
        run: cp .env.dist .env && export $(cat ./.env | xargs)  

      # Runs a single command using the runners shell
      - name: build docker db
        run: docker-compose up -d
      
      - name: install
        run: yarn install --ignore-scripts
      
      - name: build
        run: yarn build

      - name: check docker
        run: docker-compose up -d

      - name: docker logs
        run: docker-compose logs && docker-compose ps

      # Runs a set of commands using the runners shell
      - name: tests
        run: yarn test --coverage
",,,,,,TypeScript,3,0
3352,https://github.com/rhysd/shiba,"name: Watchdogs
on: [push, pull_request]
env:
  TERM: xterm
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1
defaults:
  run:
    working-directory: v2

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - run: sudo bash ./scripts/install_apt_deps.bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: npm ci
      - run: npm run bundle
      - run: cargo clippy --all --benches --tests -- -D warnings
      - run: cargo test
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Clippy runs on each platforms in `test` job
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - uses: actions/setup-python@v4
        with:
          python-version: '3'
      - run: pip install yamllint
      - run: sudo bash ./scripts/install_apt_deps.bash
      - run: npm ci
      - run: npm run lint:tsc
      - run: npm run lint:prettier
      - run: npm run lint:eslint
      - run: npm run lint:stylelint
      - run: cargo fmt --all --check
      - run: shellcheck ./scripts/gen_macos_app.bash ./scripts/install_apt_deps.bash
      - run: yamllint --strict ./src/assets/default_config.yml
",,,,,,TypeScript,3,0
3353,https://github.com/ganlvtech/phaser-catch-the-cat,"name: Build and Deploy
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2.3.1

      - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          npm install
          npm run build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist # The folder the action should deploy.",,,,,,TypeScript,3,0
3354,https://github.com/vercel/uid-promise,"name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    name: Node.js ${{ matrix.node }} on ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16, 18, 20]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use pnpm
        run: corepack enable pnpm && pnpm --version
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm test
      - name: Maybe Release
        if: matrix.os == 'ubuntu-latest' && matrix.node == 16 && github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
        run: pnpm dlx semantic-release@19.0.5
",,,,,,TypeScript,3,0
3355,https://github.com/tb/ng2-nouislider,"name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install
      - run: pnpm test
",,,,,,TypeScript,3,0
3356,https://github.com/chenshenhai/pictool,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build
    - run: npm test
",,,,,,TypeScript,3,0
3357,https://github.com/sfeir-open-source/angular-search-experience,"name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: ""upload""
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: ""/"" # App source code path
          api_location: """" # Api source code path - optional
          output_location: ""dist/angular-search-experience"" # Built app content directory - optional
          app_build_command: ""npm run build:prod""
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          action: ""close""
",,,,,,TypeScript,3,0
3358,https://github.com/lzghzr/mdr_proxy,"name: Download Firmware

on:
  workflow_dispatch:

  schedule:
    - cron:  '0 8 * * *'

jobs:
  download:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Caching npm dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
      
      - name: Download
        run: npm run download

      - name: Commit files
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add firmware/* mdrdownload.json
          updated_service_ids=`git status -s | grep ""^A "" | awk '{print $2}' | xargs -i sh -c 'basename $(dirname $(dirname {}))' | grep -v ""\."" | sort -u | sed -z 's/\n/, /g' | sed 's/, $//'`
          git diff-index --cached --quiet HEAD -- || (git commit -m ""Auto download firmware (${updated_service_ids})"" && git push)
",,,,,,TypeScript,3,0
