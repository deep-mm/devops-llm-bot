Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language
1,https://github.com/sparklemotion/nokogiri,"name: upstream
concurrency:
  group: ""${{github.workflow}}-${{github.ref}}""
  cancel-in-progress: true
on:
  workflow_dispatch:
  schedule:
    - cron: ""0 8 * * 1,3,5"" # At 08:00 on Monday, Wednesday, and Friday # https://crontab.guru/#0_8_*_*_1,3,5
  pull_request:
    types: [opened, synchronize]
    branches:
      - '*'
    paths:
      - .github/workflows/upstream.yml # this file

jobs:
  xmlsoft-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""3.2""
          apt-get: ""autogen libtool shtool""
          brew: ""automake autogen libtool shtool""
          mingw: ""autotools""
          bundler-cache: true
          bundler: latest
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Compile against libxml2 and libxslt source directories""
        shell: bash
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test""

  xmlsoft-head-valgrind:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Run bundle install""
        run: ""bundle install --local || bundle install""
      - name: ""Compile against libxml2 and libxslt source directories""
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test:valgrind""
      - run: ""bundle exec rake test:memcheck""

  ruby-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
        sys: [""enable"", ""disable""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config""
          mingw: ""_upgrade_ libxml2 libxslt pkgconf""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-${{matrix.plat}}-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test

  ruby-head-valgrind:
    strategy:
      fail-fast: false
      matrix:
        sys: [""enable"", ""disable""]
    runs-on: ubuntu-20.04 # warning that 22.04 binary has dwarf5 debug info that valgrind can't read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config valgrind""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-ubuntu-head-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test:valgrind
      - run: bundle exec rake test:memcheck

  jruby-head:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ""jruby-head""
          bundler-cache: true
          bundler: latest
      - run: bundle exec rake compile
      - run: bundle exec rake test

  html5lib-tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.2
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/cache@v3
        with:
          path: ports
          key: ports-ubuntu-3.2-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - name: Update html5lib-tests
        run: |
          cd test/html5lib-tests
          git remote update origin
          git checkout origin/master
          git log --pretty=oneline -n1
      - run: bundle install --local || bundle install
      - run: bundle exec rake compile -- --disable-system-libraries
      - run: bundle exec rake test
",,,,,,C
381,https://github.com/ivpn/android-app,"name: Build

on:
  push:
    branches: [ ""main"", ""develop"" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Checkout submodules
      run: git submodule update --init --recursive
    
    - name: Set up NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
    
    - name: Install liboqs dependencies
      run: sudo apt-get update && sudo apt-get install -y astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Gradle :core:assemble
      run: ./gradlew :core:assemble -x validateSigningProductionRelease
",,,,,,C
740,https://github.com/zserge/partcl,"name: Build Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: make tcl
    - name: Test
      run: make test
",,,,,,C
741,https://github.com/pinkavaj/rtl-sdr,"name: C/C++ CI

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  build_ubuntu-amd64_latest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: prerequisites
    # pre-installed on ubuntu-1804: build-essential, git 2.28.0, cmake 3.10/3.17, make
    # pre-installed: clang 6.0 / 8 / 9, gcc/++ 7.5.0/8.4.0/9.3.0
      run: sudo apt -qq update && sudo apt -yqq install libusb-1.0-0-dev
    - name: cmake_make
      run: mkdir build && cmake -S . -B build && cd build && make
    - name: compress
      run: tar zcvf librtlsdr_build_ubuntu-amd64_latest.tar.gz --directory=build/src --exclude=CMakeFiles --exclude=*.cmake --exclude=Makefile --exclude=rtl_app_ver.h .
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu_latest_build
        path: librtlsdr_build_ubuntu-amd64_latest.tar.gz

  build_macos_latest:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    #- name: prerequisites
    # pre-installed on macos-10.15: git 2.28.0, cmake 3.18.2, libusb 1.0.23
    # pre-installed: clang/LLVM 10.0.1, gcc/++ 8.4.0/9.3.0
    #  run: brew install libusb
    - name: cmake_make
      run: mkdir build && cmake -S . -B build && cd build && make
    - name: compress
      run: tar zcvf librtlsdr_build_macos-latest.tar.gz --directory=build/src --exclude=CMakeFiles --exclude=*.cmake --exclude=Makefile --exclude=rtl_app_ver.h .
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: macos_latest_build
        path: librtlsdr_build_macos-latest.tar.gz

  cross_build_win32_win64_latest:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: prerequisites
      run: sudo apt -qq update && sudo apt -yqq install gcc-mingw-w64
    - name: build_w32_static
      run: bash ./cross_build_mingw32.sh static -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON
    - name: build_w32_static_udpsrv
      run: bash ./cross_build_mingw32.sh static_udpsrv -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON -DPROVIDE_UDP_SERVER=ON
    - name: build_w32_dlldep
      run: bash ./cross_build_mingw32.sh dlldep
    - name: build_w32_dlldep_udpsrv
      run: bash ./cross_build_mingw32.sh dlldep_udpsrv -DPROVIDE_UDP_SERVER=ON

    - name: build_w64_static
      run: bash ./cross_build_mingw64.sh static -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON
    - name: build_w64_static_udpsrv
      run: bash ./cross_build_mingw64.sh static_udpsrv -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON -DPROVIDE_UDP_SERVER=ON
    - name: build_w64_dlldep
      run: bash ./cross_build_mingw64.sh dlldep
    - name: build_w64_dlldep_udpsrv
      run: bash ./cross_build_mingw64.sh dlldep_udpsrv -DPROVIDE_UDP_SERVER=ON

    - name: 'upload w32 static artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_static
        path: rtlsdr-bin-w32_static/bin/
    - name: 'upload w32 static_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_static_udpsrv
        path: rtlsdr-bin-w32_static_udpsrv/bin/
    - name: 'upload w32 dlldep artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_dlldep
        path: rtlsdr-bin-w32_dlldep/bin/
    - name: 'upload w32 dlldep_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_dlldep_udpsrv
        path: rtlsdr-bin-w32_dlldep_udpsrv/bin/

    - name: 'upload w64 static artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_static
        path: rtlsdr-bin-w64_static/bin/
    - name: 'upload w64 static_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_static_udpsrv
        path: rtlsdr-bin-w64_static_udpsrv/bin/
    - name: 'upload w64 dlldep artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_dlldep
        path: rtlsdr-bin-w64_dlldep/bin/
    - name: 'upload w64 dlldep_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_dlldep_udpsrv
        path: rtlsdr-bin-w64_dlldep_udpsrv/bin/

",,,,,,C
742,https://github.com/vbirds/tinyftp,"name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

",,,,,,C
743,https://github.com/gerhobbelt/pthread-win32,"name: All Platforms

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        build_type: ['Release', 'Debug']
        link_type: ['static', 'shared']
        include:
          - link_type: static
            BUILD_SHARED_LIBS: OFF
          - link_type: shared
            BUILD_SHARED_LIBS: ON

    steps:
    - uses: actions/checkout@v3

    - name: Build
      run: |
        cmake -B ${{github.workspace}}/build-${{matrix.link_type}}-${{matrix.build_type}} -DBUILD_SHARED_LIBS=${{matrix.BUILD_SHARED_LIBS}} -DCMAKE_INSTALL_PREFIX=""${{github.workspace}}/install-${{matrix.link_type}}-${{matrix.build_type}}""
        cmake --build ${{github.workspace}}/build-${{matrix.link_type}}-${{matrix.build_type}} --config ${{matrix.build_type}} --target install
",,,,,,C
744,https://github.com/jibsen/parg,"name: parg CI

on: [push, pull_request]

jobs:
  windows:
    name: Windows ${{ matrix.config.name }}
    runs-on: windows-2022

    strategy:
      matrix:
        config:
          - name: MSVC x64
            generator: Visual Studio 17 2022
            cmake-flags: -A x64

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -G ""${{ matrix.config.generator }}"" ${{ matrix.config.cmake-flags }} -B build

      - name: Build
        run: cd build && cmake --build . --config Debug

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0 -C Debug

  linux:
    name: Linux ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    env:
      CC: ${{ matrix.config.cc }}

    strategy:
      matrix:
        config:
          - name: Clang UBSan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-g -fsanitize=undefined'

          - name: Clang ASan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-O1 -g -fsanitize=address -fno-omit-frame-pointer'

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake ${{ matrix.config.cmake-flags }} -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && cmake --build . --verbose

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

  coverage:
    name: Linux Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -DCMAKE_C_FLAGS_DEBUG='-g -O0 --coverage' -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && cmake --build . --verbose

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

      - name: Generate coverage
        run: cd build && gcov -b CMakeFiles/parg.dir/parg.c.gcno -o CMakeFiles/parg.dir

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/parg.c.gcov
",,,,,,C
745,https://github.com/mischief/efivim,"name: VIM.EFI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: variables
        id: variables
        run: echo ""name=$(git describe --always --tags)"" >> $GITHUB_OUTPUT

      - name: dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm mtools gdisk

      - name: build
        run:
          make vim.efi vim.img.gz

      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ steps.variables.outputs.name }}
          tag_name: ${{ steps.variables.outputs.name }}
          files: |
            vim.efi
            vim.img.gz

",,,,,,C
746,https://github.com/firehol/iprange,"on: [ push, pull_request, workflow_dispatch ]

jobs:
   prep:
      runs-on: ubuntu-latest
      name: Prepare build
      steps:
      - name: Extract tag/branch variables
        shell: bash
        run: |
           echo ""##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/}|grep -v '/')""
           echo ""##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/}|grep -v '/')""
        id: extract
      outputs:
         tag: ${{ steps.extract.outputs.tag }}
         branch: ${{ steps.extract.outputs.branch }}

   build:
      runs-on: ubuntu-latest
      name: Build package
      needs: prep
      steps:
      - uses: actions/checkout@v2
      - name: Set up build tools
        run: ./.github/workflows/setup.sh
      - name: Server-side run of commit hooks in case developer skipped them
        run: git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 | ./packaging/check-files -
        env:
           TRAVIS_TAG: ${{ needs.prep.outputs.tag }}
      - name: Obtain GPG keys to validate tag signature
        if: ${{ needs.prep.outputs.tag != '' }}
        run: |
            ./packaging/gpg-recv-key phil@firehol.org ""0762 9FF7 89EA 6156 012F  9F50 C406 9602 1359 9237""
            ./packaging/gpg-recv-key costa@tsaousis.gr ""4DFF 624A E564 3B51 2872  1F40 29CA 3358 89B9 A863""
            git fetch --tags -f
        env:
           KEYSERVER: pool.sks-keyservers.net
      - name: Run build
        run: fakeroot ./packaging/git-build && ./configure && make check
        env:
           TRAVIS_TAG: ${{ needs.prep.outputs.tag }}
      - name: Create checksums
        run: |
           for i in *.tar.*
           do
              md5sum -b $i > $i.md5
              sha512sum -b $i > $i.sha
           done
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
           name: build-artifacts
           path: |
              *.tar.*

   publish_branch:
      runs-on: ubuntu-latest
      name: Publish to website if branch
      needs: [ prep, build ]
      env:
         DEPLOY_ARTIFACTS: ""*.tar.*""
         DEPLOY_SERVER: travis@firehol.org
         DEPLOY_DIR: uploads/iprange/${{needs.prep.outputs.branch}}
         SERVER_DEPLOY_LOG: https://firehol.org/travis-project.log
         SERVER_DEPLOY_TIMEOUT: 300
      if: >-
         ${{ ( needs.prep.outputs.branch == 'main'
            || needs.prep.outputs.branch == 'master'
            || startsWith( needs.prep.outputs.branch, 'stable-' ) ) }}
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
           name: build-artifacts
      - name: Setup SSH
        id: ssh
        run: |
           echo ""$FIREHOL_ORG_PUBLISH_SSH"" > firehol_org_publish_key
           chmod 600 firehol_org_publish_key
           eval ""$(ssh-agent)""
           if ssh-add firehol_org_publish_key; then
              echo ""Key added: setting agent environment""
              echo ""##[set-output name=ssh_agent_pid;]$SSH_AGENT_PID""
              echo ""##[set-output name=ssh_auth_sock;]$SSH_AUTH_SOCK""
              mkdir -p $HOME/.ssh
              chmod 700 $HOME/.ssh
              echo PasswordAuthentication=no >> $HOME/.ssh/config
              chmod 644 $HOME/.ssh/config
           else
              echo ""Key not added: skipping ssh-agent environment""
           fi
           rm -f firehol_org_publish_key
        env:
           FIREHOL_ORG_PUBLISH_SSH: ${{secrets.FIREHOL_ORG_PUBLISH_SSH}}
      - name: Prepare deployment check
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: curl -s -oresult.orig $SERVER_DEPLOY_LOG
      - name: Deploy to website ${{needs.prep.outputs.branch}}
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: |
           ssh-keyscan -H firehol.org >> ~/.ssh/known_hosts
           ssh $DEPLOY_SERVER mkdir -p ""$DEPLOY_DIR""
           rsync -a $DEPLOY_ARTIFACTS ""$DEPLOY_SERVER:$DEPLOY_DIR/""
           ssh $DEPLOY_SERVER touch ""$DEPLOY_DIR/complete.txt""
        env:
           SSH_AGENT_PID: ${{ steps.ssh.outputs.ssh_agent_pid }}
           SSH_AUTH_SOCK: ${{ steps.ssh.outputs.ssh_auth_sock }}
      - name: Check deployment
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: |
           pause=10
           attempts=$(( $SERVER_DEPLOY_TIMEOUT / $pause ))
           while [ $attempts -gt 0 ]
           do
              sleep $pause
              attempts=$((attempts - 1))
              curl -s -o result $SERVER_DEPLOY_LOG
              if ! cmp -s result result.orig
              then
                 cat result
                 if grep -q ""not deploying"" result
                 then
                    exit 2
                 else
                    exit 0
                 fi
              fi
           done
           exit 1

   publish_tag:
      runs-on: ubuntu-latest
      name: Publish to github if tag
      needs: [ prep, build ]
      if: ${{ needs.prep.outputs.tag != '' }}
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
           name: build-artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           tag_name: ${{ github.ref }}
           release_name: Release ${{ github.ref }}
           draft: true
      - name: Upload
        uses: actions/github-script@v3
        with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
              const path = require('path');
              const fs = require('fs');
              const release_id = '${{ steps.create_release.outputs.id }}';
              for (let file of await fs.readdirSync('./')) {
                 console.log('uploadReleaseAsset', file);
                 await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: file,
                    data: await fs.readFileSync(`./${file}`)
                 });
              }
",,,,,,C
747,https://github.com/singpolyma/mnemonicode,"name: releaser

on:
    push:
        tags:
            - '*.*.*'

jobs:
    ubuntubuild:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    fetch-depth: 0
            -   name: Build
                run: |
                  sudo apt-get install -y build-essential gcc mingw-w64-tools zip gzip tar g++-mingw-w64-x86-64
                  make
                  tar czf linux-amd64.tar.gz mnencode mndecode
            - name: Upload release binaries
              uses: alexellis/upload-assets@0.4.0
              env:
                GITHUB_TOKEN: ${{ github.token }}
              with:
                asset_paths: '[""linux-amd64.tar.gz""]'
",,,,,,C
748,https://github.com/aetf/kmscon,"name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    branches:
    - release-*
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install meson
        run: pip install meson ninja
      - name: Install dependencies
        run: |
          sudo apt-get install -y check libudev-dev libxkbcommon-dev libdrm-dev libgbm-dev libegl1-mesa-dev libgles-dev libpango1.0-dev libsystemd-dev
      - name: Install libtsm
        run: |
          pip install cmake
          curl -L -o libtsm.tar.gz $(curl -s https://api.github.com/repos/Aetf/libtsm/releases/latest \
            | grep ""tarball_url"" \
            | awk '{ print $2 }' \
            | sed 's/,$//'       \
            | sed 's/""//g' )
          mkdir libtsm
          tar -xf libtsm.tar.gz -C libtsm --strip 1
          cd libtsm
          cmake -Bbuilddir
          cmake --build builddir
          sudo cmake --install builddir
      - name: Meson setup
        run: meson setup builddir/
      - name: Create source distribution
        # no unit tests yet
        run: meson dist -C builddir/
      - name: Create release note
        run: tools/extract_release_note.py NEWS ${{ github.workspace }}-release-note.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-files
          path: |
            builddir/meson-dist/*
            ${{ github.workspace }}-release-note.txt
      - name: Release
        uses: softprops/action-gh-release@v1
        # only actually create the release when run on tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: builddir/meson-dist/*
          body_path: ${{ github.workspace }}-release-note.txt
",,,,,,C
749,https://github.com/rxtx/rxtx,"# This workflow will build a distribution bundle containing everything needed to run rxtx on supported platforms.

name: build rxtx-distribution

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-osx-binaries:

    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn --batch-mode -Pwith-osx-x86_64 package --file pom.xml
    - name: upload rxtxSerial binaries built on osx
      uses: actions/upload-artifact@v2
      with:
        name: rxtxSerial-binaries-built-on-osx
        path: rxtxSerial-osx-*/target/librxtxSerial-osx-*.jnilib
        if-no-files-found: error

  main-build:
    needs: build-osx-binaries
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Prepare installation of 32bit packages
      run: sudo dpkg --add-architecture i386 && sudo apt update
    - name: Install cross toolchains and libraries
      run: sudo apt install libc6-dev-i386 linux-libc-dev:i386 gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf gcc-mingw-w64-i686 gcc-mingw-w64-x86-64
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - uses: actions/download-artifact@v2
      with:
        name: rxtxSerial-binaries-built-on-osx
    - name: determine version string
      run: mvn help:evaluate -Dexpression=project.version -q -DforceStdout > project-version.txt
    - name: install osx native library
      run: cd rxtxSerial-osx-x86_64 && mvn --batch-mode install:install-file -Dfile=target/librxtxSerial-osx-x86_64.jnilib -DgroupId=gnu.io.rxtx -DartifactId=librxtxSerial-osx-x86_64 -Dversion=$(< ../project-version.txt) -Dpackaging=jnilib --file pom.xml
    - name: Build for all other platforms
      run: mvn --batch-mode -Pwith-linux-x86,with-linux-x86_64,with-linux-armel,with-linux-armhf,with-windows-x86,with-windows-x86_64 package install --file pom.xml
    - name: Bundle rxtx Java and native libs
      run: mvn --batch-mode -Dmake.release package --file pom.xml
    - name: upload rxtx-distribution
      uses: actions/upload-artifact@v2
      with:
        name: rxtx-distribution
        path: |
          rxtx-api/target/rxtx-api-*.jar
          rxtxSerial/target/rxtxSerial-*.jar
        if-no-files-found: error
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          rxtx-api/target/rxtx-api-*.jar
          rxtxSerial/target/rxtxSerial-*.jar
",,,,,,C
750,https://github.com/mcufont/mcufont,"name: Run tests on Ubuntu

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  test_linux:
    name: Test on Ubuntu 20.04
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          path: mcufont

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libfreetype-dev cxxtest imagemagick
      
      - name: Build and run tests
        run: |
          cd mcufont
          make
      
      - name: Archive test case output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            mcufont/tests/layout/*.bmp
            mcufont/tests/layout/*.bmp.*

      - name: Archive generated font files
        uses: actions/upload-artifact@v3
        with:
          name: font-files
          path: |
            mcufont/fonts/*.c
            mcufont/fonts/*.h

",,,,,,C
751,https://github.com/xiotechnologies/fusion,"name: CI

on:
  push:
    branches: [ main ]
    tags: [ ""*"" ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    runs-on: ${{ matrix.target[0] }}

    strategy:
      fail-fast: false
      matrix:
        target: # [ os, cibuildwheel-platform ]
          - [ macos-latest, macosx_x86_64 ]
          - [ macos-latest, macosx_arm64 ]
          - [ ubuntu-latest, manylinux_aarch64 ]
          - [ ubuntu-latest, manylinux_x86_64 ]
          - [ windows-latest, win_amd64 ]

        python-version: [ ""cp38-"", ""cp39-"", ""cp310-"", ""cp311-"", ""cp312-"" ]

    steps:
      - uses: actions/checkout@v3

      - name: Build CMake targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[1] }}
          CIBW_BEFORE_BUILD: pip install numpy
          CIBW_BEFORE_TEST: pip install numpy matplotlib
          CIBW_TEST_COMMAND: cd {project}/Python && python advanced_example.py no_block && python simple_example.py no_block
          CIBW_TEST_COMMAND_WINDOWS: cd /D {project}/Python && python advanced_example.py no_block && python simple_example.py no_block

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload wheel
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: python -m twine upload --verbose --repository pypi wheelhouse/* --skip-existing

  build_sdist:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ""3.9"" # build sdist on lowest supported Python

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy
          python -m pip install twine

      - name: Build sdist
        run: python setup.py sdist

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload sdist
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: python -m twine upload --verbose --repository pypi dist/*
",,,,,,C
752,https://github.com/madushadhanushka/simple-sqlite,"name: CMake

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      # Build your program with the given configuration
      run: make

    - name: Test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./simple_sqlite
      
",,,,,,C
753,https://github.com/bjornblissing/osg-3rdparty-cmake,"# Workflow to build binary artifacts for tagged versions
name: Build


# Triggers the workflow when a new tag is pushed (but disregard new branches)
on: 
  push:
    tags:
    - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a matrix job called ""Release""
  Release:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - name: v141-x86
            os: windows-2016
            generator: ""Visual Studio 15 2017""
            arch: Win32
          - name: v141-x64
            os: windows-2016
            generator: ""Visual Studio 15 2017""
            arch: x64
          - name: v142-x86
            os: windows-2019
            generator: ""Visual Studio 16 2019""
            arch: Win32
          - name: v142-x64
            os: windows-2019
            generator: ""Visual Studio 16 2019""
            arch: x64

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache source code
        uses: actions/cache@v2
        with:
          # Cache the downloaded external source code and only update the cache when the download_dependencies.bat file is changed
          path: c:/3rdparty
          key: ${{ hashFiles('download_dependencies.bat') }}

      # Download source code
      - name: Download source code
        run: .\download_dependencies.bat
          
      # Compile code
      - name: Compile code
        run: |
            mkdir build
            cd build
            cmake ${env:GITHUB_WORKSPACE} -G ""${{ matrix.generator }}"" -A ${{ matrix.arch }} -DZLIB_SOURCE_DIR=c:/3rdparty/zlib -DLIBPNG_SOURCE_DIR=c:/3rdparty/libpng -DLIBJPEG_SOURCE_DIR=c:/3rdparty/libjpeg -DLIBTIFF_SOURCE_DIR=c:/3rdparty/tiff -DFREETYPE_SOURCE_DIR=c:/3rdparty/freetype -DGLUT_SOURCE_DIR=c:/3rdparty/glut -DGIFLIB_SOURCE_DIR=c:/3rdparty/giflib -DCURL_SOURCE_DIR=c:/3rdparty/curl -DCMAKE_INSTALL_PREFIX=""C:/projects/osg-3rdparty-cmake/build/3rdParty/${{ matrix.name }}""
            cmake --build . --config ""Debug"" --target install 
            cmake --build . --config ""Release"" --target install
            
      - name: Compress archive
        run: |
          cd C:\projects\osg-3rdparty-cmake\build\3rdParty\${{ matrix.name }}
          7z a C:\projects\osg-3rdparty-cmake\${{ matrix.name }}.zip . 
          
      - name: Publish artifact
        uses: ncipollo/release-action@v1
        with:
          artifacts: ""c:\\projects\\osg-3rdparty-cmake\\${{ matrix.name }}.zip""
          allowUpdates: true
          bodyFile: ""versions.md""
          token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,C
754,https://github.com/amadvance/advancecomp,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: autoreconf -i
      - run: ./configure
      - run: make all
      - run: make distcheck
",,,,,,C
755,https://github.com/rt-thread-packages/nimble,"name: NIMBLE

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  # Runs at 16:00 UTC (BeiJing 00:00) on the 31st of March
  schedule:
    - cron:  '0 9 31 3,9 *'
  push:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{ matrix.legs.RTT_BSP }}
    strategy:
      fail-fast: false
      matrix:
       legs:
         - {RTT_BSP: ""acm32/acm32f0x0-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""CME_M7"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""apm32/apm32f103xe-minibroard"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""apollo2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""asm9260t"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at91/at91sam9g45"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at91/at91sam9260"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""allwinner_tina"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""cypress/psoc6-cy8ckit-062S2-43012"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""ft32/ft32f072xb-starter"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32103c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32105c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32105r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32107c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32205r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32207i-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32303e-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32305r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32307e-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32407v-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32450z-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32e230k-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""gd32vf103v-eval"", RTT_TOOL_CHAIN: ""sourcery-riscv-none-embed""}
         - {RTT_BSP: ""gd32303e-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32450z-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imx6sx/cortex-a9"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-atk-commander"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-fire-pro"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-seeed-ArchMix"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1060-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1064-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tm4c123bsp"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tm4c129x"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""lpc55sxx/lpc55s69_nxp_evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""lpc408x"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""lpc1114"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""lpc54114-lite"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""mini2440"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""nrf5x/nrf51822"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52832"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52833"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52840"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""qemu-vexpress-a9"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""qemu-vexpress-gemini"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f072-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f091-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f103-100ask-mini"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-100ask-pro"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f103-atk-nano"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-atk-warshipv3"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-blue-pill"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32f103-dofly-lyc8"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-dofly-M3S"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-fire-arbitrary"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32f103-gizwits-gokitv21"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-hw100k-ibox"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-onenet-nbiot"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-yf-ufun"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f107-uc-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f207-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f302-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f401-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f405-smdz-breadfruit"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-armfly-v5"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-atk-explorer"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-robomaster-c"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f410-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f411-atk-nano"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f411-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f412-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f413-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f427-robomaster-a"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-armfly-v6"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-fire-challenger"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f446-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f469-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f746-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f746-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-fire-challenger-v1"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f769-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32g070-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32g071-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32g431-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32g474-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-armfly-v7"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-openmv-h7plus"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h747-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h750-artpi"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r5-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r9-st-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r9-st-sensortile-box"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l010-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l053-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l412-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32l431-BearPi"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l432-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l433-ali-startkit"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l433-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l452-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l475-atk-pandora"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l475-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l476-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l496-ali-developer"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l496-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l552-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32mp157a-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32mp157a-st-ev1"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32u575-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32wb55-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""wch/arm/ch32f103c8-core"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""wch/arm/ch32f203r-evt"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""synwit/swm320"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""synwit/swm341"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""beaglebone"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""zynqmp-r5-axu4ev"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""frdm-k64f"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f403a-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f407-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f413-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f415-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f435-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f437-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""smartfusion2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""raspberry-pico"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32/ev_hc32f4a0_lqfp176"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32/ev_hc32f460_lqfp100_v2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32l196"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tae32f5300"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/samc21"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/same54"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/same70"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         
         #- {RTT_BSP: ""bluetrum/ab32vg1-ab-prougen"", RTT_TOOL_CHAIN: ""sourcery-riscv64-unknown-elf""}
         - {RTT_BSP: ""k210"", RTT_TOOL_CHAIN: ""sourcery-riscv-none-embed""}
         - {RTT_BSP: ""qemu-virt64-aarch64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         #- {RTT_BSP: ""raspberry-pi/raspi3-64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         #- {RTT_BSP: ""raspberry-pi/raspi4-64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         - {RTT_BSP: ""rockchip/rk3568"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         
    steps:
      - uses: actions/checkout@v3
        with:
          repository: RT-Thread/rt-thread
          fetch-depth: 0
          ref: lts-v4.1.x

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Tools
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -qq install gcc-multilib libncurses5-dev scons
          sudo python -m pip install --upgrade pip -qq
          pip install requests -qq
          git config --global http.postBuffer 524288000
          python -c ""import tools.menuconfig; tools.menuconfig.touch_env()""
          echo ""RTT_ROOT=${{ github.workspace }}"" >> $GITHUB_ENV
          echo ""RTT_CC=gcc"" >> $GITHUB_ENV

      - name: Install Arm ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-arm' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
          /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
          echo ""RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin"" >> $GITHUB_ENV
          
      - name: Install AArch64 ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-aarch64' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.6/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz
          sudo tar -xf gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz -C /opt
          /opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin/aarch64-none-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin"" >> $GITHUB_ENV
          
      - name: Install Mips ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-mips' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.1/mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2
          sudo tar xjf mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2 -C /opt
          /opt/mips-2016.05/bin/mips-sde-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/mips-2016.05/bin"" >> $GITHUB_ENV
          
      - name: Install Riscv64-unknown-elf ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-riscv64-unknown-elf' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.4/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          sudo tar zxvf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz -C /opt
          /opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin/riscv64-unknown-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin"" >> $GITHUB_ENV
      - name: Install Riscv-none-embed ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-riscv-none-embed' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.5/xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz
          sudo tar zxvf xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz -C /opt
          /opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin/riscv-none-embed-gcc --version
          echo ""RTT_EXEC_PATH=/opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin"" >> $GITHUB_ENV
          
      - name: Bsp Scons Compile
        if: ${{ success() }}
        shell: bash
        env:
          RTT_BSP: ${{ matrix.legs.RTT_BSP }}
          RTT_TOOL_CHAIN: ${{ matrix.legs.RTT_TOOL_CHAIN }}
        run: |
          source ~/.env/env.sh
          sed -i ""s/# CONFIG_PKG_USING_NIMBLE is not set/CONFIG_PKG_USING_NIMBLE=y/g"" bsp/$RTT_BSP/.config
          scons --pyconfig-silent -C bsp/$RTT_BSP
          sed -i ""s/CONFIG_PKG_NIMBLE_CTLR=y/CONFIG_PKG_NIMBLE_CTLR=n/g"" bsp/$RTT_BSP/.config
          sed -i ""s/# CONFIG_PKG_NIMBLE_HCI_USING_RTT_UART is not set/CONFIG_PKG_NIMBLE_HCI_USING_RTT_UART=y/g"" bsp/$RTT_BSP/.config
          sed -i ""s/CONFIG_PKG_USING_NIMBLE_V100=y/# CONFIG_PKG_USING_NIMBLE_V100 is not set/g"" bsp/$RTT_BSP/.config
          sed -i ""s/# CONFIG_PKG_USING_NIMBLE_LATEST_VERSION is not set/CONFIG_PKG_USING_NIMBLE_LATEST_VERSION=y/g"" bsp/$RTT_BSP/.config
          scons --pyconfig-silent -C bsp/$RTT_BSP
          cat bsp/$RTT_BSP/.config
          pushd bsp/$RTT_BSP && pkgs --update && popd
          scons -C bsp/$RTT_BSP
",,,,,,C
756,https://github.com/jgm/lunamark,"name: Run luacheck and unit tests
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  luacheck:
    name: Run luacheck
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          apt -qy update
          apt -qy install lua-check
      - name: Run luacheck
        run: luacheck lunamark/
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build docker image
        run: |
          set -ex
          export DOCKER_BUILDKIT=1
          docker build -t jgm/lunamark .
      - name: Run unit tests
        run: |
          docker run --rm -v ""$PWD"":/mnt -w /mnt --entrypoint /bin/sh jgm/lunamark -c 'make test'
",,,,,,C
758,https://github.com/pyocd/flashalgo,"name: linux develop build ""GCC with Make""

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: syphar/restore-virtualenv@v1
    
    - name: install requirements
      run: sudo apt-get install -y gcc-arm-none-eabi
      
    - name: install requirements
      run: pip install -r requirements.txt

    - name: build
      run: progen build -t make_gcc_arm
",,,,,,C
759,https://github.com/rigtorp/ipc-bench,"name: C/C++ CI

on: [push]

jobs:
  build-ubuntu:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - name: Build & Test
      run: |
        cmake -E remove_directory build
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-Werror -O2 -fsanitize=address,undefined""
        cmake --build build
        cd build
        ctest --output-on-failure
        
  build-macos:

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build & Test
      run: |
        cmake -E remove_directory build
        cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-Werror -O2 -fsanitize=address,undefined""
        cmake --build build
        cd build
        ctest --output-on-failure",,,,,,C
760,https://github.com/toots/shine,"name: Build and install

on:
  push:
    branches: [ ""main"" ]
  pull_request:
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Install required packages  on macos
      if: matrix.os == 'macos-latest'
      run: brew install autoconf automake pkg-config
    - name: Install required packages on ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get -y install automake autoconf pkg-config
    - name: bootstrap
      run: ./bootstrap
    - name: configure
      run: ./configure
    - name: make
      run: make
    - name: make install on macos
      if: matrix.os == 'macos-latest'
      run: make install
    - name: make install on ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo make install
    - name: Test pkg-config setup
      run: pkg-config --libs shine
      
  android_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
        local-cache: true
    - name: Install autoconf/automake
      run: sudo apt-get -y install automake autoconf
    - name: bootstrap
      run: ./bootstrap
    - name: configure
      run: ./configure
    - name: make android
      run: make android   

  js_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: mymindstorm/setup-emsdk@v11
    - name: JS build
      run: |
        cd js
        make
    - uses: actions/setup-node@v3
    - name: Run node test
      run: |
        cd js/test/node
        npm install
        npm run test
",,,,,,C
761,https://github.com/jserv/nstack,"name: CI

on: [push, pull_request]

jobs:
  nstack:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3.1.0
    - name: default build
      run: make
  coding_style:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3.1.0
    - name: coding convention
      run: |
            sudo apt-get install -q -y clang-format-12
            sh .ci/check-format.sh
      shell: bash
",,,,,,C
762,https://github.com/lemire/maskedvbyte,"name: Ubuntu 22.04 CI (GCC 11)

on: [push, pull_request]

jobs:
  ubuntu-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Use Makefile
        run: |
          make &&
          ./unit 
",,,,,,C
763,https://github.com/uofw/uofw,"name: Build uOFW
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: pspdev/pspdev:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apk add build-base
      - name: Build project
        run: |
          make -k
  documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get install doxygen
      - name: Build documentation
        run: |
          mkdir github-pages
          cd github-pages
          doxygen ../docs/Doxyfile
      - name: Deploy documentation
        if: github.ref == 'refs/heads/master'
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: github-pages
          CLEAN: true
",,,,,,C
764,https://github.com/jaredsburrows/rarcrack,"name: build

on: [push, pull_request]

env:
  LIBSTDC_VERSION: 5

jobs:
  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Run Build
        run: make clean && make

      - name: Run rarcrack
        run: ./rarcrack --type zip test.zip

  macos:
    runs-on: macos-latest

    strategy:
      fail-fast: false

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Run Build
        run: make clean && make

      - name: Run rarcrack
        run: ./rarcrack --type zip test.zip

",,,,,,C
765,https://github.com/fakenmc/cf4ocl,"name: CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - name: Install dependencies
        run: |
          sudo apt install -y bats build-essential ocl-icd-libopencl1 cmake git \
            pkg-config libclang-{11,14}-dev clang-{11,14} llvm-{11,14} make \
            ninja-build ocl-icd-libopencl1 ocl-icd-dev ocl-icd-opencl-dev \
            libhwloc-dev zlib1g zlib1g-dev clinfo dialog apt-utils libxml2-dev \
            libclang-cpp{11,14}-dev libclang-cpp{11,14} llvm-{11,14}-dev \
            libglib2.0-dev lcov valgrind

      - name: Clone POCL
        uses: actions/checkout@v3
        with:
          repository: pocl/pocl
          ref: release_3_0
          path: pocl

      - name: Build POCL
        run: |
          cmake -S pocl -B builds/pocl \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-14
          cmake --build builds/pocl

      - name: Install POCL
        run: |
          cd builds/pocl
          sudo make install
          sudo mkdir -p /etc/OpenCL/vendors
          sudo cp pocl.icd /etc/OpenCL/vendors/pocl.icd

      - name: Clone Oclgrind
        uses: actions/checkout@v3
        with:
          repository: jrprice/Oclgrind
          ref: v21.10
          path: oclgrind

      - name: Build Oclgrind
        run: |
          cmake -S oclgrind -B builds/oclgrind \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DLLVM_DIR=/usr/lib/llvm-11/share/llvm/cmake
          cmake --build builds/oclgrind

      - name: Install Oclgrind
        run: |
          cd builds/oclgrind
          sudo make install

      - name: Update registry of installed libraries
        run: sudo ldconfig

      - name: Clone cf4ocl
        uses: actions/checkout@v3
        with:
          path: cf4ocl

      - name: Build cf4ocl, test against POCL and generate coverage report
        run: |
          cmake -S cf4ocl -B builds/cf4ocl \
            -DCMAKE_BUILD_TYPE=Debug \
            -DOpenCL_LIBRARY=/lib/x86_64-linux-gnu/libOpenCL.so \
            -DTESTS_GENERATE_COVERAGE=1
          cmake --build builds/cf4ocl --target codecov

      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          directory: builds/cf4ocl
          verbose: true

      - name: List available OpenCL devices (should only register POCL)
        run: ./builds/cf4ocl/src/utils/ccl_devinfo

      - name: Test cf4ocl against Oclgrind and check for memory leaks
        run:  |
          cd builds/cf4ocl
          oclgrind valgrind --tool=memcheck --leak-check=full ctest
",,,,,,C
766,https://github.com/nzjrs/osm-gps-map,"name: C/C++ CI

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: install dependencies
        run: |
          sudo apt-get -y install \
            build-essential \
            autoconf \
            autoconf-archive \
            automake \
            libtool \
            gtk-doc-tools \
            libglib2.0-dev \
            libgtk-3-dev \
            libsoup-3.0-dev \
            libgirepository1.0-dev
      - uses: actions/checkout@v2
      - name: autogen
        run: ./autogen.sh
      - name: configure prefix
        run: ./configure --prefix /usr
      - name: make
        run: make
      - name: make check
        run: make check
      - name: make distcheck
        run: make distcheck
      - name: make install
        run: sudo make install
      - name: install test dependencies
        run: |
          sudo apt-get -y install \
            python3-gi \
            python3-cairo \
            gir1.2-gtk-3.0 \
            gir1.2-gdkpixbuf-2.0 \
            xvfb
      - name: run python unittest
        run: xvfb-run --auto-servernum /usr/bin/python3 -m unittest discover -v tests/
",,,,,,C
768,https://github.com/tizian/cendric2,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2019, os: windows-latest, flags: -DCENDRIC_BUILD_DIALOGUE_TOOL=ON }
        - { name: Linux GCC,      os: ubuntu-latest,  flags: -DCENDRIC_BUILD_DIALOGUE_TOOL=OFF }
        - { name: MacOS XCode,    os: macos-latest,   flags: -DCENDRIC_BUILD_DIALOGUE_TOOL=OFF -DCENDRIC_EXTERNAL_DOCUMENT_FOLDER=ON }

    steps:
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev

    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Patch SFML on Linux
      if: runner.os == 'Linux'
      shell: bash
      run: curl https://github.com/SFML/SFML/commit/87aaa9e145659d6a8fc193ab8540cf847d4d0def.patch | git apply --directory=ext/sfml

    - name: Configure CMake
      shell: bash
      run: cmake -S $GITHUB_WORKSPACE -B $GITHUB_WORKSPACE/build -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install -DCMAKE_VERBOSE_MAKEFILE=ON ${{matrix.platform.flags}}

    - name: Build
      shell: bash
      run: cmake --build $GITHUB_WORKSPACE/build --config Release --target install --parallel 4",,,,,,C
769,https://github.com/jacketizer/libnmea,"# This name is also used in the status badge
name: builds and tests

on: [push, pull_request]

jobs:
  build_linux:
    runs-on: ubuntu-20.04
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2
    - name: Build and test with CMake
      run: |
        mkdir -p cmake-build && cd cmake-build
        cmake ..
        make
        export NMEA_PARSER_PATH=$PWD/parsers/
        bin/utests
        bin/utests-nmea
        bin/minimum
        bin/utests-parse
        ../tests/parse_stdin_test.sh bin/parse_stdin
    - name: Build and test with CMake (static library only)
      run: |
        mkdir -p cmake-build-static && cd cmake-build-static
        cmake -D NMEA_BUILD_SHARED_LIB=OFF ..
        make
        bin/utests
        bin/utests-nmea
        bin/minimum
        bin/utests-parse
        ../tests/parse_stdin_test.sh bin/parse_stdin
    - name: Build and test with make
      run: |
        make
        sudo make install
        make unit-tests
        make examples
        tests/parse_stdin_test.sh build/parse_stdin
",,,,,,C
770,https://github.com/tvondra/sequential-uuids,"name: make installcheck
on: [push, pull_request]
jobs:
  test:
    strategy:
      matrix:
        pg: [15, 14, 13, 12, 11, 10]
    name: PostgreSQL ${{ matrix.pg }}
    runs-on: ubuntu-latest
    container: pgxn/pgxn-tools
    steps:

      - name: Start PostgreSQL ${{ matrix.pg }}
        run: pg-start ${{ matrix.pg }}

      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Test on PostgreSQL ${{ matrix.pg }}
        run: pg-build-test
",,,,,,C
771,https://github.com/frangarcj/nopsmdrm,"name: CI

on:
  push:
  pull_request:
  repository_dispatch:
    types: [run_build]

jobs:
  build:
    runs-on: ubuntu-latest
    container: vitasdk/vitasdk:latest
    steps:
    - uses: actions/checkout@v2
    - name: Compile project
      run: |
        mkdir build
        cd build
        cmake ../src/
        make -j$(nproc)
    - name: Upload artifacts
      if: ${{ success() }}
      uses: actions/upload-artifact@v2
      with:
        name: nopsmdrm.skprx
        path: build/nopsmdrm.skprx
    - uses: svenstaro/upload-release-action@v2
      if: contains(github.ref,'refs/tags')
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/nopsmdrm.skprx
        overwrite: true
        tag: ${{ github.ref }}",,,,,,C
772,https://github.com/devanlai/dap42,"name: Build Firmware
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache Toolchain
        id: cache-toolchain
        uses: actions/cache@v3
        env:
          cache-name: cache-toolchain
        with:
          path: ~/toolchains/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('util/install-toolchain.sh') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        name: Download toolchain
        run: ./util/install-toolchain.sh

      - name: Build Firmware
        run: make -k all
        env:
          PREFIX: ~/toolchains/gcc-arm-embedded/bin/arm-none-eabi-

      - name: Archive Firmware
        uses: actions/upload-artifact@v3
        with:
          name: firmware-bin
          path: build/*.bin
",,,,,,C
778,https://github.com/neutrinolabs/pulseaudio-module-xrdp,"name: build
on:
  push:
  pull_request:

jobs:
  install_pa_sources:
    name: install PA sources
    runs-on: ubuntu-latest
    steps:
      # Set steps.os.outputs.image to the specific OS (e.g. 'ubuntu20')
      - name: Get operating system name and version.
        id: os
        run: echo ""image=$ImageOS"" >>$GITHUB_OUTPUT
        shell: bash
      - uses: actions/checkout@v3
      - name: Cache pulseaudio source
        uses: actions/cache@v3
        env:
          cache-name: cache-pulseaudio-src
        with:
          path: ~/pulseaudio.src
          key: ${{ steps.os.outputs.image }}-build-${{ env.cache-name }}
      - run: scripts/install_pulseaudio_sources_apt.sh

  build:
    strategy:
      fail-fast: false
      matrix:
        include:

          - CC: gcc

          - CC: clang

    name: build with ${{ matrix.CC }}
    runs-on: ubuntu-latest
    needs: install_pa_sources
    env:
      CC: ${{ matrix.CC }}
      CFLAGS: -Wall -Wextra -Werror

    steps:
      - name: Get operating system name and version.
        id: os
        run: echo ""image=$ImageOS"" >>$GITHUB_OUTPUT
        shell: bash
      - name: Fetch pulseaudio sources
        uses: actions/cache@v3
        env:
          cache-name: cache-pulseaudio-src
        with:
          path: ~/pulseaudio.src
          key: ${{ steps.os.outputs.image }}-build-${{ env.cache-name }}
      - uses: actions/checkout@v3
      - run: sudo apt-get update
      - run: sudo apt-get -yq install build-essential libpulse-dev
      - run: ./bootstrap
      - run: ./configure PULSE_DIR=~/pulseaudio.src
      - run: make
",,,,,,C
779,https://github.com/yodaos-project/yodaos,"name: YodaOS Build System
on:
  push:
    branches: 
      - v9.x
  pull_request:
    branches:
      - v9.x

jobs:
  build-rpi3-on-ubuntu:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v1
    - name: cache openwrt download files
      uses: actions/cache@v1
      with:
        key: ${{ runner.OS }}
        path: openwrt/dl
    - name: install dependencies for ubuntu
      run: sudo apt-get install build-essential libncurses5-dev
    - name: configure
      run: ./configure -p rpi -c rpi3b_plus
    - name: make image
      run: make -j1 V=s
",,,,,,C
781,https://github.com/s-macke/starflight-reverse,"name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

# libsdl2-dev is not directly supported
#    - name: install_dependencies
#      run: sudo apt-get install libsdl2-dev

    - name: Build
      run: make disasOV1 disasOV2
",,,,,,C
782,https://github.com/larmel/lacc,"name: Test

on: push

jobs:
  ubuntu:
    name: Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and install
        run: |
          ./configure
          make
          sudo make install
      - name: Test
        run: make -C test
  alpine:
    name: Alpine
    runs-on: ubuntu-latest
    container: docker://alpine:latest
    steps:
      - name: Setup
        run: apk add gcc libc-dev git make ncurses
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and install
        run: |
          ./configure
          make
          make install
      - name: Test
        run: make -C test
",,,,,,C
783,https://github.com/coova/coova-chilli,"name: Github Actions Build

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install build deps
      run: |
        sudo apt update
        sudo apt install gengetopt libjson-c-dev
    - name: Bootstrap
      run: ./bootstrap
    - name: Configure
      run: |
        ./configure --enable-largelimits --enable-proxyvsa --enable-miniportal \
        --enable-chilliredir --enable-chilliproxy --enable-binstatusfile \
        --enable-chilliscript --enable-chilliradsec --with-avl --enable-layer3 \
        --enable-eapol --enable-uamdomainfile --enable-redirdnsreq --enable-modules \
        --enable-multiroute --enable-extadmvsa --with-openssl --with-poll \
        --enable-json --enable-libjson --prefix=/var/tmp/coova
    - name: Build
      run: make
    - name: Install
      run: make install
",,,,,,C
784,https://github.com/jlblancoc/suitesparse-metis-for-windows,"name: build-with-cmake
on:
  push: # all pushes
  workflow_dispatch: # started manually
  pull_request:
    branches: [ master ] # PRs against the master branch

jobs:
  job:
    name: ${{ matrix.os }}-${{ matrix.toolchain }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows MSVC jobs
          - os: windows-latest
            toolchain: vs-win64
            vsversion: 2022 # for ilammy/msvc-dev-cmd to setup vsdevcmd
            BUILD_METIS: ""ON""
          # remove C++17 build in favor of newer C++20 build
          #- os: windows-latest
          #  toolchain: vs-win64-cxx17
          #  vsversion: 2022
          #  BUILD_METIS: ""ON""
          - os: windows-latest
            toolchain: vs-win64-cxx20
            vsversion: 2022
            BUILD_METIS: ""ON""

          # Linux GCC jobs
          - os: ubuntu-22.04
            toolchain: gcc-cxx11
            BUILD_METIS: ""ON""
          # remove C++17 build in favor of newer C++20 build
          #- os: ubuntu-22.04
          #  toolchain: gcc-cxx17
          #  BUILD_METIS: ""ON""
          - os: ubuntu-22.04
            toolchain: gcc-cxx20
            BUILD_METIS: ""ON""

          # Linux Clang jobs
          # remove C++17 build in favor of newer C++20 build
          #- os: ubuntu-22.04
          #  toolchain: clang-cxx17
          #  BUILD_METIS: ""OFF""
          - os: ubuntu-22.04
            toolchain: clang-cxx20
            BUILD_METIS: ""OFF""

          # Linux MinGW cross compile jobs
          # Disabled mingw builds, error with ""multiple definition of `SuiteSparse_malloc'""
          #- os: ubuntu-22.04
          #  toolchain: linux-mingw-w64-cxx11
          #  BUILD_METIS: ""OFF""
          #- os: ubuntu-22.04
          #  toolchain: linux-mingw-w64-cxx17
          #  BUILD_METIS: ""OFF""

    steps:
      - name: ""Update apt chache to install build dependencies""
        run: sudo apt-get update -q
        if: startsWith(matrix.os, 'ubuntu')
      - name: ""Install BLAS/LAPACK Linux dependencies""
        run: sudo apt install -yq libblas-dev liblapack-dev
        if: startsWith(matrix.os, 'ubuntu')
      - name: ""Install mingw-w64 for Linux cross compile""
        run: sudo apt install -yq mingw-w64 wine-stable
        if: startsWith(matrix.toolchain, 'linux-mingw')

      - uses: actions/checkout@v3

      - uses: lukka/get-cmake@latest

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          vsversion: ${{ matrix.vsversion }}
        if: startsWith(matrix.os, 'windows')

      # Run CMake to generate Ninja project files
      - name: Configure CMake project
        run: |
          cmake -S . -B build -G ""Ninja"" -DCMAKE_TOOLCHAIN_FILE=""ci/toolchains/${{ matrix.toolchain }}.cmake"" -DBUILD_METIS=${{ matrix.BUILD_METIS }}
        working-directory: ""${{ github.workspace }}""

      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build
        run: |
          cmake --build build --config Release
        working-directory: ""${{ github.workspace }}""
",,,,,,C
785,https://github.com/sensepost/wpa_sycophant,"name: Create and publish the config, bin, and script

on:
  push:
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 0 * * 1'


jobs:
    build-and-pub:
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            -
                name: Checkout
                uses: actions/checkout@v3
            -
                name: Update Packages
                run: sudo apt update
            - 
                name: install ssl (libssl) and netlink (libnl) dependencies
                run: sudo apt install -y libnl-genl-3-dev libssl-dev
            - 
                name: Make wpa_supplicant
                run: make -C wpa_supplicant
            - 
                name: Upload Artifact
                uses: actions/upload-artifact@v3
                with:
                    name: wpa_supplicant_amd64
                    path: |
                        wpa_sycophant_example.conf
                        wpa_sycophant.sh
                        wpa_supplicant/wpa_supplicant
            # -   
            #     name: Create Release
            #     uses: ncipollo/release-action@v1
            #     with:
            #         artifacts: ""release.tar.gz,foo/*.txt""
            #         bodyFile: ""body.md""",,,,,,C
786,https://github.com/cesanta/elk,"name: build
on: [push, pull_request]
jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt-get update ; sudo apt-get install valgrind
    - run: make -C test valgrind
    - run: make -C test test test++ elk
  MacOS:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - run: make -C test test++ elk upload-coverage ARCH_FLAGS=
  Windows:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: make -C test vc2017 mingw vc22
  ArduinoUno:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: make -C test uno
",,,,,,C
787,https://github.com/bootchk/resynthesizer,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '15 15 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
",,,,,,C
788,https://github.com/tsoding/nothing,"name: CI
on: [push, pull_request]

jobs:
  build-linux-tcc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qq libsdl2-dev tcc
      - name: build nothing
        run: |
          ./build-posix.sh
        env:
          CC: tcc
          CFLAGS: -DSDL_DISABLE_IMMINTRIN_H -L/usr/lib/x86_64-linux-gnu/pulseaudio
          NOTHING_CI: on

  build-linux-gcc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qq libsdl2-dev
      - name: build nothing
        run: |
          ./build-posix.sh
        env:
          CC: gcc
          NOTHING_CI: on

  build-linux-clang:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -qq libsdl2-dev
      - name: build nothing
        run: |
          ./build-posix.sh
        env:
          CC: clang
          NOTHING_CI: on

  build-macos:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1
      - name: install dependencies
        run: brew install sdl2 pkg-config
      - name: build nothing
        run: |
          ./build-posix.sh
        env:
          CC: clang
          NOTHING_CI: on

  # TODO(#1177): build-windows-msvc on GitHub Actions does not support SCU
  build-windows-msvc:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v1
        # this runs vcvarsall for us, so we get the MSVC toolchain in PATH.
      - uses: seanmiddleditch/gha-setup-vsdevenv@master
      - name: download sdl2
        run: |
          curl -fsSL -o SDL2-devel-2.0.9-VC.zip https://www.libsdl.org/release/SDL2-devel-2.0.9-VC.zip
          7z x SDL2-devel-2.0.9-VC.zip
          mv SDL2-2.0.9 SDL2
      - name: build nothing
        run: |
          mkdir build
          cd build
          cmake .. -DNOTHING_CI=ON
          cmake --build .

  # TODO(#1243): build-windows-mingw is broken
  # TODO(#1178): %z related warnings on build-windows-mingw GitHub Action
  # build-windows-mingw:
  #   runs-on: windows-2019
  #   steps:
  #     - uses: actions/checkout@v1
  #       # this gives us msys.
  #     - uses: numworks/setup-msys2@v1
  #     - name: install dependencies
  #       run: msys2do pacman -S --noconfirm mingw-w64-x86_64-gcc mingw64/mingw-w64-x86_64-SDL2 make mingw-w64-x86_64-pkg-config
  #     - name: build nothing
  #       run: |
  #         msys2do ./build-posix.sh
  #       env:
  #         CC: gcc
",,,,,,C
790,https://github.com/jibsen/tinf,"name: tinf CI

on: [push, pull_request]

jobs:
  windows:
    name: Windows ${{ matrix.config.name }}
    runs-on: windows-latest

    strategy:
      matrix:
        config:
          - name: MSVC x64
            generator: Visual Studio 16 2019
            cmake-flags: -A x64

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -G ""${{ matrix.config.generator }}"" ${{ matrix.config.cmake-flags }} -B build

      - name: Build
        run: cd build && cmake --build . --config Debug

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0 -C Debug

  linux:
    name: Linux ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    env:
      CC: ${{ matrix.config.cc }}

    strategy:
      matrix:
        config:
          - name: Clang UBSan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-g -fsanitize=undefined'

          - name: Clang ASan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-O1 -g -fsanitize=address -fno-omit-frame-pointer'

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake ${{ matrix.config.cmake-flags }} -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && make VERBOSE=1

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

  coverage:
    name: Linux Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure
        run: cmake -DCMAKE_C_FLAGS_DEBUG='-g -O0 --coverage' -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && make VERBOSE=1

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

      - name: Generate coverage
        run: cd build && gcov -abcfu CMakeFiles/tinf.dir/src/*.c.gcno -o CMakeFiles/tinf.dir/src

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          directory: ./build/
",,,,,,C
791,https://github.com/powturbo/turbo-run-length-encoding,"name: build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  linux:
    runs-on: '${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        compiler: [""gcc"", ""clang""]
    env:      
      CC: ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'     
      - run: git submodule update --init --recursive
      - run: make
      - run: lscpu
      - run: ./trle trle

  macos:
    runs-on: '${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        compiler: [""clang""]
    env:      
      CC: ${{ matrix.compiler }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - run: git submodule update --init --recursive
      - run: make
      - run: sysctl -n machdep.cpu.brand_string
      - run: ./trle trle

  windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: git make mingw-w64-x86_64-gcc
          update: true
      - run: git submodule update --init --recursive
      - run: make
      - run: ./trle trle

 
",,,,,,C
792,https://github.com/xen-project/xen,"name: Coverity Scan

# We only want to test official release code, not every pull request.
on:
  workflow_dispatch:
  schedule:
    - cron: '18 9 * * WED,SUN' # Bi-weekly at 9:18 UTC

jobs:
  coverity:
    runs-on: ubuntu-22.04
    steps:
    - name: Install build dependencies
      run: |
        sudo apt-get install -y wget git gawk \
          libbz2-dev build-essential \
          zlib1g-dev libncurses5-dev iasl \
          libbz2-dev e2fslibs-dev uuid-dev ocaml \
          ocaml-findlib libyajl-dev \
          autoconf libtool liblzma-dev \
          python3-dev golang libsystemd-dev

    - uses: actions/checkout@v2
      with:
        ref: staging

    - name: Configure Xen
      run: |
        ./configure --with-system-qemu=/bin/true \
                    --with-system-seabios=/bin/true \
                    --with-system-ovmf=/bin/true

    - name: Pre build stuff
      run: |
        make -j`nproc` mini-os-dir

    - uses: vapier/coverity-scan-action@v1
      with:
        command: make -j`nproc` build-xen build-tools && make -j`nproc` -C extras/mini-os/
        project: XenProject
        email: ${{ secrets.COVERITY_SCAN_EMAIL }}
        token: ${{ secrets.COVERITY_SCAN_TOKEN }}
",,,,,,C
793,https://github.com/thomashabets/arping,"name: C/C++ CI

on:
  push:
    branches: [ ""arping-2.x"" ]
  pull_request:
    branches: [ ""arping-2.x"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Required dependencies
      run:  sudo apt-get install -y libnet1-dev libpcap-dev automake autoconf check
    - name: bootstrap
      run:  ./bootstrap.sh
    - name: configure
      run:  ./configure
    - name: make
      run:  make
    - name: make check
      run:  make check
    - name: make distcheck
      run:  make distcheck
    - name: Install optional dependencies
      run:  sudo apt-get install -y libcap-dev libseccomp-dev
    - name: clean
      run:  make distclean
    - name: configure with optional deps
      run: ./configure
    - name: make with optional deps
      run:  make
    - name: make check with optional deps
      run:  make check
    - name: make distcheck with optional deps
      run:  make distcheck
",,,,,,C
794,https://github.com/jpcy/ioq3-renderer-bgfx,"name: build

on: [push, pull_request, workflow_dispatch]

jobs:
  Linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install libgl1-mesa-dev libsdl2-dev
    - name: Install premake
      run: |
         wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha13/premake-5.0.0-alpha13-linux.tar.gz -O premake.tar.gz
         tar -xf premake.tar.gz
    - name: Run premake
      run: |
        ./premake5 gmake
    - name: Build
      run: |
        cd build
        make config=release_x86_64
    - name: Archive artifact
      uses: actions/upload-artifact@v2
      with:
        name: renderer_bgfx_x86_64
        path: build/bin_x64/renderer_bgfx_x86_64.so

  Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      with: 
        msystem: MINGW32
        update: true
        install: base-devel mingw-w64-i686-gcc
    - name: Clone ioquake3
      shell: cmd
      run: |
        git clone https://github.com/ioquake/ioq3.git ../ioq3
    - name: Run premake
      shell: powershell
      run: |
        .\bin\premake5.exe gmake
    - name: Build
      shell: msys2 {0}    
      run: |
        cd build
        make
    - name: Archive artifact
      uses: actions/upload-artifact@v2
      with:
        name: renderer_bgfx_x86
        path: build\bin_x86\renderer_bgfx_x86.dll
",,,,,,C
795,https://github.com/lcn2/calc,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '41 1 * * 6'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
",,,,,,C
796,https://github.com/openarena/gamecode,"name: Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Build it
        run: make
",,,,,,C
393,https://github.com/subhra74/xdm,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: windows-latest

    defaults:
      run:
        working-directory: ./app/XDM/XDM.Wpf.UI/

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1004,https://github.com/webbju/android-plus-plus,"name: CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:

  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore .\src\AndroidPlusPlus.sln

    - name: Build AndroidPlusPlus
      run: msbuild /m /p:Configuration=Release .\src\AndroidPlusPlus.sln
",,,,,,C#
1038,https://github.com/logosbible/bsdiff.net,"name: Build

on: [push, pull_request]

env:
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:BuildNumber=${{ github.run_number }}
      - name: Test
        run: dotnet test --configuration Release --no-build
      - name: Pack
        run: dotnet pack --configuration Release --no-build
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NuGet Packages
          path: '**/*.nupkg'
          if-no-files-found: error
",,,,,,C#
1039,https://github.com/lithander/minimal-bitcoin-miner,"name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: MiniMiner/MiniMiner.csproj

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}} /p:DeployOnBuild=true /p:PublishProfile=FolderProfile
   
    - name: Upload Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: Releases
        path: MiniMiner/bin/Release
",,,,,,C#
1040,https://github.com/geri-borbas/triangle.net,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Triangle.sln
      working-directory: ./src
    - name: Build
      run: dotnet build Triangle.sln --no-restore
      working-directory: ./src
    - name: Test
      run: dotnet test Triangle.sln --no-build --verbosity normal
      working-directory: ./src
",,,,,,C#
1041,https://github.com/snape/rvo2-cs,"#
# ci.yml
# RVO2 Library C#
#
# SPDX-FileCopyrightText: 2008 University of North Carolina at Chapel Hill
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Please send all bug reports to <geom@cs.unc.edu>.
#
# The authors may be contacted via:
#
# Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
# Dept. of Computer Science
# 201 S. Columbia St.
# Frederick P. Brooks, Jr. Computer Science Bldg.
# Chapel Hill, N.C. 27599-3175
# United States of America
#
# <https://gamma.cs.unc.edu/RVO2/>
#

---
name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: '0 5 * * *'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  bazel_arch:
    name: bazel arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            bazel \
            ca-certificates \
            curl \
            gcc \
            git \
            icu \
            lttng-ust \
            python \
            which \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  bazel_macos:
    name: bazel macos latest
    runs-on: macos-latest
    steps:
      - name: pre-checkout setup
        run: |
          rm -f \
            /usr/local/bin/2to3 \
            /usr/local/bin/2to3-3.* \
            /usr/local/bin/go \
            /usr/local/bin/gofmt \
            /usr/local/bin/idle3 \
            /usr/local/bin/idle3.* \
            /usr/local/bin/pydoc3 \
            /usr/local/bin/pydoc3.* \
            /usr/local/bin/python3 \
            /usr/local/bin/python3.* \
            /usr/local/bin/python3-config \
            /usr/local/bin/python3.*-config \
            /usr/local/lib/libtcl8.*.dylib \
            /usr/local/lib/libtk8.*.dylib
          brew update-reset -q
          brew upgrade -f -q
          brew unlink -q bazelisk
          brew install -q \
            bazel \
            buildifier \
            git \
            python \
            jsonlint \
            markdownlint-cli \
            yamllint
          brew cleanup -q -s
          rm -rf $(brew --cache)
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        shell: zsh -efuo pipefail {0}
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: zsh -efuo pipefail {0}

  bazel_ubuntu:
    name: bazel ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:latest
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            g++ \
            git \
            gnupg \
            libicu70 \
            liblttng-ust1 \
            python-is-python3 \
            zlib1g
          curl -sS https://bazel.build/bazel-release.pub.gpg | gpg --dearmor - \
            > /usr/share/keyrings/bazel-archive-keyring.gpg
          echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8' \
            > /etc/apt/sources.list.d/bazel.list
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            bazel
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  dotnet_alpine:
    name: dotnet alpine 3
    runs-on: ubuntu-22.04
    container: alpine:3
    steps:
      - name: pre-checkout setup
        run: |
          apk upgrade -q --no-cache
          apk add -q --no-cache \
            bash \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
        shell: sh
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh

  dotnet_arch:
    name: dotnet arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_fedora:
    name: dotnet fedora latest
    runs-on: ubuntu-22.04
    container: fedora:latest
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_macos:
    name: dotnet macos latest
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}
      - name: build and pack release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}

  dotnet_rockylinux:
    name: dotnet rockylinux 9
    runs-on: ubuntu-22.04
    container: rockylinux:9
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl-minimal \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_ubuntu:
    name: dotnet ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            git \
            libicu70 \
            liblttng-ust1 \
            zlib1g
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/snape/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: push
        run: |
          dotnet nuget push --no-symbols true --skip-duplicate RVOCS/bin/Release/RVOCS.*.nupkg
        shell: bash
        if: ${{ github.event.release.published }}

  dotnet_windows:
    name: dotnet windows latest
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug RVOCS.sln
          dotnet pack --configuration Debug --no-build RVOCS\RVOCS.csproj
        shell: pwsh
      - name: build and pack release
        run: |
          dotnet build --configuration Release RVOCS.sln
          dotnet pack --configuration Release --no-build RVOCS\RVOCS.csproj
        shell: pwsh
",,,,,,C#
1042,https://github.com/electroly/sqlnotebook,"name: SQL Notebook

on: push

jobs:
  build:
    runs-on: windows-2022
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build
      shell: pwsh
      run: |
        Write-Output ""Decoding code signing certificate.""
        Set-Content -Path certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
        certutil -decode certificate.txt certificate.pfx
        $certificatePath = (Resolve-Path ""certificate.pfx"").Path
        $certificatePassword = ""${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}""

        Write-Output ""Finding msbuild.""
        $msbuildPath = & vswhere.exe -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
        Write-Output ""Found msbuild at: $msbuildPath""

        Write-Output ""Building x64.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x64
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-64bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-64bit.zip

        Write-Output ""Building x86.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x86
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-32bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-32bit.zip

    - name: Upload x64 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.msi
        path: SqlNotebook-64bit.msi

    - name: Upload x64 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.zip
        path: SqlNotebook-64bit.zip

    - name: Upload x86 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.msi
        path: SqlNotebook-32bit.msi

    - name: Upload x86 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.zip
        path: SqlNotebook-32bit.zip
",,,,,,C#
1043,https://github.com/kakone/googlecast,"name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1044,https://github.com/nettitude/sharpsocks,"name: SharpSocks Server

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore SharpSocksServer/SharpSocksServer.csproj
    - name: Build
      run: dotnet build --no-restore --configuration ""Release Linux"" SharpSocksServer/SharpSocksServer.csproj
",,,,,,C#
1045,https://github.com/mat-mcloughlin/patientmangement,"name: Build Patient Management

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v1

      - name: Start containers
        run: docker-compose -f ""docker-compose.yml"" up -d

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ""6.0.x""

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Stop containers
        if: always()
        run: docker-compose -f ""docker-compose.yml"" down
",,,,,,C#
1046,https://github.com/zyzsdy/negativeencoder,"name: Build Test

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
",,,,,,C#
1047,https://github.com/velcrophysics/velcrophysics,"name: Generic build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Build VelcroPhysics and samples
      run: dotnet build -c LinuxRelease src/VelcroPhysics.All.sln",,,,,,C#
1048,https://github.com/deanhume/html-minifier,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1049,https://github.com/uuksu/rpgmakerdecrypter,"name: .NET

on:
  push:
    tags:
      - v*

jobs:
  build_cli:
  
    env:
      BUILD_CONFIG: 'Release'
      CLI_PROJECT: 'RPGMakerDecrypter.Cli/RPGMakerDecrypter.Cli.csproj'
      GUI_PROJECT: 'RPGMakerDecrypter.Gui/RPGMakerDecrypter.Gui.csproj'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Fetch tags
      run: git fetch --all --tags
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration $Env:BUILD_CONFIG --no-restore
      
    - name: Publish Linux CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r linux-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - name: Publish Windows CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
          
    - name: Publish Windows GUI
      run: dotnet publish $Env:GUI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - uses: ncipollo/release-action@v1.12.0
      with:
        bodyFile: CHANGELOG.MD
        artifacts: ""RPGMakerDecrypter-cli,RPGMakerDecrypter-cli.exe,RPGMakerDecrypter.exe""
",,,,,,C#
1050,https://github.com/uknowsec/sharpsqltools,"name: ""Build SharpSQLTools ""

on:
  push:
    branches:
      - master
      - releases/*

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Build DotNET40
        run: |
           cd ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\""
           .\MSBuild.exe -p:Configuration=Release $Env:GITHUB_WORKSPACE\
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with: 
          # Artifact name
          name: SharpSQLTools.exe
          path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe
      - name: zip_exe
        shell: powershell
        run: Compress-Archive -Path D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe -DestinationPath D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip
          asset_name: SharpSQLTools.zip
          asset_content_type: application/zip
",,,,,,C#
1051,https://github.com/richardszalay/mockhttp,"name: MockHttp Build
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ""Build""
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./RichardSzalay.MockHttp.sln
    - name: Build
      run: dotnet build -c Release --no-restore ./RichardSzalay.MockHttp.sln
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal ./RichardSzalay.MockHttp.sln
    - name: Package
      run: dotnet pack -c Release --no-build ./RichardSzalay.MockHttp/RichardSzalay.MockHttp.csproj
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'

    - name: ""Upload artifact: RichardSzalay.MockHttp.nupkg""
      uses: actions/upload-artifact@v3.1.1
      with:
        name: RichardSzalay.MockHttp.nupkg
        path: RichardSzalay.MockHttp/bin/Release/*.nupkg
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
",,,,,,C#
1052,https://github.com/gmershad/fooddelivery,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    - name: Build with dotnet
      run: dotnet build --configuration Release
",,,,,,C#
1053,https://github.com/apetrovskiy/stups,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: STUPS.sln                                  # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      if: always()
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      if: always()
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
",,,,,,C#
1054,https://github.com/cwensley/pablodraw,"# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches: [main]
    tags: [""*""]
  pull_request:
    branches: [main]

env:
  DotNetVersion: ""7.0.x""
  BuildConfiguration: ""Release""
  BuildParameters: ""/clp:NoSummary /p:Configuration=Release /p:BuildVersion=${{ github.run_id }} /p:BuildBranch=${{ github.ref }}""

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-windows.binlog

      - name: Build PabloDraw.Console
        run: dotnet publish Source/PabloDraw.Console/PabloDraw.Console.cxproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw.console-windows.binlog
        
      - name: Build msi
        run: dotnet build ${{ env.BuildParameters }} Source/PabloDraw.WindowsInstaller/PabloDraw.WindowsInstaller.wixproj

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-binaries-x64
          path: artifacts/publish/${{ env.BuildConfiguration }}/Windows/*

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-installer-x64
          path: artifacts/installer/${{ env.BuildConfiguration }}/Windows/*.msi

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-linux.binlog
        
      - name: Create gzip
        run: tar -czvf pablodraw-linux-x64.tar.gz -C artifacts/publish/${{ env.BuildConfiguration }}/Linux .

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-linux-binaries-x64
          path: pablodraw-linux-x64.tar.gz

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 13.1

      - name: Import code signing certificate
        if: github.event_name != 'pull_request'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVID_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.DEVID_CERTIFICATE_P12_PASSWORD }}

      - name: Enable code signing
        if: github.event_name != 'pull_request'
        run: echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableCodeSigning=True"" >> $GITHUB_ENV

      - name: Set notarization credentials
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --store-password-in-keychain-item ""AC_PASSWORD"" -u ""${{ secrets.AC_USERNAME }}"" -p ""${{ secrets.AC_PASSWORD }}""
          echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableNotarization=True"" >> $GITHUB_ENV

      - name: Build PabloDraw
        run: sudo dotnet build Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-mac.binlog

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-mac
          path: artifacts/publish/${{ env.BuildConfiguration }}/Mac/*.dmg

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  update-release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2

      - uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          files: |
            **/*.msi
            **/*.dmg
            **/*.tar.gz
",,,,,,C#
1055,https://github.com/rbmkio/radish,"name: Publish

on:
  push:
    branches: master

jobs:

  build-win:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      shell: pwsh
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish x64 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: publish x86 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x86 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: download nsis
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/rbmkio/nsis/raw/master/nsis.zip -OutFile $env:GITHUB_WORKSPACE\build\nsis\nsis.zip
        Expand-Archive -Path $env:GITHUB_WORKSPACE\build\nsis\nsis.zip -DestinationPath $env:GITHUB_WORKSPACE\build\nsis
    - name: build nsis
      shell: pwsh
      run: |
        copy $env:GITHUB_WORKSPACE\build\nsis\64bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish
        copy $env:GITHUB_WORKSPACE\build\nsis\32bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\installer.nsi
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\installer.nsi
    - name: upload x64 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x64
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\radish-setup.exe
    - name: upload x86 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x86
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\radish-setup.exe

  build-mac:
    runs-on: macOS-10.14
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: bundle app
      run: dotnet msbuild src/Rbmk.Radish/Rbmk.Radish.csproj -t:BundleApp -p:Configuration=Release -p:RuntimeIdentifier=osx-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: build dmg
      run: |
        cd build/dmg-builder
        ./build-dmg $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/osx-x64/publish/Radish.app
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: dmg
        path: build/dmg-builder/Radish.dmg

  build-linux:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish app
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r linux-x64 --version-suffix ""$(git rev-list --count HEAD)""
    - name: tar gz
      run: |
        tar -cvzf radish.tar.gz -C $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/linux-x64/publish radish
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: targz-x64
        path: radish.tar.gz
",,,,,,C#
1056,https://github.com/ievangelist/signalr-chat,"name: Deploy App
on:
  push:
    branches: [ main ]
    paths:
    - '**.cs'
    - '**.css'
    - '**.json'
    - '**.razor'
    - '**.html'
    - '**.yml'
    - '**.csproj'
env:
  AZURE_WEBAPP_NAME: blazing-chat
  AZURE_WEBAPP_PACKAGE_PATH: BlazingChatter\Server/publish
  AZURE_WEBAPP_PUBLISH_PROFILE: ${{ secrets.blazing_chat_a434 }}
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 7.0.x
  WORKING_DIRECTORY: BlazingChatter\Server
jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@main
    - name: Setup .NET Core
      uses: actions/setup-dotnet@main
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore ""${{ env.WORKING_DIRECTORY }}""
    - name: Build
      run: dotnet build ""${{ env.WORKING_DIRECTORY }}"" --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test ""${{ env.WORKING_DIRECTORY }}"" --no-build
    - name: Publish
      run: dotnet publish ""${{ env.WORKING_DIRECTORY }}"" --configuration ${{ env.CONFIGURATION }} --no-build --output ""${{ env.AZURE_WEBAPP_PACKAGE_PATH }}""
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2.2.6
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
    - name: Publish Artifacts
      uses: actions/upload-artifact@main
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
",,,,,,C#
1057,https://github.com/huiyadanli/pasteex,"name: .Net Build

on:
  workflow_dispatch:
    inputs:
      Reason:
        description: 'Reasons for temporary build'     
        required: true
        default: 'No reason.Just do it.'
  push:
        branches:
          - master
        paths-ignore:
          - '**/*.md'
          - .gitignore
          - .editorconfig
          - appveyor.yml
          - 'azure-pipelines*.yml'
          - 'ci/azure-pipelines/template*.yml'

  pull_request:
          branches:
            - master
          paths-ignore:
            - '**/*.md'
            - .gitignore
            - .editorconfig
            - appveyor.yml
            - 'azure-pipelines*.yml'
            - 'ci/azure-pipelines/template*.yml'

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #BUILD_CONFIGURATION: [Debug , Release]

jobs:
  build:
    name: ${{matrix.BUILD_CONFIGURATION}}
    runs-on: windows-latest
    strategy:
        matrix:
          BUILD_CONFIGURATION: ['Release']
    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build ${{matrix.BUILD_CONFIGURATION}}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: PasteEx-${{ runner.os }}-${{matrix.BUILD_CONFIGURATION}}
        path: |
          .\PasteEx\bin
          !.\PasteEx\bin\**\PasteEx.exe.config
          !.\PasteEx\bin\**\PasteEx.pdb
",,,,,,C#
1058,https://github.com/nunit/nunit-csharp-samples,"# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:   [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1059,https://github.com/yoyomooc/52abp.school,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    - name: Build with dotnet
      run: dotnet build --configuration Release
",,,,,,C#
1060,https://github.com/jpush/jpush-api-csharp-client,"name: .NET Core
 
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
 
jobs:
  build:
 
    runs-on: windows-latest
 
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.415
    - name: Install dependencies
      run: cd Jiguang.JPush && dotnet restore
    - name: Build
      run: cd Jiguang.JPush && dotnet build --configuration Release
    - name: Test
      run: cd Jiguang.JPush && dotnet test --no-restore --verbosity normal
    - name: Publish
      uses: brandedoutcast/publish-nuget@v2.5.2
      with:
        PROJECT_FILE_PATH: Jiguang.JPush/Jiguang.JPush.csproj
        NUGET_KEY: ${{secrets.NUGET_API_KEY}}
",,,,,,C#
1061,https://github.com/aaronontheweb/inmemorycqrsreplication,"name: pr_validation

on:
  push:
    branches:
      - master
      - dev
      - main
  pull_request:
    branches:
      - master
      - dev
      - main

jobs:
  test:
    name: Test-${{matrix.os}}
    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: ""Checkout""
        uses: actions/checkout@v3.0.2
        with:
          lfs: true
          fetch-depth: 0

      - name: ""Install .NET SDK""
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: |
            6.0.x
          global-json-file: ""./global.json""

      - name: ""dotnet build""
        run: dotnet build -c Release

      - name: ""dotnet test""
        run: dotnet test -c Release",,,,,,C#
1062,https://github.com/9ee1/capstone.net,"name: PR Workflow
on:
  pull_request:
    branches:
      - ""*""
jobs:
  linux:
    name: Linux Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: ubuntu-22.04
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime linux-x64
  
  mac:
    name: MacOS Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: macos-12
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime mac-x64

  windows:
    name: Windows Job
    defaults:
      run:
        shell: bash
        working-directory: .
    runs-on: windows-2022
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v2
      
      - id: run-tests
        name: Run Tests
        working-directory: ./Tests.Gee.External.Capstone
        run: dotnet test -c Debug --runtime win-x64",,,,,,C#
1063,https://github.com/sestoft/c5,"---
name: Main

on:
  push:
    branches:
      - master
    paths-ignore:
      - ""*.md""

  pull_request:
    branches:
      - master

  workflow_dispatch:

env:
  RESOURCE_GROUP_NAME: ondfisk
  WEBAPP_NAME: c5
  BUILD_CONFIGURATION: Release

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: 6.0.x

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

      - name: Test
        run: dotnet test -p:CollectCoverage=true -p:CoverletOutput=TestResults/ -p:CoverletOutputFormat=opencover

      - uses: actions/upload-artifact@v2
        with:
          name: lib
          path: bin/**/*.nupkg

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    container:
      image: corentinaltepe/doxygen

    steps:
      - uses: actions/checkout@v2

      - name: Install GraphViz
        run: apk update && apk add graphviz font-bitstream-type1 ghostscript-fonts

      - name: Generate Documentation
        run: doxygen Doxyfile

      - uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/

  # deploy:
  #   name: Deploy
  #   runs-on: ubuntu-latest
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   needs:
  #     - build
  #   environment: Production
",,,,,,C#
1064,https://github.com/dasync/dasync,"name: keeps

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: Build with dotnet
      run: dotnet build src/ --configuration Release
",,,,,,C#
1065,https://github.com/davidfowl/pubbie,"name: CI

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
      
    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1.0.0
      with:
        version: 3.1.100
     
    - name: dotnet build
      run: dotnet build Pubbie.sln -c Release
      
    - name: dotnet test
      run: dotnet test Pubbie.sln -c Release --no-build

    - name: dotnet pack
      run: dotnet pack Pubbie.sln -c Release --no-build --include-source --include-symbols

    - name: setup nuget
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: NuGet/setup-nuget@v1.0.2
      with:
        nuget-version: latest

    - name: Set API key
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: nuget setapikey ${{ secrets.FEEDZ_TOKEN }} -Config nuget.config -Source https://f.feedz.io/davidfowl/pubbie/nuget/index.json

    - name: Set symbols API key
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: nuget setapikey ${{ secrets.FEEDZ_TOKEN }} -Config nuget.config -Source https://f.feedz.io/davidfowl/pubbie/symbols

    - name: push packages
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: dotnet nuget push **/*.nupkg -s https://f.feedz.io/davidfowl/pubbie/nuget/index.json -ss https://f.feedz.io/davidfowl/pubbie/symbols --skip-duplicate",,,,,,C#
1066,https://github.com/maliming/abp.generaltree,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100
    - name: Build with dotnet
      run: dotnet build -c Release
    - name: Test with dotnet
      run: dotnet test --no-restore
",,,,,,C#
1067,https://github.com/stulzq/rsaextensions,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.100
    - name: Build with dotnet
      run: dotnet build --configuration Release
",,,,,,C#
1068,https://github.com/guryanovev/crystalquartz,"name: dotnet package

on: [push]

jobs:
  build:

    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: | 
            2.0.x
            2.1.x
            7.x
      - name: Setup NodeJS
        uses: actions/setup-node@v3
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1.0.5
        with:
          node-version: 18.x
      - name: Install extra NuGet packages
        run: nuget install ILRepack -OutputDirectory src/packages
      - name: CI Build
        working-directory: ./src
        run: |
            dotnet build CrystalQuartz.Build/CrystalQuartz.Build.csproj --configuration=Debug
            dotnet ""../tools/Rosalia/Rosalia.dll"" CrystalQuartz.Build/bin/Debug/netstandard2.0/CrystalQuartz.Build.dll
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: Artifacts/gh-pages

  deploy:
    needs: build

    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # or the latest ""vX.X.X"" version tag for this action
",,,,,,C#
1069,https://github.com/icsharpcode/wpfdesigner,"name: Build WPF Designer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest
    strategy:
      matrix:
        Configuration: [ Debug, Release ]
    env:
        BuildPlatform: 'Any CPU'
        BuildVersion: '8.1.${{ github.run_number }}'
    steps:
    - uses: actions/checkout@v2
    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        projectFilter: '**/*.csproj'
        version: ${{ env.BuildVersion }}
        assemblyVersion: ${{ env.BuildVersion }}
        fileVersion: ${{ env.BuildVersion }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v1
    - run: nuget restore WpfDesign.sln
    - name: Build
      run: dotnet build WpfDesign.sln --no-restore -c ${{ matrix.configuration }}
    - name: Test
      run: dotnet test WpfDesign.sln --no-build --verbosity normal -c ${{ matrix.configuration }}
    - name: Pack
      if: matrix.configuration == 'release'    
      run:  .\nuget\pack.ps1
    - name: Upload NuGet
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: NuGet Packages (${{ matrix.configuration }})
        path: '**/*.nupkg'
        if-no-files-found: error      
 ",,,,,,C#
1070,https://github.com/edcharbeneau/cssbuilder,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.x.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1071,https://github.com/microsoft/vs-editor-api,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, windows-latest]
        include:
          - os: macOS-latest
            msbuild: msbuild
          - os: windows-latest
            msbuild: '""%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe""'

    steps:
    - uses: actions/checkout@v1
    
    - name: Dump Environment
      run: |
        set

    - name: Provision Machine
      run: |
        tools/provision-macos.sh
      if: startsWith(matrix.os, 'macOS-')

    - name: Restore NuGet Packages
      run: |
        ${{ matrix.msbuild }} VSEditorCore.proj /noautoresponse /t:Restore /p:BuildTests=false

    - name: Build
      run: |
        ${{ matrix.msbuild }} VSEditorCore.proj /noautoresponse /t:Build /p:BuildTests=false
",,,,,,C#
1072,https://github.com/byronmayne/weaver,"name: .NET Core

on: 
  push:
    branches: 
      - WeaverRefactor 
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    - name: Build with dotnet
      run: dotnet build "".\source\Weaver.sln"" --configuration Release
",,,,,,C#
1073,https://github.com/nager/nager.publicsuffix,"name: Build, Test & Publish

on:
  push:
    paths:
    - 'src/**'
    - '.github/workflows/**'
    branches: [ main ]
  pull_request:
    paths:
    - 'src/**'
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      working-directory: ./src
      run: dotnet restore
    - name: Build
      working-directory: ./src
      run: dotnet build --configuration Release --no-restore
    - name: Test
      working-directory: ./src
      run: |
        dotnet test --configuration Release --no-restore --no-build --verbosity normal
    - name: Build project and generate NuGet package
      run: |
        dotnet pack --configuration Release --output $GITHUB_WORKSPACE/out src/Nager.PublicSuffix/Nager.PublicSuffix.csproj
    - name: Push NuGet package
      if: github.event_name != 'pull_request'
      run: |
        cd $GITHUB_WORKSPACE/out
        dotnet nuget push *.nupkg --source https://www.nuget.org/api/v2/package --api-key ${{secrets.NUGET_TOKEN}} --skip-duplicate --no-symbols
",,,,,,C#
1074,https://github.com/vahidn/efsecondlevelcache.core,"name: .NET Core Build

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Build DNTCaptcha.Core lib
      run: dotnet build ./src/EFSecondLevelCache.Core/EFSecondLevelCache.Core.csproj --configuration Release",,,,,,C#
1075,https://github.com/app-vnext/polly-samples,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]

    steps:

    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v3.2.0

    - name: Build and Test
      shell: pwsh
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true
        DOTNET_NOLOGO: true
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
        DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
        FORCE_COLOR: 1
        NUGET_XMLDOC_MODE: skip
        TERM: xterm
      run: |
        dotnet build --configuration Release
",,,,,,C#
1076,https://github.com/perrich/hangfire.memorystorage,"name: build-ci
on: [push, pull_request]

jobs:
  build-lib:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['6.0.x']
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --no-restore --verbosity normal
",,,,,,C#
1077,https://github.com/damienbod/aspnetcoreservicebus,"name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1078,https://github.com/sharprepository/sharprepository,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Build with dotnet
      run: dotnet build --configuration Release
    - name: Test with nunit3
      run: dotnet test
  
",,,,,,C#
1079,https://github.com/firwood-software/advanceddlsupport,"name: .NET

env:
  GITHUB_USER: Nihlus
  GITHUB_FEED: https://nuget.pkg.github.com/Nihlus
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  - push
  - pull_request

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        platform: [ AnyCPU, x64 ]
        include:
          - os: windows-latest
            platform: x86

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install gcc g++ gcc-multilib-i686-linux-gnu g++-multilib-i686-linux-gnu cmake make

      - name: Build
        run: |
          dotnet restore
          dotnet build -c Release --no-restore -p:Platform=${{ matrix.platform }}

      - name: Test
        run: dotnet test Tests/Mono.DllMap.Tests -c Release --no-restore --no-build --verbosity minimal

      - name: Test (native)
        run: dotnet test Tests/AdvancedDLSupport.Tests -c Release --verbosity minimal -p:Platform=${{ matrix.platform }}

      - name: Package
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.platform == 'AnyCPU'
        run: dotnet pack -c Release --no-restore --no-build --version-suffix ""github$GITHUB_RUN_ID""
      - uses: actions/upload-artifact@v3
        with:
          name: nupkg
          path: nuget/*

  prerelease:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: nupkg
          path: nuget

      # To ensure that the current version being pushed does not get pruned we prune first.
      - name: Prune packages older than 4 versions (new version is the 5th)
        uses: smartsquaregmbh/delete-old-packages@v0.4.0
        with:
          keep: 4
          names: |
            AdvancedDLSupport
            Mono.DllMap

      - name: Push to GitHub Feed
        run: |
          for f in ./nuget/*; do
            curl -vX PUT -u ""$GITHUB_USER:$GITHUB_TOKEN"" -F package=@$f $GITHUB_FEED
          done
",,,,,,C#
1080,https://github.com/hiramtan/hisocket,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: 
  push:
  pull_request:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Runs a single command using the runners shell
      - name: Hello world
        run: echo Hello, world!
        
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.x

      - name: Build
        run: dotnet build --configuration Release
",,,,,,C#
1081,https://github.com/opentween/opentween,"name: Build

on:
  push:
    branches: ['develop', 'release']
  pull_request:

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  build:
    runs-on: windows-2022
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Set configuration env
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -eq 'refs/heads/release') {
            echo 'CONFIGURATION=Release' >> $env:GITHUB_ENV
          } else {
            echo 'CONFIGURATION=Debug' >> $env:GITHUB_ENV
          }

      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ hashFiles('*/*.csproj') }}
          restore-keys: |
            nuget-

      - name: Build
        shell: pwsh
        run: |
          msbuild /target:restore,build ""/p:Configuration=$($env:CONFIGURATION)"" /verbosity:minimal

      - name: Upload build result
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            ./OpenTween/bin/
            ./OpenTween/obj/
            ./OpenTween.Tests/bin/
          retention-days: 1

  test:
    runs-on: windows-2022
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Set configuration env
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -eq 'refs/heads/release') {
            echo 'CONFIGURATION=Release' >> $env:GITHUB_ENV
          } else {
            echo 'CONFIGURATION=Debug' >> $env:GITHUB_ENV
          }

      - uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: nuget-${{ hashFiles('*/*.csproj') }}
          restore-keys: |
            nuget-

      - name: Restore build result
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Run tests
        shell: pwsh
        run: |
          $altCoverVersion = '8.6.61'
          $xunitVersion = '2.4.2'
          $targetFramework = 'net48'
          $altCoverPath = ""$($env:NUGET_PACKAGES)\altcover\$($altCoverVersion)\tools\net472\AltCover.exe""
          $xunitPath = ""$($env:NUGET_PACKAGES)\xunit.runner.console\$($xunitVersion)\tools\net472\xunit.console.exe""

          $p = Start-Process `
            -FilePath $altCoverPath `
            -ArgumentList (
              '--inputDirectory',
              "".\OpenTween.Tests\bin\$($env:CONFIGURATION)\$($targetFramework)"",
              '--outputDirectory',
              '.\__Instrumented\',
              '--assemblyFilter',
              '?^OpenTween(?!\.Tests)',
              '--typeFilter',
              '?^OpenTween\.',
              '--fileFilter',
              '\.Designer\.cs',
              '--visibleBranches'
            ) `
            -NoNewWindow `
            -PassThru `
            -Wait

          if ($p.ExitCode -ne 0) {
            exit $p.ExitCode
          }

          $p = Start-Process `
            -FilePath $altCoverPath `
            -ArgumentList (
              'runner',
              '--recorderDirectory',
              '.\__Instrumented\',
              '--executable',
              $xunitPath,
              '--',
              '.\__Instrumented\OpenTween.Tests.dll'
            ) `
            -NoNewWindow `
            -PassThru `
            -Wait

          if ($p.ExitCode -ne 0) {
            exit $p.ExitCode
          }

      - name: Upload test results to codecov
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile codecov.exe
          .\codecov.exe -f coverage.xml

  package:
    runs-on: windows-2022
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.head.sha }}'

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Set configuration env
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -eq 'refs/heads/release') {
            echo 'CONFIGURATION=Release' >> $env:GITHUB_ENV
          } else {
            echo 'CONFIGURATION=Debug' >> $env:GITHUB_ENV
          }

      - name: Restore build result
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Build package
        shell: powershell # runtime-versionを取得するため従来のPowershellを使用する
        run: |
          $env:PATH = $env:PATH + ';C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Msbuild\Current\Bin\Roslyn\'
          $binDir = '.\OpenTween\bin\' + $env:CONFIGURATION + '\net48\'
          $destPath = 'OpenTween.zip'
          $headCommit = '${{ github.event.pull_request.head.sha }}'
          .\tools\build-zip-archive.ps1 -BinDir $binDir -DestPath $destPath -HeadCommit $headCommit
          Copy-Item ($binDir + 'OpenTween.pdb') -Destination '.\'

      - name: Upload build result
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: |
            ./OpenTween.zip
            ./OpenTween.pdb
",,,,,,C#
1082,https://github.com/virb3/de4dot-cex,"name: CI

on: [push]

jobs:
  build:

    runs-on: [windows-2019]

    steps:
    - name: Setup MSBuild.exe
      uses: warrenbuckley/Setup-MSBuild@v1
      
    - name: Setup Nuget.exe
      uses: warrenbuckley/Setup-Nuget@v1
      
    - uses: actions/checkout@v1
    - name: Build
      run: |
        git submodule update --init --recursive
        nuget restore de4dot.sln
        msbuild de4dot.sln /p:Configuration=Release /m /verbosity:normal /p:WarningLevel=0
    - name: Create ZIP
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        Compress-Archive -Path Release/* -DestinationPath de4dot-cex
      
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: de4dot-cex.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}",,,,,,C#
1083,https://github.com/henalbrod/blazor.auth0,"name: Github Actions CI

on: [push]

jobs:
  build:    
    
    container: 
      image: mcr.microsoft.com/dotnet/core/sdk:3.1.102-bionic
    
    runs-on: ubuntu-16.04    
    
    steps:    
    
    - uses: actions/checkout@v1
    - name: Initializacion message
      run: echo Initializatin Blazor.Auth0 build!    
      
      
    - name: Build Blazor-Auth0-Shared project.
      run: |        
        dotnet build src/Blazor.Auth0.Shared
        
        
    - name: Build Blazor-Auth0-ClientSide project.   
      run: |
        dotnet build src/Blazor.Auth0.ClientSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build Blazor-Auth0-ServerSide project.
      run: |
        dotnet build src/Blazor.Auth0.ServerSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build AspNetCoreHosted Example.
      run: |        
        dotnet build examples/Examples.AspNetCoreHosted/Server --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build ClientSide Example.
      run: |                
        dotnet build examples/Examples.ClientSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
        
        
    - name: Build ServerSide Example.
      run: |                      
        dotnet build examples/Examples.ServerSide --source packages --source https://api.nuget.org/v3/index.json --configuration Release
       
       
    - name: Publish Blazor-Auth0-Share Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |            
        dotnet nuget push packages/Blazor-Auth0-Share*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 

    - name: Publish Blazor-Auth0-ClientSide Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |
        dotnet nuget push packages/Blazor-Auth0-ClientSide*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 

    - name: Publish Blazor-Auth0-ServerSide Nuget package.
      if: github.ref == 'refs/heads/master'
      continue-on-error: true          
      run: |            
        dotnet nuget push packages/Blazor-Auth0-ServerSide*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json 
",,,,,,C#
1084,https://github.com/jitbit/csvexport,"# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
",,,,,,C#
1085,https://github.com/mattleibow/skiasharpfiddle,"name: Build WPF App
on: [push]
jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: Build with dotnet
      run: dotnet build --configuration Release
",,,,,,C#
115,https://github.com/bk138/multivnc,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install gettext libwxgtk3.0-gtk3-dev libgtk-3-dev libgcrypt20-dev liblzo2-dev
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew uninstall --ignore-dependencies gnutls libgcrypt
          brew install wxwidgets
      - name: Install Windows Build Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        uses: johnwason/vcpkg-action@v4
        id: vcpkg
        with:
          pkgs: wxwidgets
          triplet: x64-windows
          token: ${{ github.token }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} ..
          cmake --build .
          cpack -V -C Debug
      - name: Archive Ubuntu Build Artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Debian Package
          path: build/*.deb
      - name: Archive MacOS Build Artifacts
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC MacOS Package
          path: build/*.dmg
      - name: Archive Windows Build Artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Windows Package
          path: build/*.exe
",,,,,,C++
757,https://github.com/9chu/luastgplus,"name: Build Windows

on:
  push:
    branches: [ master ]
    paths:
      - "".github/workflows/build_windows.yaml""
      - ""**.c""
      - ""**.h""
      - ""**.hpp""
      - ""**.cpp""
      - ""**.cmake""
      - ""**.patch""
      - ""**.ico""
      - ""**.rc""
      - ""**.json""
      - ""**.hpp.in""
      - ""**.py""
      - ""**/CMakeLists.txt""
  repository_dispatch:
    types: [ update ]

jobs:
  build_windows:
    #runs-on: windows-2022
    runs-on: self-hosted

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Prepare
        shell: powershell
        run: |
          # Set git tag
          $PROJECT_TAG=git describe --tags --dirty --match ""v*""
          Add-Content -Path $env:GITHUB_ENV -Value ""PROJECT_TAG=$PROJECT_TAG""
          # Find compiler
          $VCVAR_PATH=vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -find ""VC\**\vcvars64.bat""
          if (-Not (Test-Path -Path ""$VCVAR_PATH"")) { Write-Error ""VC++ compiler not found"" -ErrorAction Stop }
          Add-Content -Path $env:GITHUB_ENV -Value ""VCVAR_PATH=$VCVAR_PATH""
          # Create CPM cache folder
          mkdir /cpm_cache -ErrorAction SilentlyContinue
          Add-Content -Path $env:GITHUB_ENV -Value ""CPM_SOURCE_CACHE=/cpm_cache""
          # Create intermediate folders
          mkdir cmake-build-x64
          mkdir dist

      - name: Build x64 Shipping
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja""
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy shipping build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.exe

      - name: Build x64 Development
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja"" -DLSTG_SHIPPING=OFF
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy development build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.dev.exe
          
      - uses: actions/upload-artifact@v3
        with:
          name: LuaSTGPlus2-${{ env.PROJECT_TAG }}
          path: |
             dist/*.exe
",,,,,,C++
767,https://github.com/jcash/voronoi,"name: Build

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64"", ""-m32""]
        cversion: [c99, c11, c2x]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: sudo apt-get install -y gcc-multilib g++-multilib
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-darwin:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64""]
        cversion: [c99, c11, c2x]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-windows:
    strategy:
      matrix:
        arch:       [amd64, amd64_x86] #, amd64_arm64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Build main
        run: scripts\compile_cl.bat
      - name: Build tests
        run: |
          cd test
          .\compile_cl.bat
      - name: Build examples
        run: |
          cd src\examples
          .\compile_cl.bat
      - name: Run Tests
        run: |
          .\build\main.exe -?
          .\build\main.exe -w 512 -h 512 -n 100 -o citest.png
          .\build\test.exe
          .\build\test_double.exe
          .\build\simple.exe
",,,,,,C++
773,https://github.com/jontio/jaero,"name: build
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: JAERO
      # install MSYS2 for windows
      - name: if windows install MSYS2
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain autoconf libtool mingw-w64-x86_64-cpputest mingw-w64-x86_64-qt5 mingw-w64-x86_64-cmake mingw-w64-x86_64-libvorbis mingw-w64-x86_64-zeromq zip p7zip unzip
      # build for windows
      - name: Windows-CI-Build
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo 'Running in MSYS2!'
          ./JAERO/ci-windows-build.sh
        shell:  msys2 {0}
      # build for linux
      - name: Linux-CI-Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo 'Running in bash!'
          ./JAERO/ci-linux-build.sh          
      # upload windows artifacts    
      - name: Upload windows binary artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_windows
          retention-days: 1
          path: |
            JAERO/JAERO/release/*.zip
      # upload linux artifacts    
      - name: Upload linux binary artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_linux
          retention-days: 1
          path: |
            JAERO/bin/*.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # download all artifacts for this workflow
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
      # Create a release
      - name: Create a release
        uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          title: ""Development Build""
          files: |
            jaero_linux/*.tar.gz
            jaero_windows/*.zip
",,,,,,C++
789,https://github.com/marcocicognani/meetixos,"name: MeetiX CI Build

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Packages
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y gcc g++ nasm build-essential libgmp-dev libmpfr-dev libmpc-dev cmake make ninja-build xorriso grub-common patch wget tar

      - name: Toolchains
        run: |
          pushd Toolchain
          bash Build.sh --rebuild
          popd

      - name: CMake Config
        run: |
          mkdir -p Build/{Debug,Release}

          pushd Build/Debug
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Debug -GNinja
          popd

          pushd Build/Release
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Release -GNinja
          popd

      - name: Build MeetiX Debug
        run: |
          pushd Build/Debug
          ninja repack
          popd

      - name: Build MeetiX Release
        run: |
          pushd Build/Release
          ninja repack
          popd

      - name: Uploading image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: MeetixOS
          path: Build/Release/MeetixOS.iso",,,,,,C++
877,https://github.com/patriciogonzalezvivo/glslviewer,"name: Build and Release
on:
  pull_request:
  push:
env:
  CMAKE_BUILD_TYPE: Release
jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=DEB ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-amd64.deb
          - os: windows-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP -G ""NMake Makefiles"" ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              dir
            build_artifact: glslViewer-*-win64-AMD64.zip
          - os: macos-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-x86_64.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake xorg-dev libglu1-mesa-dev libavcodec-dev libavfilter-dev \
            libavdevice-dev libavformat-dev libavutil-dev libswscale-dev \
            libv4l-dev libjpeg-dev libpng-dev libtiff-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          conda install ffmpeg

      - name: Set up MSVC environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $FfmpegUri = 'https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-lgpl-shared-4.4.zip'
          $FfmpegZipPath = ""$Env:GITHUB_WORKSPACE\ffmpeg.zip""
          $ZlibUri = 'https://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-lib.zip/download'
          $ZlibZipPath = ""$Env:GITHUB_WORKSPACE\zlib.zip""

          $FfmpegPath = ""$Env:GITHUB_WORKSPACE\ffmpeg""

          Start-BitsTransfer -Source ""$FfmpegUri"",""$ZlibUri"" -Destination ""$FfmpegZipPath"",""$ZlibZipPath""

          Expand-Archive -Path ""$FfmpegZipPath"" -DestinationPath ""$FfmpegPath""
          Move-Item -Path ""$FfmpegPath\ffmpeg-*\*"" -Destination ""$FfmpegPath""

          Expand-Archive -Path ""$ZlibZipPath"" -DestinationPath ""$FfmpegPath""

          echo ""CMAKE_PREFIX_PATH=$FfmpegPath"" >>$Env:GITHUB_ENV

      - name: Build
        run: ${{ matrix.build_command }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: glslViewer-${{ matrix.os }}-build
          path: build/${{ matrix.build_artifact }}
          retention-days: 7

  release:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: GlslViewer ${{ github.ref_name }}
          files: |
            glslViewer-ubuntu-latest-build/*
            glslViewer-windows-latest-build/*
            glslViewer-macos-latest-build/*
          generate_release_notes: true
          body: |
            To use the Windows build, please download [FFmpeg 4.4][ffmpeg] and copy `bin\*.dll` alongside `glslViewer.exe`.

            [ffmpeg]: https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-gpl-shared-4.4.zip
",,,,,,C++
916,https://github.com/norbusan/debian-mu,"name: Build & run tests

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - if: contains(matrix.os, 'ubuntu')
        name: ubuntu-deps
        run: |
          sudo apt update
          sudo apt-get install automake autoconf-archive autotools-dev libglib2.0-dev libxapian-dev libgmime-3.0-dev m4 make libtool pkg-config

      - if: contains(matrix.os, 'macos')
        name: macos-deps
        run: |
          brew install autoconf automake libgpg-error libtool pkg-config gettext glib gmime xapian

      - name: configure
        run: ./autogen.sh --disable-guile

      - name: build
        run: make

      - name: test
        run: make test
",,,,,,C++
1461,https://github.com/pfusik/cito,"name: tests
on: push
jobs:
  c-cl-error:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-c test-cl test-error
  cpp-java:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/checkout@main
      - run: make -j3 test-cpp test-java
  cs:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-dotnet@main
      - uses: actions/checkout@main
      - run: make -j3 test-cs
  d:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest
      - uses: actions/checkout@main
      - run: make -j3 test-d
  js-ts:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-js test-ts
  py-swift:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - run: pip install mypy
      - uses: swift-actions/setup-swift@main
      - uses: actions/checkout@main
      - run: make -j3 test-py test-swift
  host-diff:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/setup-node@main
      - uses: actions/checkout@main
      - run: make -j3 host-diff
      - run: make -j3 java/GenBase.java
      - run: make -j3 host-diff-java
      - run: make -j3 test-error FUT_HOST=cs
      - run: make -j3 test-error FUT_HOST=java
      - run: make -j3 test-error FUT_HOST=node
",,,,,,C++
1774,https://github.com/itsmattkc/legoislandrebuilder,"name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Visual C++ 6.0
      run: |
        git clone --depth 1 https://github.com/itsmattkc/MSVC600

    - name: Build
      shell: cmd
      run: |
        call MSVC600/VC98/Bin/vcvars32.bat
        msdev Rebuilder.dsw /make

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.1
      with:
        path:
          Rebuilder/Release/Rebuilder.exe

    - name: Upload to Releases
      shell: bash
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TRAVIS_REPO_SLUG: itsmattkc/LEGOIslandRebuilder
        TRAVIS_COMMIT: ${{ github.sha }}
      run: |
        curl -fLOSs --retry 2 --retry-delay 60 https://github.com/probonopd/uploadtool/raw/master/upload.sh
        ./upload.sh Rebuilder/Release/Rebuilder.exe
",,,,,,C++
1794,https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation,"name: demo

on:
  push:
    branches: [ main ]
    paths:
    - examples/demo/**
  pull_request:
    branches: [ main ]
    paths:
    - examples/demo/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Test demo
      run: make test
      working-directory: examples/demo
      timeout-minutes: 10
",,,,,,C++
1932,https://github.com/wysaid/xege,"name: 测试构建项目

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  TESTING:
    runs-on: windows-2019
    steps:
      - name: 获取源码
        uses: actions/Checkout@v2

      - name: 尝试构建 MSVC 2019 X64 Release
        run: |
          mkdir build
          cd build
          cmake .. -G ""Visual Studio 16 2019"" -A x64
          cmake --build . -j 

",,,,,,C++
1934,https://github.com/llnl/librom,"name: CI
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, labeled, synchronize]
    branches:
      - master

jobs:
  docker-image:
    uses: ./.github/workflows/docker.yml
  code-style:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Artistic Style version (for information)
        run: astyle --version
      - name: Check Stylization
        run: |
            cd ${GITHUB_WORKSPACE}/scripts
            ./stylize.sh astyle
  linux:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
      volumes:
        - /mnt:/mnt
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Build libROM
        run: |
            mkdir ${GITHUB_WORKSPACE}/build
            cd ${GITHUB_WORKSPACE}/build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - name: Build baseline libROM
        if: ${{ github.event.label.name == 'LGTM' || contains(github.event.pull_request.labels.*.name, 'LGTM') }}
        run: |
            cd ${GITHUB_WORKSPACE}/dependencies
            git clone https://github.com/LLNL/libROM.git
            cd libROM
            mkdir build
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - uses: ./.github/workflows/run_tests
  # mac:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install Mac dependencies
  #       run: |
  #           brew install open-mpi
  #           brew install openblas
  #           brew install lapack
  #           brew install scalapack
  #           brew install hdf5
  #     - name: Check out libROM
  #       uses: actions/checkout@v2
  #     - uses: ./.github/workflows/checkout_repo
  #     - name: Build libROM
  #       run: |
  #           export FC=/usr/local/bin/gfortran-10
  #           mkdir ${GITHUB_WORKSPACE}/build
  #           cd ${GITHUB_WORKSPACE}/build
  #           cmake -DCMAKE_BUILD_TYPE=Debug ..
  #           make
  #           cmake -DCMAKE_BUILD_TYPE=Optimized ..
  #           make
  #     - uses: ./.github/workflows/run_tests
",,,,,,C++
1994,https://github.com/pine64/bl_iot_sdk,"name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - run: make
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
      
  build-msys:
    runs-on: windows-latest
    steps:
    - name: setup msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: make
        msystem: MSYS

    - uses: actions/checkout@v2

    - run: make
      shell: msys2 {0}
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
        MAX_MAKE_JOBS: 2
",,,,,,C++
1998,https://github.com/openc2e/openc2e,"name: build

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ main ]

env:
  CTEST_OUTPUT_ON_FAILURE: TRUE
  # GitHub runners have two cores each
  MAKEFLAGS: -j3 -k
  # set some variables for Visual Studio
  MultiProcessorCompilation: true
  UseMultiToolTask: true
  EnforceProcessCountAcrossBuilds: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Download clang-format""
      run: ""wget -o- https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-10_linux-amd64 && chmod +x clang-format-10_linux-amd64""
    - name: ""clang-format""
      run: ""./clang-format-10_linux-amd64 -i src/**/*.cpp src/**/*.h && git diff --exit-code""
      
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,ubuntu-latest,macos-latest]
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Install dependencies (Ubuntu)""
      if: ""startsWith(matrix.os, 'ubuntu-')""
      run: sudo apt-get update && sudo apt-get install libpng-dev libsdl2-dev libsdl2-mixer-dev zlib1g-dev
    - name: ""Configure""
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: ""Build""
      run: cmake --build build --config RelWithDebInfo
    - name: ""Test""
      run: cd build && ctest --build-config RelWithDebInfo
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""openc2e-${{ github.sha }}-${{ runner.os }}""
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""mngplayer2-${{ github.sha }}-${{ runner.os }}"" --component mngplayer2
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: openc2e-${{ github.sha }}-${{ runner.os }}
        path: openc2e-${{ github.sha }}-${{ runner.os }}
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: MNGPlayer2-${{ github.sha }}-${{ runner.os }}
        path: mngplayer2-${{ github.sha }}-${{ runner.os }}
",,,,,,C++
2050,https://github.com/stardustcfw/haku33,"
name: Build Homebrew

on: [push,workflow_dispatch]
jobs:
  build:

    runs-on: ubuntu-latest
    container:
      image: d3fau4/nx-dev:latest
    steps:
    - uses: actions/checkout@v1
    - name: Update repo.
      run: |
        git submodule update --init --recursive
        
    - name: Make app
      run: |
        make -j$(nproc)
        
    - uses: actions/upload-artifact@master
      with:
        name: Homebrew
        path: Haku33.nro
",,,,,,C++
2083,https://github.com/open-dynamic-robot-initiative/master-board,"# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI - Linux via ROS

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          - {ROS_DISTRO: rolling, BUILDER: colcon}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'ici_with_unset_variables source /root/target_ws/install/setup.bash && cd /root/target_ws/build/master_board_sdk && make test'
      IMMEDIATE_TEST_OUTPUT: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci
      - uses: 'ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e'
        env: ${{ matrix.env }}
",,,,,,C++
2095,https://github.com/python-greenlet/greenlet,"name: tests

on: [push, pull_request, workflow_dispatch]

env:
  PYTHONHASHSEED: 1042466059
  ZOPE_INTERFACE_STRICT_IRO: 1
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONDEVMODE: 1
  PYTHONFAULTHANDLER: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # repo settings.
  TWINE_USERNAME: __token__


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, ""3.10"", ""3.11"", ""3.12""]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U twine
    - name: Install greenlet (non-Mac)
      if: ${{ ! startsWith(runner.os, 'Mac') }}
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
      env:
        # Ensure we test with assertions enabled.
        # As opposed to the manylinux builds, which we distribute and
        # thus only use O3 (because Ofast enables fast-math, which has
        # process-wide effects), we test with Ofast here, because we
        # expect that some people will compile it themselves with that setting.
        CPPFLAGS: ""-Ofast -UNDEBUG""
    - name: Install greenlet (Mac)
      if: startsWith(runner.os, 'Mac')
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
        ls -l dist
        # Something in the build system isn't detecting that we're building for both,
        # so we're getting tagged with just x86_64. Force the universal2 tag.
        # (I've verified that the .so files are in fact universal, with both architectures.)
        # The macosx_11_0 tag is conservative: At this writing,
        # on GHA, Python 3.7/3.8/3.9/3.10  all produce that tag, while
        # 3.11/3.12 produce the less restrictive macosx_10_9 tag. (Locally on JAM's mac,
        # the official CPython builds produce 10_9 for everything from 3.9 onward.)
        wheel tags --remove --platform-tag macosx_11_0_universal2 dist/*whl
      env:
        # Unlike the above, we are actually distributing these
        # wheels, so they need to be built for production use.
        CPPFLAGS: ""-O3""
        # Build for both architectures
        ARCHFLAGS: ""-arch x86_64 -arch arm64""

    - name: Check greenlet build
      run: |
        ls -l dist
        twine check dist/*
    - name: Store greenlet wheel
      uses: actions/upload-artifact@v3
      with:
        name: greenlet-${{ runner.os }}-${{ matrix.python-version }}.whl
        path: dist/*whl
    - name: Test
      run: |
        python -VV
        python -c 'import greenlet._greenlet as G; assert G.GREENLET_USE_STANDARD_THREADING'
        python -m unittest discover -v greenlet.tests
    - name: Doctest
      run: |
        sphinx-build -b doctest -d docs/_build/doctrees2 docs docs/_build/doctest2
    - name: Publish package to PyPI (mac)
      # We cannot 'uses: pypa/gh-action-pypi-publish@v1.4.1' because
      # that's apparently a container action, and those don't run on
      # the Mac.
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && startsWith(runner.os, 'Mac')
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        twine upload --skip-existing dist/*

  CodeQL:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ""3.10""
          cache: 'pip'
          cache-dependency-path: setup.py
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          # Set the `CODEQL-PYTHON` environment variable to the Python executable
          # that includes the dependencies
          echo ""CODEQL_PYTHON=$(which python)"" >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp
          # Override the default behavior so that the action doesn't attempt
          # to auto-install Python dependencies
          setup-python-dependencies: false
      - name: Install greenlet
        run: |
          python setup.py build
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  manylinux:

    runs-on: ubuntu-latest
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]
        image:
          - manylinux_2_28_x86_64
          - manylinux2014_aarch64
          - manylinux2014_ppc64le
          - manylinux2014_s390x
          - manylinux2014_x86_64
          - musllinux_1_1_x86_64
          - musllinux_1_1_aarch64
    name: ${{ matrix.image }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build and test greenlet
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}
        run: bash ./make-manylinux
      - name: Store greenlet wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*whl
          name: ${{ matrix.image }}_wheels.zip
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/
",,,,,,C++
11,https://github.com/mikeakohn/naken_asm,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: ""Windows Latest Mingw"",
            os: ""windows-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: false
          }
        - {
            name: ""Ubuntu Latest GCC"",
            os: ""ubuntu-latest"",
            cc: ""gcc"",
            cxx: ""g++"",
            runtests: true
          }
        - {
            name: ""MacOS Latest Clang"",
            os: ""macos-latest"",
            cc: ""clang"",
            cxx: ""clang++"",
            runtests: true
          }

    steps:
      - uses: actions/checkout@v2

      - name: Update apt (Ubuntu only)
        if: startsWith(matrix.config.os, 'ubuntu')
        run: sudo apt update

      - name: Configure
        shell: bash
        run: ./configure

      - name: Make
        shell: bash
        run: make

      - name: Tests
        if: matrix.config.runtests == true
        shell: bash
        run: make tests
",,,,,,C++
16,https://github.com/hamletdufromage/aio-switch-updater,"name: Build AIO-switch-updater

on: 
  push:
  workflow_dispatch:

jobs:
  AIO-switch-updater:
    runs-on: ubuntu-latest
    #container: hamletdufromage/devkita64_devkitarm
    container: devkitpro/devkita64
    steps:
    - uses: actions/checkout@v1

    - name: update repo
      run: |
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater/lib/borealis
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater
        git config --global --add safe.directory /__w/aio-switch-updater/aio-switch-updater/TegraExplorer
        git submodule update --init --recursive

    - name: install dependencies
      run: |
        sudo apt update -y
        sudo apt install build-essential -y

    - name: Building aio-switch-updater
      run: |
        make -C aiosu-forwarder -f Makefile
        make -j$(nproc)
        
    - uses: actions/upload-artifact@master
      with:
        name: aio-switch-updater
        path: aio-switch-updater.nro
",,,,,,C++
45,https://github.com/librevault/librevault,"name: CI
on:
  push:
    branches: [ master, develop, ""feature/githubactions"" ]
  pull_request:
    branches: [ master, develop, ""feature/githubactions"" ]
jobs:
  build-windows:
    runs-on: windows-2019
    steps:
      - name: Install system-wide dependencies
        run: |
          choco install innosetup
          python -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: |
            ~/.conan/data
            C:/.conan
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          .venv\scripts\activate.ps1
          cd build
          conan profile new --detect --force default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
#      - name: Build application
#        run: |
#          cd build
#          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=built_binaries -DBUILD_UPDATER=OFF ..
#          cmake --build . --config Release
#      - name: Package application
#        run: |
#          .venv\scripts\activate.ps1
#          cd build
#          cmake --install .
#          python ../scripts/configure_innosetup.py --packaging_dir pack --install_dir built_binaries
#          pushd pack
#          iscc librevault.iss
#          popd
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-innosetup-windows-x64
#          path: build/pack/result.exe

  build-linux:
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install system-wide dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bash git python3-pip python3.8-dev python3.8-venv build-essential libwayland-dev libglib2.0-dev libgl-dev ninja-build ccache
          sudo python3.8 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3.8 -m venv .venv
          poetry install
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          cd build
          conan profile new --detect --force default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.build_type=Release default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - run: |
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
          mkdir -p $HOME/.local/bin
          curl -L ""$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz"" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
          echo ""$HOME/.local/bin"" >> $GITHUB_PATH
        env:
          LINK: https://github.com/mozilla/sccache/releases/download
          SCCACHE_VERSION: 0.2.13
      - name: Build application
        run: |
          cd build
          cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache

#  build-linux-snap:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - uses: snapcore/action-build@v1
#        id: snapcraft
#      - uses: actions/upload-artifact@v2
#        with:
#          name: librevault-snap-linux-x64
#          path: ${{ steps.snapcraft.outputs.snap }}
#      - uses: snapcore/action-publish@v1
#        if: github.event_name == 'push'
#        with:
#          store_login: ${{ secrets.SNAPCRAFT_STORE_LOGIN }}
#          snap: ${{ steps.snapcraft.outputs.snap }}
#          release: edge
#
  build-macos:
    runs-on: macos-11
    env:
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - name: Install system-wide dependencies
        run: |
          brew install cmake ccache ninja sccache
          python3 -m pip install poetry
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare virtualenv for tools
        run: |
          python3 -m venv .venv
          poetry install
          source .venv/bin/activate
      - name: Restore Conan cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-packages
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}-
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Install Conan packages
        run: |
          source .venv/bin/activate
          mkdir -p build
          pushd build
          conan profile new --detect --force default
          conan install .. --build=outdated --build=cascade
          conan remove ""*"" --src --builds --system-reqs --force
      - name: Compiler caches
        uses: actions/cache@v2
        env:
          cache-name: cache-sccache
        with:
          path: |
            ~/.ccache
            ~/Library/Caches/Mozilla.sccache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Build application
        run: |
          mkdir -p build
          pushd build
          cmake .. -GNinja -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_OBJC_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=../packaging
          cmake --build .
        env:
          RUSTC_WRAPPER: sccache
#          cpack
#      - name: Upload artifact
#        uses: actions/upload-artifact@v1
#        with:
#          name: librevault-dmg-macos-x64
#          path: build/Librevault.dmg
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
#        - windows-2019
#        - windows-2022
        - ubuntu-20.04
        - macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run tests
        run: cargo test
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Rust Cache
        uses: Swatinem/rust-cache@v1.3.0
      - name: Run lint
        run: cargo fmt -- --check
",,,,,,C++
84,https://github.com/loganmc10/m64p,"name: Build project
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: registry.fedoraproject.org/fedora:latest
    steps:
      - name: Update and install packages
        run: |
          dnf -y update
          dnf -y install pkgconf-pkg-config which cmake ninja-build make nasm qt6-qtwebsockets-devel hidapi-devel zlib-devel libpng-devel SDL2_net-devel wget zip git ShellCheck
      - uses: actions/checkout@v3
      - name: Check shell scripts
        run: |
          shellcheck -o all build.sh clean.sh link-mac.sh pull_repos.sh
      - name: Run build script
        run: |
          git config --global --add safe.directory /__w/simple64/simple64
          ./build.sh
  build-windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-hidapi
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-SDL2_net
            mingw-w64-x86_64-qt6
            mingw-w64-x86_64-python3-pip
            mingw-w64-x86_64-python3-pyopenssl
            mingw-w64-x86_64-nasm
            git
            zip
      - name: Run build script
        run: msys2 -c 'export SIMPLE64_AUTOUPDATE=1; ./build.sh'
      - name: Upload zip
        uses: actions/upload-artifact@v3
        with:
          name: simple64-win64
          path: simple64-*.zip
  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - name: brew update
        run: |
          brew update
          brew upgrade || true
          brew install hidapi sdl2_net sdl2 ninja molten-vk vulkan-loader qt@6
      - name: Run build script
        run: |
          sudo sh ./build.sh
      - name: Upload dmg
        uses: actions/upload-artifact@v3
        with:
          name: simple64-osx
          path: simple64/simple64-*.dmg
",,,,,,C++
124,https://github.com/ossrs/state-threads,"name: ""Test""

# @see https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestbranchestags
on: [push, pull_request]

jobs:
  utest:
    name: actions-test-utest
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ################################################################
      # Tests
      - name: Build test image
        run: docker build --tag st:test -f Dockerfile.test .
      # For utest
      - name: Run ST utest
        run: docker run --rm st:test bash -c 'make linux-debug-utest && ./obj/st_utest'

  coverage:
    name: actions-test-coverage
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      ################################################################
      # Tests
      - name: Build coverage image
        run: docker build --tag st:cov -f Dockerfile.cov .
      # For coverage, only allow push to branch(refs/heads/4.0release) or pull requests(refs/pull/2536/merge).
      - name: Run ST covergae
        if: ${{ startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/pull/') }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          # The hash of commit.
          ST_SHA=${{ github.sha }}
          # Note that the root of ST, must contains .git, for report fixing.
          ST_PROJECT=/st
          # The github.ref is, for example, refs/heads/4.0release
          ST_BRANCH=$(echo ${{ github.ref }}| awk -F 'refs/heads/' '{print $2}'| awk -F '/' '{print $1}')
          # The github.ref is, for example, refs/pull/2536/merge
          ST_PR=$(echo ${{ github.ref }}| awk -F 'refs/pull/' '{print $2}'| awk -F '/' '{print $1}')
          #
          echo ""For github.ref=${{ github.ref }}, github.sha=${{ github.sha }}""
          echo ""ST_BRANCH=$ST_BRANCH, ST_PR=$ST_PR, ST_SHA=$ST_SHA, ST_PROJECT=$ST_PROJECT""
          docker run --rm --env CODECOV_TOKEN=$CODECOV_TOKEN \
            --env ST_BRANCH=$ST_BRANCH --env ST_PR=$ST_PR --env ST_SHA=$ST_SHA --env ST_PROJECT=$ST_PROJECT \
            st:cov bash -c 'make linux-debug-gcov && ./obj/st_utest && bash auto/codecov.sh'



",,,,,,C++
153,https://github.com/averne/fizeau,"name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    container: devkitpro/devkita64:20220216

    steps:
    - name: Install 7z
      run: sudo apt update && sudo apt install -y p7zip-full

    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Build
      run: |
        make -C common -j$(nproc)
        make dist -j$(nproc)
        make dist-chl -j$(nproc)

    - uses: actions/upload-artifact@master
      with:
        name: Fizeau
        path: out/Fizeau-*.zip
",,,,,,C++
196,https://github.com/firoorg/firo,"name: Continuous Integration on Master
on:
  push:
    paths-ignore:
    - 'doc/**'
    - '**/README.md'
    branches:
    - master
  pull_request:
    paths-ignore:
    - 'doc/**'
    - '**/README.md'
    branches:
    - master
env:
  SOURCE_ARTIFACT: source
jobs:
  create-source-distribution:
    name: Create Source Distribution
    runs-on: ubuntu-latest
    env:
      ARTIFACT_DIR: source
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Required Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y libboost-all-dev libdb-dev libdb++-dev libevent-dev bison
    - name: Create Distribution Tarball
      run: |
        ./autogen.sh
        ./configure --with-incompatible-bdb ac_cv_lib_tor_tor_main=yes
        make dist
    - name: Download Dependencies
      run: make -C depends download
    - name: Create Dependencies Tarball
      run: tar -czf depends.tar.gz depends
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv depends.tar.gz firo-*.tar.gz $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
        path: ${{ env.ARTIFACT_DIR }}
  build-linux:
    name: Build for Linux
    needs: create-source-distribution
    runs-on: ubuntu-latest
    env:
      ARTIFACT_DIR: linux-binaries
      TEST_LOG_ARTIFACT_DIR: test-logs
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf firo-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Install Required Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-zmq
    - name: Build Dependencies
      run: make -C depends -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Firo
      run: |
        ./configure --disable-jni --enable-elysium --enable-tests --with-comparison-tool=no --prefix=$(realpath depends/x86_64-pc-linux-gnu)
        make -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Run Unit Tests
      run: make check
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Run RPC Tests
      env:
        TIMEOUT: 600
      run: qa/pull-tester/rpc-tests.py -extended
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{firo-cli,firo-tx,firod,qt/firo-qt} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: linux-binaries
        path: ${{ env.ARTIFACT_DIR }}
    - name: Prepare Test Logs for Artifact
      if: failure()
      run: |
        tor_log=$SOURCE_ARTIFACT/src/tor/test-suite.log
        firo_log=$SOURCE_ARTIFACT/src/test-suite.log

        mkdir -p $TEST_LOG_ARTIFACT_DIR

        if test -f $tor_log; then
          mv $tor_log $TEST_LOG_ARTIFACT_DIR/tor.log
        fi

        if test -f $firo_log; then
          mv $firo_log $TEST_LOG_ARTIFACT_DIR/firo.log
        fi
    - name: Upload Test Logs Artifact
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: test-logs
        path: ${{ env.TEST_LOG_ARTIFACT_DIR }}
  build-windows:
    name: Build for Windows
    needs: create-source-distribution
    runs-on: ubuntu-20.04
    env:
      ARTIFACT_DIR: windows-binaries
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf firo-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Install Required Packages
      run: |
        sudo apt-get update
        sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64
    - name: Switch MinGW GCC and G++ to POSIX Threading
      run: |
        sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - name: Build Dependencies
      run: make -C depends -j$(nproc) HOST=x86_64-w64-mingw32
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Firo
      run: |
        ./configure --without-libs --disable-jni --enable-elysium --prefix=$(realpath depends/x86_64-w64-mingw32)
        make -j$(nproc)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{firo-cli.exe,firo-tx.exe,firod.exe,qt/firo-qt.exe} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: windows-binaries
        path: ${{ env.ARTIFACT_DIR }}
  build-mac:
    name: Build for macOS
    needs: create-source-distribution
    runs-on: macos-latest
    env:
      ARTIFACT_DIR: mac-binaries
    steps:
    - name: Getting Source
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.SOURCE_ARTIFACT }}
    - name: Extract Archives
      run: |
        tar -xzf depends.tar.gz
        tar -xzf firo-*.tar.gz --strip-components=1
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Use Xcode instead of Command Line Tools
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
    - name: Install Required Packages
      run: brew install automake coreutils pkg-config
      # Workaround for macOS: https://github.com/actions/runner/issues/2958
    - name: Install setuptools
      run: sudo -H pip install setuptools
    - name: Build Dependencies
      run: make -C depends -j$(sysctl -n hw.activecpu)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Build Firo
      run: |
        ./configure --disable-jni --enable-elysium --prefix=$(grealpath depends/x86_64-apple-darwin*)
        make -j$(sysctl -n hw.activecpu)
      working-directory: ${{ env.SOURCE_ARTIFACT }}
    - name: Prepare Files for Artifact
      run: |
        mkdir -p $ARTIFACT_DIR
        mv $SOURCE_ARTIFACT/src/{firo-cli,firo-tx,firod,qt/firo-qt} $ARTIFACT_DIR
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: mac-binaries
        path: ${{ env.ARTIFACT_DIR }}
",,,,,,C++
202,https://github.com/sisong/hdiffpatch,"name: ci
on: [push, pull_request]
jobs:
  make-build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - name: makeInit
        run: |
          make LZMA=0 ZSTD=0 MD5=0 -j
          make clean
      - name: makeUnDef
        run: |
          git clone --depth=1 https://github.com/sisong/libmd5.git ../libmd5
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
          make DIR_DIFF=0 MT=0 BSD=0 VCD=0 ZLIB=0 BZIP2=0 -j
          make clean
      - name: makeAll
        run: |
          make -j
          make clean
      - name: makeByCode
        run: |
          git clone --depth=1 https://github.com/sisong/zlib.git ../zlib
          git clone --depth=1 https://github.com/sisong/bzip2.git ../bzip2
          make ZLIB=1 BZIP2=1 -j

  clang-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: installClang
        run: |
          sudo apt-get install -y llvm clang
      - name: initAndClone
        run: |
          git clone --depth=1 https://github.com/sisong/libmd5.git ../libmd5
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
      - name: makeByClang
        run: |
          make CL=1 -j

  xcode-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: initAndClone
        run: |
          git clone --depth=1 https://github.com/sisong/libmd5.git ../libmd5
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
      - name: buildByXcode
        run: |
          xcodebuild -workspace builds/xcode/HDiffPatch.xcworkspace -scheme hdiffz -configuration Release OBJROOT=$PWD/bin SYMROOT=$PWD/bin
          xcodebuild -workspace builds/xcode/HDiffPatch.xcworkspace -scheme hpatchz -configuration Release OBJROOT=$PWD/bin SYMROOT=$PWD/bin
          xcodebuild -workspace builds/xcode/HDiffPatch.xcworkspace -scheme unitTest -configuration Release OBJROOT=$PWD/bin SYMROOT=$PWD/bin

  macos-ndk-build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: nttld/setup-ndk@v1.0.6
        with:
          ndk-version: r16b
      - name: buildByAndroidNDK
        run: |
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
          cd ./builds/android_ndk_jni_mk
          ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk NDK_APPLICATION_MK=./Application.mk

  windows-ndk-build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: nttld/setup-ndk@v1.0.6
        with:
          ndk-version: r16b
      - name: buildByAndroidNDK
        run: |
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
          git clone --depth=1 https://github.com/sisong/bzip2.git ../bzip2
          cd ./builds/android_ndk_jni_mk
          ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk NDK_APPLICATION_MK=./Application.mk BSD=1 BZIP2=1

  ubuntu-ndk-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: nttld/setup-ndk@v1.0.6
        with:
          ndk-version: r16b
      - name: buildByAndroidNDK
        run: |
          sudo apt install libncurses5
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/bzip2.git ../bzip2
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
          cd ./builds/android_ndk_jni_mk
          ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk NDK_APPLICATION_MK=./Application.mk BSD=1 BZIP2=1 VCD=1

  vc-build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64
      - name: initAndClone
        run: |
          git clone --depth=1 https://github.com/sisong/zlib.git ../zlib
          git clone --depth=1 https://github.com/sisong/bzip2.git ../bzip2
          git clone --depth=1 https://github.com/sisong/libmd5.git ../libmd5
          git clone --depth=1 https://github.com/sisong/lzma.git ../lzma
          git clone --depth=1 https://github.com/sisong/zstd.git ../zstd
      - name: buildByVC
        run: |
          msbuild builds/vc/HDiffPatch.sln -t:rebuild -verbosity:diag -property:Configuration=Release
",,,,,,C++
250,https://github.com/jmpews/dobby,"name: Builder

on:
  push:
    branches:
      - master

env:
  CMAKE_VERSION: 3.25.2
  LLVM_VERSION: 15.0.6
  NDK_VERSION: r25b

jobs:
  delete_latest_release:
    runs-on: ubuntu-latest
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: delete latest release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  linux_and_android:
    runs-on: ubuntu-latest
    needs: delete_latest_release
    steps:
    - name: checkout master
      uses: actions/checkout@master

    - name: init linux cross compile env
      run: |
        sh scripts/setup_linux_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile linux
      run: |
        python3 scripts/platform_builder.py --platform=linux --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION
        cp include/dobby.h build/linux
        tar -zcvf build/dobby-linux-all.tar.gz build/linux
        cp build/dobby-linux-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile android
      run: |
        python3 scripts/platform_builder.py --platform=android --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION --llvm_dir=$HOME/opt/llvm-$LLVM_VERSION --android_ndk_dir=$HOME/opt/ndk-$NDK_VERSION
        cp include/dobby.h build/android
        tar -zcvf build/dobby-android-all.tar.gz build/android
        cp build/dobby-android-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-linux-all.tar.gz,build/dobby-android-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true

  macos_and_iphoneos:
    runs-on: macos-latest
    needs: delete_latest_release
    steps:
    - name: checkout dev
      uses: actions/checkout@master

    - name: init macos compile env
      run: |
        sh scripts/setup_macos_cross_compile.sh
        mkdir -p artifact
      shell: bash

    - name: compile macos
      run: |
        python3 scripts/platform_builder.py --platform=macos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/macos
        tar -zcvf build/dobby-macos-all.tar.gz build/macos
        cp build/dobby-macos-all.tar.gz artifact/
        
      shell: bash
    
    - name: compile iphoneos
      run: |
        python3 scripts/platform_builder.py --platform=iphoneos --arch=all --cmake_dir=$HOME/opt/cmake-$CMAKE_VERSION/CMake.app/Contents
        cp include/dobby.h build/iphoneos
        tar -zcvf build/dobby-iphoneos-all.tar.gz build/iphoneos
        cp build/dobby-iphoneos-all.tar.gz artifact/
      shell: bash

    - name: print output
      run: |
        ls -lha .

    - name: update release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: latest
        body: ""a lightweight, multi-platform, multi-architecture exploit hook framework""
        artifacts: ""build/dobby-macos-all.tar.gz,build/dobby-iphoneos-all.tar.gz""
        allowUpdates: true
        replacesArtifacts: true",,,,,,C++
322,https://github.com/garux/netradiant-custom,"name: build

on: [workflow_dispatch]

jobs:
  windows-msys:
    name: ${{ matrix.config }} Windows ${{ matrix.arch }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        cc: [gcc]
        include:
          - arch: x86
            msystem: MINGW32
            prefix: mingw-w64-i686

          - arch: x86_64
            msystem: MINGW64
            prefix: mingw-w64-x86_64

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - uses: msys2/setup-msys2@v2
      with:
        install: ${{ matrix.prefix }}-qt5-base ${{ matrix.prefix }}-libxml2 git
        msystem: ${{ matrix.msystem }}
        path-type: minimal
        release: false
        update: false

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build
      run: |
        make DOWNLOAD_GAMEPACKS=no MAKEFILE_CONF=msys2-Makefile.conf BUILD=release -j$(nproc)
        wget https://www.dropbox.com/s/b1xpajzfa6yjlzf/netradiant-custom-extra-gamepacks.zip
        unzip -o netradiant-custom-extra-gamepacks.zip -d ""install""
        wget https://www.dropbox.com/s/hcgkwzzmja3m6c0/netradiant-custom-extra-win.zip
        unzip -o netradiant-custom-extra-win.zip -d ""install""

    - uses: actions/upload-artifact@v3
      with:
        name: Windows-${{ matrix.arch }}
        path: install/
        if-no-files-found: error

  linux:
    name: ${{ matrix.config }} Linux ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64]

    steps:
    - name: Install tools
      run: |
          sudo apt-get -qq update
          sudo apt-get -y install mesa-common-dev qtbase5-dev
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Build
      run: |
        make -j 4 DOWNLOAD_GAMEPACKS=no CXXFLAGS=""-Wno-deprecated-copy""
        wget https://www.dropbox.com/s/b1xpajzfa6yjlzf/netradiant-custom-extra-gamepacks.zip
        unzip -o netradiant-custom-extra-gamepacks.zip -d ""install""

    - uses: actions/upload-artifact@v3
      with:
        name: Linux-${{ matrix.arch }}
        path: install/
        if-no-files-found: error

  create-testing:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: [windows-msys, linux]
    runs-on: windows-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Create binary archives
        shell: cmd
        run: |
          ""%programfiles%\7-Zip\7z.exe"" a -r netradiant-custom-windows-x86_64.zip  ""%CD%\Windows-x86_64\*""
          ""%programfiles%\7-Zip\7z.exe"" a -r netradiant-custom-linux-x86_64.zip    ""%CD%\Linux-x86_64\*""

      - name: Create latest build
        uses: ec-/action-automatic-releases@test
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ""latest""
          prerelease: true
          title: Development Build
          files: |
            *.zip
",,,,,,C++
797,https://github.com/matsui528/rii,"name: Build

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10']
        # https://stackoverflow.com/questions/57810623/how-to-select-the-c-c-compiler-used-for-a-github-actions-job:
        compiler: [gcc, clang, cl]
        exclude:
          # ubuntu: gcc
          - os: ubuntu-latest
            compiler: clang
          - os: ubuntu-latest
            compiler: cl
          # mac: gcc, clang
          - os: macos-latest
            compiler: cl
          # win: cl
          - os: windows-latest
            compiler: clang
          - os: windows-latest
            compiler: gcc
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
    - name: Print machine info
      run: |
        uname -a
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Install Rii
      run: |
        make build
    - name: Test with CC=${{ matrix.compiler }}
      env:
        CC: ${{ matrix.compiler }}
      run: |
        make test

        ",,,,,,C++
1884,https://github.com/mkleehammer/pyodbc,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '38 0 * * 2'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
",,,,,,C++
1928,https://github.com/oscarhiggott/pymatching,"name: ci

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
     - master

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Build SDist
      run: pipx run build --sdist

    - name: Check metadata
      run: pipx run twine check dist/*

    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz


  build_wheels:
    runs-on: ${{ matrix.os_dist.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ""10.15""
      CIBW_BUILD: ""${{ matrix.os_dist.dist }}""
      CIBW_ARCHS_MACOS: ""x86_64 universal2 arm64""
      CIBW_BEFORE_BUILD: pip install --upgrade ninja
      CIBW_TEST_REQUIRES: pytest stim~=1.10.dev1666411378
      CIBW_TEST_COMMAND: pytest {project}/tests
    strategy:
      fail-fast: false
      matrix:
        os_dist: [
          # macosx x86_64
          {os: macos-latest, dist: cp36-macosx_x86_64},
          {os: macos-latest, dist: cp37-macosx_x86_64},
          {os: macos-latest, dist: cp38-macosx_x86_64},
          {os: macos-latest, dist: cp39-macosx_x86_64},
          {os: macos-latest, dist: cp310-macosx_x86_64},
          {os: macos-latest, dist: cp311-macosx_x86_64},
          # macosx arm64
          {os: macos-latest, dist: cp38-macosx_arm64},
          {os: macos-latest, dist: cp39-macosx_arm64},
          {os: macos-latest, dist: cp310-macosx_arm64},
          {os: macos-latest, dist: cp311-macosx_arm64},
          # macosx universal2
          {os: macos-latest, dist: cp38-macosx_universal2},
          {os: macos-latest, dist: cp39-macosx_universal2},
          {os: macos-latest, dist: cp310-macosx_universal2},
          {os: macos-latest, dist: cp311-macosx_universal2},

          # windows amd64
          {os: windows-latest, dist: cp36-win_amd64},
          {os: windows-latest, dist: cp37-win_amd64},
          {os: windows-latest, dist: cp38-win_amd64},
          {os: windows-latest, dist: cp39-win_amd64},
          {os: windows-latest, dist: cp310-win_amd64},
          {os: windows-latest, dist: cp311-win_amd64},
          # windows win32
          {os: windows-latest, dist: cp36-win32},
          {os: windows-latest, dist: cp37-win32},
          # scipy install fails
#          {os: windows-latest, dist: cp38-win32},
#          {os: windows-latest, dist: cp39-win32},
#          {os: windows-latest, dist: cp310-win32},
#          {os: windows-latest, dist: cp311-win32},
          # For arm64, get error ""cibuildwheel: No build identifiers selected""
#          {os: windows-latest, dist: cp39-win_arm64},
#          {os: windows-latest, dist: cp310-win_arm64},
#          {os: windows-latest, dist: cp311-win_arm64},

          # ubuntu x86_64
          {os: ubuntu-latest, dist: cp36-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp37-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp38-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp39-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp310-manylinux_x86_64},
          {os: ubuntu-latest, dist: cp311-manylinux_x86_64},
          # ubuntu i686
          {os: ubuntu-latest, dist: cp36-manylinux_i686},
          {os: ubuntu-latest, dist: cp37-manylinux_i686},
          # scipy built distribution not available and build fails on manylinux_i686 for python 3.8 up
#          {os: ubuntu-latest, dist: cp38-manylinux_i686},
#          {os: ubuntu-latest, dist: cp39-manylinux_i686},
#          {os: ubuntu-latest, dist: cp310-manylinux_i686},
#          {os: ubuntu-latest, dist: cp311-manylinux_i686},
          # Don't include musllinux as it has g++-9 (need g++-10 for <bits>)
#          {os: ubuntu-latest, dist: cp36-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp37-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp38-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp39-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp310-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp311-musllinux_x86_64},
#          {os: ubuntu-latest, dist: cp36-musllinux_i686},
#          {os: ubuntu-latest, dist: cp37-musllinux_i686},
#          {os: ubuntu-latest, dist: cp38-musllinux_i686},
#          {os: ubuntu-latest, dist: cp39-musllinux_i686},
#          {os: ubuntu-latest, dist: cp310-musllinux_i686},
#          {os: ubuntu-latest, dist: cp311-musllinux_i686},
        ]
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - name: Install g++
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install gcc-10 g++-10

    - uses: pypa/cibuildwheel@v2.11.1

    - name: Verify clean directory
      run: git diff --exit-code
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        path: wheelhouse/*.whl
  benchmark_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: cmake .
      - run: cmake --build . --target pymatching_perf --config Release
      - run: Release\pymatching_perf.exe
  benchmark:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_perf
      - run: ./pymatching_perf
  gtest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - run: CC=gcc-10 CXX=g++-10 cmake .
        if: matrix.os == 'ubuntu-latest'
      - run: cmake .
        if: matrix.os == 'macos-latest'
      - run: make pymatching_tests
      - run: ./pymatching_tests
  pip_install:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [""3.10""]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov

      - name: Build and install
        run: pip install --verbose -e .

      - name: Test without stim
        run: python -m pytest tests

      - name: Add stim
        run: python -m pip install stim~=1.10.dev1666411378

      - name: Test with stim using coverage
        run: python -m pytest tests --cov=./src/pymatching --cov-report term

      - name: flake8
        run: flake8 ./src ./tests

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pandoc
        run: |
          sudo apt install pandoc
          python -m pip install pandoc

      - name: Add sphinx requirements
        run: python -m pip install -r ./docs/sphinx_docs/requirements.txt

      - name: Build and install PyMatching
        run: pip install --verbose .

      - name: Build docs
        run: cd docs/sphinx_docs && make html
  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Add requirements
        run: python -m pip install --upgrade cmake>=3.12 ninja==1.10.2.4 pytest flake8 pytest-cov stim~=1.10.dev1666411378
      - name: Build and install
        run: pip install --verbose -e .
      - name: Run tests and collect coverage
        run: pytest tests --cov=./src/pymatching --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
#  upload_all:
#    name: Upload to pypi
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/setup-python@v4
#        with:
#          python-version: ""3.9""
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@v1.5.1
#        with:
#          password: ${{ secrets.pypi_password }}
",,,,,,C++
87,https://github.com/skyline-emu/skyline,"name: CI

on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

jobs:
  build:
    # Skip 'labeled' events that didn't add the 'ci' label
    if: |
      github.event_name != 'pull_request' ||
      github.event.action != 'labeled' ||
      github.event.label.name == 'ci'
    runs-on: ubuntu-latest
    env:
      JVM_OPTS: -Xmx6G
      IS_SKYLINE_SIGNED: ${{ secrets.KEYSTORE != '' }}
      UPLOAD_ARTIFACTS: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'ci') }}
      CMAKE_VERSION: ""3.22.1""
      NDK_VERSION: ""25.0.8775105""

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Restore CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 3Gi

      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-${{ hashFiles('app/**.kt', 'app/**.java') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-${{ hashFiles('app/**/*.xml') }}-
            ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle') }}-
            ${{ runner.os }}-gradle-

      - name: Install Ninja Build
        run: |
          sudo apt-get install -y ninja-build
          ln -s /usr/bin/ninja .

      - name: Install CMake & Android NDK
        run: echo ""yes"" | $ANDROID_HOME/tools/bin/sdkmanager ""cmake;${{ env.CMAKE_VERSION }}"" ""ndk;${{ env.NDK_VERSION }}"" --channel=3 | grep -v = || true

      - name: Decode Keystore
        if: env.IS_SKYLINE_SIGNED == 'true'
        env:
          KEYSTORE_ENCODED: ${{ secrets.KEYSTORE }}
        run: echo $KEYSTORE_ENCODED | base64 --decode > ""/home/runner/keystore.jks""

      - name: Android Assemble
        env:
          SIGNING_STORE_PATH: ""/home/runner/keystore.jks""
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          CMAKE_C_COMPILER_LAUNCHER: ""ccache""
          CMAKE_CXX_COMPILER_LAUNCHER: ""ccache""
          CCACHE_COMPILERCHECK: ""string:${{ env.NDK_VERSION }}""
        run: ./gradlew --stacktrace --configuration-cache --build-cache --parallel --configure-on-demand assembleFullRelease assembleFullReldebug

      - name: Rename APKs (Signed)
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk skyline-$GITHUB_RUN_NUMBER-reldebug.apk
          mv app/build/outputs/apk/full/release/app-full-release.apk skyline-$GITHUB_RUN_NUMBER-release.apk

      - name: Upload Signed Debug APK
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-reldebug.apk
          path: skyline-${{ github.run_number }}-reldebug.apk

      - name: Upload Signed Release APK
        if: env.IS_SKYLINE_SIGNED == 'true' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-release.apk
          path: skyline-${{ github.run_number }}-release.apk

      - name: Rename APKs (Unsigned)
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        run: |
          mv app/build/outputs/apk/full/reldebug/app-full-reldebug.apk skyline-$GITHUB_RUN_NUMBER-unsigned-reldebug.apk
          mv app/build/outputs/apk/full/release/app-full-release.apk skyline-$GITHUB_RUN_NUMBER-unsigned-release.apk

      - name: Upload Unsigned Debug APK
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-unsigned-reldebug.apk
          path: skyline-${{ github.run_number }}-unsigned-reldebug.apk

      - name: Upload Unsigned Release APK
        if: env.IS_SKYLINE_SIGNED == 'false' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: skyline-${{ github.run_number }}-unsigned-release.apk
          path: skyline-${{ github.run_number }}-unsigned-release.apk
",,,,,,C++
101,https://github.com/stateos/stateos,"name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  build:
    name: build test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install dependencies
      run: |
        sudo apt-get -y -qq update
        sudo apt-get -y -qq install cmake ninja-build
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: |
        cmake -S. -Bbuild -GNinja
        cmake --build build -v
  example:
    name: example test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: bash ./.example-test.sh
  stdcxx:
    name: stdc++ test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: bash ./.stdc++-test.sh
  unit:
    name: unit test
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v3
    - name: checkout submodules
      run: git submodule update --init --remote --recursive
    - name: install arm-none-eabi-gcc
      run: |
        wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi.tar.xz
        echo ""${{github.workspace}}/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin"" >> $GITHUB_PATH
    - name: check arm-none-eabi-gcc version
      run: arm-none-eabi-gcc -v
    - name: make test
      run: make all -f .unit-test.make
",,,,,,C++
113,https://github.com/alexandrerouma/sdrplusplus,"name: Build Binaries

on:
    push:
        branches-ignore:
        - nightly
    pull_request:
        branches-ignore:
        - nightly

env:
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Release
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    build_windows:
        runs-on: windows-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Download PothosSDR
          run: Invoke-WebRequest -Uri ""https://downloads.myriadrf.org/builds/PothosSDR/PothosSDR-2020.01.26-vc14-x64.exe"" -OutFile ${{runner.workspace}}/pothos.exe

        - name: Install PothosSDR
          run: mkdir ""C:/Program Files/PothosSDR"" ; 7z x ${{runner.workspace}}/pothos.exe -o""C:/Program Files/PothosSDR/""

        - name: Download libusb
          run: Invoke-WebRequest -Uri ""https://github.com/libusb/libusb/releases/download/v1.0.23/libusb-1.0.23.7z"" -OutFile ${{runner.workspace}}/libusb.7z

        - name: Patch Pothos with earlier libusb version
          working-directory: ${{runner.workspace}}
          run: 7z x libusb.7z -olibusb_old ; rm ""C:/Program Files/PothosSDR/bin/libusb-1.0.dll"" ; cp ""libusb_old/MS64/dll/libusb-1.0.dll"" ""C:/Program Files/PothosSDR/bin/""
 
        - name: Download SDRPlay API
          run: Invoke-WebRequest -Uri ""https://drive.google.com/uc?id=12UHPMwkfa67A11QZDmpCT4iwHnyJHWuu&confirm=t"" -OutFile ${{runner.workspace}}/SDRPlay.zip

        - name: Install SDRPlay API
          run: 7z x ${{runner.workspace}}/SDRPlay.zip -o""C:/Program Files/""

        - name: Download codec2
          run: git clone https://github.com/AlexandreRouma/codec2

        - name: Prepare MinGW
          run: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c ""pacman --noconfirm -S --needed base-devel mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja""

        - name: Prepare build for codec2
          run: cd codec2 ; mkdir build ; cd build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c ""cmake .. -DCMAKE_GNUtoMS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-static-libgcc""

        - name: Build codec2
          run: cd codec2/build ; C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 -c ""ninja""

        - name: Install codec2
          run: mkdir ""C:/Program Files/codec2"" ; mkdir ""C:/Program Files/codec2/include"" ; mkdir ""C:/Program Files/codec2/include/codec2"" ; mkdir ""C:/Program Files/codec2/lib"" ; cd ""codec2"" ; xcopy ""src"" ""C:/Program Files/codec2/include"" ; cd ""build"" ; xcopy ""src"" ""C:/Program Files/codec2/lib"" ; xcopy ""codec2"" ""C:/Program Files/codec2/include/codec2""

        - name: Install vcpkg dependencies
          run: vcpkg install fftw3:x64-windows glfw3:x64-windows portaudio:x64-windows zstd:x64-windows libusb:x64-windows

        - name: Install rtaudio
          run: git clone https://github.com/thestk/rtaudio ; cd rtaudio ; git checkout 2f2fca4502d506abc50f6d4473b2836d24cfb1e3 ; mkdir build ; cd build ; cmake .. ; cmake --build . --config Release ; cmake --install .

        - name: Install libperseus-sdr
          run: git clone https://github.com/AlexandreRouma/libperseus-sdr ; cd libperseus-sdr ; mkdir build ; cd build ; cmake .. ""-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"" ; cmake --build . --config Release  ; mkdir ""C:/Program Files/PothosSDR/include/perseus-sdr"" ; cp Release/perseus-sdr.dll ""C:/Program Files/PothosSDR/bin"" ; cp Release/perseus-sdr.lib ""C:/Program Files/PothosSDR/bin"" ; cd .. ; xcopy ""src"" ""C:/Program Files/PothosSDR/include/perseus-sdr""

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake ""$Env:GITHUB_WORKSPACE"" ""-DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake"" -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: cmake --build . --config Release --verbose

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: '&($Env:GITHUB_WORKSPACE + ""/make_windows_package.ps1"") ./build ($Env:GITHUB_WORKSPACE + ""/root"")'

        - name: Save Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_windows_x64
              path: ${{runner.workspace}}/sdrpp_windows_x64.zip

    build_macos:
        runs-on: macos-11

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build
          
        - name: Update brew repositories
          run: brew update

        - name: Install dependencies
          run: brew install pkg-config libusb fftw glfw airspy airspyhf portaudio hackrf libbladerf codec2 zstd autoconf automake libtool && pip3 install mako

        - name: Install volk
          run: git clone --recursive https://github.com/gnuradio/volk && cd volk && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install SDRplay API
          run: wget https://www.sdrplay.com/software/SDRplay_RSP_API-MacOSX-3.07.3.pkg && sudo installer -pkg SDRplay_RSP_API-MacOSX-3.07.3.pkg -target /

        - name: Install libiio
          run: wget https://github.com/analogdevicesinc/libiio/archive/refs/tags/v0.25.zip && 7z x v0.25.zip && cd libiio-0.25 && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libad9361
          run: git clone https://github.com/analogdevicesinc/libad9361-iio && cd libad9361-iio && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install LimeSuite
          run: git clone https://github.com/myriadrf/LimeSuite && cd LimeSuite && mkdir builddir && cd builddir && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 && sudo make install && cd ../../

        - name: Install libperseus
          run: git clone https://github.com/Microtelecom/libperseus-sdr && cd libperseus-sdr && autoreconf -i && ./configure --prefix=/usr/local && make && make install && cd ..

        - name: Install more recent librtlsdr
          run: git clone https://github.com/osmocom/rtl-sdr && cd rtl-sdr && mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release .. && make -j3 LIBRARY_PATH=$(pkg-config --libs-only-L libusb-1.0 | sed 's/\-L//') && sudo make install && cd ../../

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_PLUTOSDR_SOURCE=ON -DOPT_BUILD_SOAPY_SOURCE=OFF -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_AUDIO_SINK=OFF -DOPT_BUILD_PORTAUDIO_SINK=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_PERSEUS_SOURCE=ON -DOPT_BUILD_AUDIO_SOURCE=OFF -DUSE_BUNDLE_DEFAULTS=ON -DCMAKE_BUILD_TYPE=Release

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Archive
          working-directory: ${{runner.workspace}}
          run: cd $GITHUB_WORKSPACE && sh make_macos_bundle.sh ${{runner.workspace}}/build ./SDR++.app && zip -r ${{runner.workspace}}/sdrpp_macos_intel.zip SDR++.app

        - name: Save Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_macos_intel
              path: ${{runner.workspace}}/sdrpp_macos_intel.zip

    build_debian_buster:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3

        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_buster && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_debian_buster_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_debian_bullseye:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_bullseye && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_debian_bullseye_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_debian_bookworm:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_bookworm && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_debian_bookworm_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_debian_sid:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/debian_sid && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_debian_sid_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_ubuntu_focal:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_focal && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_ubuntu_focal_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_ubuntu_jammy:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Create Docker Image
          run: cd $GITHUB_WORKSPACE/docker_builds/ubuntu_jammy && docker build . --tag sdrpp_build

        - name: Run Container
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus --env BUILD_NO=""-$GITHUB_RUN_NUMBER"" sdrpp_build /root/do_build.sh

        - name: Recover Deb Archive
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/sdrpp_debian_amd64.deb ./

        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_ubuntu_jammy_amd64
              path: ${{runner.workspace}}/sdrpp_debian_amd64.deb

    build_raspios_bullseye_armhf:
        runs-on: ARM

        steps:
        - uses: actions/checkout@v3

        - name: Create Build Environment
          run: rm -rf ${{runner.workspace}}/build && cmake -E make_directory ${{runner.workspace}}/build
        
        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake $GITHUB_WORKSPACE -DOPT_BUILD_BLADERF_SOURCE=ON -DOPT_BUILD_LIMESDR_SOURCE=ON -DOPT_BUILD_SDRPLAY_SOURCE=ON -DOPT_BUILD_NEW_PORTAUDIO_SINK=ON -DOPT_BUILD_M17_DECODER=ON -DOPT_BUILD_USRP_SOURCE=ON -DOPT_BUILD_PERSEUS_SOURCE=ON

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: make VERBOSE=1 -j3

        - name: Create Dev Archive
          working-directory: ${{runner.workspace}}
          run: sh $GITHUB_WORKSPACE/make_debian_package.sh ./build 'libfftw3-dev, libglfw3-dev, libvolk2-dev, librtaudio-dev' && mv sdrpp_debian_amd64.deb sdrpp_debian_armhf.deb
        
        - name: Save Deb Archive
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_raspios_bullseye_armhf
              path: ${{runner.workspace}}/sdrpp_debian_armhf.deb

    build_android:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3

        - name: Fetch container
          working-directory: ${{runner.workspace}}
          run: git clone https://github.com/AlexandreRouma/android-sdr-kit
        
        - name: Build container
          working-directory: ${{runner.workspace}}/android-sdr-kit
          run: docker build --progress=plain -t android-sdr-kit .

        - name: Build
          run: docker run --name build -v $GITHUB_WORKSPACE:/root/SDRPlusPlus android-sdr-kit /bin/bash -l -c ""cd /root/SDRPlusPlus/android && gradle --info assembleDebug""

        - name: Recover APK
          working-directory: ${{runner.workspace}}
          run: docker cp build:/root/SDRPlusPlus/android/app/build/outputs/apk/debug/app-debug.apk ./ && mv app-debug.apk sdrpp.apk

        - name: Save APK
          uses: actions/upload-artifact@v3
          with:
              name: sdrpp_android
              path: ${{runner.workspace}}/sdrpp.apk

    create_full_archive:
        needs: ['build_windows', 'build_macos', 'build_debian_buster', 'build_debian_bullseye', 'build_debian_bookworm', 'build_debian_sid', 'build_ubuntu_focal', 'build_ubuntu_jammy', 'build_raspios_bullseye_armhf', 'build_android']
        runs-on: ubuntu-latest

        steps:
        - name: Download All Builds
          uses: actions/download-artifact@v3

        - name: Create Archive
          run: >
            mkdir sdrpp_all && 
            mv sdrpp_windows_x64/sdrpp_windows_x64.zip sdrpp_all/ && 
            mv sdrpp_macos_intel/sdrpp_macos_intel.zip sdrpp_all/ && 
            mv sdrpp_debian_buster_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_buster_amd64.deb && 
            mv sdrpp_debian_bullseye_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bullseye_amd64.deb && 
            mv sdrpp_debian_bookworm_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_bookworm_amd64.deb && 
            mv sdrpp_debian_sid_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_debian_sid_amd64.deb && 
            mv sdrpp_ubuntu_focal_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_focal_amd64.deb &&
            mv sdrpp_ubuntu_jammy_amd64/sdrpp_debian_amd64.deb sdrpp_all/sdrpp_ubuntu_jammy_amd64.deb &&
            mv sdrpp_raspios_bullseye_armhf/sdrpp_debian_armhf.deb sdrpp_all/sdrpp_raspios_bullseye_armhf.deb &&
            mv sdrpp_android/sdrpp.apk sdrpp_all/sdrpp.apk

        - uses: actions/upload-artifact@v3
          with:
            name: sdrpp_all
            path: sdrpp_all/

    update_nightly_release:
        needs: [create_full_archive]
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

        steps:
        - name: Download All Builds
          uses: actions/download-artifact@v3

        - name: Update Nightly
          run: gh release upload nightly sdrpp_all/* -R ${{github.repository}} --clobber

    check_spelling:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3

        - name: Install codespell
          run: sudo apt update -y && sudo apt install -y codespell
        
        - name: Running codespell
          run: cd $GITHUB_WORKSPACE && codespell -q 2 || true

    check_formatting:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@v3
        
        - name: Run check_clang_format
          run: cd $GITHUB_WORKSPACE && chmod +x ./check_clang_format.sh && ./check_clang_format.sh || true
",,,,,,C++
157,https://github.com/wangfenjin/simple,"name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Windows:
    runs-on: windows-latest
    needs: Linux
    strategy:
      fail-fast: true
      matrix:
        include:
        - arch: x86
        - arch: x64

    steps:
    - name: ""Set Build Type""
      id: build_type
      run: |
        if (""${{ github.ref }}"".StartsWith(""refs/tags/"")) {
          echo ""BUILD_TYPE::Release"";
          echo ""::set-output name=BUILD_TYPE::Release"";
        } else {
          echo ""BUILD_TYPE::Debug"";
          echo ""::set-output name=BUILD_TYPE::Debug"";
        }

        if (""${{ matrix.arch }}"" -eq ""x64"") {
          echo ""Arch:x64"";
          echo ""::set-output name=BUILD_ARCH::x64"";
        } else {
          echo ""Arch:Win32"";
          echo ""::set-output name=BUILD_ARCH::Win32"";
        }

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # https://github.com/OpenTTD/OpenTTD/blob/master/.github/workflows/ci-build.yml
    # ""restore-cache"" which is done by ""run-vcpkg"" uses Windows tar.
    # A git clone on windows marks a few files as read-only; when Windows tar
    # tries to extract the cache over this folder, it fails, despite the files
    # being identical. This failure shows up as an warning in the logs. We
    # avoid this by simply removing the read-only mark from the git folder.
    # In other words: this is a hack!
    # See: https://github.com/lukka/run-vcpkg/issues/61
    # - name: Remove read-only flag from vcpkg git folder
    #   shell: powershell
    #   run: |
    #     attrib -r ""c:\vcpkg\.git\*.*"" /s
    # - name: Prepare vcpkg (with cache)
    #   uses: lukka/run-vcpkg@v6
    #   with:
    #     vcpkgDirectory: 'c:/vcpkg'
    #     doNotUpdateVcpkg: true
    #     vcpkgArguments: 'liblzma libpng lzo zlib'
    #     vcpkgTriplet: '${{ matrix.arch }}-windows-static'

    # - name: Install MSVC problem matcher
    #   uses: ammaraskar/msvc-problem-matcher@master

    - name: 'Run CMake with VS16'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        buildDirectory: ""${{ github.workspace }}/../../_temp/windows""
        useVcpkgToolchainFile: true
        cmakeBuildType: ${{ steps.build_type.outputs.BUILD_TYPE }}
        buildWithCMake: true
        cmakeGenerator: VS16Win64 
        cmakeAppendedArgs: -A ${{steps.build_type.outputs.BUILD_ARCH  }}
        buildWithCMakeArgs: --config ${{ steps.build_type.outputs.BUILD_TYPE }}
        
    - name: ""Check file existence""
      uses: andstor/file-existence-action@v1
      with:
        allow_failure: true
        files: ""${{ github.workspace }}/../../_temp/windows/src/${{ steps.build_type.outputs.BUILD_TYPE }}/simple.dll, ${{ github.workspace }}/../../_temp/windows/cppjieba/src/cppjieba/dict/jieba.dict.utf8""

    # can't build
    # npm run
    # - uses: actions/setup-node@v2
    #   with:
    #     node-version: '16'
    # - name: run node example
    #   working-directory: ./examples/node/
    #   run: |
    #     npm install
    #     npm run p -- --ext_path=""${{ github.workspace }}/../../_temp/windows/src/${{ steps.build_type.outputs.BUILD_TYPE }}/"" --dict_path=""${{ github.workspace }}/../../_temp/windows/cppjieba/src/cppjieba/dict/""

    # - name: 'Run CTest'
    #   run: ctest -C ${{ env.BUILD_TYPE }}
    #   working-directory: ""${{ github.workspace }}/../../_temp/windows""

    # python run
    # - uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    # - name: run python example
    #   working-directory: ./examples/python3/
    #   run: python db_connector.py ""${{ github.workspace }}/../../_temp/windows/src/${{ steps.build_type.outputs.BUILD_TYPE }}/simple""

    - name: Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir libsimple-windows-${{ matrix.arch }}
        Copy-Item -Path src/${{ steps.build_type.outputs.BUILD_TYPE }}/simple.dll,cppjieba/src/cppjieba/dict/ -Destination libsimple-windows-${{ matrix.arch }}/ -Recurse
        Compress-Archive -Path libsimple-windows-${{ matrix.arch }} -DestinationPath libsimple-windows-${{ matrix.arch }}.zip
      working-directory: ""${{ github.workspace }}/../../_temp/windows/""
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ""D:/a/_temp/windows/libsimple-windows-${{ matrix.arch }}.zip""
        # files: ""${{ github.workspace }}/../../_temp/windows/libsimple-windows-${{ matrix.arch }}.zip""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  
  # copy from https://github.com/Cyan4973/xxHash/blob/dev/.github/workflows/ci.yml
  # Linux ARM64
  # All tests are using QEMU and gcc cross compiler.

  qemu-consistency:
    name: QEMU ${{ matrix.name }}
    needs: Linux
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true  # 'false' means Don't stop matrix workflows even if some matrix failed.
      matrix:
        include: [
          { name: 'ARM64',           xcc_pkg: gcc-aarch64-linux-gnu,        xcc: aarch64-linux-gnu-gcc,        xemu_pkg: qemu-system-arm,   xemu: qemu-aarch64-static, os: ubuntu-latest, },

          { name: 'ARM64, gcc-9',    xcc_pkg: gcc-9-aarch64-linux-gnu,      xcc: aarch64-linux-gnu-gcc-9,      xemu_pkg: qemu-system-arm,   xemu: qemu-aarch64-static, os: ubuntu-20.04, },
        ]
    env:                        # Set environment variables
      CC: ${{ matrix.xcc }}
      XEMU: ${{ matrix.xemu }}
      # LDFLAGS: -static
    steps:
    - uses: actions/checkout@v2 # https://github.com/actions/checkout
    - name: apt update & install (1)
      run: |
        sudo apt-get update
        sudo apt-get install gcc-multilib g++-multilib qemu-utils qemu-user-static
    - name: Environment info (1)
      run: |
        echo && apt-cache search ""^gcc-"" | grep ""linux"" | sort
    - name: apt update & install (2)
      run: |
        sudo apt-get install ${{ matrix.xcc_pkg }} ${{ matrix.xemu_pkg }}
    - name: Environment info (2)
      run: |
        echo && which $CC
        echo && $CC --version
        echo && $CC -v  # Show built-in specs
        echo && which $XEMU
        echo && $XEMU --version
    - name: ARM64
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: 'Release'
        buildDirectory: ""${{ github.workspace }}/build""
        buildWithCMake: true
        buildWithCMakeArgs: --config Release
        # cmakeAppendedArgs: "" -DCODE_COVERAGE=OFF -DBUILD_SHELL=OFF -DBUILD_TEST_EXAMPLE=OFF -DBUILD_STATIC""
        cmakeAppendedArgs: "" -DCODE_COVERAGE=OFF -DBUILD_SHELL=OFF -DBUILD_TEST_EXAMPLE=OFF""
    - name: ""Check file existence""
      uses: andstor/file-existence-action@v1
      with:
        allow_failure: true
        # files: ""${{ github.workspace }}/build/src/libsimple.a, ${{ github.workspace }}/build/src/libPINYIN_TEXT.a, ${{ github.workspace }}/build/test/dict/jieba.dict.utf8""
        files: ""${{ github.workspace }}/build/src/libsimple.so, ${{ github.workspace }}/build/test/dict/jieba.dict.utf8""
    - name: Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir libsimple-${{ matrix.xcc }}
        # cp -r src/libsimple.a src/libPINYIN_TEXT.a test/dict/ libsimple-linux-${{ matrix.xcc }}/
        cp -r src/libsimple.so test/dict/ libsimple-${{ matrix.xcc }}/
        zip -r libsimple-${{ matrix.xcc }}.zip libsimple-${{ matrix.xcc }}
      working-directory: ""${{ github.workspace }}/build""
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ${{ github.workspace }}/build/libsimple-${{ matrix.xcc }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
        - os: ubuntu-20.04
        - os: ubuntu-latest
    steps:
    - name: ""Release Build Type""
      if: startsWith(github.ref, 'refs/tags/')
      run: echo ""BUILD_TYPE=Release"" >> $GITHUB_ENV
    - name: ""Debug Build Type""
      if: startsWith(github.ref, 'refs/tags/') != true
      run: echo ""BUILD_TYPE=Debug"" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Update apt-get
      run: sudo apt-get update

    - name: Install lcov
      if: startsWith(github.ref, 'refs/tags/') != true
      run: sudo apt-get install lcov
    
    - name: Install codecov
      if: startsWith(github.ref, 'refs/tags/') != true
      shell: bash
      run: sudo pip install codecov

    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      if: startsWith(github.ref, 'refs/tags/') != true
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: ${{ env.BUILD_TYPE }}  
        buildDirectory: ""${{ github.workspace }}/build""
        buildWithCMake: true
        buildWithCMakeArgs: --config ${{ env.BUILD_TYPE }} 
        cmakeAppendedArgs: "" -DCODE_COVERAGE=ON ""
        
    - name: 'Run CMake without coverage'
      if: startsWith(github.ref, 'refs/tags/')
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: ${{ env.BUILD_TYPE }}  
        buildDirectory: ""${{ github.workspace }}/build""
        buildWithCMake: true
        buildWithCMakeArgs: --config ${{ env.BUILD_TYPE }} 
        cmakeAppendedArgs: "" -DCODE_COVERAGE=OFF -DBUILD_SHELL=OFF -DBUILD_TEST_EXAMPLE=OFF""

    - name: 'Run CTest'
      if: ${{ startsWith(github.ref, 'refs/tags/') != true && matrix.os == 'ubuntu-latest' }}
      run: ctest -V -C ${{ env.BUILD_TYPE }}
      working-directory: ""${{ github.workspace }}/build""

    # CODE COVERAGE
    - name: Code coverage - Capture coverage info
      if: ${{ startsWith(github.ref, 'refs/tags/') != true && matrix.os == 'ubuntu-latest' }}
      run: lcov --directory . --capture --output-file coverage.info 
    - name: Code coverage - Filter out system, external, and unit test source files
      if: ${{ startsWith(github.ref, 'refs/tags/') != true && matrix.os == 'ubuntu-latest' }}
      run: lcov --remove coverage.info --output-file coverage_filter.info '/Library/*' '/usr/*' '*/test/*' '*/cmrc/*' '*/entry.cc' '*/simple_highlight.*'
    - name: Code coverage - Output coverage data for debugging
      if: ${{ startsWith(github.ref, 'refs/tags/') != true && matrix.os == 'ubuntu-latest' }}
      run: lcov --list coverage_filter.info
    - name: Code coverage - Upload to CodeCov
      if: ${{ startsWith(github.ref, 'refs/tags/') != true && matrix.os == 'ubuntu-latest' }}
      run:  bash <(curl -s https://codecov.io/bash) -f coverage_filter.info || echo ""Codecov did not collect coverage reports""

    - name: ""Check file existence""
      uses: andstor/file-existence-action@v1
      with:
        allow_failure: true
        files: ""${{ github.workspace }}/build/src/libsimple.so, ${{ github.workspace }}/build/test/dict/jieba.dict.utf8""

    # npm run
    - uses: actions/setup-node@v2
      if: startsWith(github.ref, 'refs/tags/') != true
      with:
        node-version: '16'
    - name: run node example
      if: startsWith(github.ref, 'refs/tags/') != true
      working-directory: ./examples/node/
      run: |
        npm install
        npm run p -- --ext_path=""${{ github.workspace }}/build/src/"" --dict_path=""${{ github.workspace }}/build/test/dict/""
        npm run b -- --ext_path=""${{ github.workspace }}/build/src/"" --dict_path=""${{ github.workspace }}/build/test/dict/""

    # python run
    - uses: actions/setup-python@v4
      if: startsWith(github.ref, 'refs/tags/') != true
      with:
        python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    - name: run python example
      if: startsWith(github.ref, 'refs/tags/') != true
      working-directory: ./examples/python3/
      run: python db_connector.py ""${{ github.workspace }}/build/src/libsimple""

    # create release
    - name: ""Build Changelog""
      id: build_changelog
      if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest' }}
      uses: mikepenz/release-changelog-builder-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir libsimple-linux-${{ matrix.os }}
        cp -r src/libsimple.so test/dict/ libsimple-linux-${{ matrix.os }}/
        zip -r libsimple-linux-${{ matrix.os }}.zip libsimple-linux-${{ matrix.os }}
      working-directory: ""${{ github.workspace }}/build""
    - name: Release without changelog
      if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os != 'ubuntu-latest' }}
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ${{ github.workspace }}/build/libsimple-linux-${{ matrix.os }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Release
      if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'ubuntu-latest' }}
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ${{ github.workspace }}/build/libsimple-linux-${{ matrix.os }}.zip
        body: ${{steps.build_changelog.outputs.changelog}}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  MacOS:
    runs-on: macos-latest
    needs: Linux
    steps:
    - name: ""Release Build Type""
      if: startsWith(github.ref, 'refs/tags/')
      run: echo ""BUILD_TYPE=Release"" >> $GITHUB_ENV
    - name: ""Debug Build Type""
      if: startsWith(github.ref, 'refs/tags/') != true
      run: echo ""BUILD_TYPE=Debug"" >> $GITHUB_ENV

    - uses: actions/checkout@v2
    - name: 'Run CMake'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
        cmakeBuildType: ${{ env.BUILD_TYPE }}  
        buildDirectory: ""${{ github.workspace }}/../../_temp/macos""
        buildWithCMake: true
        cmakeAppendedArgs: -DCMAKE_INSTALL_PREFIX=""${{ github.workspace }}/../../_temp/macos/install""
        buildWithCMakeArgs: --config ${{ env.BUILD_TYPE }}
        
    - name: 'Run CTest'
      run: ctest -C ${{ env.BUILD_TYPE }}
      working-directory: ""${{ github.workspace }}/../../_temp/macos""

    - name: ""Check file existence""
      uses: andstor/file-existence-action@v1
      with:
        allow_failure: true
        files: ""${{ github.workspace }}/../../_temp/macos/src/libsimple.dylib, ${{ github.workspace }}/../../_temp/macos/test/dict/jieba.dict.utf8""
    # npm run
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - name: run node example
      working-directory: ./examples/node/
      run: |
        npm install
        npm run p -- --ext_path=""${{ github.workspace }}/../../_temp/macos/src/"" --dict_path=""${{ github.workspace }}/../../_temp/macos/test/dict/""
        # don't run this as it's toooo slow
        # npm run b -- --ext_path=""${{ github.workspace }}/../../_temp/macos/src/"" --dict_path=""${{ github.workspace }}/../../_temp/macos/test/dict/""

    # python run
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
    - name: run python example
      working-directory: ./examples/python3/
      run: python db_connector.py ""${{ github.workspace }}/../../_temp/macos/src/libsimple""

    - name: Package
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        mkdir libsimple-osx-x64
        sudo xattr -r -d com.apple.quarantine src/libsimple.dylib
        cp -r src/libsimple.dylib test/dict libsimple-osx-x64/
        zip -r libsimple-osx-x64.zip libsimple-osx-x64
      working-directory: ""${{ github.workspace }}/../../_temp/macos""
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        files: ${{ github.workspace }}/../../_temp/macos/libsimple-osx-x64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: build-iOS
      run: ./build-ios.sh
",,,,,,C++
159,https://github.com/kdr2/redis-leveldb,"name: Redis-LevelDB Testing
on:
  push:
    branches:
      - master
  pull_request:
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
        arch:
          - x64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      # - name: Checkout submodules
      #   run: git submodule update --init --recursive
      - name: Install Dependencies
        run: |
          if [ `uname` = ""Linux"" ]; then
            sudo apt-get update -qq -y;
            sudo apt-get install libsnappy-dev libev-dev libgmp-dev cpanminus perl -y;
            sudo cpanm --quiet --notest --skip-satisfied --force Redis;
          elif [ `uname` = ""Darwin"" ]; then
            brew update;
            brew install snappy;
            brew install libev;
            brew install gmp;
            brew install cpanminus;
            sudo cpanm --quiet --notest --skip-satisfied --force Redis;
          fi
      - name: Build
        run: make
      - name: Unit Testing
        run: |
          make test
          echo ""Ready for packaging...""
",,,,,,C++
160,https://github.com/rgerganov/rf-car,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ubuntu-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: |
        sudo apt update
        sudo apt install libsdl2-dev libsdl2-image-dev libhackrf-dev
    - name: Build
      run: make

  osx-build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Dependencies
      run: |
        brew update
        brew install sdl2 sdl2_image hackrf
    - name: Build
      run: make
",,,,,,C++
161,https://github.com/keiichiw/constexpr-8cc,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install g++
        run: |
             sudo apt update
             sudo apt install g++

      # Runs a single command using the runners shell
      - name: Run test
        run: ./ci_test.sh
",,,,,,C++
162,https://github.com/cycling74/gen-plugin-export,"name: Release

on:
  create:
    tags:
      - v*
  workflow_dispatch:

jobs:
  package:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: package
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        PACKAGE_REV=`echo $GITHUB_SHA | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        mkdir -p $PACKAGE_NAME
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        for f in *.md; do [ -e ""$f"" ] && cp ""$f"" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -e CMakeLists.txt ]; then cp CMakeLists.txt $PACKAGE_NAME; fi
        if [ -d code ]; then cp -r code $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d extensions ]; then cp -r extensions $PACKAGE_NAME; fi
        if [ -d externals ]; then cp -r externals $PACKAGE_NAME; fi
        if [ -d extras ]; then cp -r extras $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi
        if [ -d init ]; then cp -r init $PACKAGE_NAME; fi
        if [ -d interfaces ]; then cp -r interfaces $PACKAGE_NAME; fi
        if [ -d java-classes ]; then cp -r java-classes $PACKAGE_NAME; fi
        if [ -d java-doc ]; then cp -r java-doc $PACKAGE_NAME; fi
        if [ -d javascript ]; then cp -r javascript $PACKAGE_NAME; fi
        if [ -d jsextensions ]; then cp -r jsextensions $PACKAGE_NAME; fi
        if [ -d jsui ]; then cp -r jsui $PACKAGE_NAME; fi
        if [ -d media ]; then cp -r media $PACKAGE_NAME; fi
        if [ -d misc ]; then cp -r misc $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d script ]; then cp -r script $PACKAGE_NAME; fi
        if [ -d support ]; then cp -r support $PACKAGE_NAME; fi
        if [ -d source ]; then cp -r source $PACKAGE_NAME; fi
        if [ -d tests ]; then cp -r tests $PACKAGE_NAME; fi

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}
        path: ${{ github.event.repository.name }}",,,,,,C++
163,https://github.com/thinks/fast-marching-method,"name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install optional tools (clang-tidy)
      run: sudo apt-get install -y clang-tidy

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: pip install numpy scipy

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} .

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

",,,,,,C++
164,https://github.com/khuttun/polym,"name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DPOLYM_BUILD_TEST=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
",,,,,,C++
165,https://github.com/nezza/sdqanalyzer,"name: Build

on:
  push:
    branches: [master]
    tags:
      - ""*""
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cmake -B ${{github.workspace}}/build -A x64
          cmake --build ${{github.workspace}}/build --config Release
      - name: Upload windows build
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: ${{github.workspace}}/build/Analyzers/Release/*.dll
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release
          cmake --build ${{github.workspace}}/build
      - name: Upload MacOS build
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: ${{github.workspace}}/build/Analyzers/*.so
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release
          cmake --build ${{github.workspace}}/build
      - name: Upload Linux build
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: ${{github.workspace}}/build/Analyzers/*.so
  publish:
    needs: [windows, macos, linux]
    runs-on: ubuntu-latest
    steps:
      - name: download individual builds
        uses: actions/download-artifact@v2
        with:
          path: ${{github.workspace}}/artifacts
      - name: zip
        run: |
          cd ${{github.workspace}}/artifacts
          zip -r ${{github.workspace}}/analyzer.zip .
      - uses: actions/upload-artifact@v2
        with:
          name: all-platforms
          path: ${{github.workspace}}/artifacts/**
      - name: create release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{github.workspace}}/analyzer.zip
",,,,,,C++
166,https://github.com/ar90n/msgpack11,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux:
    name: ${{ matrix.os }}.${{ matrix.compiler.compiler }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ linux ]
        compiler:
          - { compiler: GNU,  CC: gcc,   CXX: g++,     GCOV: gcov }
          - { compiler: LLVM, CC: clang, CXX: clang++ }

    steps:
    - uses: actions/checkout@v3


    - name: install packages
      run: |
       sudo apt-get update -y
       sudo apt-get install -y googletest zlib1g-dev clang++-12 g++ cmake

    - name: install google test
      run: |
       cd /usr/src/googletest
       sudo cmake -DCMAKE_CXX_COMPILER=$CXX .
       sudo make
       sudo make install
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
        GCOV: ${{ matrix.compiler.GCOV }}
       
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=$CXX
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
        GCOV: ${{ matrix.compiler.GCOV }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
        GCOV: ${{ matrix.compiler.GCOV }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      env:
        CC: ${{ matrix.compiler.CC }}
        CXX: ${{ matrix.compiler.CXX }}
        GCOV: ${{ matrix.compiler.GCOV }}
",,,,,,C++
167,https://github.com/kshk123/hashmap,"name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: macos-latest
    env:
      SONAR_SCANNER_VERSION: 4.7.0.2747
      SONAR_SERVER_URL: ""https://sonarcloud.io""
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-macosx.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo ""$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-macosx/bin"" >> $GITHUB_PATH
      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-macosx-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-macosx-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-macosx-x86.zip -d $HOME/.sonar/
          echo ""$HOME/.sonar/build-wrapper-macosx-x86"" >> $GITHUB_PATH
      - name: Run build-wrapper
        run: |
          mkdir build
          cmake -S . -B build
          build-wrapper-macosx-x86 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
          cd build
          ./hashMap
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url=""${{ env.SONAR_SERVER_URL }}"" --define sonar.cfamily.build-wrapper-output=""${{ env.BUILD_WRAPPER_OUT_DIR }}""

",,,,,,C++
168,https://github.com/satoren/kaguya,"name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        luaversion: [lua-5.1.5,lua-5.2.4,lua-5.3.6,lua-5.4.3]
      fail-fast: false
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Download Lua
      run: wget https://www.lua.org/ftp/${{ matrix.luaversion }}.tar.gz && tar zxf ${{ matrix.luaversion }}.tar.gz
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DLUA_SEARCH_LIB_NAME=${{ matrix.luaversion }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
",,,,,,C++
169,https://github.com/lxrite/azure-http-proxy,"name: Build

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
",,,,,,C++
170,https://github.com/aras-p/sizer,"name: build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  windows:
    runs-on: windows-2019
    timeout-minutes: 5
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v1
    - name: Windows VS2019
      run: |
        cmake -S . --preset=x64-release
        cmake --build out/build/x64-release --config RelWithDebInfo
        ""out/build/x64-release/RelWithDebInfo/Sizer.exe""
      shell: cmd
    - uses: actions/upload-artifact@v1
      with:
        name: Sizer.exe
        path: out/build/x64-release/RelWithDebInfo/Sizer.exe

  mac:
    runs-on: macOS-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v1
    - name: macOS Xcode 14
      run: |
        cmake -S . --preset=mac-release
        cmake --build out/mac-release
        out/mac-release/Sizer
    - uses: actions/upload-artifact@v1
      with:
        name: Sizer-mac
        path: out/mac-release/Sizer

  linux:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v1
    - name: Ubuntu22 Gcc11
      env:
        CC: gcc-11
        CXX: g++-11
      run: |
        cmake -S . --preset=linux-release
        cmake --build out/linux-release
        out/linux-release/Sizer
    - uses: actions/upload-artifact@v1
      with:
        name: Sizer-linux
        path: out/linux-release/Sizer
",,,,,,C++
171,https://github.com/panzerschrek/chasm-reverse,"name: CMake

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: checkout_repositories
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: install_dependencies
      run: |
        sudo add-apt-repository -y ""deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse""
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev
        

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

",,,,,,C++
172,https://github.com/kthohr/mcmc,"
# modified version of:
# https://gist.github.com/NickNaso/0d478f1481686d5bcc868cac06620a60

name: CI

on: [push, pull_request, release]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: ""ubuntu_latest_gcc_arma"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc"",
            cxx: ""g++"",
            fc: ""gfortran"",
            linalg: ""arma""
          }
        - {
            name: ""ubuntu_latest_gcc_eigen"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc"",
            cxx: ""g++"",
            fc: ""gfortran"",
            linalg: ""eigen""
          }
        - {
            name: ""ubuntu_latest_gcc9_arma"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc-9"",
            cxx: ""g++-9"",
            fc: ""gfortran-9"",
            linalg: ""arma""
          }
        - {
            name: ""ubuntu_latest_gcc9_eigen"",
            os: ubuntu-latest,
            build_type: ""Release"",
            cc: ""gcc-9"",
            cxx: ""g++-9"",
            fc: ""gfortran-9"",
            linalg: ""eigen""
          }
        - {
            name: ""macos_latest_clang_arma"",
            os: macos-latest,
            build_type: ""Release"",
            cc: ""clang"",
            cxx: ""clang++"",
            linalg: ""arma""
          }
        - {
            name: ""macos_latest_clang_eigen"",
            os: macos-latest,
            build_type: ""Release"",
            cc: ""clang"",
            cxx: ""clang++"",
            linalg: ""eigen""
          }

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install ${{ matrix.config.cc }} ${{ matrix.config.cxx }} ${{ matrix.config.fc }} libblas-dev liblapack-dev
          ${{ matrix.config.cc }} --version
          
      - name: Configure
        shell: bash
        run: |
          export CC=${{ matrix.config.cc }}
          export CXX=${{ matrix.config.cxx }}
          export FC=${{ matrix.config.fc }}
          WDIR=${PWD}
          if [[ ""${{ matrix.config.linalg }}"" == ""arma"" ]]; then 
            export OPTIM_TEST_USE_ARMA=""y""
            mkdir ${WDIR}/arma_tmp
            git clone --single-branch https://gitlab.com/conradsnicta/armadillo-code.git ${WDIR}/arma_tmp > /dev/null 2>&1
            mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
            rm -rf ${WDIR}/arma_tmp
            export ARMA_INCLUDE_PATH=""${WDIR}/include""
          elif [[ ""${{ matrix.config.linalg }}"" == ""eigen"" ]]; then 
            export OPTIM_TEST_USE_EIGEN=""y""
            mkdir ${WDIR}/eigen_tmp
            git clone --single-branch https://gitlab.com/libeigen/eigen.git ${WDIR}/eigen_tmp > /dev/null 2>&1
            mv ${WDIR}/eigen_tmp/* ${WDIR}/include
            rm -rf ${WDIR}/eigen_tmp
            export EIGEN_INCLUDE_PATH=""${WDIR}/include""
          else
            echo -e ""  \x1B[31m- error: unrecognized linear algebra library.\033[0m"" >&2 ;
            echo """"
            exit 1
          fi
          #
          git submodule update --init
          ./configure -c -l ${{ matrix.config.linalg }}
      
      - name: Build
        shell: bash
        run: make
",,,,,,C++
174,https://github.com/techbooster/c89-firststepreview-v2,"name: Build Re:VIEW to make distribution file
# The workflow is triggered on pushes to the repository.
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # uses v3 Stable version
    # https://github.com/actions/checkout
    - name: checkout source
      uses: actions/checkout@v3
    # Build Artifacts
    - name: Build distribution file
      uses: TechBooster/ReVIEW-build-artifact-action@master
    # Upload Distribution file
    - name: Upload distribution file to github artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Output documents
        path: ./articles/*.pdf
",,,,,,C++
175,https://github.com/srombauts/shared_ptr,"name: Auto Test

on:
  push:
    branches: master
  pull_request:
    branches: master

# test gcc, clang, msvc and mingw

jobs:
  ubuntu_gcc_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: 'CC=gcc CXX=g++ bash build.sh'
  ubuntu_clang_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: 'CC=clang CXX=clang++ bash build.sh'
  macos_clang_test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: 'CC=clang CXX=clang++ bash build.sh'
  vs2022_test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: '.\build.bat'
  mingw_test:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: cmake . -B build -G ""MinGW Makefiles""
      - run: cmake --build build
      - run: 'cd build && ctest --output-on-failure'
",,,,,,C++
354,https://github.com/juicycleff/flutter-unity-view-widget,"name: genopets

on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.0'
          channel: 'stable'

      - name: Clean Dependencies
        run: flutter clean

      - name: Install Dependencies
        run: flutter packages get

      - name: Format
        run: flutter format --set-exit-if-changed lib test

      - name: Analyze
        run: flutter analyze lib test

      - name: Run tests
        run: flutter test --no-pub --coverage --test-randomize-ordering-seed random
",,,,,,Dart
695,https://github.com/abausg/home_widget,"name: Build

on:
  push:
    branches:
      - main
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - name: Get Packages
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Format
        run: dart format . --set-exit-if-changed
      - name: Publishability
        run: flutter pub publish --dry-run
      - name: Test
        run: flutter test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: VeryGoodOpenSource/very_good_coverage@v1.2.0

  android:
    name: Android Integration Tests
    needs: quality
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Run Android Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          working-directory: example
          script: flutter test integration_test/android_test.dart -d emulator-5554

  # iOS Test based on https://medium.com/flutter-community/run-flutter-driver-tests-on-github-actions-13c639c7e4ab
  # by @kate_sheremet
  ios:
    name: iOS Integration Tests
    needs: quality
    strategy:
      matrix:
        device:
          - ""iPhone 13""
      fail-fast: false
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - uses: futureware-tech/simulator-action@v1
        id: simulator
        with:
          model: ${{ matrix.device }}
      - name: ""Run iOS integration tests""
        run: flutter test integration_test/ios_test.dart -d ${{steps.simulator.outputs.udid}}
        working-directory: example",,,,,,Dart
1796,https://github.com/xuexiangjys/flutter_xupdate,"  
name: Pub Publish plugin

on: workflow_dispatch

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Publish
        uses: sakebook/actions-flutter-pub-publisher@v1.3.0
        with:
          credential: ${{ secrets.CREDENTIAL_JSON }}
          flutter_package: true
          skip_test: true
          dry_run: false
",,,,,,Dart
572,https://github.com/rodydavis/easy_web_view,"name: github pages

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'dev'

      - name: Install
        run: |
          flutter config --enable-web
          flutter pub get
      - name: Build
        run: cd example && flutter build web --no-sound-null-safety

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./example/build/web
",,,,,,Dart
4441,https://github.com/kubenav/kubenav,"name: Continuous Delivery

on:
  pull_request:
  release:
    types:
      - published

jobs:
  macos:
    name: macOS
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # To sign the macOS version of kubenav we have to generate a new certificate, which can then be used in the GitHub
      # Action. More information regarding the creation of the certificate and the usage within this GitHub Action can
      # be found on the following sites:
      #   - https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      #   - https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple Certificate
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n ""$MACOS_CERTIFICATE"" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p ""$MACOS_KEYCHAIN_PASSWORD"" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p ""$MACOS_KEYCHAIN_PASSWORD"" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P ""$MACOS_CERTIFICATE_PASSWORD"" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # check that certificate was added
          security find-identity -v

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-macos

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.12'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-macos-desktop
          flutter build macos --release

      - name: Code Sign
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        run: |
          codesign --deep --force --options runtime --sign ""Developer ID Application: Rico Berger (75AP6HWLUD)"" build/macos/Build/Products/Release/kubenav.app -v

      - name: Package
        run: |
          ditto -c -k --keepParent ""build/macos/Build/Products/Release/kubenav.app"" ""build/macos/Build/Products/Release/kubenav-macos-universal.zip""

      # If the following step returns an error like
      #   Current status: Invalid..........Processing complete
      #     id: <RANDOM-ID>
      #     status: Invalid
      #
      # the following command can be used for debugging
      #   xcrun notarytool log <RANDOM-ID> --key AuthKey_${MACOS_ASC_API_KEY}.p8 --key-id $MACOS_ASC_API_KEY --issuer $MACOS_ACS_ISSUER
      - name: Upload to Notarization Service
        if: ${{ github.event_name == 'release' || github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          MACOS_ASC_AUTH_KEY: ${{ secrets.MACOS_ASC_AUTH_KEY }}
          MACOS_ASC_API_KEY: ${{ secrets.MACOS_ASC_API_KEY }}
          MACOS_ACS_ISSUER: ${{ secrets.MACOS_ACS_ISSUER }}
        run: |
          mkdir -p ~/.appstoreconnect/private_keys
          echo -n ""$MACOS_ASC_AUTH_KEY"" > ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8
          xcrun notarytool submit build/macos/Build/Products/Release/kubenav-macos-universal.zip --key ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8 --key-id $MACOS_ASC_API_KEY --issuer $MACOS_ACS_ISSUER --wait

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-macos-universal.zip
          path: build/macos/Build/Products/Release/kubenav-macos-universal.zip

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/macos/Build/Products/Release/kubenav-macos-universal.zip

      - name: Clean up Keychain and AuthKey for Notarization Service
        if: ${{ always() }}
        continue-on-error: true
        env:
          MACOS_ASC_API_KEY: ${{ secrets.MACOS_ASC_API_KEY }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm -rf ~/.appstoreconnect/private_keys/AuthKey_${MACOS_ASC_API_KEY}.p8

  linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Packages
        run: |
          # Required for Flutter
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          # Required for AppImage
          sudo add-apt-repository universe
          sudo apt install libfuse2

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-linux

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.12'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-linux-desktop
          flutter build linux --release

      - name: Package
        run: |
          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          cp linux/kubenav.so build/linux/x64/release/bundle/lib/
          cp linux/AppRun build/linux/x64/release/bundle/
          cp linux/kubenav.desktop build/linux/x64/release/bundle/
          cp linux/kubenav.png build/linux/x64/release/bundle/
          ./appimagetool-x86_64.AppImage build/linux/x64/release/bundle/

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-x86_64.AppImage
          path: kubenav-x86_64.AppImage

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: kubenav-x86_64.AppImage

  windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Generate Library
        run: |
          make library-windows

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.7.12'
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install Dependencies
        run: |
          flutter pub get

      - name: Build
        run: |
          flutter config --enable-windows-desktop
          flutter build windows --release

      - name: Package
        run: |
          cp windows/kubenav.dll build/windows/runner/Release/
          mv build/windows/runner/Release build/windows/runner/kubenav
          cd build/windows/runner && 7z a -tzip kubenav-windows-x86_64.zip kubenav

      - name: Upload Artifacts (PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v3
        with:
          name: kubenav-windows-x86_64.zip
          path: build/windows/runner/kubenav-windows-x86_64.zip

      - name: Upload Artifacts (Release)
        uses: shogo82148/actions-upload-release-asset@v1
        if: ${{ github.event_name == 'release' && github.event.action == 'published' }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: build/windows/runner/kubenav-windows-x86_64.zip
",,,,,,Dart
7661,https://github.com/leetaogoooo/rssaid,"# main.yml
# 自动构建 Apk
name: Test, Build and Release apk

# 工作流程触发的时机，这里是当一个版本标签推送到仓库时触发
on:
  push:
    tags:
      - v*

# 这个工作流程需要执行的任务
jobs:
  process:
    name: all process
    runs-on: ubuntu-latest
    # 这个任务的步骤
    steps:
      # 拉取项目代码
      - uses: actions/checkout@v2
      # 建立 java 环境
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.3
        with:
          java-version: ""12.x""
      # 建立 Flutter 环境
      - name: Flutter action
        uses: subosito/flutter-action@v2
        with:
          channel: ""stable""
          flutter-version: ""3.0.0""
      # 下载项目依赖
      - run: flutter pub get
      - run: echo $ENCODED_KEYSTORE | base64 -di > android/app/keystore.jks
        env:
          ENCODED_KEYSTORE: ${{ secrets.ENCODED_KEYSTORE }}
      # 打包 APK
      - run: flutter build apk --release --no-sound-null-safety --flavor=github
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD}}
      # 发布到 Release
      - name: Release apk
        uses: ncipollo/release-action@v1.5.0
        with:
          artifacts: ""build/app/outputs/flutter-apk/*.apk""
          token: ${{ secrets.RELEASE_TOKEN }}
",,,,,,Dart
5526,https://github.com/dwyl/labels,"name: Elixir CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and test
    environment: liveview-chat-example
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        otp: ['24.3.4']
        elixir: ['1.14.1']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
        elixir-version: ${{ matrix.elixir }} 
    - name: Restore deps and _build cache
      uses: actions/cache@v3
      with:
        path: |
          deps
          _build
        key: deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          deps-${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}
    - name: Install dependencies
      run: mix deps.get
    - name: Check code is formatted
      run: mix format --check-formatted
    - name: Run Tests
      run: mix coveralls.json
      env:
        MIX_ENV: test
        AUTH_API_KEY: ${{ secrets.AUTH_API_KEY }}
        ENCRYPTION_KEYS: ${{ secrets.ENCRYPTION_KEYS }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
",,,,,,Elixir
829,https://github.com/mdlayher/wifi,"name: Test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        go-version:
        - ""1.20""
        - ""1.21""
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    # Run basic tests, we just want to make sure there is parity on Linux and
    # macOS, and back to the oldest version of Go this library supports.
    - name: Run tests
      run: go test ./...
",,,,,,Go
897,https://github.com/uber/h3-go,"name: Build

on: [push, pull_request]

permissions:
  contents: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [""1.18""]

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.47.3

  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [""1.18"", ""1.19""]

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: unit-tests
        run: |
          go test -count=2 -race -covermode atomic -coverprofile=covprofile ./...
      - name: goveralls
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install github.com/mattn/goveralls@latest
          goveralls -coverprofile=covprofile -service=github
",,,,,,Go
2003,https://github.com/go-vgo/robotgo,"name: Go
on: [push]
jobs:
  test:
    # name: build
    strategy:
      matrix:
        # go: [1.12.x, 1.13.x]
        os: [macOS-latest, windows-latest] # ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Go 1.21.0
        uses: actions/setup-go@v1
        with:
          go-version: 1.21.0
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: go build -v .
      - name: Test
        run: go test -v robot_info_test.go
        # run: go test -v .
",,,,,,Go
2099,https://github.com/cpmech/gosl,"name: Test & Coverage
on: [pull_request, push]
jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Libraries
        run: |
          sudo apt-get install -y --no-install-recommends \
          gcc \
          gfortran \
          libfftw3-dev \
          liblapacke-dev \
          libmetis-dev \
          libmumps-seq-dev \
          libopenblas-dev \
          libsuitesparse-dev
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.20
      - name: Build all
        run: |
          bash ./all.bash
      - name: Test & Coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true",,,,,,Go
114,https://github.com/yuk7/wsldl,"name: Continuous Integration

on:
  push:
    paths:
      - 'src/**'
      - 'res/**'
      - 'build.bat'
      - '.github/workflows/**'
  pull_request:
    paths:
      - 'src/**'
      - 'res/**'
      - 'build.bat'
      - '.github/workflows/**'
      
jobs:
  compile-wsldl-windows:
    name: Compile wsldl
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          $short_sha = $env:GITHUB_SHA.SubString(0, 7)
          $Env:GO_BUILD_OPTS = ""-ldflags `""-X github.com/yuk7/wsldl/version.version=CI-${short_sha}`""""
          .\build.bat all
          Compress-Archive -Path .\out\icons\* -DestinationPath .\out\icons.zip
      - uses: actions/upload-artifact@v2
        with:
          name: Build results-Windows
          path: |
            out/wsldl.exe
            out/icons.zip
          if-no-files-found: error
  compile-wsldl-windows-arm64:
    name: Compile wsldl ARM64
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          $Env:PATH = ""${Env:USERPROFILE}\go\bin;${Env:PATH}""
          $short_sha = $env:GITHUB_SHA.SubString(0, 7)
          $Env:GO_BUILD_OPTS = ""-ldflags `""-X github.com/yuk7/wsldl/version.version=CI-${short_sha}`""""
          $Env:GOARCH=""arm64""
          .\build.bat all
          Compress-Archive -Path .\out\icons\* -DestinationPath .\out\icons.zip
      - uses: actions/upload-artifact@v2
        with:
          name: Build results-Windows-ARM64
          path: |
            out/wsldl.exe
            out/icons.zip
          if-no-files-found: error
  compile-wsldl-linux:
    name: Cross-compile wsldl from Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest
          export PATH=$PATH:~/go/bin
          cd src
          goversioninfo
          env GOOS=windows GOARCH=amd64 go build -ldflags ""-X github.com/yuk7/wsldl/version.version=CI-Cross-${GITHUB_SHA:0:7}""
      - uses: actions/upload-artifact@v2
        with:
          name: Build results-Linux
          path: |
            src/wsldl.exe
          if-no-files-found: error
",,,,,,Go
591,https://github.com/alibaba/derrick,"name: Go

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...
",,,,,,Go
933,https://github.com/evanpurkhiser/dots,"name: build
on: [push, create]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ^1.13

      - name: Checkout tags
        run: |
          git fetch --prune --unshallow
          git fetch origin +refs/tags/*:refs/tags/*

      - name: Lint
        uses: golangci/golangci-lint-action@v3

      - name: Lint shell code
        run: shellcheck -e SC2155 scripts/bootstrap

      - name: Test
        run: go test ./...

      - name: Build
        run: |
          GOARCH=amd64 GOOS=windows make && mv dist/dots{,-windows-amd64.exe}
          GOARCH=amd64 GOOS=darwin  make && mv dist/dots{,-macos-amd64}
          GOARCH=arm64 GOOS=darwin  make && mv dist/dots{,-macos-arm64}
          GOARCH=amd64 GOOS=linux   make && mv dist/dots{,-linux-amd64}

      - name: Release latest master
        if: github.event_name == 'push'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: dev-build
          prerelease: true
          title: Development Build
          files: |
            scripts/bootstrap
            dist/dots-linux-amd64
            dist/dots-macos-amd64
            dist/dots-macos-arm64
            dist/dots-windows-amd64.exe

      - name: Release tagged version
        if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags')
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          prerelease: false
          files: |
            scripts/bootstrap
            dist/dots-linux-amd64
            dist/dots-macos-amd64
            dist/dots-macos-arm64
            dist/dots-windows-amd64.exe
",,,,,,Go
1122,https://github.com/azure/azure-storage-fuse,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build

on:
  push:
    branches: [ ""main"", master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ ""main"" ]
  schedule:
    - cron: '31 19 * * 1'

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    
    name: Build
    runs-on: ""ubuntu-22.04""
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Blobfuse2
        run: | 
          sudo apt-get install fuse3 libfuse3-dev -y
          go build -o blobfuse2
          ls -l

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: './blobfuse2'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results-binary.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'

      - name: List Issues
        run: |
          cat trivy-results-binary.sarif

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-binary.sarif'
",,,,,,Go
1476,https://github.com/srevinsaju/zap,"name: Build

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags:
      - v*.*
  pull_request:
    branches: [ main ]

jobs:
  qa:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '>=1.19'

    - name: Check formatting
      run: |
        gofmt -e .

  test:
    needs: [qa]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.19'

      - name: Build
        run: |
          go build -v .
      - name: Test
        run: |
          ZAP_BIN=""$(realpath zap)"" ./scripts/test.sh

  build:
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ARCH: ['386', 'amd64', 'arm', 'arm64']
        
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '>=1.21'

    - name: Build
      run: |
        git fetch --force --tags
        export ZAP_VERSION=""$(git describe --tags --always --match 'v*.*' | sed 's,-,.,g')""
        GOOS=linux GOARCH=${{ matrix.ARCH }} go build -ldflags ""-s -w -X main.BuildVersion=$ZAP_VERSION -X main.BuildTime=$(date +%s) -X main.BuildSource=github"" -o zap-${{ matrix.ARCH }} .

    - name: Upload Asset
      uses: actions/upload-artifact@v2
      with:
        path: zap-${{ matrix.ARCH }} 
        name: zap-${{matrix.ARCH }}
        
  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: download actions
      uses: actions/download-artifact@v2
      
    - name: Show releases
      run: ls -al

    - name: Generate supported metadata
      run: |
        git fetch --force --tags
        export ZAP_VERSION=""$(git describe --tags --always --match 'v*.*' | sed 's,-,.,g')""
        echo $ZAP_VERSION > zap-release-metadata 

    - name: Create release and upload artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        wget https://github.com/TheAssassin/pyuploadtool/releases/download/continuous/pyuploadtool-x86_64.AppImage
        chmod +x pyuploadtool-x86_64.AppImage
        APPIMAGE_EXTRACT_AND_RUN=1 ./pyuploadtool-x86_64.AppImage zap-*/zap-* ./zap-release-metadata
",,,,,,Go
2310,https://github.com/codersrank-org/repo_info_extractor,"name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15

    - name: Test
      run: go test -v ./...
",,,,,,Go
2445,https://github.com/shinebayar-g/ufw-docker-automated,"name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        go-version:
          - 1.18.x
          - 1.19.x
        platform:
          - ubuntu-22.04
    runs-on: ""${{ matrix.platform }}""
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ""${{ matrix.go-version }}""

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Verification
        run: go mod verify

      - name: Build
        run: go build -o ufw-docker-automated github.com/shinebayar-g/ufw-docker-automated
",,,,,,Go
2883,https://github.com/ossf/criticality_score,"name: ""Continuous Integration""

on:
  push:
    branches:
      - main
  pull_request:

permissions: read-all

jobs:
  run-tests:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe
      with:
        go-version: 1.19
    - name: Run tests
      run: make test/unit
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run-linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe
      with:
        go-version: 1.19
    - name: golangci-lint
      uses: golangci/golangci-lint-action@3a919529898de77ec3da873e3063ca4b10e7f5cc
  check-scorecard-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
    - name: Run tests
      run: make test/scorecard-version
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Go
4343,https://github.com/dapr/dashboard,"# ------------------------------------------------------------
# Copyright 2021 The Dapr Authors
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------

name: Build

on:
  push:
    branches:
      - master
      - release-*
    tags:
      - v*
    paths-ignore: 
      - '**.md'
  pull_request:
    branches:
      - master
      - release-*
    paths-ignore: 
      - '**.md'
jobs:
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.19
      GOLANGCILINT_VER: 1.50.1
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      NODE_VERSION: 16.x
      ARTIFACTS_DIR: release/artifacts
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        target_arch: [arm, arm64, amd64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
    steps:
      - name: Setup node ${{ env.NODE_VERSION }} and npm
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install angular cli
        run: npm install -g @angular/cli
      - name: Set up Go ${{ env.GOVER }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GOVER }}
      - name: Install golangci-lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b ""${{ env.GOROOT }}/bin"" v${{ env.GOLANGCILINT_VER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Run make lint
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: make lint
      - name: Run make test
        env:
          COVERAGE_OPTS: ""-coverprofile=coverage.txt -covermode=atomic""
        if: matrix.target_arch == 'amd64'
        run: make test
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARTIFACTS_DIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARTIFACTS_DIR }}
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: dashboard_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACTS_DIR }}
      - name: docker login
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Build and push docker images to Docker Hub
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          echo ""Build docker image and push image...""
          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=${{ secrets.DOCKER_DAPRIO_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: GitHub container registry login
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push docker images to ghcr
        if: matrix.target_os != 'darwin' && github.event_name != 'pull_request'
        run: |
          echo echo ""Build docker image and push image...""
          make docker-push TARGET_OS=${{ matrix.target_os }} TARGET_ARCH=${{ matrix.target_arch }} DAPR_REGISTRY=ghcr.io/${{ github.repository_owner }} DAPR_TAG=${{ env.REL_VERSION }}
  publish:
    name: Publish docker image and binaries
    needs: build
    if: github.event_name != 'pull_request'
    env:
      ARTIFACTS_DIR: ./release
      DAPR_VERSION_ARTIFACT: dapr_version
      DOCKER_REGISTRY: ${{ secrets.DOCKER_DAPRIO_REGISTRY }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Install Docker CE for buildx
        run: |
          sudo apt update
          sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository ""deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable""
          sudo apt update
          sudo apt install docker-ce
          docker -v
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: download artifacts - dapr_linux_amd64
        uses: actions/download-artifact@master
        with:
          name: dashboard_linux_amd64
          path: ${{ env.ARTIFACTS_DIR }}
      - name: download artifacts - dapr_linux_arm
        uses: actions/download-artifact@master
        with:
          name: dashboard_linux_arm
          path: ${{ env.ARTIFACTS_DIR }}
      - name: download artifacts - dapr_linux_arm64
        uses: actions/download-artifact@master
        with:
          name: dashboard_linux_arm64
          path: ${{ env.ARTIFACTS_DIR }}
      - name: download artifacts - dapr_windows_amd64
        uses: actions/download-artifact@master
        with:
          name: dashboard_windows_amd64
          path: ${{ env.ARTIFACTS_DIR }}
      - name: download artifacts - dapr_darwin_amd64
        uses: actions/download-artifact@master
        with:
          name: dashboard_darwin_amd64
          path: ${{ env.ARTIFACTS_DIR }}
      - name: download artifacts - dapr_darwin_arm64
        uses: actions/download-artifact@master
        with:
          name: dashboard_darwin_arm64
          path: ${{ env.ARTIFACTS_DIR }}
      - name: generate checksum files
        run: cd ${ARTIFACTS_DIR} && for i in *; do sha256sum -b $i > ""$i.sha256""; done && cd -
      - name: lists artifacts
        run: |
          ls -l ${{ env.ARTIFACTS_DIR }}
      - name: publish binaries to github
        if: startswith(github.ref, 'refs/tags/v')
        run: |
          sudo npm install --silent --no-progress -g github-release-cli@1.3.1
          # Parse repository to get owner and repo names
          OWNER_NAME=""${GITHUB_REPOSITORY%%/*}""
          REPO_NAME=""${GITHUB_REPOSITORY#*/}""
          # Get the list of files
          RELEASE_ARTIFACT=(${{ env.ARTIFACTS_DIR }}/*)
          export GITHUB_TOKEN=${{ secrets.DAPR_BOT_TOKEN }}
          echo ""Uploading release packages to GitHub Release""
          github-release upload \
            --owner $OWNER_NAME \
            --repo $REPO_NAME \
            --body ""Release dapr dashboard v${REL_VERSION}"" \
            --tag ""v${REL_VERSION}"" \
            --name ""Dapr dashboard v${REL_VERSION}"" \
            --prerelease true \
            ${RELEASE_ARTIFACT[*]}
      - name: docker login
        run: |
          docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Build and push docker multiarch manifest to Docker Hub
        if: matrix.target_os != 'darwin'
        run: |
          echo ""Build docker multiarch image manifest and push it""
          make docker-publish DAPR_REGISTRY=${{ secrets.DOCKER_DAPRIO_REGISTRY }} DAPR_TAG=${{ env.REL_VERSION }}
      - name: GitHub container registry login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push docker multiarch manifest to ghcr
        if: matrix.target_os != 'darwin'
        run: |
          echo ""Build docker multiarch image manifest and push it""
          make docker-publish DAPR_REGISTRY=ghcr.io/${{ github.repository_owner }} DAPR_TAG=${{ env.REL_VERSION }}
  helm-build:
    name: Builds Helm chart
    env:
      HELM_PACKAGE_DIR: helm
      HELMVER: v3.7.2
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
      ARTIFACT_DIR: ./helm_release
      DAPR_VERSION_ARTIFACT: dapr_version
    runs-on: ubuntu-latest
    steps:
      - name: Set up Helm ${{ env.HELMVER }}
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELMVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Parse release version and set REL_VERSION and LATEST_RELEASE
        run: python ./.github/scripts/get_release_version.py ${{ github.event_name }}
      - name: Set REPO_OWNER
        shell: bash
        run: |
          REPO_OWNER=${{ github.repository_owner }}
          # Lowercase the value
          echo ""REPO_OWNER=${REPO_OWNER,,}"" >>${GITHUB_ENV}
      - name: Update Helm chart files for release version ${{ env.REL_VERSION }}
        run: ./.github/scripts/set_helm_dapr_version.sh
      - name: Generate Helm chart manifest
        if: env.DOCKER_REGISTRY != ''
        env:
          DAPR_REGISTRY: ${{ env.DOCKER_REGISTRY }}
          DAPR_TAG: ${{ env.REL_VERSION }}
        run: |
          make manifest-gen
        shell: bash
      - name: Move Helm chart manifest to artifact
        if: env.DOCKER_REGISTRY != ''
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}
          mv ./release/install/dapr-dashboard.yaml ${{ env.ARTIFACT_DIR }}/dapr-dashboard.yaml
      - name: Save release version
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          echo ${REL_VERSION} > ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/${{ env.DAPR_VERSION_ARTIFACT }}
      - name: Package Helm chart
        if: ${{ env.LATEST_RELEASE }} == ""true"" && env.DOCKER_REGISTRY != ''
        env:
          HELM_CHARTS_DIR: chart/dapr-dashboard
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          helm package ${{ env.HELM_CHARTS_DIR }} --destination ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: Upload Helm charts package to artifacts
        if: ${{ env.LATEST_RELEASE }} == ""true"" && env.DOCKER_REGISTRY != ''
        uses: actions/upload-artifact@master
        with:
          name: dapr_helm_charts_package
          path: ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
  # This job downloads the helm charts package artifact uploaded by the publish job,
  # checks out the helm charts git hub pages repo and commits the latest version of
  # helm charts package.
  # This does not run on forks
  helm-publish:
    name: Publish Helm charts to Helm github pages repo
    needs: helm-build
    if: startswith(github.ref, 'refs/tags/v') && github.repository_owner == 'dapr'
    env:
      ARTIFACT_DIR: ./helm_release
      DAPR_VERSION_ARTIFACT: dapr_version
      HELM_PACKAGE_DIR: helm
    runs-on: ubuntu-latest
    steps:
      - name: Create Helm charts directory
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: download artifacts - dapr_helm_charts_package
        uses: actions/download-artifact@master
        with:
          name: dapr_helm_charts_package
          path: ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
      - name: Checkout Helm Charts Repo
        uses: actions/checkout@v3
        env:
          DAPR_HELM_REPO: dapr/helm-charts
          DAPR_HELM_REPO_CODE_PATH: helm-charts
        with:
          repository: ${{ env.DAPR_HELM_REPO }}
          ref: refs/heads/master
          token: ${{ secrets.DAPR_BOT_TOKEN }}
          path: ${{ env.DAPR_HELM_REPO_CODE_PATH }}
      - name: Upload helm charts to Helm Repo
        env:
          DAPR_HELM_REPO_CODE_PATH: helm-charts
          DAPR_HELM_REPO: https://dapr.github.io/helm-charts/
        run: |
          daprVersion=`cat ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}/${{ env.DAPR_VERSION_ARTIFACT }}`
          cd ${{ env.ARTIFACT_DIR }}/${{ env.HELM_PACKAGE_DIR }}
          cp -r `ls -A | grep -v ${{ env.DAPR_VERSION_ARTIFACT }}` $GITHUB_WORKSPACE/${{ env.DAPR_HELM_REPO_CODE_PATH }}
          cd $GITHUB_WORKSPACE/${{ env.DAPR_HELM_REPO_CODE_PATH }}
          helm repo index --url ${{ env.DAPR_HELM_REPO }} --merge index.yaml .
          git config --global user.email ""daprweb@microsoft.com""
          git config --global user.name ""dapr-bot""
          git add --all
          # Check if the dapr-dashboard-${daprVersion}.tgz file is modified.
          if git diff --name-only --staged | grep -q ${daprVersion}; then
            # If it is, we update the Helm chart, since this is an intentional update.
            git commit -m ""Release - $daprVersion""
            git push
          else
            # This check is here because the automation can fail, but the manual step is no longer required.
            # If not, this update was accidentally triggered by tagging a release before updating the Helm chart.
            echo ""::error::There is no change for ${daprVersion} Helm chart. Did you forget to update the chart version before tagging?""
            exit -1
          fi",,,,,,Go
4402,https://github.com/cupcakearmy/autorestic,"name: Main

on:
  push:
    tags:
      - ""v*.*.*""

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Labels
        id: meta
        uses: crazy-max/ghaction-docker-meta@v4
        with:
          images: cupcakearmy/autorestic
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: ""^1.20""
      - name: Build
        run: go run build/build.go
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Go
4615,https://github.com/lightninglabs/lightning-terminal,"name: CI

on:
  push:
    branches:
      - ""master""
  pull_request:
    branches:
      - ""*""

env:
  # If you change this value, please change it in the following files as well:
  # /Dockerfile
  # /dev.Dockerfile
  GO_VERSION: 1.21

jobs:
  ########################
  # frontend build checks
  ########################
  frontend:
    name: frontend tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node_version: [16.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup nodejs ${{ matrix.node_version }}
        uses: ./.github/actions/setup-node
        with:
          node-version: '${{ matrix.node_version }}'

      - name: install dependencies
        working-directory: ./app
        run: yarn

      - name: lint code
        working-directory: ./app
        run: yarn lint

      - name: typescript compile
        working-directory: ./app
        run: yarn tsc

      - name: unit tests
        working-directory: ./app
        run: yarn test:ci

  ########################
  # backend build checks
  ########################
  backend:
    name: backend build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        go_version: [1.18.x]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup nodejs ${{ matrix.node_version }}
        uses: ./.github/actions/setup-node
        with:
          node-version: '${{ matrix.node_version }}'

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: build backend binary
        run: make build
        
      - name: build CLI binaries
        run: make go-install-cli

  ########################
  # proto compile check
  ########################
  proto-compile-check:
    name: RPC proto compilation check
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup nodejs ${{ matrix.node_version }}
        uses: ./.github/actions/setup-node
        with:
          node-version: '${{ matrix.node_version }}'

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: install dependencies
        working-directory: ./app
        run: yarn

      - name: run check
        run: make rpc-js-compile && make protos-check

      - name: compile rpc for golang
        run: make rpc

      - name: run check
        run: make mod-check

  ########################
  # check commits
  ########################
  check-commits:
    if: github.event_name == 'pull_request'
    name: check commits
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: fetch and rebase on ${{ github.base_ref }}
        run: |
          git remote add upstream https://github.com/${{ github.repository }}
          git fetch upstream
          export GIT_COMMITTER_EMAIL=""litd-ci@example.com""
          export GIT_COMMITTER_NAME=""LiT CI""
          git rebase upstream/${{ github.base_ref }}

      - name: check commits
        run: scripts/check-each-commit.sh upstream/${{ github.base_ref }}

  ########################
  # lint code
  ########################
  lint:
    # Temporarily disabling the linter while this issue persists:
    #       https://github.com/golangci/golangci-lint/discussions/1920
    if: false
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: prepare dummy static data
        run: mkdir -p app/build; touch app/build/index.html

      - name: run check
        run: make lint mod-check

  ########################
  # unit race tests
  ########################
  unit-race:
    name: unit-race
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: run check
        run: make unit-race

  ########################
  # unit tests
  ########################
  unit:
    name: unit tests
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: run check
        run: make unit

  ########################
  # integration tests
  ########################
  itest:
    name: integration test
    runs-on: ubuntu-latest
    steps:
      - name: git checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: setup nodejs ${{ matrix.node_version }}
        uses: ./.github/actions/setup-node
        with:
          node-version: '${{ matrix.node_version }}'

      - name: setup go ${{ env.GO_VERSION }}
        uses: ./.github/actions/setup-go
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: install dependencies
        working-directory: ./app
        run: yarn

      - name: run check
        run: make itest
",,,,,,Go
4698,https://github.com/peer-calls/peer-calls,"# This workflow will do a clean install of node and go dependencies, and run the CI scripts

name: Peer Calls CI

on:
  push:
    branches: '*'
    tags:
      - v4*
  pull_request:
    branches: [master]

env:
  IMAGE_NAME: peer-calls

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: make lint
  nodejs:
    needs:
    - lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [""18.13""]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run ci
    - name: Upload client-side artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: build
  go:
    runs-on: ubuntu-latest
    needs:
    - lint
    strategy:
      matrix:
        go-version: [""1.19.5""]
    services:
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd ""redis-cli ping""
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v3
    - name: Use Go ${{ matrix.go-version }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - run: touch build/index.js build/style.css
    - run: go test -p 1 ./... -race -coverprofile=coverage.out -v
    - run: go tool cover -func=coverage.out
  build:
    runs-on: ubuntu-latest
    needs:
      - nodejs
      - go
    strategy:
      matrix:
        go-version: [""1.18.4""]
    steps:
    - name: Use Go ${{ matrix.go-version }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/checkout@v3
    - name: Download client-side artifacts
      uses: actions/download-artifact@v1
      with:
        name: build
    - run: find build/
    - run: mkdir -p build/release
    - run: echo ""git_describe=$(git describe --always --tags)"" >> $GITHUB_ENV
    - run: echo $git_describe
    - run: export GOOS=linux GOARCH=amd64; go build -ldflags ""-X main.GitDescribe=$git_describe"" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=linux GOARCH=arm; go build -ldflags ""-X main.GitDescribe=$git_describe"" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=darwin GOARCH=amd64; go build -ldflags ""-X main.GitDescribe=$git_describe"" -o build/release/peercalls.$GOOS.$GOARCH main.go
    - run: export GOOS=windows GOARCH=amd64; go build -ldflags ""-X main.GitDescribe=$git_describe"" -o build/release/peercalls.$GOOS.$GOARCH.exe main.go
    - name: Release
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -xeu
        sha7=${GITHUB_SHA:7}
        assets=()
        cd build/release
        for asset in ./*; do
          archive=$asset.$git_describe.tar.gz
          tar czvf $archive $asset
          assets+=(""-a"" ""$archive"")
        done
        args=()
        if [[ $git_describe =~ alpha|beta ]]; then
          args+=(""--prerelease"")
        fi
        hub release create ""${args[@]}"" ""${assets[@]}"" -t $GITHUB_SHA -m ""PeerCalls $git_describe"" ""$git_describe""
  docker:
    runs-on: ubuntu-latest
    needs:
      - nodejs
      - go
    steps:
    - uses: actions/checkout@v3
    - name: Build image
      run: docker build . --build-arg VERSION=""$(git describe --always --tags --dirty)"" --tag $IMAGE_NAME --label ""runnumber=${GITHUB_RUN_ID}""
    - name: Log in to registry
      run: echo ""${{ secrets.GITHUB_TOKEN }}"" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Push image
      if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo ""${{ github.ref }}"" | sed -e 's,.*/\(.*\),\1,')
        # Strip ""v"" prefix from tag name
        [[ ""${{ github.ref }}"" == ""refs/tags/""* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ ""$VERSION"" == ""master"" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
",,,,,,Go
6386,https://github.com/umputun/secrets,"name: build
on: [push, pull_request]
jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    steps:

    - name: set up go 1.20
      uses: actions/setup-go@v3
      with:
        go-version: ""1.20""
      id: go

    - name: checkout
      uses: actions/checkout@v3

    - name: test
      run: |
        go test -v -mod=vendor -timeout=60s -covermode=count -coverprofile=$GITHUB_WORKSPACE/profile.cov_tmp ./...
        cat $GITHUB_WORKSPACE/profile.cov_tmp | grep -v ""mock_"" > $GITHUB_WORKSPACE/profile.cov
      working-directory: app
      env:
        TZ: ""America/Chicago""

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: install goveralls
      run: go install github.com/mattn/goveralls@latest

    - name: build
      run: go build -v -mod=vendor
      working-directory: app

    - name: submit coverage
      run: $(go env GOPATH)/bin/goveralls -service=""github"" -coverprofile=$GITHUB_WORKSPACE/profile.cov
      env:
        COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: build pr image
      if: github.event_name == 'pull_request'
      run: docker build -t umputun/secrets:master .

    - name: build and push master image
      if: ${{ github.ref == 'refs/heads/master' }}
      run: |
        docker build -t umputun/secrets:master .
        docker login --username ${{ secrets.DOCKERHUB_USER }} --password ${{ secrets.DOCKERHUB_PASSWD }}
        docker push umputun/secrets:master

    - name: deploy tagged (latest) site to ghcr.io and dockerhub
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      run: |
        GIT_TAG=""${GITHUB_REF#refs/tags/}""
        docker build -t umputun/secrets:${GIT_TAG} .
        docker login --username ${{ secrets.DOCKERHUB_USER }} --password ${{ secrets.DOCKERHUB_PASSWD }}
        docker push umputun/secrets:${GIT_TAG}
        docker tag umputun/secrets:${GIT_TAG} umputun/secrets:latest
        docker push umputun/secrets:latest
",,,,,,Go
6875,https://github.com/antonmedv/fx,"name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  go:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Test
      run: go test ./...

  node:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Test
      run: cd npm && node test.js
",,,,,,Go
6902,https://github.com/splash-cli/splash-cli,"name: Go

on:
  workflow_dispatch:
  pull_request_target:
    branches: [go-rewrite, canary]
  push:
    branches: [go-rewrite, canary, feature/*]
    paths-ignore:
      - README.md
      - .github/workflows/go.yml
      - .gitignore
      - .goreleaser.yml
    tags:
      - ""*""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21
      - name: Install dependencies
        continue-on-error: true
        run: |
          go get -u github.com/golang/dep/cmd/dep
          dep ensure
      - name: Run tests
        continue-on-error: true
        run: |
          go test -v ./__tests__
      - name: Snapshot
        uses: goreleaser/goreleaser-action@v2
        with:
          args: --snapshot --rm-dist
          version: latest
          distribution: goreleaser
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          UNSPLASH_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          UNSPLASH_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          DEBUG: true
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Snapshot
          path: dist

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Test
        run: go test -v ./__tests__

      - name: Release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          distribution: goreleaser
          args: release --rm-dist
        env:
          DEBUG: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UNSPLASH_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          UNSPLASH_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
",,,,,,Go
7655,https://github.com/netflix/bettertls,"name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        stable: 'false'
        go-version: '1.18.0-beta1'

    - name: Build
      working-directory: test-suites
      run: go build -v ./...

    - name: Test
      working-directory: test-suites
      run: |
        if [[ -n ""$(find . -name '*.go' | xargs gofmt -d)"" ]]; then echo ""gofmt check failed""; exit 1; fi
        go vet ./...
        go test -v ./...
",,,,,,Go
8031,https://github.com/moul/depviz,"name: Go
on:
  push:
    tags:
      - v*
    branches:
      - master
    paths:
      - '**.go'
      - "".goreleaser.yml""
      - "".golangci.yml""
      - "".dockerignore""
      - ""Makefile""
      - ""rules.mk""
      - ""go.*""
      - "".github/workflows/go.yml""
  pull_request:
    paths:
      - '**.go'
      - "".goreleaser.yml""
      - "".golangci.yml""
      - "".dockerignore""
      - ""Makefile""
      - ""rules.mk""
      - ""go.*""
      - "".github/workflows/go.yml""

jobs:
  goreleaser-dryrun:
    strategy:
      matrix:
        golang: [1.20.x]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang }}
      - name: Cache Go modules
        uses: actions/cache@v3.0.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Run GoReleaser (Dry Run)
        uses: goreleaser/goreleaser-action@v2.6.1
        with:
          version: latest
          args: release --rm-dist --snapshot --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # disabled for now, requires updating all the deps and config.
  #golangci-lint:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      golangci_lint: [v1.47]
  #  steps:
  #    - uses: actions/checkout@v3.0.2
  #    - name: golangci-lint
  #      uses: golangci/golangci-lint-action@v3.4.0
  #      with:
  #        version: ${{ matrix.golangci_lint }}
  #        #github-token: ${{ secrets.GITHUB_TOKEN }}
  #        args: --timeout=2m
  #        only-new-issues: false
  #        working-directory: .
  tests-on-windows:
    needs: golangci-lint # run after golangci-lint action to not produce duplicated errors
    runs-on: windows-latest
    strategy:
      matrix:
        golang: [1.20.x]
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang }}
      - name: Run tests on Windows
        run: make.exe unittest
        continue-on-error: true
  tests-on-mac:
    needs: golangci-lint # run after golangci-lint action to not produce duplicated errors
    runs-on: macos-latest
    strategy:
      matrix:
        golang: [1.20.x]
    env:
      OS: macos-latest
      GOLANG: ${{ matrix.golang }}
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang }}
      - uses: actions/cache@v3.0.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Compile the project
        run: make go.install
      - name: Run tests on Unix-like operating systems
        run: make unittest
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          #token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: unittests
          env_vars: OS,GOLANG
          name: codecov-umbrella
          fail_ci_if_error: false
  tests-on-linux:
    needs: golangci-lint # run after golangci-lint action to not produce duplicated errors
    runs-on: ubuntu-latest
    strategy:
      matrix:
        golang:
          - 1.19.x
          - 1.20.x
    env:
      OS: ubuntu-latest
      GOLANG: ${{ matrix.golang }}
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.golang }}
      - uses: actions/cache@v3.0.6
        with:
          path: ~/go/pkg/mod
          key:          ${{ runner.os }}-go-${{ matrix.golang }}-v1-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.golang }}-v1-
      - name: Compile the project
        run: make go.install
      - name: Check go.mod and go.sum
        run: |
          go mod tidy -v
          git --no-pager diff go.mod go.sum
          git --no-pager diff --quiet go.mod go.sum
      - name: Run tests on Unix-like operating systems
        run: make unittest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          #token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          flags: unittests
          env_vars: OS,GOLANG
          name: codecov-umbrella
          fail_ci_if_error: false
",,,,,,Go
2,https://github.com/connectbot/connectbot,"name: Continuous Integration

on:
  push:
    branches: [ main ]
    tags:
      - ""v*.*.*""
  pull_request:
    branches: [ main ]
  schedule:
    - cron: ""0 7 */3 * *""
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-latest

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Home files
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          GITHUB_TAG=""git-$(git describe)""
          GITHUB_TITLE=""$(git log -1 --pretty=%B | head -1)""
          echo ""${GITHUB_TAG}"" > tag.txt
          echo ""${GITHUB_TAG}: ${GITHUB_TITLE}"" > release-title.txt
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab

      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  upload:
    name: Upload to GitHub releases
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""RELEASE_TITLE=$(cat release-title.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          body: ""Untested build""
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  signing:
    name: Trigger remote signing
    needs: upload
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Call remote signer
        uses: joelwmale/webhook-action@814998dae0915eaf4faec992291eb956ad37d902
        with:
          url: ${{ secrets.SIGNER_WEBHOOK_URL }}
          body: '{""TAG_ID"": ""${{ steps.name.outputs.GITHUB_TAG }}""}'
",,,,,,Java
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
",,,,,,Java
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Java
5,https://github.com/rzwitserloot/lombok,"name: Tests

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Build with Ant
        run: ant -noinput dist
        
      - uses: actions/upload-artifact@v3
        with:
          name: lombok.jar
          path: dist/lombok.jar
    
  
  test-javac:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
        goal: [javacCurrent]
        include:
          - jdk: 11
            goal: javac6
          - jdk: 11
            goal: javac8
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ matrix.jdk }}
        if: ${{ matrix.jdk != 21 }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'zulu'
      
      - name: Set up JDK 21-ea
        if: ${{ matrix.jdk == 21 }}
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 21
          version: latest
          
      - name: Install Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.zip
          unzip apache-ant-1.10.13-bin.zip -d ""${HOME}""
          echo ""ANT_HOME=${HOME}/apache-ant-1.10.13"" >> $GITHUB_ENV
          echo ""${HOME}/apache-ant-1.10.13/bin"" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Run tests
        run: ant -noinput test.${{ matrix.goal }}
  
  test-eclipse:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        version:
        - eclipse-oxygen
        - eclipse-202006
        - eclipse-202006-jdk8
        - eclipse-202212
        - eclipse-oxygen-full
        - eclipse-2022-03-full
        - ecj11
        - ecj14
        - ecj16
        - ecj19
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
          
      - name: Build with Ant
        run: xvfb-run ant -noinput dist test.${{ matrix.version }}
        
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [8, 11, 17, 21]
        tool: 
          - {name: ""maven"",  cmd: ""mvn compile""}
          - {name: ""gradle"", cmd: ""gradle assemble""}
          - {name: ""ant"",    cmd: ""ant dist""}
          - {name: ""bazel"",  cmd: ""bazel build //:ProjectRunner""}
      fail-fast: false
    env:
      IMAGE_NAME: lombok-${{ matrix.tool.name }}-jdk${{ matrix.jdk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/download-artifact@v3
        with:
          name: lombok.jar
        
      - name: Build container
        working-directory: ./docker
        run: docker build --build-arg jdk=${{ matrix.jdk }} -t $IMAGE_NAME -f ${{ matrix.tool.name }}/Dockerfile .
        
      - name: Compile in container
        run: docker run --entrypoint="""" -v $(pwd)/lombok.jar:/workspace/lombok.jar $IMAGE_NAME /bin/bash -c ""cd classpath; ${{ matrix.tool.cmd }}""
",,,,,,Java
6,https://github.com/apache/hive,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  macos-jdk8:
    name: 'macOS (JDK 8)'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build project'
        run: |
          mvn clean install -DskipTests -Pitests
",,,,,,Java
7,https://github.com/apache/directory-studio,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '42 18 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        mvn -f pom-first.xml clean install
        mvn clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
",,,,,,Java
9,https://github.com/github-api/github-api,"name: CI

on: 
  push:
    branches:
      - main
      - '!/refs/heads/dependabot/*'
  pull_request:
    branches:
      - '*'
      - '!/refs/heads/patch*'

# this is required by spotless for JDK 16+
env:
  JAVA_11_PLUS_MAVEN_OPTS: ""--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED""

permissions:
  contents: read

jobs:
  build:
    name: build-only (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Install (skipTests)
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -DskipTests --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
        name: maven-target-directory
        path: target/
        retention-days: 3
  site:
    name: site (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Site
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean site -D enable-ci --file pom.xml
  test:
    name: test (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows ]
        java: [ 11, 17 ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    # JDK 11+
    - name: Maven Install without Code Coverage
      if: matrix.os == 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D japicmp.skip=true --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Maven Install with Code Coverage
      if: matrix.os != 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D enable-ci --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Codecov Report 
      if: matrix.os == 'ubuntu' && matrix.java == '17'
      uses: codecov/codecov-action@v3.1.4

  test-java-8:
    name: test Java 8 (no-build)
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: maven-target-directory
        path: target
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: 'maven'   
    - name: Maven Test (no build) Java 8
      run: mvn -B surefire:test -DfailIfNoTests -Dsurefire.excludesFile=src/test/resources/slow-or-flaky-tests.txt
",,,,,,Java
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
",,,,,,Java
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
",,,,,,Java
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
",,,,,,Java
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
",,,,,,Java
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Java
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
17,https://github.com/enginehub/worldedit,"name: Gradle Build
on: [push, pull_request]

jobs:
  build:
    name: Build WorldEdit on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        cache: 'gradle'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build -s
    - uses: actions/upload-artifact@v3
      name: Archive Reports
      if: always()
      with:
        name: reports for ${{ matrix.os }}
        path: '**/build/reports/**'
    - uses: actions/upload-artifact@v3
      name: Archive Logs
      if: always()
      with:
        name: logs for ${{ matrix.os }}
        path: '**/*.log'

",,,,,,Java
18,https://github.com/bartdag/py4j,"name: test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        java-version: [ 8 ]
        python-version: [ '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10' ]
        include:
          - os: windows-2019
            java-version: 17
            python-version: '3.10'
          - os: ubuntu-18.04
            java-version: 11
            python-version: '2.7'
          - os: ubuntu-18.04
            java-version: 17
            python-version: '3.8'
    name: Py ${{ matrix.python-version }}, Java ${{ matrix.java-version }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # pin@v2.3.5

      - name: Setup Java 8 JDK for build
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6 # pin @v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Install dependencies
        run: |
          pip install pytest
          cd py4j-java
          # Useful in case the build stops working because of version issues.
          ./gradlew --version
          echo `java -version` && echo `javac -version` && echo `python --version`
          echo $PATH
          echo $JAVA_HOME
          ./gradlew clean
        shell: bash

      - name: Enable IPV6
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

      - name: Run gradle tests
        run: |
          cd py4j-java
          ./gradlew check
          ./gradlew assemble

      - name: Setup Java ${{ matrix.java-version }} JDK for PyTest
        if: ${{ matrix.java-version != '8' }}
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Run PyTest
        run: |
          cd py4j-python
          echo `java -version`
          echo $JAVA_HOME
          # Java TLS tests are disabled until they can be fixed (refs #441)
          pytest -k ""not java_tls_test.""

  test-doc:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: |
          python3 -m pip install -r py4j-web/requirements-doc.txt
          python3 -m pip list

      - name: Setup Java 8 JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Javadoc build
        run: |
          cd py4j-java && ./gradlew javadoc && cd ..
          mv py4j-java/build/docs/javadoc py4j-web/_static/

      - name: Sphinx build
        run: |
          cd py4j-web && make clean html && cd ..
          mv py4j-web/_build/html ../ # Move out of the current repo for GitHub Pages.

      # Publishing documentation only for commits in the master branch.
      - name: Checkout GitHub Pages branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Copy the generated site
        if: github.event_name != 'pull_request'
        run: |
          # Include Javadoc if the commit is tagged (for releases only).
          if [ -z ""`git describe --tags --exact-match 2>/dev/null`"" ]; then
            rm -fr ../html/_static/javadoc
            [ -d _static/javadoc ]  && mv _static/javadoc ../html/_static
          fi

          rm -fr * # Remove existing site
          touch .nojekyll # See https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages
          echo ""www.py4j.org"" > CNAME # Custom domain for GitHub Actions
          cp -r ../html/* . # Move generated site to the current repo.

      - name: Push new site
        uses: EndBug/add-and-commit@v8
        if: github.event_name != 'pull_request'
        with:
          default_author: github_actions
          message: Push new site by ${{ github.sha }}
          add: ""*""
          push: ""--force"" # In case it conflicts with the same step in another workflow.
",,,,,,Java
19,https://github.com/plantuml/plantuml,"name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
      do_javadoc: ${{ steps.config.outputs.do_javadoc }}
      do_test_linux: ${{ steps.config.outputs.do_test_linux }}
      do_test_windows: ${{ steps.config.outputs.do_test_windows }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          if [[ ""${GITHUB_EVENT_NAME}"" == ""create"" && ""${REF_TYPE}"" == ""tag"" && ""${REF}"" == v* && \
                ( ""${ACTOR}"" == ""arnaudroques"" || ""${ACTOR}"" == ""${GITHUB_REPOSITORY_OWNER}"" ) \
             ]]; then
            echo ""::notice title=::This run will release '${REF}'""
            echo ""do_release=true"" >> $GITHUB_OUTPUT
            echo ""pom_version=${REF#v}""
            echo ""pom_version=${REF#v}"" >> $GITHUB_OUTPUT # pom_version is the tag without the 'v' prefix
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          elif [[ ""${GITHUB_EVENT_NAME}"" =~ push|workflow_dispatch && ""${REF}"" == ""refs/heads/master"" && ""${ACTOR}"" == ""arnaudroques"" ]]; then
            echo ""::notice title=::This run will release a snapshot""
            echo ""do_snapshot_release=true"" >> $GITHUB_OUTPUT
            V=$(perl -ne 'if (/return (\d{6,7});/) {$v=$1} if (/final int beta = (\d+);/) {$b=$1} END{print(substr($v, 0, 1),""."", substr($v, 1, 4),"".""); if ($b) {print(int(substr($v+1, 5)), ""beta"", $b);} else {print(int(substr($v, 5)))}}' src/net/sourceforge/plantuml/version/Version.java)
            echo ""pom_version=$V-SNAPSHOT""
            echo ""pom_version=$V-SNAPSHOT"" >> $GITHUB_OUTPUT # pom_version is taken from Version.java
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          else
            echo ""This run will NOT make a release""
            echo ""do_javadoc=false"" >> $GITHUB_OUTPUT
            echo ""This run will NOT update the Javadoc""
          fi
          echo ""do_test_linux=true"" >> $GITHUB_OUTPUT
          echo ""do_test_windows=false"" >> $GITHUB_OUTPUT

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  # We split windows and ubuntu because windows is so slow...
  test_linux:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        java_version: [ 8, 17 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/checkout@v4

      - name: Set up java
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: gradle

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle -q compileJava --no-daemon

      - name: Test
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle test --no-daemon -i

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing from several builds
          name: ${{ github.run_number }}-${{ matrix.os }}-java-${{ matrix.java_version }}-test-reports
          path: build/reports/tests/


  build_artifacts:
    needs: [ workflow_config ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
#      - name: Set version in gradle.properties
#        if: env.POM_VERSION
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
#        run: |
#          sed -i ""s/version = .*/version = $POM_VERSION/"" gradle.properties
#          cat gradle.properties
      - name: Generate artifacts
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          gradle clean build \
            pdfJar \
            generateMetadataFileForMavenPublication generatePomFileForMavenPublication \
            -x test
          find . -name ""*.jar""
      - name: Sign artifacts
        if: env.ORG_GRADLE_PROJECT_signingKey
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          gradle -i signMavenPublication signPdfJar
          ls -l build/libs
          ls -l plantuml-asl/build/libs
          ls -l plantuml-bsd/build/libs
          ls -l plantuml-epl/build/libs
          ls -l plantuml-lgpl/build/libs
          ls -l plantuml-mit/build/libs
          ls -l plantuml-gplv2/build/libs
      - name: Get release version
        id: version
        run: |
          echo ""release_version=$(gradle properties -q | grep ""version:"" | awk '{print $2}')"" >> $GITHUB_OUTPUT
      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          enableCrossOsArchive: true

  deploy_javadoc:
    needs: [ build_artifacts, test_linux ]
    if: needs.workflow_config.outputs.do_javadoc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build Javadoc
        run: gradle javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/javadoc


  upload:
    if: |
      needs.workflow_config.outputs.do_release == 'true' ||
      needs.workflow_config.outputs.do_snapshot_release == 'true'
    needs: [ workflow_config, build_artifacts, test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds
          name: ${{ github.run_number }}-artifacts
          path: |
            build/libs/*
            build/publications/maven/*
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs

      - name: Create snapshot
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release-snapshot.sh

      - name: Create release in GitHub and OSSRH
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.ref }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release.sh
          gradle --debug publish

  push_to_docker_registry:
    needs: [ workflow_config, upload, test_linux ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PLANTUML_VERSION=${{ github.event.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
",,,,,,Java
20,https://github.com/kordamp/json-lib,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2006-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on:
  pull_request:

env:
  JAVA_VERSION: '8'
  JAVA_DISTRO: 'zulu'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build -S
",,,,,,Java
21,https://github.com/json-path/jsonpath,"---
name: Java CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 18]
      fail-fast: false
      max-parallel: 4
    name: JDK ${{ matrix.java }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run Tests
        run: ./gradlew check

      - name: Maven Install
        run: ./gradlew clean publishToMavenLocal

...
",,,,,,Java
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
",,,,,,Java
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
",,,,,,Java
24,https://github.com/hibernate/hibernate-tools,"name: Build and Test

on:
  pull_request

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        java-package: jdk
        architecture: x64

    - name: Build and Test
      uses: GabrielBB/xvfb-action@v1
      with: 
        run: mvn clean install 

",,,,,,Java
25,https://github.com/pexplugins/permissionsex,"# Making changes? https://github.com/nektos/act may help you test locally

name: Build And Test

on: [push, pull_request]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.repository.full_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            build/test-results/test/
            */build/test-results/test/
            platform/*/build/test-results/test
      - name: Archive distributable plugins
        uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }} # Only upload one set of artifacts
        with:
          name: PermissionsEx (all platforms)
          path: build/libs/
      - name: Publish to Maven
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_pexUsername: ${{ secrets.REPO_USERNAME }}
          ORG_GRADLE_PROJECT_pexPassword: ${{ secrets.REPO_PASSWORD }}
          ORG_GRADLE_PROJECT_stellardriftUsername: ${{ secrets.STELLARDRIFT_REPO_USER }}
          ORG_GRADLE_PROJECT_stellardriftPassword: ${{ secrets.STELLARDRIFT_REPO_PASSWORD }}
",,,,,,Java
26,https://github.com/mcmics/jenkins-control-plugin,"name: IntelliJ Platform Plugin Compatibility

on:
  push:

jobs:
  compatibility:
    name: Ensure plugin compatibility for IDEA Community, IDEA Ultimate, PyCharm Community, GoLand, CLion, and the latest EAP snapshot of IDEA Community.
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          cache: gradle

      - name: Build the plugin using Gradle
        run: ./gradlew buildPlugin

      - name: Verify Plugin on IntelliJ Platforms
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v2.0.0
        with:
          ide-versions: .github/workflows/ide_versions_file.txt

      - name: Get log file path and print contents
        run: |
          echo ""The verifier log file [${{steps.verify.outputs.verification-output-log-filename}}] contents : "" ;
          cat ${{steps.verify.outputs.verification-output-log-filename}}
",,,,,,Java
27,https://github.com/griffon/griffon,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2008-2021 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    name: Build
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cancel previous runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: 'jdk+fx'

      - name: Gradle caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      - name: Build
        run: ./gradlew build -S
",,,,,,Java
28,https://github.com/liquibase/liquibase,"name: Build and Test



concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      archive_test_results:
        description: 'If set to true, the unit and integration test results will be archived to the build artifacts page.'
        required: false
        default: 'false'
  # DAT branches can get triggered from this logic
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

  push:
    branches:
      - master
      - main
      - github-action-**
    paths-ignore:
      - '**.md'

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  check_build_safety:
    permissions:
      contents: none
    name: Check if Build should be done
    runs-on: ubuntu-22.04
    steps:
      - name: Emit failure code for unsafe fork PRs
        if: github.event.pull_request && github.event.pull_request.head.repo.full_name != 'liquibase/liquibase' && github.event.label.name != 'SafeToBuild'
        run: |
          echo ""PR from Fork is NOT safe to build""
          echo ""A member of Liquibase team needs to apply label 'SafeToBuild'! ""
          exit 1

  setup:
    name: Setup
    needs: check_build_safety
    runs-on: ubuntu-22.04
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepoName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepoName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
      timestamp: ${{ steps.get-date.outputs.date }}
      setupSuccessful: ""true""
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed(""Fail every 5 run attempts to catch accidental infinite loops"");
            }
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Get current date
        id: get-date
        run: echo ""::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S %Z')""

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput(""thisSha"", helper.getCurrentSha());
            core.setOutput(""thisBranchName"", helper.getCurrentBranch());
            core.setOutput(""thisBranchFileName"", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_\.]/g, ""_""));
            core.setOutput(""thisRepoName"", helper.getRepositoryName());
            core.setOutput(""thisRepoOwner"", helper.getRepositoryOwner());

            let proStatusMessage = ""success"";
            let proFailed = false;

            let branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput(""standAlonePR"", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput(""standAlonePR"", true);
            }

            if (!branch.lastSuccessfulRunNumber) {
              proFailed = true;
              proStatusMessage = ""Matching pro branch has never passed. Falling back to master""
              branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"", [""main"", ""master""])
            }
            core.setOutput(""proBranchName"", branch.name);
            core.setOutput(""proBranchSha"", branch.sha);

            if (!proFailed) {
              if (!branch.workflowId) {
                proStatusMessage = ""does not have a ran workflow"";
                proFailed = true
              } else if ( branch.runStatus != ""completed"") {
                proStatusMessage = ""build is ""+ branch.runStatus;
                proFailed = true
              } else if ( branch.runConclusion != ""success"") {
                proStatusMessage = ""build conclusion was ""+branch.runConclusion;
                proFailed = true
              }
            }

            statusMessage = ""liquibase/liquibase-pro:""+branch.name+""@"" + branch.sha.substring(0, 7) + "" "" + proStatusMessage;
            console.log(""Pro failed?"" + proFailed + "": ""+statusMessage);

            github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": (proFailed ? ""failure"" : ""success""),
              ""target_url"": branch.runHtmlUrl,
              ""context"": ""Stable Liquibase Pro"",
              ""description"": statusMessage
            });

            core.setOutput(""stablePro"", !proFailed);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build:
    name: Build & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 20 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 20
          - os: windows-2019
            java: 20
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 11}}
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Build & Test Java 8
        if: ${{ matrix.java == 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" -pl '!liquibase-cdi-jakarta' clean verify -DskipITs
      - name: Build & Test Java non-jdk-8
        if: ${{ matrix.java != 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" clean verify -DskipITs

      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Save Jacoco Report for Sonar
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-jacoco-test-results
          path: |
            ./liquibase-standard/target/jacoco.exec

      - name: Archive Modules
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        testSystem:
           - db2
           - h2
           #- h2:1.4
           - hsqldb
           - mariadb
           - mssql
           - mysql
           - oracle
           - postgresql
           - sqlite
           - firebird
    needs: setup
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Prepare
        id: prepare
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput(""testResultsArtifact"", ""liquibase-test-results-integration-${{ matrix.testSystem }}"".replace(/[^a-zA-Z0-9\-_]/g, ""_""));

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Restore Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v2
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Run Tests
        run: mvn -B clean verify -DtrimStackTrace=false -Dliquibase.sdk.testSystem.test=${{ matrix.testSystem }} -Dliquibase.sdk.testSystem.acceptLicenses=${{ matrix.testSystem }} -Dtest='*IntegrationTest,*ExecutorTest' -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.testResultsArtifact }}
          path: |
            ./**/target/surefire-reports

      - name: Save Jacoco Report for Sonar
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-integration-jacoco-test-results-${{ matrix.testSystem }}
          path: |
            ./liquibase-integration-tests/target/jacoco.exec

  sonar:
    needs: [ build, integration-test ]
    uses: liquibase/build-logic/.github/workflows/sonar-test-scan.yml@v0.4.7
    with:
      thisBranchName: ${{ needs.setup.outputs.thisBranchName }}
      thisSha: ${{ needs.setup.outputs.thisSha }}
      liquibaseBranchName: ${{ needs.setup.outputs.liquibaseBranchName }}
      pullRequestNumber: ${{ github.event.pull_request.number }}
      pullRequestBranchName: ${{ github.event.pull_request.head.ref }}
      pullRequestBaseBranchName: ${{ github.event.pull_request.base.ref }}
      testedClassesModuleName: liquibase-standard
      dbPlatforms: h2,hsqldb,mariadb,mssql,mysql,oracle,postgresql,sqlite,firebird
    secrets: inherit

  package:
    name: Package Artifacts
    runs-on: macos-latest
    needs: [ setup, build ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      # this includes all the tar files included in the previous runs. So in the next step we deploy what was previously build
      - name: Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      ##Cache based on install4j file, since changes to JVM is seen in there. If install4j version changes without changing the file, change the prefix letter before hashFiles to force a new cache
      - name: Install4j Cache
        uses: actions/cache@v3.3.1
        with:
          key: install4j-A${{ hashFiles('liquibase-dist/src/main/install4j/liquibase.install4j') }}
          path: ~/.install4j8/**

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'
          overwrite-settings: false
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: |
            [
              {
                ""id"": ""liquibase"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              },
              {
                ""id"": ""liquibase-pro"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase-pro"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              }
            ]
          servers: |
            [
              {
                ""id"": ""liquibase-pro"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              },
              {
                ""id"": ""liquibase"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              }
            ]

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Version artifact based off of branch
      - name: Version Artifact
        run: |
          version=${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          # Replace / with - in branch name
          version=$(echo ""$version"" | sed 's/\//-/g')
          mvn versions:set -DnewVersion=""$version""

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo ""Saving apple key""
          echo ""$INSTALL4J_APPLE_KEY"" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo ""Saving windows key""
          echo ""$INSTALL4J_WINDOWS_KEY"" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx
          # we are packaging and deploying liquibase tar which includes liquibase-commercial
          mvn -B -pl liquibase-dist -P liquibase-commercial source:jar package -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}""

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && tar -xzf ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz)

          ## verify that the contents of the tar matches the expectation
          echo ""Comparing the contents of the tar.gz with the expected contents (using baseline file in liquibase-dist directory) to ensure that no new files were accidentally added. A failure here indicates that a new file was added to the tar.gz, and it should either be rectififed or added to the baseline.""
          brew install tree --quiet
          tree liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT -o actual-distribution-contents.txt --noreport
          # remove first line of actual, because it contains the folder name, which the expected will not have
          echo ""$(tail -n +2 actual-distribution-contents.txt)"" > actual-distribution-contents.txt
          diff actual-distribution-contents.txt liquibase-dist/expected-distribution-contents.txt
          rm -rf actual-distribution-contents.txt
          
          ##create zip file from tar content
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && zip -r ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip *)
          ls liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          
          ##create installer - disabled here but run as nightly job and as part of release workflow
          # (cd liquibase-dist && ${{ github.workspace }}/.github/util/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;
          
          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts/liquibase-core-0-SNAPSHOT.jar
          cp liquibase-core/target/liquibase-core-0-SNAPSHOT-sources.jar artifacts/liquibase-core-0-SNAPSHOT-sources.jar
          cp target/liquibase-0-SNAPSHOT-javadoc.jar artifacts/liquibase-core-0-SNAPSHOT-javadoc.jar

          ##create installer - disabled here but run as nightly job and as part of release workflow
          #cp liquibase-dist/target/liquibase-*-installer-* artifacts

          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-javadoc.jar artifacts

          echo ""Source code not available for liquibase-commercial"" > /tmp/readme.source.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar readme.source.txt)

          echo ""Javadocs not available for liquibase-commercial"" > /tmp/readme.javadocs.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar readme.javadocs.txt)

          commercialJarM2Location=/Users/runner/.m2/repository/org/liquibase/liquibase-commercial/${{ needs.setup.outputs.proBranchName }}-SNAPSHOT/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT.jar
          cp $commercialJarM2Location artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar artifacts

          .github/util/sign-artifacts.sh artifacts

          ##prepare branch-named convenience artifacts directories
          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.tar.gz
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          #cp liquibase-core/target/liquibase-core-0-SNAPSHOT.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts-named/liquibase-maven-plugin-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-jakarta-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT-deps.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}-deps.jar
          cp $commercialJarM2Location artifacts-named/liquibase-commercial-${{ needs.setup.outputs.thisBranchFileName }}.jar

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchFileName }}
          path: liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchFileName }}
          path: artifacts-named/*


      # Publish to GitHub Packages. We are building a tar file which includes liquibase-commercial hence we need ""-Dliquibase-pro.version""
      - name: Publish tar.gz package to GPM
        run: |
          mvn -B -pl liquibase-dist -P liquibase-commercial clean deploy -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # this triggers the pro-tests and test-harness to run
  finish:
    name: Finish Build
    runs-on: ubuntu-22.04
    needs: [ setup, build, package, sonar]
    if: ${{ needs.setup.outputs.setupSuccessful }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Coordinate Liquibase-Pro
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            let currentBranchInfo = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");

            let thisStatus = ""${{ needs.package.result }}"" == ""success"" ? ""success"" : ""failure"";
            let stablePro = (""${{ needs.setup.outputs.stablePro }}"" == ""true"");
            let standalonePR = ""${{ needs.setup.outputs.standAlonePR }}"" == ""true"";

            console.log(""Stand alone PR: ""+standalonePR);

            let runFunctionalTests = false;
            let markFunctionalTestsStatus = ""failure"";
            let markFunctionalTestsDescription = ""Unexpected setup"";

            if (stablePro) {
              console.log(""Pro is stable"");

              runFunctionalTests = true;
              markFunctionalTestsStatus = ""pending"";
              markFunctionalTestsDescription = ""Trigger internal functional tests"";
            } else {
              console.log(""Last pro was unstable"");

              runFunctionalTests = false;
              markFunctionalTestsStatus = ""failure"";
              markFunctionalTestsDescription = ""Liquibase Pro is unstable"";

              let checks = await github.rest.repos.listCommitStatusesForRef({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""ref"": currentBranchInfo.sha
              });

              let failedCheckingUs = false;
              if (standalonePR) {
                for (let status of checks.data) {
                  if (status.context == ""Stable Liquibase Core"") {
                    console.log(""Stable Liquibase Core is ""+ status.state);
                    failedCheckingUs = (status.state == ""failure"");
                  }
                }
              }

              if (failedCheckingUs) {
                console.log(""Rerun liquibase-commercial that was waiting on us"");

                //octokit removed the retryWorkflow function
                github.request(""POST ""+currentBranchInfo.runRerunUrl);

                //await github.rest.actions.retryWorkflow({
                //    ""owner"": ""liquibase"",
                //    ""repo"": ""liquibase-pro"",
                //    ""run_id"": currentBranchInfo.workflowId
                //});
              }
            }

            if (standalonePR) {
              console.log(""Do not mark base pro branch as included in this"");
            } else {
              console.log(""Mark 'Included in Liquibase Core' status as ""+thisStatus);
              github.rest.repos.createCommitStatus({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""sha"": currentBranchInfo.sha,
                ""state"": thisStatus,
                ""context"": ""Stable Liquibase Core"",
                ""target_url"": currentBranchInfo.runHtmlUrl,
                ""description"": ""Latest Liquibase Core build""
              });
            }

            if (runFunctionalTests) {
              let testsBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro-tests"");

              let notices = [];
              if (context.payload.pull_request) {
                console.log(""Sending pull request information"");
                notices = [""Triggered by PR "" + context.payload.pull_request.html_url];
              }
              console.log(""Trigger functional tests"");
              let workflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro-tests"",
                ""workflow_id"": ""test.yml"",
                ""ref"": testsBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });

              let testHarnessBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-test-harness"");
              if (testHarnessBranch.name == ""main"" || testHarnessBranch.name == ""master"") {
                testHarnessBranch.name = ""develop"";
              }
            
              console.log(""Trigger Test Harness tests"");
              let testHarnessWorkflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-test-harness"",
                ""workflow_id"": ""main.yml"",
                ""ref"": testHarnessBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""liquibaseRepo"": ""liquibase/liquibase"",
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });
            }

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Functional Tests"",
              ""description"": markFunctionalTestsDescription
            });

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Test Harness"",
              ""description"": markFunctionalTestsDescription
            });
",,,,,,Java
29,https://github.com/eclipse/jetty.project,"name: ""CodeQL""

on:
  push:
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  schedule:
    - cron: '22 1 * * 2'

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        languages:
          - java
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install and setup JDK 11
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-10.') ||
          startsWith(github.ref, 'refs/heads/jetty-11.') ||
          startsWith(github.base_ref, 'jetty-10.') ||
          startsWith(github.base_ref, 'jetty-11.')
          }}
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      # Install and setup JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-12.') ||
          startsWith(github.base_ref, 'jetty-12.')
          }}
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.languages }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
          
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6   

      - name: Clean install dependencies and build
        run: mvn clean install -DskipTests -B

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
",,,,,,Java
30,https://github.com/netflix/astyanax,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
31,https://github.com/netflix/priam,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
32,https://github.com/apereo/cas,"name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_BUILD_OPTIONS: ""--no-daemon -x check -x test -x javadoc --configure-on-demand --max-workers=8 --no-configuration-cache""
  TERM: xterm-256color
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_BUILDCACHE_USER: ci
  GRADLE_BUILDCACHE_PSW: ${{ secrets.GRADLE_BUILDCACHE_PSW }}
  GH_PACKAGE_REGISTRY_USER: ${{ secrets.GH_PACKAGE_REGISTRY_USER }}
  GH_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GH_PACKAGE_REGISTRY_TOKEN }}
  JDK_CURRENT: 21
  JDK_LATEST: 21
  JDK_DISTRIBUTION: ""corretto""

##########################################################################

on:
  schedule:
    - cron: '0 23 * * *'
#  push:
#    branches: [ master ]
#  pull_request:
#    types: [ labeled ]
#    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: macos-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}

  ##########################################################################

  initialize:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: ls ./ci && find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh

  ##########################################################################

  build:
    needs: [initialize]
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
        shell: bash
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build ${{ env.GRADLE_BUILD_OPTIONS }}
      - uses: actions/upload-artifact@v3
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*

  ##########################################################################

  build-latest-jdk:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_LATEST }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build -DskipAot=true ${{ env.GRADLE_BUILD_OPTIONS }}

  ##########################################################################

  build-graalvm:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: ${{ env.JDK_CURRENT }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'
          set-java-home: 'true'
      - name: GraalVM Versions
        run: |
          echo ""GRAALVM_HOME: $GRAALVM_HOME""
          echo ""JAVA_HOME: $JAVA_HOME""
          java --version
          native-image --version
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        timeout-minutes: 90
        run: chmod +x ./ci/tests/native/build.sh && ./ci/tests/native/build.sh
",,,,,,Java
33,https://github.com/bwaldvogel/mongo-java-server,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11', '17', '20' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Publish coverage
      run: ./gradlew build
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
",,,,,,Java
34,https://github.com/openstreetmap/osmosis,"name: Continuous Integration
on: [push, pull_request]
jobs:
  Continous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: ./docker.sh ./gradlew build
",,,,,,Java
35,https://github.com/geotools/geotools,"name: Assembly bundle and test

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3 -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

jobs:
  build:
    runs-on: [ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Maven repository caching
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: gt-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          gt-maven-
    - name: Setup python for docs
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip' # caching pip dependencies from requirements.txt below
    - name: Setup python pip requirements for building docs
      working-directory: docs
      run: |
        pip install -r requirements.txt
    - name: Disable checksum offloading
      # See: https://github.com/actions/virtual-environments/issues/1187#issuecomment-686735760
      run: sudo ethtool -K eth0 tx off rx off
    - name: Build with Maven
      run: |
        mvn -B clean install -DskipTests -Dall -T2 --file pom.xml
    - name: Assemble downloads
      run: |
        mvn -B -DskipTests assembly:single -file release/pom.xml
    - name: Test bin download run and compile
      shell: bash
      working-directory: release/target
      run: |
        echo ""List assemblies:""
        ls geotools-*.zip
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*bin.zip` -d bin-download
        cd bin-download
        cd `ls -d geotools-*/`
        echo ""Running GeoTools.main()...""
        java -cp ""lib/*"" org.geotools.util.factory.GeoTools
        echo ""Compiling Quickstart.java""
        mkdir bin
        javac -cp ""lib/*"" -d bin src/org/geotools/tutorial/quickstart/Quickstart.java
        ls -R bin | grep Quickstart
    - name: Test user guide download
      shell: bash
      working-directory: release/target
      run: |
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*userguide.zip` -d userguide-download
        cd userguide-download
        cd `ls -d geotools-*/`
        
        
    - name: Remove SNAPSHOT jars from repository
      run: |
        find ~/.m2/repository -name ""*SNAPSHOT*"" -type d | xargs rm -rf {}
",,,,,,Java
36,https://github.com/sonyxperiadev/chkbugreport,"name: Java CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build core and unit test with gradle
      run: cd core && ./gradlew build
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ChkBugReport
        path: core/build/distributions/ChkBugReport.tar
",,,,,,Java
37,https://github.com/marytts/marytts,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 12 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew build

      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
",,,,,,Java
38,https://github.com/kaljurand/k6nele,"name: Android CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
39,https://github.com/spring-projects/spring-security-kerberos,"name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'spring-projects/spring-security-kerberos' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - nickname: linux adopt 17
            version: 17
            distribution: adopt
          - nickname: linux liberica 17
            version: 17
            distribution: liberica
    name: CI Build ${{ matrix.nickname }}
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.version }}
      - name: Build
        env:
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: ./gradlew build
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: buildreports
          retention-days: 1
          path: |
            */build/reports
            spring-security-kerberos-samples/*/build/reports
  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: adopt
          java-version: 17
      - name: Build
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_TOKEN_USERNAME: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          OSSRH_TOKEN_PASSWORD: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: |
          ./gradlew build publishArtifacts \
            -PossrhUsername=""$OSSRH_TOKEN_USERNAME"" \
            -PossrhPassword=""$OSSRH_TOKEN_PASSWORD"" \
            -PartifactoryUsername=""$ARTIFACTORY_USERNAME"" \
            -PartifactoryPassword=""$ARTIFACTORY_PASSWORD""
  docs:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - uses: actions/checkout@v3
      - name: Dispatch (partial build)
        if: github.ref_type == 'branch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.ref_name }}
",,,,,,Java
40,https://github.com/gentlecat/counter,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
41,https://github.com/apereo/java-cas-client,"#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the ""License""); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  TERM: xterm-256color
  SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
  SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
  GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  JDK_CURRENT: 17

##########################################################################

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: cancel-previous-runs
    steps:
      - uses: actions/checkout@v4
      #      - name: Setup tmate session
      #        uses: mxschmitt/action-tmate@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Build with Gradle
        run: mvn clean install

  ##########################################################################

  publish-snapshots:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Publish SNAPSHOTs
        if: ${{ env.SONATYPE_USER != null && env.SONATYPE_PWD != null }}
        run:  mvn deploy --settings ./.github/workflows/settings.xml

",,,,,,Java
42,https://github.com/dotcms/core,"name: Sonar Qube Scan Gradle
on:
  push:
    branches:
      - master 
      - testing-sonarqube
    paths: ['dotCMS/**']
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - master
      - release-*
    paths: ['dotCMS/**']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_SCANNER_OPTS: ""-Xmx3g""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd dotCMS && ./gradlew generateDependenciesFromMaven && ./gradlew build sonarqube --info
",,,,,,Java
43,https://github.com/kshoji/usb-midi-driver,"name: Android CI

on:
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
44,https://github.com/romraider/romraider,"name: RomRaider build

on: [push,pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
      - name: set JRE_DIR environment variable
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo ::set-env name=JRE_DIR::$(echo $JAVA_HOME)/jre

      - name: Test Compiler
        run: javac -version

      - name: All
        run: |
          echo JRE_DIR=$JRE_DIR
          ant all
",,,,,,Java
45,https://github.com/netflix/archaius,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - 2.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8' # For publishing build with 8 for compatibility
          distribution: 'zulu'
      - uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v3
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
46,https://github.com/find-sec-bugs/find-sec-bugs,"# CI Task using https://github.com/jwgmeligmeyling/spotbugs-github-action

name: Java CI with SpotBugs

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run: mvn clean install -DskipTests com.github.spotbugs:spotbugs-maven-plugin:3.1.12:spotbugs
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'",,,,,,Java
47,https://github.com/jknack/handlebars.java,"name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [1.8, 11, 15, 17]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Mustache Specs
        run: |
          git submodule update --init --recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}
      - name: Install
        run: mvn clean install -DskipTests --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
      - name: Build
        run: mvn clean package --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
",,,,,,Java
48,https://github.com/wolpi/prim-ftpd,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Output event
      env:
        EVENT: ${{ github.event_name }}
      run: echo github.event_name $EVENT.
    - name: Publish package
      if: ${{ github.event_name == 'push' }}
      uses: gradle/gradle-build-action@v2
      with:
        arguments: publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

",,,,,,Java
49,https://github.com/netflix/governator,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
50,https://github.com/lemire/javafastpfor,"name: Java CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 11, 16 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build and test with Maven
        run: mvn package
      - name: Build example
        run: javac -cp target/classes/:. example.java
      - name: Run example
        run: java -cp target/classes/:. example",,,,,,Java
51,https://github.com/greenrobot/eventbus,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle Info
        run: ./gradlew -version
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
52,https://github.com/ron190/jsql-injection,"on:
  push:
    branches: [ master ]
    
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  MAVEN_NASHORN: """"
  DOCKER_RESOURCES: ./model/src/test/resources/docker

jobs:

  build-jdk11:
    name: Test view on Docker (jdk-11)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      JSQL_DOCKERFILE: 3.8.1-jdk-11-slim
      MAVEN_NASHORN: -Dnashorn.args=--no-deprecation-warning
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Disable shallow clone to prevent Sonar warning
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Set Maven dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests dependency:tree

      - name: Build project container
        run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

      - name: Unit tests
        run: $DOCKER_RESOURCES/scripts/run-on-docker-no-network.sh 'cd view/ && mvn clean install -P tests'

  build:
    name: Tests on Docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - jdk: 3.8.6-eclipse-temurin-18
          nashorn: """"
        - jdk: 3.9.3-eclipse-temurin-20
          nashorn: """"
    env:
      JSQL_DOCKERFILE: ${{ matrix.jdk }}
      MAVEN_NASHORN: ${{ matrix.nashorn }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Disable shallow clone to prevent Sonar warning
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    
    - name: Set Maven dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
              
    - name: Install Maven dependencies
      run: mvn clean install -DskipTests dependency:tree
        
    - name: Run databases and LAMP
      run: |
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml build --parallel
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml up -d

    - name: List images and containers
      run: docker images && docker container ls

    - name: Database health checks and configuration
      run: |
        $DOCKER_RESOURCES/scripts/healthcheck/healthcheck.sh
        $DOCKER_RESOURCES/scripts/buff.sh
        $DOCKER_RESOURCES/scripts/verify.sh

    - name: Build project container
      run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

    - name: Unit and integration tests with Sonar scan
      # Profile usage for skipITs/skipTests (env var MAVEN_OPS not working)
      # Note: 'mvn sonar:sonar' not working, modules reports not found, use 'mvn verify sonar:sonar' for reliability
      # Note: gh actions sonarsource/sonarqube-scan-action not working properly => analysis not reliable
      run: $DOCKER_RESOURCES/scripts/run-on-docker.sh 'mvn clean install sonar:sonar -P tests org.pitest:pitest-maven:mutationCoverage'

    - name: Databases statistics
      run: $DOCKER_RESOURCES/scripts/verify.sh

    - name: Copy files and coverage reports from container
      # Sonar scans unmerged reports, Codacy/Codecov requires scanning each files (or reports merged)
      run: |
        mkdir -p shared-resources/model shared-resources/view
        docker cp docker_jsql-container:view/. shared-resources/view
        docker cp docker_jsql-container:model/. shared-resources/model
        docker cp docker_jsql-container:pom.xml shared-resources

    - name: Codecov scan
      run: cd shared-resources && bash <(curl -s https://codecov.io/bash) || true

    - name: Codacy scan
      run: cd shared-resources && bash <(curl -Ls https://coverage.codacy.com/get.sh) || true

    - name: Publish coverage
      run: |
        git checkout docs
        rm -r view/target/site/ view/target/pit-reports/ model/target/site/ model/target/pit-reports/ || echo 'Folder(s) not found'
        FOLDER=view/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=view/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        git config user.name ""Github Actions""
        git config user.email no-response@github.com    
        git pull -s ours  # ignore remote changes when updated by parallel jobs
        # folders view/target model/target contain other build files from 'Install Maven dependencies'
        git add -f view/target/site/jacoco model/target/site/jacoco view/target/pit-reports model/target/pit-reports
        git commit -m ""Publish jacoco and pitest reports""
        git push

  codeql:
    name: CodeQL
    uses: ./.github/workflows/run-codeql.yml

  release:
    needs: [build-jdk11, build, codeql]
    name: Publish
    uses: ./.github/workflows/release.yml
    secrets: inherit",,,,,,Java
53,https://github.com/square/pollexor,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1.1.0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build javadoc

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'square/pollexor' }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Java
11,https://github.com/bigbluebutton/bigbluebutton,"name: Build and Deploy Docs

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
    paths:
      - 'docs/**'

# Do not build the docs concurrently
concurrency:
  group: docs
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./docs/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build static docs
      - name: Build all versions
        run: ./build.sh
      - name: Build website
        run: yarn build
      - name: upload build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./docs/build

  deploy:
    name: Deploy docs to gh-pages
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: Documentation
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
",,,,,,JavaScript
941,https://github.com/harfbuzz/harfbuzzjs,"name: Build

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

env:
  EM_VERSION: 3.1.16
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{runner.os}}
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Build hb.wasm
        run: ./build.sh
      - name: Build hb-subset.wasm
        run: ./build-subset.sh

      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: NPM install
        run: npm install
      - name: Run tests
        run: npm test
      - name: Test hb.wasm
        run: node examples/hbjs.example.node.js
      - name: Test hb-subset.wasm
        run: node examples/hb-subset.example.node.js
",,,,,,JavaScript
1727,https://github.com/microsoft/botbuilder-samples,"name: ci-javascript-samples

env:
  ROOT_FOLDER: BotBuilder-Samples/samples/

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - ""samples/**/*.js""
      - ""samples/**/*.ts""

jobs:
  generate:
    name: detect and generate bot matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: git diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: samples/**/*.+(ts|js)
          ABSOLUTE: true

      - name: generate matrix
        id: set-matrix
        shell: pwsh
        if: env.GIT_DIFF
        run: |
          function UpSearchFolder {
            param ([String] $path, [String] $file)

            while ($path -and !(Test-Path (Join-Path $path $file))) {
              $path = Split-Path $path -Parent
            }

            return $path
          }

          $paths = @(""${{ env.GIT_DIFF_FILTERED }}"" -replace ""'"", """" -split "" "")
          $rootFolder = ""${{ env.ROOT_FOLDER }}""
          $pkg = ""package.json""

          $result = $paths | ForEach-Object { UpSearchFolder -path $_ -file $pkg } | Get-Unique | ForEach-Object {
            $folder = $_
            $json = Get-Content -Raw -Path (Join-Path $folder $pkg) | ConvertFrom-Json
            $files = @($paths | Where-Object { $_.StartsWith($folder) })
            return @{ 
              name = $folder.Substring($folder.IndexOf($rootFolder) + $rootFolder.Length);
              scripts = @($json.scripts | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name);
              folder = $folder;
              files = $files
            } 
          }

          ""Generated matrix:""
          ConvertTo-Json @($result)

          $matrix = ConvertTo-Json -Compress @($result)

          echo ""::set-output name=matrix::$($matrix)""

  build:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{fromJSON(needs.generate.outputs.matrix)}}
      fail-fast: false

    name: bot - ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3

      - name: use node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: yarn install
        run: yarn install
        working-directory: ${{ matrix.folder }}

      - name: yarn build
        if: ${{ contains(matrix.scripts, 'build') }}
        run: yarn build
        working-directory: ${{ matrix.folder }}

      - name: yarn lint
        run: |
          if ${{ endsWith(matrix.files[0], '.js') }}; then
            yarn eslint ${{ join(matrix.files, ' ') }}
          else
            yarn tslint ${{ join(matrix.files, ' ') }}
          fi
        working-directory: ${{ matrix.folder }}
",,,,,,JavaScript
1818,https://github.com/sodium-friends/sodium-native,"name: Build Status
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        node-version: [lts/*]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
",,,,,,JavaScript
2079,https://github.com/dfinity/examples,"name: hosting-photo-storage
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - hosting/photo-storage/**
      - .github/workflows/provision-darwin.sh
      - .github/workflows/provision-linux.sh
      - .github/workflows/hosting-photo-storage-example.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  hosting-photo-storage-darwin:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Provision Darwin
        run: bash .github/workflows/provision-darwin.sh
      - name: Hosting Photo Storage Darwin
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
  hosting-photo-storage-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Provision Linux
        run: bash .github/workflows/provision-linux.sh
      - name: Hosting Photo Storage Linux
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
",,,,,,JavaScript
602,https://github.com/wq/django-rest-pandas,"name: Tests

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.variant }} py=${{ matrix.python-version }} dj=${{ matrix.django-version }} drf=${{ matrix.drf-version }} pandas=${{ matrix.pandas-version }}
    runs-on: ubuntu-22.04
    env:
      TEST_VARIANT: ${{ matrix.variant }}
    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"", ""3.8""]
        django-version: [4.1.7]
        drf-version: [3.14.0]
        pandas-version: [1.5.3]
        variant: ['']
        include:
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: matplotlib
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: django-pandas
        - python-version: ""3.11""
          django-version: 3.2.14
          drf-version: 3.13.1
          pandas-version: 1.5.3
          variant: ''
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m pip install flake8 wheel
        python -m pip install django==${{ matrix.django-version }}
        python -m pip install djangorestframework==${{ matrix.drf-version }}
        python -m pip install pandas==${{ matrix.pandas-version }}
        python -m pip install itertable[oldexcel]
    - name: Install matplotlib
      if: ${{ matrix.variant == 'matplotlib' }}
      run: python -m pip install matplotlib
    - name: Install django-pandas
      if: ${{ matrix.variant == 'django-pandas' }}
      run: python -m pip install django-pandas
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: python -m unittest discover -s tests -t . -v
    - name: Test build
      run: python -m build
  npm:
    name: ""@wq/${{ matrix.package }}""
    runs-on: ubuntu-22.04
    env:
      PACKAGE: ${{ matrix.package }}
    strategy:
      matrix:
        python-version: [""3.11""]
        node-version: [18]
        package:
          - pandas
          - chart
          - analyst
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Node ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        npm ci
        npm run build
    - name: Lint with ESLint
      run: npm run lint
    - name: Test with Jest
      run: |
         cd packages/$PACKAGE
         npm run test
    - uses: smartsquaregmbh/delete-old-packages@v0.4.0
      if: github.event_name == 'push'
      with:
         keep: 5
         names: ${{ matrix.package }}
    - name: Publish to Github Packages
      if: github.event_name == 'push'
      run: |
         python -m pip install setuptools-scm
         ./set_dev_version.sh
         echo ""registry=https://npm.pkg.github.com/wq"" > .npmrc
         echo ""//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}"" >> .npmrc
         cd packages/$PACKAGE
         npm publish
",,,,,,JavaScript
763,https://github.com/archtaurus/retropiebios,"name: ALL BIOS FILES MD5SUM CHECK

on: push

jobs:
    all-bios-files-md5sum-check:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org/
            - run: npm ci
            - run: npm test
",,,,,,JavaScript
79,https://github.com/react-native-masked-view/masked-view,"name: Build
on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: ESLint Checks
        run: yarn test:lint
  tsc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: TypeScript type check
        run: yarn test:typescript
  flow:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Flow type check
        run: yarn test:flow
",,,,,,JavaScript
257,https://github.com/robloach/node-raylib,"name: Test

on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: Install System Dependencies
        if: matrix.os == 'ubuntu'
        run: sudo apt-get update && sudo apt-get install -y xorg-dev libglu1-mesa-dev
      - name: Build Node Addon
        run: npm run compile
      - name: Test
        run: npm test
  build-linux-arm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild.sh
  build-linux-arm-drm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild-drm.sh",,,,,,JavaScript
681,https://github.com/rive-app/rive-wasm,"name: Build JS
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ""20.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.43
          actions-cache-folder: ""emsdk-cache""
      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
          tar -xvf premake-5.0.0-alpha16-linux.tar.gz
          sudo chmod a+x premake5
          sudo mv premake5 /usr/local/bin
      - name: Install modules
        run: cd js && npm install
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
        run: cd js && ./build.sh
      - name: Run tests
        run: cd js && npm test
",,,,,,JavaScript
3303,https://github.com/cloudera/hue,"name: Frontend CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.less'
      - '**.scss'
      - '**.vue'
      - 'package*.json'
      - '**commitflow-frontend.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Caching npm with setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: run commit title format check
      run: ./tools/ci/check_for_commit_message.sh 

    - name: run npm version checker
      run: npm run check-pinned-versions

    - name: run npm license checker
      run: npm run check-license

    - name: run npm absolute path detection
      run: npm run check-absolute-paths

    - name: run js lint
      run: npm run lint

    - name: run style lint
      run: npm run style-lint

    - name: run js tests
      run: |
        # https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
        sed -i 's/""test"": ""jest""/""test"": ""jest --runInBand""/g' package.json

        npm run test",,,,,,JavaScript
3359,https://github.com/rich-harris/devalue,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript
3454,https://github.com/charlesstover/use-force-update,"name: use-force-update

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable

  eslint:
    name: ESLint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Lint
        run: yarn run eslint

  jest:
    name: Jest
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Unit test
        run: yarn run jest
      - name: Upload coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: jest--coverage
          path: jest/coverage

  rollup:
    name: Rollup
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Build
        run: yarn run rollup
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  github-packages:
    name: GitHub Packages
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn config set npmScopes.${{ github.repository_owner }}.npmPublishRegistry 'https://npm.pkg.github.com';
          yarn npm publish --tolerate-republish;

  npm:
    name: NPM
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn npm publish --tolerate-republish;

on:
  pull_request:
  push:
    branches: [main]
",,,,,,JavaScript
3477,https://github.com/thanhtunguet/grapesjs-react,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        yarn install
        yarn test grapesjs-react
",,,,,,JavaScript
3560,https://github.com/padloc/padloc,"name: Run Tests

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version-file: "".nvmrc""
            - uses: actions/cache@v3
              with:
                  path: |
                      ~/.npm
                      ~/.nvm
                      node_modules
                      packages/app/node_modules
                      packages/cordova/node_modules
                      packages/core/node_modules
                      packages/electron/node_modules
                      packages/extension/node_modules
                      packages/locale/node_modules
                      packages/manage/node_modules
                      packages/pwa/node_modules
                      packages/server/node_modules
                      packages/tauri/node_modules
                  key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Run prettier check
              run: npm run prettier:check
            - name: Run translation checks
              run: |
                  npm run locale:extract
                  if [ $(git status --porcelain | wc -l) -ne ""0"" ]; then
                    echo ""Missing translations detected.""
                    exit 1
                  fi
            - name: Run pwa test build
              run: npm run pwa:build
            - name: Run web extention test build
              run: npm run web-extension:build
            - name: Test starting zero-config server
              run: npm run server:start-dry
            - name: Run tests
              run: npm test
            # - name: Run e2e tests
            #   run: npm run test:e2e
",,,,,,JavaScript
3660,https://github.com/rich-harris/code-red,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (github.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript
3662,https://github.com/sindresorhus/callsites,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
3781,https://github.com/kyranet/canvas-constructor,"name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/eslint.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Run ESLint
        run: yarn lint --fix=false

  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/tsc.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Build Code
        run: yarn build
",,,,,,JavaScript
3945,https://github.com/react-component/upload,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: cache package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: create package-lock.json
        run: npm i --package-lock-only

      - name: hack for singe file
        run: |
          if [ ! -d ""package-temp-dir"" ]; then
            mkdir package-temp-dir
          fi
          cp package-lock.json package-temp-dir

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: install
        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
        run: npm ci
  
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: lint
        run: npm run lint

    needs: setup
  
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: compile
        run: npm run compile

    needs: setup
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: coverage
        run: npm test -- --coverage && bash <(curl -s https://codecov.io/bash)

    needs: setup
",,,,,,JavaScript
3956,https://github.com/alitajs/alita,"name: CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test-e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build Packages
        run: pnpm build
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright test:e2e
        run: pnpm test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
",,,,,,JavaScript
3986,https://github.com/ai/nanodelay,"name: Test
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  contents: read
jobs:
  full:
    name: Node.js Latest Full
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run tests
        run: pnpm test
  short:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 18
          - 16
          - 14
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
  old:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v1
        with:
          version: 3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
",,,,,,JavaScript
4000,https://github.com/helmetjs/nocache,"name: Node.js CI

on: [push]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm test
        env:
          CI: true
",,,,,,JavaScript
4036,https://github.com/lucaong/minisearch,"# This is a basic workflow to help you get started with Actions

name: CI Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  coverage:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ""${{ secrets.COVERALLS_REPO_TOKEN }}""
          COVERALLS_GIT_BRANCH: ""${{ github.ref }}""
          COVERALLS_SERVICE_NAME: GitHub Actions
        run: yarn run jest --coverage && yarn run coveralls --verbose < coverage/lcov.info
",,,,,,JavaScript
4143,https://github.com/sindresorhus/html-tags,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
          - 8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
4151,https://github.com/dimitrydushkin/sliding-pane,"# This is a basic workflow to help you get started with Actions

name: Jest Tests on PR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
      - name: Make build
        run: yarn run build && yarn run lint && tsc
",,,,,,JavaScript
4242,https://github.com/jermbo/sampleapis,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: cd client
    - run: npm run build --if-present
",,,,,,JavaScript
4427,https://github.com/modulz/stitches,"name: CI
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
",,,,,,JavaScript
4736,https://github.com/shd101wyy/mume,"name: ""Test""
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: ""Test""
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 'Install nodejs 18'
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: 'Build and test'
        run: |
          corepack enable
          yarn install
          yarn check:all
          yarn test
",,,,,,JavaScript
4768,https://github.com/wkich/creevey,"name: Build and Test
on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: install
        run: yarn
      - name: lint
        run: yarn lint
      - name: build
        run: yarn build
      - name: pack
        run: yarn pack
      - uses: actions/upload-artifact@v2
        with:
          name: creevey
          path: creevey-*.tgz
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: checkout lfs
        run: git lfs checkout
      - name: install
        run: yarn
      - name: unit tests
        run: yarn test:unit
      - name: storybook
        run: yarn start:storybook &
      - name: creevey
        run: yarn creevey:github
      - uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/
",,,,,,JavaScript
4860,https://github.com/browserslist/browserslist,"name: Test
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  contents: read
jobs:
  full:
    name: Node.js Latest Full
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run tests
        run: pnpm test
  short:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 18
          - 16
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
  old:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 14
          - 12
          - 10
          - 8
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v1
        with:
          version: 3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
",,,,,,JavaScript
4876,https://github.com/garrylachman/electrocrud,"name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - master

jobs:
  prepare:
    name: Prepare
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    outputs:
      next_version: ${{ steps.semantic_step.outputs.next_version }}

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false

      - name: Install dependencies
        run: corepack yarn install

      - name: Building Packages
        run: corepack yarn build

      - name: Testing
        run: corepack yarn run test

      - name: Semantic Release
        id: semantic_step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: corepack yarn run semantic-release
  release:
    needs: prepare
    name: Release v${{ needs.prepare.outputs.next_version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-2019]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
          ref: v${{ needs.prepare.outputs.next_version }}

      - name: apt-get install
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update -y && sudo apt-get install -y snapd rpm snapcraft fakeroot dpkg

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false |
          corepack yarn cache clean

      - name: Install dependencies
        run: corepack yarn install

      - name: Building Packages
        run: corepack yarn run build

      - name: Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          DEBUG: '*'
        run: corepack yarn electron-forge publish
  post:
    runs-on: ubuntu-latest
    needs: [prepare, release]
    name: Post

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
          ref: v${{ needs.prepare.outputs.next_version }}

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false

      - name: Install dependencies
        run: corepack yarn install

      - name: Normalize Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.prepare.outputs.next_version }}
        run: corepack yarn dlx ts-node --skipProject scripts/normalize-release-assets.mjs
",,,,,,JavaScript
4930,https://github.com/httptoolkit/httptoolkit-server,"name: CI
on: [push, pull_request]
env:
  HTTPTOOLKIT_SERVER_DISABLE_AUTOUPDATE: 1 # Don't try to autoupdate during tests etc
jobs:
  build:
    name: Build & test
    runs-on: ubuntu-22.04
    container:
      image: httptoolkit/act-build-base:v3.0.0
      options: ""--privileged"" # Required for DIND tests
    env:
      DIND_HOST: unix:///tmp/docker.sock
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20.8.0

      - run: npm install -g npm@^8

      - name: Set up JDK 11 for Java testing
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: adopt-hotspot

      - run: npm ci
        env:
          NPM_CONFIG_UNSAFE_PERM: true

      - run: npm run build:src

      - name: Prepare test environment
        run: |
          # Fix annoying Yarn issue: https://github.com/yarnpkg/yarn/issues/7866
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -

          sudo apt-get update
          sudo apt-get install -y p7zip-full xterm

          wget https://downloads.slack-edge.com/linux_releases/slack-desktop-4.12.2-amd64.deb
          sudo apt install -y ./slack-desktop-4.12.2-amd64.deb

          sudo cp test/no-sandbox-docker-wrapper.sh /usr/local/bin/google-chrome
          sudo cp test/no-sandbox-docker-wrapper.sh /usr/local/bin/slack

          # Fix $HOME perms to make Firefox happy
          sudo chown $(whoami) $HOME

          # Start a DIND docker host, running in the background
          sudo dockerd -H $DIND_HOST &
          sleep 5

          # Pre-pull lots of the Docker images we'll want to use later
          echo node:14 golang:1.16 openjdk:16-alpine3.13 python:3.9-slim ruby:alpine3.13 php:8.0-apache |
            DOCKER_HOST=$DIND_HOST xargs -P10 -n1 docker pull

      - run: DOCKER_HOST=$DIND_HOST xvfb-run npm run test

      - run: npm run build:release
        env:
          SENTRY_AUTH_TOKEN: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && secrets.SENTRY_AUTH_TOKEN) || '' }}
          SENTRY_ORG: http-toolkit
          SENTRY_PROJECT: httptoolkit-server
          NPM_CONFIG_UNSAFE_PERM: true

      - run: DOCKER_HOST=$DIND_HOST xvfb-run npm run test:integration:release

      - uses: actions/upload-artifact@v3
        with:
          name: distributables
          path: build/dist/*
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: test-scripts
          path: test/distributables-test
          if-no-files-found: error

  test-distributables:
    needs: build
    strategy:
      matrix:
        include:
          - platform: Ubuntu 22.04
            os: ""ubuntu-22.04""
            test-script: ""./unix.sh linux""
          - platform: Ubuntu 20.04
            os: ""ubuntu-20.04""
            test-script: ""./unix.sh linux""
          - platform: MacOS 13
            os: ""macos-13""
            test-script: ""./unix.sh darwin""
          - platform: MacOS 12
            os: ""macos-12""
            test-script: ""./unix.sh darwin""
          - platform: MacOS 11
            os: ""macos-11""
            test-script: ""./unix.sh darwin""
          - platform: Windows 2022
            os: ""windows-2022""
            test-script: "".\\windows.bat""
          - platform: Windows 2019
            os: ""windows-2019""
            test-script: "".\\windows.bat""
      fail-fast: false
    name: Test on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get our distributables
        uses: actions/download-artifact@v3
        with:
          name: distributables
          path: distributables

      - name: Get the test scripts
        uses: actions/download-artifact@v3
        with:
          name: test-scripts
          path: .

      - name: Make the test script executable
        if: matrix.platform != 'Windows'
        run: chmod +x unix.sh

      - name: Test the server build
        run: ${{ matrix.test-script }}

  publish:
    name: Publish a release
    runs-on: ""ubuntu-22.04""
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - test-distributables
    steps:
      - name: Get our distributables
        uses: actions/download-artifact@v3
        with:
          name: distributables
          path: distributables

      - name: Upload server release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./distributables/*/*
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload latest manifest
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./distributables/latest-manifest/*
          file_glob: true
          tag: latest-manifest
          overwrite: true",,,,,,JavaScript
5052,https://github.com/sveltejs/svelte,"name: CI
on:
  push:
    branches: [main]
  pull_request:
permissions:
  contents: read # to fetch code (actions/checkout)

env:
  # We only install Chromium manually
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - node-version: 18
            os: windows-latest
          - node-version: 18
            os: macOS-latest
          - node-version: 18
            os: ubuntu-latest
          - node-version: 20
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm playwright install chromium
      - run: pnpm test
        env:
          CI: true
  Lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: 'pnpm i && pnpm check && pnpm lint'
",,,,,,JavaScript
5107,https://github.com/aws/aws-cdk,"# https://octokit.github.io/rest.js
# https://github.com/actions/toolkit/blob/master/packages/github/src/context.ts

name: PR Linter
on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - edited
      - opened
      - synchronize
      - reopened
  workflow_run:
    workflows: [PR Linter Trigger]
    types:
      - completed
  status:

jobs:
  download-if-workflow-run:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.pr_output.outputs.pr_number }}
      pr_sha: ${{ steps.pr_output.outputs.pr_sha }}
    # if conditions on all individual steps because subsequent jobs depend on this job
    # and we cannot skip it entirely
    steps:
      - name: 'Download artifact'
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == ""pr_info""
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_info.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        if: github.event_name == 'workflow_run'
        run: unzip pr_info.zip

      - name: 'Make GitHub output'
        if: github.event_name == 'workflow_run'
        id: 'pr_output'
        run: |
          echo ""cat pr_number""
          echo ""pr_number=$(cat pr_number)"" >> ""$GITHUB_OUTPUT""
          echo ""cat pr_sha""
          echo ""pr_sha=$(cat pr_sha)"" >> ""$GITHUB_OUTPUT""

  validate-pr:
    # Necessary to have sufficient permissions to write to the PR
    permissions:
      contents: read
      pull-requests: write
      statuses: read
      issues: read
    runs-on: ubuntu-latest
    needs: download-if-workflow-run
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install & Build prlint
        run: yarn install --frozen-lockfile && cd tools/@aws-cdk/prlint && yarn build+test

      - name: Validate
        uses: ./tools/@aws-cdk/prlint
        env:
          GITHUB_TOKEN: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          # PR_NUMBER and PR_SHA is empty if triggered by pull_request_target, since we already have that info
          PR_NUMBER: ${{ needs.download-if-workflow-run.outputs.pr_number }}
          PR_SHA: ${{ needs.download-if-workflow-run.outputs.pr_sha }}
          REPO_ROOT: ${{ github.workspace }}
",,,,,,JavaScript
5112,https://github.com/tw-in-js/twind,"name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  build:
    name: 🏗️  Build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
      deployments: write # to create deployments (cloudflare/pages)

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: 🔧  Setup
        uses: ./.github/actions/setup

      - name: 🩺  Check
        run: pnpm check

      - name: 🤘  Test
        run: pnpm test:coverage

      - name: 📖  Coveralls
        continue-on-error: true
        # prevents this step from running on forks
        if: ${{ github.repository == 'tw-in-js/twind' }}
        # until https://github.com/coverallsapp/github-action/issues/135 is closed
        uses: chenrui333/github-action@a1a1a8a300a7e89df3630639df8fb23de5cc6368
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      - name: 🚚  Create Release PR or Publish to npm
        id: changesets
        if: ${{ github.repository == 'tw-in-js/twind' && github.event_name == 'push' }}
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          publish: pnpm changeset:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # wait a bit and then set latest for twind back to v0.16
      # because some are using CDNs without specifing a version
      - name: 📝  Keep latest tag on twind@v0.16.19
        if: steps.changesets.outputs.published == 'true'
        run: |
          sleep 20
          cat << EOF > ""$HOME/.npmrc""
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
          npm dist-tag add twind@0.16.19 latest || true
          npm deprecate twind@1.x ""use @twind/core instead"" || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🌎  Deploy twind.style
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: main

      - name: 🌎  Deploy twind.run
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: main

  publish-pre-releases:
    name: 🚚  Publish pre-releases
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ needs.build.outputs.published != 'true' }}
    permissions:
      contents: read
      pull-requests: write
      deployments: write

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3

      - name: 🔧  Setup
        uses: ./.github/actions/setup
        with:
          # only install dependencies for packages that are published and for the sites
          installArgs: --filter=""."" --filter=""./packages/*"" --filter=""./sites/*""

      - name: 🚚  Publish pre-release to npm
        id: publish
        uses: ./.github/actions/publish-prerelease
        with:
          tag: ${{ (github.event_name == 'push' && 'next') || 'canary'}}
          template: ${{ (github.event_name == 'push' && '{tag}-{datetime}') || '{tag}-{commit}'}}
          hasChangesets: ${{ needs.build.outputs.hasChangesets }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # deploy sites using the published package versions
      - name: 🌎  Deploy twind.style
        id: deploy_twind_style
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 🌎  Deploy twind.run
        id: deploy_twind_run
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 📝  Comment PR
        if: ${{ github.event.number }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment_tag: '## Deployed site previews with [![Cloudflare Pages]'
          message: |
            > **Latest commit**: ${{ github.sha }}

            ## Deployed site previews with [![Cloudflare Pages](https://img.shields.io/badge/Cloudflare%20Pages-F38020?style=for-the-badge&logo=Cloudflare&logoColor=white)](https://pages.dev)

            ### twind.style

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.url }}'>${{ steps.deploy_twind_style.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.branch }}'>${{ steps.deploy_twind_style.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.version }}'>${{ steps.deploy_twind_style.outputs.version }}</a></td></tr>
            </table>

            ### twind.run

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.url }}'>${{ steps.deploy_twind_run.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.branch }}'>${{ steps.deploy_twind_run.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.version }}'>${{ steps.deploy_twind_run.outputs.version }}</a></td></tr>
            </table>

            ## Published to [npm](https://www.npmjs.com)

            **Dist Tag**: ${{ steps.publish.output.tag }}

            **Packages**:

            ${{ steps.publish.output.packages }}
",,,,,,JavaScript
5141,https://github.com/microsoft/typescript-website-localizations,"name: CI
on: pull_request

jobs:
  local-validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      - run: yarn
      - run: yarn docs-sync validate-against-en

  site-builds:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      # Clone this PR, and setup the deps
      - uses: actions/checkout@v1
      - run: yarn

      # Clone the TS website, basically:
      # git clone https://github.com/microsoft/TypeScript-Website website
      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: microsoft/TypeScript-Website
          path: website

      # Both the microsoft/TypeScript-Website & 1 - don't really need to be there, but 
      # this migrates the translated docs into the website
      - run: yarn docs-sync pull microsoft/TypeScript-Website 1 --from-cwd . --to-cwd website

      # Get dependencies for building the ebooks
      - run: sudo apt-get update
      - run: sudo apt install calibre

      - run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: ignore
        working-directory: ./website


      # Verify the website build
      - run: yarn bootstrap
        working-directory: ./website

      - run: yarn workspace typescriptlang-org build
        working-directory: ./website

      # Verify the website build
      - run: yarn test
        working-directory: ./website
",,,,,,JavaScript
5172,https://github.com/jdataview/jbinary,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: browser-actions/setup-chrome@latest
    - run: npm ci
    - run: npm test
",,,,,,JavaScript
5173,https://github.com/zenozeng/p5.js-svg,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5174,https://github.com/isaacs/async-cache,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
",,,,,,JavaScript
5175,https://github.com/outatime/grunt-replace,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5177,https://github.com/drudge/node-keychain,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        node: [ 14, 16, 18 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5178,https://github.com/sunhuawei/sourcedetector,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: npm i
      - run: npm run build
",,,,,,JavaScript
5179,https://github.com/gloriajs/gloria,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn install
      - run: npm test

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
      - run: yarn install
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
",,,,,,JavaScript
5180,https://github.com/okturtles/group-income,"name: NodeJS with Grunt

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    - run: npm ci
    - run: npm test
",,,,,,JavaScript
5206,https://github.com/isaacs/once,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
",,,,,,JavaScript
5207,https://github.com/gottox/terminal.js,"name: CI

on: [push]

jobs:
  lib-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version:
        - ""15""
        - ""16""
        - ""17""
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node_version }}
    - run: npm install
    - run: npm test
    - name: IRC Message Action
      uses: Gottox/irc-message-action@main
      if: failure()
      with:
        channel: ""Gottox""
        nickname: gh-gottox
        message: |-
          [${{ github.workflow }} failed] ${{ github.ref }} https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
",,,,,,JavaScript
5229,https://github.com/bahmutov/npm-quick-run,"name: ci
on: push
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v2

      - name: Install NPM dependencies 📦
        uses: bahmutov/npm-install@v1

      - name: Run tests 🧪
        run: npm test

      - name: Run examples 📊
        env:
          DEBUG: quick
        run: |
          npm run example
          node bin/npm-quick-run.js test-foo 'foo bar'
          node bin/npm-quick-run.js echo
          # use prefix search by word
          node bin/npm-quick-run.js t-f 'foo bar'
          node bin/npm-quick-run.js t:f 'foo bar'
          # with stopper . at the end
          # https://github.com/bahmutov/npm-quick-run/issues/35
          node bin/npm-quick-run.js t-f. 'foo bar'
          # should find single ""size"" script
          node bin/npm-quick-run.js s.

      - name: Semantic Release 🚀
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5231,https://github.com/sunesimonsen/ukkonen,"name: Checks

on: [push]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12, 14, 16, 18, 20]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: yarn lint
        if: ${{ matrix.node-version == 18 }}
      - run: npm test
        env:
          CI: true
",,,,,,JavaScript
5232,https://github.com/sigoden/netease-music-crx,"name: release

on: 
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - run: yarn 
    - run: yarn build
    - uses: ""marvinpinto/action-automatic-releases@latest""
      with:
        repo_token: ""${{ secrets.GITHUB_TOKEN }}""
        prerelease: true
        files: |
          netease-music-crx-*.zip",,,,,,JavaScript
5233,https://github.com/levelgraph/levelgraph-jsonld,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
",,,,,,JavaScript
121,https://github.com/splitwise/tokenautocomplete,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-split: [
          {model: ""NexusLowRes"", version: 23},
          {model: ""NexusLowRes"", version: 24},
          {model: ""NexusLowRes"", version: 25},
          {model: ""NexusLowRes"", version: 26},
          {model: ""NexusLowRes"", version: 27},
          {model: ""NexusLowRes"", version: 28},
          {model: ""NexusLowRes"", version: 29},
          {model: ""NexusLowRes"", version: 30},

          {model: ""oriole"", version: 31},
          {model: ""oriole"", version: 32},
          {model: ""oriole"", version: 33}
        ]

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
    - name: Build integration test target
      run: ./gradlew assembleAndroidTest
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_CLOUD_SERVICE_KEY: ${{secrets.GOOGLE_CLOUD_SERVICE_KEY}}
        GOOGLE_PROJECT_ID: ${{secrets.GOOGLE_PROJECT_ID}}
      run: |
        echo $GOOGLE_CLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - name: Run Instrumented Tests with Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app example/build/outputs/apk/debug/example-debug.apk --test example/build/outputs/apk/androidTest/debug/example-debug-androidTest.apk --device model=$DEVICE,version=$API_VERSION,locale=en,orientation=portrait --timeout 30m
      env:
        API_VERSION: ${{ matrix.device-split.version }}
        DEVICE: ${{ matrix.device-split.model }}
",,,,,,Kotlin
162,https://github.com/jetbrains/idea-gitignore,"# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin
166,https://github.com/jakewharton/byteunits,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin
167,https://github.com/openmrs/openmrs-contrib-android-client,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
    types:
      - opened
      - synchronize

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew buildDebug
",,,,,,Kotlin
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
",,,,,,Kotlin
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
",,,,,,Kotlin
189,https://github.com/coolerfall/android-httpdownloadmanager,"name: Android CI

on:
  pull_request:
    branches: [ develop]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
226,https://github.com/googlesamples/android-custom-lint-rules,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # AGP 8.2 requires 34.0.0-rc3 - see https://issuetracker.google.com/issues/236167971#comment36
      # and https://github.com/actions/runner-images/issues/7506#issuecomment-1533097084
      # TODO: Remove when AGP updates Build Tools to 34.0.0 and pre-installed in the runner
      #- name: Install Android Build Tools 34.0.0-rc3
      #  run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager ""build-tools;34.0.0-rc3""
      #  shell: bash
      - name: Build with Gradle
        run: ./gradlew build test
",,,,,,Kotlin
243,https://github.com/bailuk/aat,"name: Build on ubuntu

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Build with Gradle
      run: ./gradlew build

    - name: Collect files for distribution
      run: ci/collect-artifacts.sh

    - name: Upload artifacts (gtk)
      uses: actions/upload-artifact@v2
      with:
        name: aat-gtk
        path: dist/gtk
        if-no-files-found: error

    - name: Upload artifacts (android)
      uses: actions/upload-artifact@v2
      with:
        name: aat-android
        path: dist/android
        if-no-files-found: error
",,,,,,Kotlin
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin
301,https://github.com/tommyettinger/gdx-liftoff,"name: build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [8, 11, 17]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: JDK setup
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Gradle setup
        uses: gradle/gradle-build-action@v2
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - name: Build
        run: ./gradlew build check
      - name: Generate sample project
        run: ./gradlew sample
",,,,,,Kotlin
316,https://github.com/theredspy15/ltecleanerfoss,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
332,https://github.com/burhanrashid52/photoeditor,"name: UI test in android emulator CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
      - kotlin-conversion

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - name: Build with Gradle
      run: ./gradlew build

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Run all checks
        run: ./gradlew check --stacktrace

  ui-test:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: run ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
",,,,,,Kotlin
333,https://github.com/instacart/truetime-android,"name: CI
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Spotless checks
        run: ./gradlew spotlessCheck --stacktrace
      - name: Build the app
        run: ./gradlew build
",,,,,,Kotlin
339,https://github.com/gotify/android,"on: [push, pull_request]

name: Build

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ./gradlew build --stacktrace
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify.apk
          tag: ${{ github.ref }}
          overwrite: true
",,,,,,Kotlin
347,https://github.com/mediathekview/zapp,"name: Build and test
on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
        
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
  
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'
        
    - name: Build and test with Gradle
      run: ./gradlew build test -Pci
      
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  ",,,,,,Kotlin
368,https://github.com/esafirm/android-image-picker,"name: Android CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2.4.0
        with:
          distribution: adopt-openj9
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          cache-name: gradle
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('build.gradle') }}
          restore-keys: |
            gradle-${{ hashFiles('build.gradle') }}
            gradle-

      - name: Build with Gradle
        run: ./gradlew build -x lint

      - name: Build test
        run: ./gradlew sample:assembleAndroidTest

      - name: Run tests on Firebase Test Lab
        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
        if: github.ref == 'refs/heads/master'
        with:
          arg-spec: 'firebasetest.yml:android-pixel-4'
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
",,,,,,Kotlin
378,https://github.com/taboolib/taboolib,"name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    if: ""contains(github.event.head_commit.message, 'dev')""
    runs-on: ubuntu-latest
    steps:
      # 环境配置
      - name: checkout repository
        uses: actions/checkout@v2
      - name: cache gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 8.0
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8.0

      # 设置权限
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      # 编译测试
      - name: build test
        id: publish_1
        continue-on-error: true
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew build -Pbuild=$GITHUB_RUN_NUMBER -PtaboolibUsername=$NEXUS_USERNAME -PtaboolibPassword=$NEXUS_PASSWORD",,,,,,Kotlin
406,https://github.com/jetbrains-research/astminer,"name: Build with lint

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    needs: setup
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build astminer
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-report
          path: build/astminer/reports/tests/**/*

      - name: Upload Detekt Report
        uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: build/astminer/reports/detekt/detekt.sarif

  run-on-configs:
    needs: build
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Prepare shadowJar
        run: ./gradlew shadowJar

      - name: Run antlr_java_js_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_java_js_ast.yaml

      - name: Run antlr_python_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_python_paths.yaml

      - name: Run gumtree_java_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_ast.yaml

      - name: Run gumtree_java_function_names_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_function_names_paths.yaml
",,,,,,Kotlin
545,https://github.com/skydoves/baserecyclerviewadapter,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin
546,https://github.com/vanniktech/gradle-dependency-graph-generator-plugin,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [11]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
547,https://github.com/hashlin/rally,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
548,https://github.com/semper-viventem/material-backdrop,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
549,https://github.com/ntrrgc/ts-generator,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
550,https://github.com/madrapps/pikolo,"name: Publish

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Check
        run: ./gradlew check --stacktrace

      - name: Build
        run: ./gradlew build --stacktrace

      - name: Publish Artifact
        run: ./gradlew pikolo:publishReleasePublicationToSonatypeRepository --max-workers=1 closeAndReleaseSonatypeStagingRepository --stacktrace
        env:
          OSS_USERNAME: ${{ secrets.OSS_USERNAME }}
          OSS_PASSWORD: ${{ secrets.OSS_PASSWORD }}
          OSS_STAGING_PROFILE_ID: ${{ secrets.OSS_STAGING_PROFILE_ID }}
          OSS_SIGNING_KEY_ID: ${{ secrets.OSS_SIGNING_KEY_ID }}
          OSS_SIGNING_PASSWORD: ${{ secrets.OSS_SIGNING_PASSWORD }}
          OSS_SIGNING_KEY: ${{ secrets.OSS_SIGNING_KEY }}
",,,,,,Kotlin
551,https://github.com/skydoves/chamber,"name: Android CI

on:
 push:
  branches:
   - master
  pull_request:
   branches:
   - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin
552,https://github.com/commit451/resourcespoet,"name: Build

on: [push, pull_request]

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 11

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Test
        run: ./gradlew build",,,,,,Kotlin
553,https://github.com/skydoves/lazybones,"name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Spotless check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: spotless
        run: ./gradlew spotlessCheck

  api_check:
    name: API check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: API check
        run: ./gradlew apiCheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle and wrapper
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build",,,,,,Kotlin
554,https://github.com/afollestad/drag-select-recyclerview,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
555,https://github.com/afollestad/assent,"name: Android CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.1.0
    - name: Setup JDK 11
      uses: actions/setup-java@v3.6.0
      with:
        distribution: adopt
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
556,https://github.com/saschpe/android-customtabs,"name: Gradle Build
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Android problem matchers
        uses: jonasb/android-problem-matchers-action@v1
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
557,https://github.com/afollestad/inline-activity-result,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
558,https://github.com/vanniktech/gradle-code-quality-tools-plugin,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
559,https://github.com/afollestad/rxkprefs,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
560,https://github.com/afollestad/ulfberht,"name: Android CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.1.0
    - name: set up JDK 11
      uses: actions/setup-java@v3.6.0
      with:
        distribution: adopt
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
561,https://github.com/afollestad/viewpagerdots,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
562,https://github.com/bnorm/ktor-retrofit,"name: Project Build

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
563,https://github.com/martinstyk/androidapkanalyzer,"name: Release

on:
  workflow_dispatch:
    inputs:
      versionNumber:
        description: 'Version number'
        required: true
      versionName:
        description: 'Version name'
        required: true

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: gradle

    - name: Create google-services.json
      uses: 1arp/create-a-file-action@0.2
      with:
        path: app
        file: google-services.json
        content: ${{secrets.GOOGLE_SERVICES}}

    - name: Set app version
      uses: chkfung/android-version-actions@v1.1
      with:
       gradlePath: app/build.gradle.kts
       versionCode: ${{ github.event.inputs.versionNumber }}
       versionName: ${{ github.event.inputs.versionName }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Project
      run: ./gradlew buildFreeRelease

    - name: Bundle Release AAB
      run: ./gradlew bundleFreeRelease

    - name: Sign AAB
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/bundle/freeRelease
        signingKeyBase64: ${{ secrets.SIGN_KEY }}
        alias: ${{ secrets.SIGN_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.SIGN_KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.SIGN_KEY_PASSWORD }}

    - name: Deploy to Play Store
      uses: r0adkll/upload-google-play@v1.0.16
      with:
        serviceAccountJsonPlainText: ${{secrets.GOOGLE_SERVICE_ACCOUNT}}
        packageName: sk.styk.martin.apkanalyzer
        releaseFiles: ${{ steps.sign_app.outputs.signedReleaseFile }}
        mappingFile: app/build/outputs/mapping/freeRelease/mapping.txt
        track: beta
        status: completed
        releaseName: ${{ github.event.inputs.versionNumber }} (${{ github.event.inputs.versionName }})
    
    - name: Push current release tag
      uses: thejeff77/action-push-tag@v1.0.0
      with:
        tag: ${{ github.event.inputs.versionNumber }}

    - name: Create Github release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.event.inputs.versionName }}
        tag_name:  ${{ github.event.inputs.versionNumber }}

        
",,,,,,Kotlin
564,https://github.com/cottacush/hiddencam,"name: ci

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build and Run Tests with Gradle
        run: ./gradlew build",,,,,,Kotlin
565,https://github.com/dragneelfps/realworld-kotlin-ktor,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build test
    - name: Integration tests
      env:
        APIURL:  http://localhost:8080/api
      run: |
        chmod +x postman_tests/run-api-tests.sh
        ./gradlew run &
        ./postman_tests/run-api-tests.sh
        ./gradlew --stop
",,,,,,Kotlin
566,https://github.com/minecrell/plugin-yml,"name: Build
on: [ push, pull_request ]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17 ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: gradle/wrapper-validation-action@v1
      - name: JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java }}
          cache: 'gradle'
          distribution: 'temurin'
      - name: build
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
567,https://github.com/rumboalla/apkupdater,"name: Android Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
568,https://github.com/ftomassetti/langsandbox,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: ./gradlew build",,,,,,Kotlin
569,https://github.com/chrisvin/rubberpicker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
570,https://github.com/vanniktech/lint-rules,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
571,https://github.com/mumayank/airlocation,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
572,https://github.com/mozilla/rust-android-gradle,"name: CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events, but only for the `master` branch (generally) or the `citest`
# branch (for testing).
on:
  push:
    branches: [master, citest]
  pull_request:
    branches: [master]

jobs:
  generate_versions:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Gradle test
        run: |
          ./gradlew -p plugin generateTestTasksJson

      - id: setup-matrix
        run: echo ""::set-output name=matrix::$(cat plugin/build/build-resources/androidTestTasks.json)""

      - name: debug
        run: echo ${{ steps.setup-matrix.outputs.matrix }}

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

  samples:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Assemble samples/app
        run: |
          ./gradlew -p samples/app :assembleDebug --info --warning-mode all

      - name: Assemble samples/library
        run: |
          ./gradlew -p samples/library :assembleDebug --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_unversioned_tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin test --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_version_tests:
    needs: [generate_versions] # , sanity_check]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        androidTestTask: ${{ fromJson(needs.generate_versions.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin ${{ matrix.androidTestTask }} --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop
",,,,,,Kotlin
573,https://github.com/yariksoffice/venom,"name: Build

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  jvm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.2.2
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Assemble and test
        run: ./gradlew build --stacktrace

  android:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.2.2
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Run all device checks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck --stacktrace
",,,,,,Kotlin
574,https://github.com/jetbrains/ideolog,"name: Run tests 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
",,,,,,Kotlin
575,https://github.com/afollestad/date-picker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
2207,https://github.com/tls-inspector/tls-inspector,"name: ""Build App""

on:
  push:
    paths:
      - '.github/workflows/build_app.yml'
      - 'CertificateKit/**'
      - 'CertificateKitTests/**'
      - 'Inspect Website/**'
      - 'TLS Inspector/**'
      - 'TLS Inspector.xcodeproj/**'
      - 'TLS InspectorUITests/**'
  pull_request:
    paths:
      - 'CertificateKit/**'
      - 'CertificateKitTests/**'
      - 'Inspect Website/**'
      - 'TLS Inspector/**'
      - 'TLS Inspector.xcodeproj/**'
      - 'TLS InspectorUITests/**'
  schedule:
    - cron: ""16 16 */2 * *""

permissions:
  packages: read

jobs:
  openssl:
    name: ""Build OpenSSL""
    runs-on: macos-latest
    steps:
      - name: ""Checkout Source""
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: ""Prepare Build Environment""
        id: prepare
        run: |
          gpg --import CertificateKit/build/openssl-ios/openssl.asc
          echo 'trusted-key 0xD5E9E43F7DF9EE8C' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xD9C4D26D0E604491' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xB8EF1A6BA9DA2D5C' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0x231C84CDDCC69C45' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xD894E2CE8B3D79F5' >> ~/.gnupg/gpg.conf
          echo ""OPENSSL_CACHE_KEY=openssl_$(cat CertificateKit/build/openssl.want | cut -d '=' -f2)"" >> ""$GITHUB_OUTPUT""

      - name: Restore Cached OpenSSL
        id: restore_openssl
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.OPENSSL_CACHE_KEY }}
          path: |
            CertificateKit/openssl.xcframework
      
      - name: Build OpenSSL
        id: build_openssl
        if: ${{ steps.restore_openssl.outputs.cache-hit != 'true' }}
        run: |
          echo ""::notice ::Compiling OpenSSL""
          cd CertificateKit/build
          ./build-openssl.sh

  curl:
    name: ""Build curl""
    runs-on: macos-latest
    steps:
      - name: ""Checkout Source""
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: ""Prepare Build Environment""
        id: prepare
        run: |
          gpg --import CertificateKit/build/curl-ios/curl.asc
          echo 'trusted-key 0x78E11C6B279D5C91' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0xF9FEAFF9D34A1BDB' >> ~/.gnupg/gpg.conf
          echo 'trusted-key 0x5CC908FDB71E12C2' >> ~/.gnupg/gpg.conf
          echo ""CURL_CACHE_KEY=curl_$(cat CertificateKit/build/curl.want | cut -d '=' -f2)"" >> ""$GITHUB_OUTPUT""

      - name: Restore Cached curl
        id: restore_curl
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.CURL_CACHE_KEY }}
          path: |
            CertificateKit/curl.xcframework
      
      - name: Build curl
        id: build_curl
        if: ${{ steps.restore_curl.outputs.cache-hit != 'true' }}
        run: |
          echo ""::notice ::Compiling curl""
          cd CertificateKit/build
          ./build-curl.sh

  build:
    name: ""Build App""
    runs-on: macos-latest
    needs: [openssl, curl]
    steps:
      - name: Checkout Source
        id: checkout
        uses: actions/checkout@v3

      - name: Install Profile and Certificates
        id: install_credentials
        run: |
          echo '${{ secrets.TLS_INSPECTOR_DEVELOPMENT_PROVISIONING_PROFILE }}' > TLS_Inspector.mobileprovision.base64
          echo '${{ secrets.INSPECT_CERTIFICATE_DEVELOPMENT_PROVISIONING_PROFILE }}' > Inspect_Website.mobileprovision.base64
          echo '${{ secrets.TEAM_DEVELOPMENT_PROVISIONING_PROFILE }}' > Team.mobileprovision.base64
          base64 -i TLS_Inspector.mobileprovision.base64 -o TLS_Inspector.mobileprovision --decode && rm TLS_Inspector.mobileprovision.base64
          base64 -i Inspect_Website.mobileprovision.base64 -o Inspect_Website.mobileprovision --decode && rm Inspect_Website.mobileprovision.base64
          base64 -i Team.mobileprovision.base64 -o Team.mobileprovision --decode && rm Team.mobileprovision.base64
          mkdir -p ""~/Library/MobileDevice/Provisioning Profiles/""
          mv -v TLS_Inspector.mobileprovision   ""~/Library/MobileDevice/Provisioning Profiles/f2477cba-1359-4ec6-9ed6-cf8d0cbcc76f.mobileprovision""
          mv -v Inspect_Website.mobileprovision ""~/Library/MobileDevice/Provisioning Profiles/d6c2be10-51a7-476c-9b37-7ca5e8d22874.mobileprovision""
          mv -v Team.mobileprovision            ""~/Library/MobileDevice/Provisioning Profiles/9052665a-c98a-404e-adac-974995e60633.mobileprovision""
          echo '-----BEGIN CERTIFICATE-----' > dev.crt
          echo '${{ secrets.APPLE_DEVELOPMENT_CERTIFICATE }}' >> dev.crt
          echo '-----END CERTIFICATE-----' >> dev.crt
          echo '${{ secrets.APPLE_DEVELOPMENT_PRIVATE_KEY }}' > dev.key.base64
          base64 -i dev.key.base64 -o dev.key --decode && rm dev.key.base64
          security import dev.crt -t cert -k ~/Library/Keychains/login.keychain-db -f pemseq -A
          security import dev.key -t priv -k ~/Library/Keychains/login.keychain-db -f openssl -A
          rm dev.key dev.crt
      
      - name: ""Prepare Build Environment""
        id: prepare
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo ""OPENSSL_CACHE_KEY=openssl_$(cat CertificateKit/build/openssl.want | cut -d '=' -f2)"" >> ""$GITHUB_OUTPUT""
          echo ""CURL_CACHE_KEY=curl_$(cat CertificateKit/build/curl.want | cut -d '=' -f2)"" >> ""$GITHUB_OUTPUT""
          echo ""CTLOG_CACHE_KEY=ctlog_$(cat CertificateKit/CTLogs/ct_log_version.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""ROOTCA_CACHE_KEY=rootca_$(cat CertificateKit/RootCACerts/bundle_version.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""SWIFTLINT_CACHE_KEY=swiftlint_$(gh api repos/realm/swiftlint/releases/latest --jq '.assets[] | select(.name == ""portable_swiftlint.zip"") | .id')"" >> ""$GITHUB_OUTPUT""
          echo ""IDNACOCOA_CACHE_KEY=idnacocoa_$(grep -a5 ""Wevah/IDNA-Cocoa"" TLS\ Inspector.xcodeproj/project.pbxproj | grep 'revision =' | cut -d '=' -f2 | awk '{$1=$1};1' | cut -c 1-8)"" >> ""$GITHUB_OUTPUT""
          echo ""DERIVEDDATA_PATH=$(xcodebuild -project TLS\ Inspector.xcodeproj -showBuildSettings -configuration Debug 2>/dev/null | grep "" BUILD_DIR = "" | cut -d '=' -f2 | awk '{$1=$1};1' | sed 's%/Build/Products%%g')"" >> ""$GITHUB_OUTPUT""

      - name: Restore Cached SwiftLint
        id: restore_swiftlint
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.SWIFTLINT_CACHE_KEY }}
          path: |
            /Users/runner/bin/swiftlint
      
      - name: Install SwiftLint
        id: install_swiftlint
        if: ${{ steps.restore_swiftlint.outputs.cache-hit != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p /Users/runner/bin
          SWIFTLINT_URL=$(gh api repos/realm/swiftlint/releases/latest --jq '.assets[] | select(.name == ""portable_swiftlint.zip"") | .browser_download_url')
          cd /Users/runner/bin
          curl -L -o swiftlint.zip ""${SWIFTLINT_URL}""
          unzip swiftlint.zip
          rm swiftlint.zip LICENSE
          chmod a+x swiftlint
      
      - name: Restore CT Logs
        id: restore_ctlogs
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.CTLOG_CACHE_KEY }}
          path: |
            CertificateKit/CTLogs/ct_log_list.min.json

      - name: Update CT Logs
        id: update_ctlogs
        if: ${{ steps.restore_ctlogs.outputs.cache-hit != 'true' }}
        run: |
          cd CertificateKit/CTLogs
          ./update.sh

      - name: Restore Root CA Certs
        id: restore_rootca
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.ROOTCA_CACHE_KEY }}
          path: |
            CertificateKit/RootCACerts/*.p7b
            CertificateKit/RootCACerts/*.p7b.sig
            CertificateKit/RootCACerts/*.json
            CertificateKit/RootCACerts/*.json.sig

      - name: Update Root CA Certs
        id: update_rootca
        if: ${{ steps.restore_rootca.outputs.cache-hit != 'true' }}
        run: |
          cd CertificateKit/RootCACerts
          ./update.sh

      - name: Generate Strings
        id: generate_strings
        run: |
          cd ""TLS Inspector/Localization""
          python3 lang.py

      - name: Restore Cached OpenSSL
        id: restore_openssl
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.OPENSSL_CACHE_KEY }}
          path: |
            CertificateKit/openssl.xcframework

      - name: Restore Cached curl
        id: restore_curl
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.CURL_CACHE_KEY }}
          path: |
            CertificateKit/curl.xcframework

      - name: Restore Swift Packages
        id: restore_swift_packages
        uses: actions/cache@v3
        with:
          key: ${{ steps.prepare.outputs.IDNACOCOA_CACHE_KEY }}
          path: |
            ${{ steps.prepare.outputs.DERIVEDDATA_PATH }}/SourcePackages

      - name: Build
        id: build
        run: |
          xcodebuild -scheme ""TLS Inspector"" -project ""TLS Inspector.xcodeproj"" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14 Pro' build

      - name: Install Go
        id: install_go
        uses: actions/setup-go@v4
        with:
          go-version: ""stable""
          cache-dependency-path: CertificateKit/TestServer/go.sum

      - name: Prepare Test Server
        id: testserver_prepare
        run: |
          cd CertificateKit/TestServer
          echo ""Compiling test server""
          CGO_ENABLED=0 go build
          echo ""Generating certifiate & key""
          ./TestServer -g

      - name: Start Test Server
        id: testserver_start
        shell: bash
        run: |
          cd CertificateKit/TestServer
          nohup ./TestServer -c root.crt -k root.key &

      - name: Run Automated Tests
        id: certificatekit_tests
        run: |
          xcodebuild -scheme ""CertificateKitTests"" -project ""TLS Inspector.xcodeproj"" -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 14 Pro' test
",,,,,,Objective-C
2273,https://github.com/robrohan/webarchiveextractor,"name: Xcode - Build and Analyze

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d ""\n"")
          default=$(echo $scheme_list | ruby -e ""require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]"")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ ""`ls -A | grep -i \\.xcworkspace\$`"" ]; then filetype_parameter=""workspace"" && file_to_build=""`ls -A | grep -i \\.xcworkspace\$`""; else filetype_parameter=""project"" && file_to_build=""`ls -A | grep -i \\.xcodeproj\$`""; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build -configuration Release -scheme ""$scheme"" -""$filetype_parameter"" ""$file_to_build"" ONLY_ACTIVE_ARCH=""NO"" CONFIGURATION_BUILD_DIR=""${{ github.workspace }}/artifact/"" | xcpretty && exit ${PIPESTATUS[0]}
      - name: Zipping App File
        run: |
          tar -cvf ${{ github.workspace }}/artifact/WebArchiveExtractor.tar -C ${{ github.workspace }}/artifact .
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
           name: WebArchiveExtractor.tar
           path: ${{ github.workspace }}/artifact/WebArchiveExtractor.tar
",,,,,,Objective-C
1,https://github.com/numen31337/akvideoimageview,"name: Build Test

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    timeout-minutes: 30
    runs-on: macos-latest

    steps:
    - name: System Info
      run: |
        echo ""### System:"" && sw_vers
        echo ""### Xcode:"" && xcodebuild -version
        echo ""### CocoaPods:"" && pod --version
    - uses: actions/checkout@v2
    
    - name: Pod install
      run: cd Example && pod install
    
    - name: Build
      run: cd Example && xcodebuild clean build -workspace Example.xcworkspace -scheme Example CODE_SIGNING_ALLOWED=""NO""
",,,,,,Objective-C
2,https://github.com/romaherman/timelineios,"name: CI

on: [push]

jobs:
  build:

    runs-on: macOS-latest
    strategy:
        matrix:
          destination: ['platform=iOS Simulator,OS=12.2,name=iPhone X']
    steps:
    - uses: actions/checkout@v1
    - name: Run a one-line script
      run: echo Hello, world!
    - name: Build
      run: |
        cd ExampleProject
        xcodebuild clean build -project Timlene.xcodeproj -scheme Timlene -destination ""${destination}"" CODE_SIGN_IDENTITY="""" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO
      env: 
         destination: ${{ matrix.destination }}
",,,,,,Objective-C
3,https://github.com/chiahsien/chtcollectionviewwaterfalllayout,"name: ""CHTCollectionViewWaterfallLayout CI""

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - '*'

jobs:
  Demo:
    name: Demo Project (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable

      - name: Build Swift Project
        uses: sersoft-gmbh/xcodebuild-action@v1.8.0
        with:
          project: Demo/Swift/CHTWaterfallSwiftDemo.xcodeproj
          scheme: CHTWaterfallSwiftDemo
          destination: name=iPhone 13 Pro
          action: build

      - name: Build Swift SPM Project
        uses: sersoft-gmbh/xcodebuild-action@v1.8.0
        with:
          project: Demo/Swift/CHTWaterfallSwiftDemo.xcodeproj
          scheme: CHTWaterfallSwiftSPMDemo
          destination: name=iPhone 13 Pro
          action: build

      - name: Build Objective-C Project
        uses: sersoft-gmbh/xcodebuild-action@v1.8.0
        with:
          project: Demo/Objective-C/Demo.xcodeproj
          scheme: Demo
          destination: name=iPhone 13 Pro
          action: build

      - name: Build Objective-C SPM Project
        uses: sersoft-gmbh/xcodebuild-action@v1.8.0
        with:
          project: Demo/Objective-C/Demo.xcodeproj
          scheme: SPMDemo
          destination: name=iPhone 13 Pro
          action: build
          
  Pods:
    name: Cocoapods Lint (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable

      - name: Run pod lib lint dynamic-framework
        run: pod lib lint --fail-fast

      - name: Run pod lib lint static-framework
        run: pod lib lint --fail-fast --use-libraries --use-modular-headers
          
  SwiftPM:
    name: SwiftPM (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable 

      - name: Build Swift Version
        run: xcodebuild -scheme CHTCollectionViewWaterfallLayout -destination generic/platform=iOS

      - name: Build ObjC Version
        run: xcodebuild -scheme CHTCollectionViewWaterfallLayoutObjC -destination generic/platform=iOS
",,,,,,Objective-C
4,https://github.com/tciuro/nanostore,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: macOS-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: Import Code-Signing Certificates
      uses: apple-actions/import-codesign-certs@v1
      with: 
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

    # Runs a single command using the runners shell
    - name: Run tests
      run: xcodebuild test -project NanoStore.xcodeproj -scheme NanoStore -destination 'platform=macOS,arch=x86_64'
",,,,,,Objective-C
5,https://github.com/griff/metaz,"name: ""Build and deploy""
on:
  push:
  pull_request:
jobs:
  build:
    runs-on: macos-10.15
    steps:
    - name: Setup | Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: '0'
    - name: Setup | Ruby
      uses: ruby/setup-ruby@v1
    - name: Setup | Install
      run: |
        carthage bootstrap
        gem install xcpretty-travis-formatter
    - name: Build
      env:
          SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
      run: |
        xcodebuild -version
        xcodebuild -target Package
    - name: Tag release
      if: ""github.ref == 'refs/heads/develop'""
      run: |
        . Scripts/tag-beta.bash

    - name: Release | Setup
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/develop'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Scripts/release-notes.rb
        Scripts/release-notes.rb > build/Release/Release-notes.md
        VERSION=$(/usr/libexec/PlistBuddy -c ""print :CFBundleShortVersionString"" ""build/Release/MetaZ.app/Contents/Info.plist"")
        echo ""VERSION=$VERSION"" >> $GITHUB_ENV
        RELEASE_NAME=""$(echo ""$VERSION"" | sed -e 's/.beta-/ Beta /')""
        echo ""RELEASE_NAME=$RELEASE_NAME"" >> $GITHUB_ENV
        mkdir Upload
        cp build/Release/MetaZ-* Upload/
        ls Upload/
        rm Upload/MetaZ-*.xml
        mv Upload/MetaZ-*+dSYM.zip Upload/Debug.dSYM.zip
        mv Upload/MetaZ-*.json Upload/Sparkle.json
        rm Upload/*.dmg
    - name: Pre-Release
      if: github.ref == 'refs/heads/develop'
      uses: softprops/action-gh-release@v1
      with:
        body_path: build/Release/Release-notes.md
        token: ${{ secrets.SITE_TOKEN }}
        files: 'Upload/*'
        prerelease: true
        name: ${{ env.RELEASE_NAME }}
        tag_name: v${{ env.VERSION }}
    - name: Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        body_path: build/Release/Release-notes.md
        token: ${{ secrets.SITE_TOKEN }}
        files: 'Upload/*'
        name: ${{ env.RELEASE_NAME }}
",,,,,,Objective-C
7,https://github.com/nabla-c0d3/ssl-kill-switch2,"name: Run Tests


on: [push, pull_request]

jobs:
  build:
    runs-on: macOS-10.15

    steps:
      - uses: actions/checkout@v2

      - name: Build and test
        run: xcodebuild -project SSLKillSwitch.xcodeproj -scheme SSLKillSwitch build test
",,,,,,Objective-C
8,https://github.com/nicklockwood/gzip,"name: build

on:
  push:
  pull_request:
jobs:
  macos:
    strategy:
      fail-fast: false
      matrix:
        macos:
          - 13
        xcode:
          - latest-stable
    runs-on: macos-${{ matrix.macos }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and Test
        run: |
          xcodebuild -scheme ""GZIP"" -sdk macosx clean build test -enableCodeCoverage YES -derivedDataPath Build/
          cd Build/Build/ProfileData
          cd $(ls -d */|head -n 1)
          directory=${PWD##*/}
          pathCoverage=Build/Build/ProfileData/${directory}/Coverage.profdata
          cd ../../../../
          xcrun llvm-cov export -format=""lcov"" -instr-profile $pathCoverage Build/Build/Products/Debug/GZIP.framework/GZIP > info.lcov
      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          # the token is optional for a public repo, but including it anyway
          token: 1132f70a-3f8e-4448-bc3e-e564311f2ced
          env_vars: MD_APPLE_SDK_ROOT,RUNNER_OS,RUNNER_ARCH
",,,,,,Objective-C
9,https://github.com/acerbetti/acedrawingview,"name: ""ACEDrawingView CI""

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  Example:
    name: Example Project (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable

      - name: Run pod install
        run: pod install

      - name: Build Project
        uses: sersoft-gmbh/xcodebuild-action@v1.8.0
        with:
          workspace: ACEDrawingViewDemo.xcworkspace
          scheme: ACEDrawingViewDemo
          destination: name=iPhone 13 Pro
          action: test
          
  Pods:
    name: Cocoapods Lint (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable

      - name: Run pod lib lint dynamic-framework
        run: pod lib lint --allow-warnings --fail-fast

      - name: Run pod lib lint static-framework
        run: pod lib lint --allow-warnings --fail-fast --use-libraries --use-modular-headers
          
  SwiftPM:
    name: SwiftPM (Latest Stable Xcode)
    runs-on: macOS-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1.4.0
        with: 
          xcode-version: latest-stable 

      - name: Build
        run: | # Move projects files temporarily to avoid interfering with SwiftPM build.
          mv ""ACEDrawingViewDemo.xcodeproj"" ""ACEDrawingViewDemo.xcodeproj_temp""
          mv ""ACEDrawingViewDemo.xcworkspace"" ""ACEDrawingViewDemo.xcworkspace_temp""
          xcodebuild -scheme ACEDrawingView -destination generic/platform=iOS
          mv ""ACEDrawingViewDemo.xcodeproj_temp"" ""ACEDrawingViewDemo.xcodeproj""
          mv ""ACEDrawingViewDemo.xcworkspace_temp"" ""ACEDrawingViewDemo.xcworkspace""
",,,,,,Objective-C
10,https://github.com/kimar/kiimagepager,"name: Test
on:
  push:
    branches:
      - main
      - develop
      - release
jobs:
  test:
    name: Test
    runs-on: macos-13
    strategy:
      matrix:
        destination: [""platform=iOS Simulator,OS=17.0,name=iPhone 15""]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Select Xcode
        run: sudo xcode-select -switch /Applications/Xcode_15.0.0.app
      - name: Build and test
        run: xcodebuild clean test -project KIImagePager.xcodeproj -scheme KIImagePager -destination ""${destination}"" CODE_SIGN_IDENTITY="""" CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=NO
        env:
          destination: ${{ matrix.destination }}
",,,,,,Objective-C
11,https://github.com/zymxxxs/ymhttp,"name: build

on: 
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: macOS-latest
    steps:
      - name: print env
        run: |
          xcodebuild -version
      - uses: actions/checkout@master
      - name: install cocoapods
        run: gem install cocoapods
      - name: install dependencies
        run: |
          cd Example
          pod install
        shell: bash
      - name: run test
        run: xcodebuild test -workspace ./Example/YMHTTP.xcworkspace -scheme 'YMHTTP-Example' -destination 'platform=iOS Simulator,name=iPhone 11'
        shell: bash
",,,,,,Objective-C
12,https://github.com/bfabiszewski/qlmobi,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install libmobi build dependencies
        run: brew install autoconf automake libtool
      - name: Fetch libmobi
        run: git clone https://github.com/bfabiszewski/libmobi.git
      - name: Build and install libmobi
        run: ( cd libmobi && ./autogen.sh && ./configure CFLAGS=""-arch x86_64 -arch arm64"" && make && sudo make install )
      - name: Build QLMobi
        run: xcodebuild
",,,,,,Objective-C
14,https://github.com/mantle/mantle,"
name: CI (pull-requests-only)

on:
  pull_request:
    branches:
      - master

jobs:
  Carthage-Build:
    env:
        DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer
    name: Carthage Build
    runs-on: macOS-latest
    steps:
    - name: Checkout the Git repository
      uses: actions/checkout@v2

    - name: Update submodules
      run: git submodule update --init --recursive

    - name: Verify Carthage build
      run: carthage build --no-skip-current

  Tests:
    runs-on: macos-latest
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app/Contents/Developer

    strategy:
      matrix:
        config:
          - scheme: ""Mantle Mac""
            action: test
            sdk: macosx
            destination: ""arch=x86_64""
          - scheme: ""Mantle iOS""
            action: test
            sdk: iphonesimulator
            destination: ""name=iPhone 11""
          - scheme: ""Mantle-tvOS""
            action: test
            sdk: appletvsimulator
            destination: ""name=Apple TV""
          - scheme: ""Mantle-watchOS""
            action: build
            sdk: watchsimulator
            destination: ""name=Apple Watch Series 4 - 40mm""

    steps:
    - uses: actions/checkout@v2
    - name: Updating submodules
      run: git submodule update --init --recursive
    - name: Build
      run: xcodebuild ${{ matrix.config.action }} -workspace Mantle.xcworkspace -scheme ""${{ matrix.config.scheme }}"" -sdk ""${{ matrix.config.sdk }}"" -destination ""${{ matrix.config.destination }}"" RUN_CLANG_STATIC_ANALYZER=NO",,,,,,Objective-C
15,https://github.com/dbukowski/dbdebugtoolkit,"name: Xcode - Build

on:
  push:
    branches: [ '**' ]
  pull_request:
    paths:
      - 'DBDebugToolkit/**'
      - 'Example/**'
      - '.github/workflows/**'
      - 'Package.swift'
      - 'DBDebugToolkit.podspec'
jobs:
  build:
    name: Build using xcodebuild command
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./Example
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CocoaPod Install
        run: pod install
      - name: Build
        run: xcodebuild build -workspace DBDebugToolkit.xcworkspace -scheme DBDebugToolkit-Example -sdk iphonesimulator -destination ""platform=iOS Simulator,name=iPhone 12,OS=15.2""
",,,,,,Objective-C
16,https://github.com/jonreid/ocmockito,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  # Cancel any in-progress workflows for this workflow/branch combination.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  project: Source/OCMockito.xcodeproj

jobs:
  build:
    name: Build without tests
    runs-on: macos-13
    strategy:
      matrix:
        run-config:
          - { scheme: 'OCMockito-iOS', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 14' }
          - { scheme: 'OCMockito-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }
          - { scheme: 'OCMockito-watchOS', sdk: 'watchsimulator', destination: 'platform=watchOS Simulator,OS=latest,name=Apple Watch Series 6 (44mm)' }
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Set up Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '14.3'
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Get OCHamcrest
        run: Frameworks/gethamcrest
      - name: Build
        run: xcodebuild build -project '${{ env.project }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}

  test:
    name: Build, test, report coverage
    runs-on: macos-13
    env:
      scheme: 'OCMockito'
      sdk: 'macosx'
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Set up Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '14.3'
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Get OCHamcrest
        run: Frameworks/gethamcrest
      - name: Build & test
        run: xcodebuild test -project '${{ env.project }}' -scheme '${{ env.scheme }}' -sdk '${{ env.sdk }}' | xcpretty && exit ${PIPESTATUS[0]}
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle config set --local without 'documentation'
          bundle install --jobs 4 --retry 3
      - name: Extract branch name
        shell: bash
        run: echo ""branch=$(echo ${GITHUB_REF#refs/heads/})"" >> $GITHUB_OUTPUT
        id: get_branch
      - name: Report coverage
        run: bundle exec slather
        env:
          GIT_BRANCH: ${{ steps.get_branch.outputs.branch }}
          CI_PULL_REQUEST: ${{ github.event.number }}
          COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  buildSwiftPackage:
    needs: [ build, test ]
    name: Build Swift package
    runs-on: macos-13
    steps:
    - name: Check out project
      uses: actions/checkout@v4
    - name: Set up Xcode version
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '14.3'
    - name: Build
      run: cd Source; swift build -v

  buildCarthage:
    needs: [ build, test ]
    name: Build Carthage
    runs-on: macos-13
    steps:
    - name: Check out project
      uses: actions/checkout@v4
    - name: Set up Xcode version
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '14.3'
    - name: Show current version of Xcode
      run: xcodebuild -version
    - name: Show current version of Carthage
      run: carthage version
    - name: Update dependencies
      run: carthage update --use-xcframeworks
    - name: Build
      run: carthage build --configuration Release --no-skip-current --use-xcframeworks

  podspec:
    needs: [ build, test ]
    name: Pod Spec Lint
    runs-on: macos-13
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Show current version of CocoaPods
        run: pod --version
      - name: Lint the pod spec
        run: pod spec lint --quick

  auto-merge:
    needs: [ buildSwiftPackage, buildCarthage, podspec ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: auto-merge
        if: |
          github.actor == 'dependabot[bot]' &&
          github.event_name == 'pull_request'
        run: |
          ./merge_dependabot.sh
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          # this secret needs to be in the settings.secrets.dependabot
          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}
",,,,,,Objective-C
17,https://github.com/vtourraine/vtacknowledgementsviewcontroller,"name: Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set Default Scheme
        run: |
          cd Tests
          scheme_list=$(xcodebuild -list -json | tr -d ""\n"")
          default=$(echo $scheme_list | ruby -e ""require 'json'; puts JSON.parse(STDIN.gets)['project']['schemes'][0]"")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          cd Tests
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e ""s/ Simulator$//""`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ ""`ls -A | grep -i \\.xcworkspace\$`"" ]; then filetype_parameter=""workspace"" && file_to_build=""`ls -A | grep -i \\.xcworkspace\$`""; else filetype_parameter=""project"" && file_to_build=""`ls -A | grep -i \\.xcodeproj\$`""; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme ""$scheme"" -""$filetype_parameter"" ""$file_to_build"" -destination ""platform=$platform,name=$device""
      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          cd Tests
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e ""s/ Simulator$//""`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ ""`ls -A | grep -i \\.xcworkspace\$`"" ]; then filetype_parameter=""workspace"" && file_to_build=""`ls -A | grep -i \\.xcworkspace\$`""; else filetype_parameter=""project"" && file_to_build=""`ls -A | grep -i \\.xcodeproj\$`""; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme ""$scheme"" -""$filetype_parameter"" ""$file_to_build"" -destination ""platform=$platform,name=$device""
",,,,,,Objective-C
18,https://github.com/hamcrest/ochamcrest,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  # Cancel any in-progress workflows for this workflow/branch combination.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  project: Source/OCHamcrest.xcodeproj

jobs:
  build:
    name: Build without tests
    runs-on: macos-13
    strategy:
      matrix:
        run-config:
          - { scheme: 'OCHamcrest-iOS', sdk: 'iphonesimulator', destination: 'platform=iOS Simulator,OS=latest,name=iPhone 14' }
          - { scheme: 'OCHamcrest-tvOS', sdk: 'appletvsimulator', destination: 'platform=tvOS Simulator,OS=latest,name=Apple TV' }
          - { scheme: 'OCHamcrest-watchOS', sdk: 'watchsimulator', destination: 'platform=watchOS Simulator,OS=latest,name=Apple Watch Series 6 (44mm)' }
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Set up Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '14.3'
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Build
        run: xcodebuild build -project '${{ env.project }}' -scheme '${{ matrix.run-config['scheme'] }}' -sdk '${{ matrix.run-config['sdk'] }}' -destination '${{ matrix.run-config['destination'] }}' | xcpretty && exit ${PIPESTATUS[0]}

  test:
    name: Build, test, report coverage
    runs-on: macos-13
    env:
      scheme: OCHamcrest
      sdk: macosx
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Set up Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '14.3'
      - name: Show current version of Xcode
        run: xcodebuild -version
      - name: Build & test
        run: xcodebuild test -project '${{ env.project }}' -scheme '${{ env.scheme }}' -sdk '${{ env.sdk }}' | xcpretty && exit ${PIPESTATUS[0]}
      - name: Install gems
        run: |
          bundle config path vendor/bundle
          bundle config set --local without 'documentation'
          bundle install --jobs 4 --retry 3
      - name: Extract branch name
        shell: bash
        run: echo ""branch=$(echo ${GITHUB_REF#refs/heads/})"" >> $GITHUB_OUTPUT
        id: get_branch
      - name: Report coverage
        run: bundle exec slather
        env:
          GIT_BRANCH: ${{ steps.get_branch.outputs.branch }}
          CI_PULL_REQUEST: ${{ github.event.number }}
          COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  buildSwiftPackage:
    needs: [ build, test ]
    name: Build Swift package
    runs-on: macos-13
    steps:
    - name: Check out project
      uses: actions/checkout@v4
    - name: Set up Xcode version
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '14.3'
    - name: Build
      run: cd Source; swift build -v

  buildCarthage:
    needs: [ build, test ]
    name: Build Carthage
    runs-on: macos-13
    steps:
    - name: Check out project
      uses: actions/checkout@v4
    - name: Set up Xcode version
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: '14.3'
    - name: Show current version of Xcode
      run: xcodebuild -version
    - name: Show current version of Carthage
      run: carthage version
    - name: Build
      run: carthage build --configuration Release --no-skip-current --use-xcframeworks


  podspec:
    needs: [ build, test ]
    name: Pod Spec Lint
    runs-on: macos-13
    steps:
      - name: Check out project
        uses: actions/checkout@v4
      - name: Show current version of CocoaPods
        run: pod --version
      - name: Lint the pod spec
        run: pod spec lint --quick

  auto-merge:
    needs: [ buildSwiftPackage, buildCarthage, podspec ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: auto-merge
        if: |
          github.actor == 'dependabot[bot]' &&
          github.event_name == 'pull_request'
        run: |
          ./merge_dependabot.sh
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          # this secret needs to be in the settings.secrets.dependabot
          GITHUB_TOKEN: ${{secrets.GH_ACTION_TOKEN}}
",,,,,,Objective-C
19,https://github.com/robb/asterism,"name: Run Tests

on: [push, pull_request]

jobs:
  build:
    runs-on: macOS-latest

    steps:
    - name: Select Xcode
      run: sudo xcode-select -switch /Applications/Xcode_12.4.app
    - uses: actions/checkout@v1
    - name: Run Tests
      run: xcodebuild test -scheme Asterism-OSX
",,,,,,Objective-C
20,https://github.com/ealeksandrov/eaintroview,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install pods
        run: pod install --project-directory=Example

      - name: Build example project
        run: set -o pipefail && xcodebuild -workspace Example/EAIntroView.xcworkspace -scheme EAIntroView-Example -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO | xcpretty

      - name: Lint pod
        run: pod lib lint
",,,,,,Objective-C
21,https://github.com/dantheman827/ios-app-signer,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: '*'
  pull_request:
    branches: '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Build
        run: xcodebuild build CODE_SIGN_IDENTITY="""" CODE_SIGNING_REQUIRED=NO
        
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: build/Release
",,,,,,Objective-C
22,https://github.com/headkaze/hackintool,"name: release
on: push

jobs:
  release:
    runs-on: macos-12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        uses: apple-actions/import-codesign-certs@v1
        with:
          keychain: app-signing
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      - name: Get Sparkle key
        env:
          PRIVATE_SPARKLE_KEY: ${{ secrets.PRIVATE_SPARKLE_KEY }}
        run: 'echo ""${{ env.PRIVATE_SPARKLE_KEY }}"" | base64 -d -o eddsa_private.key'
      - name: Install Python Requirements
        run: pip3 install requests xmltodict
      - name: Install Brew Requirements
        run: brew install coreutils pandoc
      - name: Setup Sparkle
        env:
          SPARKLE_VERSION: '2.5.0'
          SPARKLE_HASH: '06a59e6bfd3c57b79e004b4f6bf6d65fde05ed3a23678dadecfd3f6ed01d5c6b'
        run: |
          curl -L ""https://github.com/sparkle-project/Sparkle/releases/download/${{ env.SPARKLE_VERSION }}/Sparkle-${{ env.SPARKLE_VERSION }}.tar.xz"" -o Sparkle.tar.xz
          if [[ '${{ env.SPARKLE_HASH }}' != ""$(sha256sum Sparkle.tar.xz | cut -d "" "" -f 1)"" ]]; then
              echo ""Sparkle download hash does not match!""
              exit 1
          fi
          mkdir sparkle && cd sparkle
          tar -xf ../Sparkle.tar.xz
      - name: Build app
        run: |
          xcodebuild -project Hackintool.xcodeproj -target Hackintool -configuration Release build ARCHS=x86_64 -verbose CONFIGURATION_BUILD_DIR=build
          rm -R build/EagerLinkingTBDs
          rm -R build/Hackintool.app.dSYM
          rm -R build/Hackintool.build
          rm -R build/SharedPrecompiledHeaders
          rm -R build/XCBuildData
      - name: Get version
        id: version
        run: |
          output=$(xcodebuild -project Hackintool.xcodeproj -configuration Release -showBuildSettings | grep MARKETING_VERSION | tr -d 'MARKETING_VERSION = ')
          echo ""::set-output name=result::$output""
      - name: Compress Files
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          directory: build
          filename: Hackintool.zip
      - name: Clean up
        run: rm -R build/Hackintool.app
      - name: Generate appcast.xml
        run: sparkle/bin/generate_appcast --ed-key-file eddsa_private.key -o build/appcast.xml build
      - name: Upload to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: build/*
      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*
          tag: ${{ steps.version.outputs.result }}
          overwrite: true
          file_glob: true
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain app-signing.keychain
          rm eddsa_private.key",,,,,,Objective-C
23,https://github.com/janten/keypad-layout,"name: Xcode - Build and Analyze

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d ""\n"")
          default=$(echo $scheme_list | ruby -e ""require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]"")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ ""`ls -A | grep -i \\.xcworkspace\$`"" ]; then filetype_parameter=""workspace"" && file_to_build=""`ls -A | grep -i \\.xcworkspace\$`""; else filetype_parameter=""project"" && file_to_build=""`ls -A | grep -i \\.xcodeproj\$`""; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme ""$scheme"" -""$filetype_parameter"" ""$file_to_build"" | xcpretty && exit ${PIPESTATUS[0]}
",,,,,,Objective-C
24,https://github.com/macmade/githubupdates,"name: ci-mac
on:   [push]
jobs:
    ci:
        runs-on: macos-latest
        strategy:
            matrix:
                run-config:
                    - { scheme: 'GitHubUpdates', configuration: 'Debug',   project: 'GitHubUpdates.xcodeproj', build: 1, analyze: 1, test: 0, info: 1, destination: 'platform=macOS' }
                    - { scheme: 'GitHubUpdates', configuration: 'Release', project: 'GitHubUpdates.xcodeproj', build: 1, analyze: 1, test: 0, info: 1, destination: 'platform=macOS' }
        steps:
            
            - uses: actions/checkout@v1
              with:
                submodules: 'recursive'
                
            - uses: macmade/action-xcodebuild@v1.0.0
            
            - uses: macmade/action-slack@v1.0.0
              if:   ${{ always() }}
              env:
                SLACK_WEBHOOK_URL:  ${{ secrets.SLACK_WEBHOOK_URL }}
              with:
                channel:    '#ci'
                status:     ${{ job.status }}
                title:      ${{ matrix.run-config[ 'scheme' ] }} - ${{ matrix.run-config[ 'configuration' ] }}
",,,,,,Objective-C
26,https://github.com/square/in-app-payments-flutter-plugin,"name: build

on:
  push:
  pull_request:
    branches: master

jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ""3.0.5""
          architecture: x64
           # or: 'beta', 'dev' or 'master'
      - run: flutter pub get
      #Android
      - run: |
          cd example
          flutter pub get
          flutter build apk
      #IOS
      - run: |
          cd example
          flutter pub get
          cd ios
          flutter clean
          rm Pods && rm Podfile.lock
          flutter pub get
          pod install --repo-update
          xcodebuild -workspace Runner.xcworkspace -configuration Debug -scheme Runner -destination ""platform=iOS Simulator,OS=16.2,name=iPhone 14""",,,,,,Objective-C
27,https://github.com/pubnub/objective-c,"name: Tests

on:
  push:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash
env:
  TESTS_PAM_PUBLISH_KEY: ${{ secrets.TESTS_PAM_PUBLISH_KEY }}
  TESTS_PAM_SUBSCRIBE_KEY: ${{ secrets.TESTS_PAM_SUBSCRIBE_KEY }}
  TESTS_PUBLISH_KEY: ${{ secrets.TESTS_PUBLISH_KEY }}
  TESTS_SUBSCRIBE_KEY: ${{ secrets.TESTS_SUBSCRIBE_KEY }}

jobs:
  tests:
    name: Integration and Unit tests
    runs-on: macos-12
    strategy:
      fail-fast: true
      matrix:
        environment: [iOS, tvOS, macOS]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Checkout actions
        uses: actions/checkout@v3
        with:
          repository: pubnub/client-engineering-deployment-tools
          ref: v1
          token: ${{ secrets.GH_TOKEN }}
          path: .github/.release/actions
      - name: Prepare Xcode environment
        run: sudo xcode-select -s '/Applications/Xcode_14.2.app/Contents/Developer'
      - name: Setup Ruby 2.6.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.6
          bundler-cache: true
      - name: Cache installed Pods
        uses: actions/cache@v3
        with:
          path: Tests/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Tests/Podfile.lock') }}
          restore-keys: |
              ${{ runner.os }}-pods-
      - name: Pre-load simulators list
        if: ${{ matrix.environment != 'macOS' }}
        run: xcrun simctl list -j
      - name: Install dependencies
        run: |
          gem install xcpretty
          cd ./Tests && pod install && cd ..
      - name: Configure test environment
        run: |
          ./Tests/Support\ Files/Scripts/create-configuration.sh
      - name: Run ${{ matrix.environment }} integration tests
        run: |
          ./Tests/Support\ Files/Scripts/tests-runner.sh $(echo ${{ matrix.environment }} | tr '[:upper:]' '[:lower:]') mocked 1
      - name: Cancel workflow runs for commit on error
        if: failure()
        uses: ./.github/.release/actions/actions/utils/fast-jobs-failure
  acceptance-tests: 
    name: Run Acceptance tests
    runs-on: macos-12
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Prepare Xcode environment
        run: sudo xcode-select -s '/Applications/Xcode_14.2.app/Contents/Developer'
      - name: Setup Ruby 2.6.6
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6.6
          bundler-cache: true
      - name: Cache installed Pods
        uses: actions/cache@v3
        with:
          path: Tests/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Tests/Podfile.lock') }}
          restore-keys: |
              ${{ runner.os }}-pods-
      - name: Checkout mock-server action
        uses: actions/checkout@v3
        with:
          repository: pubnub/client-engineering-deployment-tools
          ref: v1
          token: ${{ secrets.GH_TOKEN }}
          path: .github/.release/actions
      - name: Run mock server action
        uses: ./.github/.release/actions/actions/mock-server
        with:
          token: ${{ secrets.GH_TOKEN }}
          features-path: Tests/Support Files/Features
      - name: Install dependencies
        run: |
          gem install xcpretty
          cd ./Tests && pod install && cd ..
      - name: Configure test environment
        run: ./Tests/Support\ Files/Scripts/create-configuration.sh
      - name: Run stable acceptance tests
        run: ./Tests/Support\ Files/Scripts/tests-runner.sh ios contract 1
      - name: Run beta acceptance tests
        run: ./Tests/Support\ Files/Scripts/tests-runner.sh ios contract-beta 1
      - name: Expose acceptance tests reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: acceptance-test-reports
          path: Tests/Results/*.json
          retention-days: 7
      - name: Cancel workflow runs for commit on error
        if: failure()
        uses: ./.github/.release/actions/actions/utils/fast-jobs-failure
  all-tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: [tests, acceptance-tests]
    steps:
      - name: Tests summary
        run: echo -e ""\033[38;2;95;215;0m\033[1mAll tests successfully passed""",,,,,,Objective-C
28,https://github.com/muzipiao/lfphoneinfo,"name: build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      # 第一步，获取源码，将代码检出到虚拟机上
      - name: Checkout
        uses: actions/checkout@v2
      # 第二步，安装所需环境
      - name: Install
        run: |
          env
          locale
          gem install cocoapods --no-document --quiet
          gem install xcpretty --no-document --quiet
          pod --version
          pod repo update --silent
          xcpretty --version
          xcodebuild -version
          xcodebuild -showsdks
      # 第三步，编译测试
      - name: Build and Tests
        run: |
          set -o pipefail
          echo Check if the library described by the podspec can be built
          pod lib lint --allow-warnings --skip-tests
          pod install
          xcodebuild build -workspace LFPhoneInfo.xcworkspace -scheme 'LFPhoneInfoDemo' -destination 'platform=iOS Simulator,name=iPhone 12' -configuration Debug CODE_SIGNING_ALLOWED=NO | xcpretty -c
          echo Run the tests
          xcodebuild test -workspace LFPhoneInfo.xcworkspace -scheme 'LFPhoneInfoDemo' -destination 'platform=iOS Simulator,name=iPhone 12' -configuration Debug CODE_SIGNING_ALLOWED=NO -enableCodeCoverage YES | xcpretty -c
      # 第四步，通知codecov
      - name: Notify codecov
        run: |
          bash <(curl -s https://codecov.io/bash) -G './LFPhoneInfo' -t ${{ secrets.CODECOV_TOKEN }}
",,,,,,Objective-C
29,https://github.com/afnetworking/afnetworking,"name: ""AFNetworking CI""

on: 
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - '*'

jobs:
  macOS:
    name: Test macOS
    runs-on: macOS-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: macOS
        run: fastlane ci_commit configuration:Debug --env macos
  iOS:
    name: Test iOS 
    runs-on: macOS-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: iOS
        run: fastlane ci_commit configuration:Debug --env ios13_xcode11
  Catalyst:
    name: Test Catalyst 
    runs-on: macOS-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Catalyst
        run: fastlane ci_commit configuration:Debug --env catalyst
  tvOS:
    name: Test tvOS 
    runs-on: macOS-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: tvOS
        run: fastlane ci_commit configuration:Debug --env tvos13_xcode11
  watchOS:
    name: Build watchOS
    runs-on: macOS-latest
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    strategy:
      matrix:
        destination: [""OS=6.1.1,name=Apple Watch Series 5 - 44mm""] #, ""OS=4.2,name=Apple Watch Series 3 - 42mm"", ""OS=3.2,name=Apple Watch Series 2 - 42mm""]
    steps:
      - uses: actions/checkout@v2
      - name: watchOS - ${{ matrix.destination }}
        run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project ""AFNetworking.xcodeproj"" -scheme ""AFNetworking watchOS"" -destination ""${{ matrix.destination }}"" clean build | xcpretty
  SPM:
    name: Build with SPM
    runs-on: macOS-latest    
    env: 
      DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: SPM Build
        run: swift build
",,,,,,Objective-C
30,https://github.com/instagram/iglistkit,"name: ""IGListKit CI""

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  macOS:
    name: Unit Test macOS
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      SCHEME_NAME: IGListKit-macOS
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache RubyGems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Install pods.
        run: pod install

      - name: Run unit tests for macOS
        run: |
          set -o pipefail
          xcodebuild build build-for-testing -workspace ""${{ env.WORKSPACE_NAME }}"" -scheme ""${{ env.SCHEME_NAME }}"" -destination ""platform=macOS"" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c
          xcodebuild analyze test-without-building -workspace ""${{ env.WORKSPACE_NAME }}"" -scheme ""${{ env.SCHEME_NAME }}"" -destination ""platform=macOS"" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c

  iOS:
    name: Unit Test iOS
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      SCHEME_NAME: IGListKit
    strategy:
      matrix:
        destination: [""platform=iOS Simulator,name=iPhone 14 Pro""]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache RubyGems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Install pods.
        run: pod install

      - name: iOS - ${{ matrix.destination }}
        run: |
          set -o pipefail
          xcodebuild build build-for-testing -workspace ""${{ env.WORKSPACE_NAME }}"" -scheme ""${{ env.SCHEME_NAME }}"" -destination ""${{ matrix.destination }}"" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c
          xcodebuild analyze test-without-building -workspace ""${{ env.WORKSPACE_NAME }}"" -scheme ""${{ env.SCHEME_NAME }}"" -destination ""${{ matrix.destination }}"" -configuration Debug ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO ONLY_ACTIVE_ARCH=YES | bundle exec xcpretty -c

      - name: Upload code coverage
        run: bundle exec slather
        env:
          COVERAGE_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_PULL_REQUEST: ${{ github.event.number }}
          GIT_BRANCH: ${{ github.head_ref || github.ref_name }}

  CocoaPods:
    name: CocoaPods Lint
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache RubyGems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Run IGListDiffKit podspec lint
        run: bundle exec pod lib lint IGListDiffKit.podspec --allow-warnings

      - name: Run IGListKit podspec lint
        run: bundle exec pod lib lint IGListKit.podspec --allow-warnings ""--include-podspecs=IGListDiffKit.podspec""

      - name: Run IGListSwiftKit podspec lint
        run: bundle exec pod lib lint IGListSwiftKit.podspec --allow-warnings ""--include-podspecs=*.podspec""

  SPM-layout-generator:
    name: Verify generate_spm_sources_layout.sh is not broken
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      PROJECT_NAME: IGListKit.xcodeproj
      IOS_DESTINATION: ""platform=iOS Simulator,name=iPhone 14 Pro""
      SPM_IG_LIST_DIFF_KIT_PUBLIC_HEADERS_PATH: ""spm/Sources/IGListDiffKit/include""
      SPM_IG_LIST_DIFF_KIT_SOURCES_PATH: ""spm/Sources/IGListDiffKit""
      SPM_IG_LIST_KIT_PUBLIC_HEADERS_PATH: ""spm/Sources/IGListKit/include""
      SPM_IG_LIST_KIT_SOURCES_PATH: ""spm/Sources/IGListKit""
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Manually clean SPM Sources folder
        run: |
            rm -rf ""${{ env.SPM_IG_LIST_DIFF_KIT_PUBLIC_HEADERS_PATH }}/*.*""
            rm -rf ""${{ env.SPM_IG_LIST_DIFF_KIT_SOURCES_PATH }}/*.*""
            rm -rf ""${{ env.SPM_IG_LIST_KIT_PUBLIC_HEADERS_PATH }}/*.*""
            rm -rf ""${{ env.SPM_IG_LIST_KIT_SOURCES_PATH }}/*.*""

      - name: Regenerate SPM layout
        run: sh scripts/generate_spm_sources_layout.sh

      - name: Clean project's ${{ env.PROJECT_NAME }} and ${{ env.WORKSPACE_NAME }}
        run: |
          rm -rf ""${{ env.WORKSPACE_NAME }}""
          rm -rf ""${{ env.PROJECT_NAME }}""

      - name: Verify IGListKit can be build using Package.swift which was generated by 'scripts/generate_spm_sources_layout.sh'
        run: xcodebuild -scheme ""IGListKit"" build -destination ""${{ env.IOS_DESTINATION }}"" | xcpretty

  SPM-build-from-Package:
    name: Verify SPM build by invoking `xcodebuild` on Package.swift
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
      WORKSPACE_NAME: IGListKit.xcworkspace
      PROJECT_NAME: IGListKit.xcodeproj
      IOS_DESTINATION: ""platform=iOS Simulator,name=iPhone 14 Pro""
    strategy:
      matrix:
        schemeName: [""IGListDiffKit"",
                      ""IGListKit"",
                      ""IGListSwiftKit""]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clean project's ${{ env.PROJECT_NAME }} and ${{ env.WORKSPACE_NAME }}
        run: |
          rm -rf ""${{ env.WORKSPACE_NAME }}""
          rm -rf ""${{ env.PROJECT_NAME }}""

      - name: Run ${{ matrix.schemeName}} using Package.swift
        run: xcodebuild -scheme ""${{ matrix.schemeName}}"" build -destination ""${{ env.IOS_DESTINATION }}"" | xcpretty

  Carthage-XCFramework:
    name: Verify Carthage build XCFramework
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Carthage build framework
        run: carthage build --no-skip-current --use-xcframeworks

  Carthage-Legacy-Lipo-Binaries:
    name: Verify Carthage build lipo binaries
    runs-on: macos-11
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.7.app
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Carthage build framework
        run: carthage build --no-skip-current

  Build-Examples:
    name: Build Examples and UI tests.
    runs-on: macos-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.app
      IOS_EXAMPLE_XCODEPROJ: Examples/Examples-iOS/IGListKitExamples.xcodeproj
      TVOS_EXAMPLE_XCODEPROJ: Examples/Examples-tvOS/IGListKitExamples.xcodeproj
      MACOS_EXAMPLE_XCODEPROJ: Examples/Examples-macOS/IGListKitExamples.xcodeproj
      EXAMPLE_SCHEME: IGListKitExamples
    strategy:
      matrix:
        iosDestination: [""platform=iOS Simulator,name=iPhone 14 Pro,OS=16.4""]
        tvOSDestination: [""platform=tvOS Simulator,name=Apple TV 4K (3rd generation)""]
        macOSDestination: [""platform=macOS""]
        macCatalystDestination: [""platform=macOS,variant=Mac Catalyst""]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache RubyGems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Preboot iOS Simulator
        uses: futureware-tech/simulator-action@v2
        with:
          model: 'iPhone 14 Pro'
          os_version: '=16.4'

      - name: Build iOS Example - ${{ matrix.iosDestination }}
        run: |
          set -o pipefail
          xcodebuild build build-for-testing -project ""${{ env.IOS_EXAMPLE_XCODEPROJ }}"" -scheme ""${{ env.EXAMPLE_SCHEME }}"" -destination ""${{ matrix.iosDestination }}"" -configuration Debug ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Run iOS Example's UI Tests - ${{ matrix.iosDestination }}
        run: |
          set -o pipefail
          xcodebuild build test -project ""${{ env.IOS_EXAMPLE_XCODEPROJ }}"" -scheme ""${{ env.EXAMPLE_SCHEME }}"" -destination ""${{ matrix.iosDestination }}"" -configuration Debug ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build tvOS Example - ${{ matrix.tvOSDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project ""${{ env.TVOS_EXAMPLE_XCODEPROJ }}"" -scheme ""${{ env.EXAMPLE_SCHEME }}"" -destination ""${{ matrix.tvOSDestination }}"" -configuration Debug ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build macOS Example - ${{ matrix.macOSDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project ""${{ env.MACOS_EXAMPLE_XCODEPROJ }}"" -scheme ""${{ env.EXAMPLE_SCHEME }}"" -destination ""${{ matrix.macOSDestination }}"" -configuration Debug ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

      - name: Build Mac Catalyst Example - ${{ matrix.macCatalystDestination }}
        run: |
          set -o pipefail
          xcodebuild build -project ""${{ env.IOS_EXAMPLE_XCODEPROJ }}"" -scheme ""${{ env.EXAMPLE_SCHEME }}"" -destination ""${{ matrix.macCatalystDestination }}"" -configuration Debug ONLY_ACTIVE_ARCH=YES CODE_SIGNING_REQUIRED=NO | bundle exec xcpretty -c

  Danger:
    name: Run Danger
    if: github.event_name == 'pull_request'
    runs-on: macos-13
    env:
      DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache RubyGems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems.
        run: bundle install

      - name: Run Danger
        run: bundle exec danger --verbose

",,,,,,Objective-C
31,https://github.com/kasper/phoenix,"name: Build Phoenix

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.2.0
      - name: Build docs
        working-directory: docs
        run: |
          npm ci
          npm run lint
          npm run build
      - name: Install ClangFormat
        run: brew install clang-format
      - name: Build Launcher
        uses: sersoft-gmbh/xcodebuild-action@v2
        with:
          workspace: Phoenix.xcworkspace
          scheme: Launcher
          action: test build
      - name: Build Phoenix
        uses: sersoft-gmbh/xcodebuild-action@v2
        with:
          workspace: Phoenix.xcworkspace
          scheme: Phoenix
          action: test build
",,,,,,Objective-C
32,https://github.com/google/santa,"name: sanitizers
on:
  schedule:
    - cron: '0 16 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        sanitizer: [asan, tsan, ubsan]
    steps:
      - uses: actions/checkout@v3
      - name: ${{ matrix.sanitizer }}
        run: |
          CLANG_VERSION=$(clang --version | head -n 1 | cut -d' ' -f 4)
          DYLIB_PATH=""$(xcode-select -p)/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/${CLANG_VERSION}/lib/darwin/libclang_rt.${{ matrix.sanitizer }}_osx_dynamic.dylib""

          bazel test --config=${{ matrix.sanitizer }} \
            --test_strategy=exclusive --test_output=all \
            --test_env=DYLD_INSERT_LIBRARIES=${DYLIB_PATH} \
            --runs_per_test 5 -t- :unit_tests \
            --define=SANTA_BUILD_TYPE=adhoc
      - name: Upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: logs
          path: /tmp/san_out*
",,,,,,Objective-C
33,https://github.com/quicksilver/quicksilver,"---
name: build

on:
  push:
    branches-ignore:
      - 'translations_**'
    tags:
      - 'v*'
  pull_request:
    branches-ignore:
      - 'translations_**'

jobs:
  build:
    runs-on: macos-11
    env:
      QS_BUILD_ONLY: 1
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build debug version
        working-directory: Quicksilver
        run: |
          ./Tools/qsrelease Debug
          mv /tmp/QS/build/Debug/Quicksilver{,-debug}.zip
      - name: Upload debug version
        uses: actions/upload-artifact@v3
        with:
          name: Quicksilver-debug
          path: /tmp/QS/build/Debug/Quicksilver-debug.zip
      - name: Build release version
        working-directory: Quicksilver
        run: |
          ./Tools/qsrelease
          cp ./SharedSupport/ChangesBare.html /tmp
      - name: Prepare DMG_INGREDIENTS artifact
        working-directory: /tmp/QS/build/Release/
        run: |
          cp \
            /tmp/qs_build_settings \
            /tmp/Quicksilver.entitlements \
            /tmp/ChangesBare.html \
            ./dmg/
          tar -czvf ./dmg_ingredients.tar.gz ./dmg
      - name: Upload components for sign action
        uses: actions/upload-artifact@v3
        with:
          name: DMG_INGREDIENTS
          path: /tmp/QS/build/Release/dmg_ingredients.tar.gz

  sign:
    needs: build
    runs-on: macos-11
    if: startsWith(github.ref, 'refs/tags/')
    env:
      MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
      MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
      NOTARIZING_ID: ${{ secrets.NOTARIZING_ID }}
      NOTARIZING_PASS: ${{ secrets.NOTARIZING_PASS }}

      KEYCHAIN_PROFILE: ""Quicksilver Notarization""
    steps:
      - name: Download dmg folder artifact
        uses: actions/download-artifact@v3
        with:
          name: DMG_INGREDIENTS
          path: /tmp/QS/build/Release/
      - name: Decompress DMG_INGREDIENTS
        working-directory: /tmp/QS/build/Release/
        run: |
          tar -xzvf ./dmg_ingredients.tar.gz
          mv \
            ./dmg/qs_build_settings \
            ./dmg/Quicksilver.entitlements \
            ./dmg/ChangesBare.html \
            /tmp/
          QS_INFO_VERSION=$(awk '/QS_INFO_VERSION/ { print $NF }' \
            /tmp/qs_build_settings)
          echo ""QS_INFO_VERSION=${QS_INFO_VERSION}"" >> ""${GITHUB_ENV}""
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Run Tools/qssign
        working-directory: Quicksilver
        run: |
          # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
          KEYCHAIN_PATH=${RUNNER_TEMP}/app-signing.keychain-db
          CERTIFICATE_PATH=${RUNNER_TEMP}/build_certificate.p12
          echo -n ""${MACOS_CERTIFICATE}"" | base64 --decode \
            --output ""${CERTIFICATE_PATH}""

          security create-keychain -p ""${KEYCHAIN_PASSWORD}"" ""${KEYCHAIN_PATH}""
          security default-keychain -s ""${KEYCHAIN_PATH}""
          security set-keychain-settings -lut 21600 ""${KEYCHAIN_PATH}""

          security unlock-keychain -p ""${KEYCHAIN_PASSWORD}"" ""${KEYCHAIN_PATH}""

          security import ""${CERTIFICATE_PATH}"" \
            -P ""${MACOS_CERTIFICATE_PASSWORD}"" \
            -A -t cert -f pkcs12 -k ""${KEYCHAIN_PATH}""
          xcrun notarytool store-credentials ""${KEYCHAIN_PROFILE}"" \
            --apple-id ""${NOTARIZING_ID}"" \
            --team-id ""${SIGNING_IDENTITY}"" \
            --password ""${NOTARIZING_PASS}""

          ./Tools/qssign
      - name: Download debug artifact
        uses: actions/download-artifact@v3
        with:
          name: Quicksilver-debug
          path: /tmp
      - name: Create checksum
        run: |
          cd /tmp/QS/build/Release/
          shasum --algorithm 256 Quicksilver*.dmg > checksum.txt
          cd /tmp
          shasum --algorithm 256 Quicksilver-debug.zip >> /tmp/QS/build/Release/checksum.txt
      - name: Upload Quicksilver.dmg
        uses: actions/upload-artifact@v3
        with:
          name: ""Quicksilver_${{ env.QS_INFO_VERSION }}.dmg""
          path: /tmp/QS/build/Release/Quicksilver*.dmg
      - name: Upload checksum
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: /tmp/QS/build/Release/checksum.txt
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            /tmp/QS/build/Release/Quicksilver*.dmg
            /tmp/QS/build/Release/checksum.txt
            /tmp/Quicksilver-debug.zip
      - name: Update ChangesBare.html
        env:
          SERVER: ${{ secrets.SERVER }}
          PORT: ${{ secrets.PORT }}
          SSH_KEY: ${{secrets.SSH_KEY}}
        run: |
          # Create ssh keyfile with locked down permissions and ensure its removal
          # Unfortunately process substitution won't work because ssh closes
          # all fd > 2
          touch /tmp/key
          chmod 0600 /tmp/key
          trap 'rm -f /tmp/key' EXIT
          echo ""${SSH_KEY}"" > /tmp/key

          ssh -T ""${SERVER}"" -p ""${PORT}"" -i /tmp/key \
            -o StrictHostKeyChecking=no \
            ""${GITHUB_REPOSITORY}"" \
            </tmp/ChangesBare.html
          rm /tmp/key
",,,,,,Objective-C
34,https://github.com/xvimproject/xvim2,"name: CI

on: [push, pull_request]

jobs:
  test:

    runs-on: macOS-12
    strategy:
      matrix:
        xcode-version:
        - /Applications/Xcode_13.4.1.app
        - /Applications/Xcode_13.4.app
        - /Applications/Xcode_13.3.1.app
        - /Applications/Xcode_13.2.1.app
        - /Applications/Xcode_13.1.app

    steps:
    - uses: actions/checkout@v2
    - run: if [ ""default"" != ""${{ matrix.xcode-version }}"" ]; then sudo xcode-select -s ""${{ matrix.xcode-version }}""; fi
    - name: Build XVim with UNIT_TEST flag
      run: make unit-test
    - name: Remove codesign
      run: |
        XCODE_PATH=$(xcode-select -p)
        codesign -dvvv ${XCODE_PATH%%/Contents*}
        sudo codesign --remove-signature ${XCODE_PATH%%/Contents*}
        codesign -dvvv ${XCODE_PATH%%/Contents*} || true
    - name: Register XVim as lodable plugin
      run: |
        ./Tools/add_plugin_filed_to_preference.sh
        defaults read com.apple.dt.Xcode
    - name: Run unit test
      timeout-minutes: 5
      run: |
        echo ""set debug"" > ~/.xvimrc
        touch ~/.xvimlog
        XCODE_PATH=$(xcode-select -p)
        open -a ${XCODE_PATH%%/Contents*} XVim2.xcodeproj
        tail -f ~/.xvimlog &
        while :
        do
          result=$(grep ""unit test finished"" ~/.xvimlog || true)
          if [ -n ""${result}"" ]; then
            # automatically exit non-zero if grep exit code is non-zero by -e option of running shell
            grep ""^0 Failing Tests$"" ~/.xvimlog > /dev/null 2>&1
            exit 0
          fi
          sleep 1
        done
",,,,,,Objective-C
35,https://github.com/rickytan/rtrootnavigationcontroller,"name: Xcode - Build and Analyze

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Lint
        env:
          scheme: ${{ 'default' }}
        run: |
          bundle install
          bundle exec pod lib lint
",,,,,,Objective-C
36,https://github.com/ealeksandrov/provisionql,"name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macOS-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build project
        run: set -o pipefail && xcodebuild -project ProvisionQL.xcodeproj -scheme ProvisionQL CODE_SIGN_IDENTITY="""" CODE_SIGNING_REQUIRED=NO | xcpretty
",,,,,,Objective-C
37,https://github.com/syncthing/syncthing-macos,"name: Build Syncthing macOS

on:
  pull_request:
    branches:
      - develop
  push:

# A note on actions and third party code... The actions under actions/ (like
# `uses: actions/checkout`) are maintained by GitHub, and we need to trust
# GitHub to maintain their code and infrastructure or we're in deep shit in
# general. The same doesn't necessarily apply to other actions authors, so
# some care needs to be taken when adding steps, especially in the paths
# that lead up to code being packaged and signed.

jobs:
  build-debug:
    name: Build debug
    if: github.event_name == 'push' && github.ref != 'refs/heads/release' # Debug not necessary on release branch (develop is intermediate branch)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build debug target
        run: |
          make debug

  build-release:
    name: Build release
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    environment: signing
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Import signing certificate
        run: |
          # Set up a run-specific keychain, making it available for the
          # `codesign` tool.
          umask 066
          KEYCHAIN_PATH=$RUNNER_TEMP/codesign.keychain
          KEYCHAIN_PASSWORD=$(uuidgen)
          security create-keychain -p ""$KEYCHAIN_PASSWORD"" ""$KEYCHAIN_PATH""
          security default-keychain -s ""$KEYCHAIN_PATH""
          security unlock-keychain -p ""$KEYCHAIN_PASSWORD"" ""$KEYCHAIN_PATH""
          security set-keychain-settings -lut 21600 ""$KEYCHAIN_PATH""

          # Import the certificate
          CERTIFICATE_PATH=$RUNNER_TEMP/codesign.p12
          echo ""$DEVELOPER_ID_CERTIFICATE_BASE64"" | base64 -d -o ""$CERTIFICATE_PATH""
          security import ""$CERTIFICATE_PATH"" -k ""$KEYCHAIN_PATH"" -P ""$DEVELOPER_ID_CERTIFICATE_PASSWORD"" -T /usr/bin/codesign -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions ""$KEYCHAIN_PATH""

          # Set the codesign identity for following steps
          echo ""CODESIGN_IDENTITY=$CODESIGN_IDENTITY"" >> $GITHUB_ENV
        env:
          DEVELOPER_ID_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_CERTIFICATE_BASE64 }}
          DEVELOPER_ID_CERTIFICATE_PASSWORD: ${{ secrets.DEVELOPER_ID_CERTIFICATE_PASSWORD }}
          CODESIGN_IDENTITY: ${{ secrets.CODESIGN_IDENTITY }}

      - name: Build release dmg
        run: |
          make release-dmg

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: syncthing-macos-dmg-release
          path: Build/Products/Release/*.dmg

  notarize:
    name: Notarize for macOS
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    environment: signing
    needs:
      - build-release
    runs-on: macos-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: syncthing-macos-dmg-release

      - name: Notarize binaries
        run: |
          APPSTORECONNECT_API_KEY_PATH=""$RUNNER_TEMP/apikey.p8""
          echo ""$APPSTORECONNECT_API_KEY"" | base64 -d -o ""$APPSTORECONNECT_API_KEY_PATH""
          for file in Syncthing-*.dmg ; do
            xcrun notarytool submit \
              -k ""$APPSTORECONNECT_API_KEY_PATH"" \
              -d ""$APPSTORECONNECT_API_KEY_ID"" \
              -i ""$APPSTORECONNECT_API_KEY_ISSUER"" \
              $file
          done
        env:
          APPSTORECONNECT_API_KEY: ${{ secrets.APPSTORECONNECT_API_KEY }}
          APPSTORECONNECT_API_KEY_ID: ${{ secrets.APPSTORECONNECT_API_KEY_ID }}
          APPSTORECONNECT_API_KEY_ISSUER: ${{ secrets.APPSTORECONNECT_API_KEY_ISSUER }}
",,,,,,Objective-C
38,https://github.com/openid/appauth-ios,"name: tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:

  xcode-project-test:
    runs-on: macos-12
    strategy:
      matrix:
        flags: [
          ""-scheme AppAuth-iOS -destination 'platform=iOS Simulator,name=iPhone 11,OS=16.2' -sdk 'iphonesimulator16.2'"",
          ""-scheme AppAuth-macOS -destination 'platform=macOS,arch=x86_64' -sdk 'macosx13.1'"",
          ""-scheme AppAuth_macOS -destination 'platform=macOS,arch=x86_64' -sdk 'macosx13.1'"",
          ""-scheme AppAuth-tvOS -destination 'platform=tvOS Simulator,name=Apple TV,OS=16.1' -sdk 'appletvsimulator16.1'"",
          ""-scheme AppAuth_tvOS -destination 'platform=tvOS Simulator,name=Apple TV,OS=16.1' -sdk 'appletvsimulator16.1'"",
          ""-scheme AppAuthTV -destination 'platform=tvOS Simulator,name=Apple TV,OS=16.1' -sdk 'appletvsimulator16.1'""
        ]
    steps:
    - uses: actions/checkout@v3
    - name: Run unit test targets
      run: |
        xcodebuild test \
          -project AppAuth.xcodeproj \
          ${{ matrix.flags }}

  pod-lib-lint:
    runs-on: macos-12
    strategy:
      matrix:
        flags: [
          '',
          '--use-libraries',
          '--use-static-frameworks'
        ]
    steps:
    - uses: actions/checkout@v3
    - name: Update Bundler
      run: bundle update --bundler
    - name: Install Ruby gems with Bundler
      run: bundle install
    - name: Lint podspec using local source
      run: pod lib lint --verbose ${{ matrix.flags }}

  spm-build-test:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Build unit test target
      run: swift build
    - name: Run unit test target
      run: swift test --enable-code-coverage
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
",,,,,,Objective-C
39,https://github.com/mixpanel/mixpanel-iphone,"name: Mixpanel ObjC SDK action

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        destination: ['name=""iPhone 14 Pro"",OS=latest']
        scheme: ['""[iOS] HelloMixpanel""']

    steps:
    - uses: actions/checkout@v2
    - name: Run Test
      working-directory: HelloMixpanel
      run: |
        set -o pipefail
        xcodebuild -scheme ${{ matrix.scheme }} -derivedDataPath Build/ -destination ${{ matrix.destination }} -configuration Debug ONLY_ACTIVE_ARCH=NO ENABLE_TESTABILITY=YES test | xcpretty -c;
    - name: Pod Lint
      run: pod lib lint --platforms=ios,tvos --allow-warnings
    - name: Code Coverage Report
      working-directory: HelloMixpanel/build/Logs/Test
      run: |
        xcrun xccov view --report --files-for-target Mixpanel.framework  *.xcresult
        xcrun xccov view --report --only-targets *.xcresult
",,,,,,Objective-C
40,https://github.com/google/google-toolbox-for-mac,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  macOS:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        MODE: [""Debug"", ""Release""]
    steps:
    - uses: actions/checkout@v4
    - name: Build and Test
      run:  |
        # Have to skip some tests that aren't working on newer OSes.
        set -o pipefail
        xcodebuild \
            -project GTM.xcodeproj \
            -scheme GTM \
            -configuration ${{ matrix.MODE }} \
            build test \
          | xcpretty
  iOS:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        MODE: [""Debug"", ""Release""]
    steps:
    - uses: actions/checkout@v4
    - name: Build and Test
      run:  |
        set -o pipefail
        xcodebuild \
            -project GTMiPhone.xcodeproj \
            -scheme GTMiPhone \
            -configuration ${{ matrix.MODE }} \
            -destination ""platform=iOS Simulator,name=iPhone 8,OS=latest"" \
            build test \
          | xcpretty
  bazel:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        MODE: [""dbg"", ""opt""]
    steps:
    - uses: actions/checkout@v4
    - name: bazel test
      run:  |
        bazel test --build_tests_only -c ""${{ matrix.MODE }}"" //...
  pod-lib-lint:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # Can't shard by platform because of https://github.com/CocoaPods/CocoaPods/issues/11358
        CONFIGURATION: [""Debug"", ""Release""]
    steps:
    - uses: actions/checkout@v4
    - name: Pod lib lint
      run:  |
        pod lib lint --verbose \
          --configuration=${{ matrix.CONFIGURATION }} \
          GoogleToolboxForMac.podspec
",,,,,,Objective-C
41,https://github.com/apache/cordova-plugin-camera,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: iOS Testsuite

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'

jobs:
  test:
    name: iOS ${{ matrix.versions.ios-version }} Test
    runs-on: ${{ matrix.versions.os-version }}
    continue-on-error: true

    # hoist configurations to top that are expected to be updated
    env:
      # Storing a copy of the repo
      repo: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      node-version: 16

      # > Starting April 26, 2021, all iOS and iPadOS apps submitted to the App Store must be built with Xcode 12 and the iOS 14 SDK.
      # Because of Apple's requirement, listed above, We will only be using the latest Xcode release for testing.
      # To customize these options, add ""xcode-version"" to the strategy matrix with its overriding value.
      default_xcode-version: latest-stable

    strategy:
      matrix:
        versions:
          - os-version: macos-11
            ios-version: 13.x
            xcode-version: 11.x

          - os-version: macos-11
            ios-version: 14.x
            xcode-version: 12.x

          - os-version: macos-11
            ios-version: 15.x
            xcode-version: 13.x

          - os-version: macos-12
            ios-version: 16.x
            xcode-version: 14.x

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - uses: maxim-lobanov/setup-xcode@9a697e2b393340c3cacd97468baa318e4c883d98
        env:
          xcode-version: ${{ matrix.versions.xcode-version == '' && env.default_xcode-version || matrix.versions.xcode-version }}
        with:
          xcode-version: ${{ env.xcode-version }}

      - name: Run Environment Information
        run: |
          node --version
          npm --version
          xcodebuild -version

      - name: Run npm install
        run: |
          npm i -g cordova@latest ios-deploy@latest
          npm ci

      - name: Run paramedic install
        if: ${{ endswith(env.repo, '/cordova-paramedic') != true }}
        run: npm i -g github:apache/cordova-paramedic

      - name: Run paramedic tests
        env:
          test_config: 'ios-${{ matrix.versions.ios-version }}.config.json'
          # Generally, this should automatically work for cordova-paramedic & plugins. If the path is unique, this can be manually changed.
          test_plugin_path: ${{ endswith(env.repo, '/cordova-paramedic') && './spec/testable-plugin/' || './' }}
          paramedic: ${{ endswith(env.repo, '/cordova-paramedic') && 'node main.js' || 'cordova-paramedic' }}
        run: ${{ env.paramedic }} --config ./pr/local/${{ env.test_config }} --plugin ${{ env.test_plugin_path }}
",,,,,,Objective-C
42,https://github.com/metalpetal/metalpetal,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  target_macOS:

    name: Smoke Test (macOS)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v

  target_iOS_simulator:

    name: Smoke Test (iOS Simulator)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: xcodebuild build -scheme MetalPetal -destination 'platform=iOS Simulator,name=iPhone 11' -workspace .
    - name: Run tests
      run: xcodebuild test -scheme MetalPetal -destination 'platform=iOS Simulator,name=iPhone 11' -workspace .

  target_tvOS_simulator:

    name: Smoke Test (tvOS Simulator)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: xcodebuild build -scheme MetalPetal -destination 'platform=tvOS Simulator,name=Apple TV' -workspace .
    - name: Run tests
      run: xcodebuild test -scheme MetalPetal -destination 'platform=tvOS Simulator,name=Apple TV' -workspace .

  target_iOS_device:

    name: Build (iOS Device)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: xcodebuild build -scheme MetalPetal -destination generic/platform=iOS -workspace .

  target_tvOS_device:

    name: Build (tvOS Device)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: xcodebuild build -scheme MetalPetal -destination generic/platform=tvOS -workspace .

  target_macCatalyst:

    name: Smoke Test (macCatalyst)
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
    - name: Select Xcode
      run: sudo xcode-select --switch ""$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep ""Xcode_[\.0-9]*app"" | sort -V | tail -1)/Contents/Developer""
    - name: Build
      run: xcodebuild build -scheme MetalPetal -destination 'platform=macOS,variant=Mac Catalyst' -workspace .
    - name: Run tests
      run: xcodebuild test -scheme MetalPetal -destination 'platform=macOS,variant=Mac Catalyst' -workspace .
",,,,,,Objective-C
43,https://github.com/googleads/googleads-mobile-ios-examples,"name: Build Status

# Step 1: Build on pull-requests or pushes to main
on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  # Step 2: Build the samples
  build:
    name: Build
    runs-on: macOS-latest
    strategy:
      fail-fast: false
      matrix:
        regex:
        - ""Objective-C/advanced""
        - ""Swift/advanced""
        - ""Objective-C/admob""
        - ""Swift/admob""
        - ""Objective-C/admanager""
        - ""Swift/admanager""
    steps:
      - name: Clone Repo
        uses: actions/checkout@v1

      - name: Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Pod repo update
        run: pod repo update

      - name: Install xcpretty
        run: sudo gem install xcpretty

      - name: Set commit range (push to the main branch, e.g. merge)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: echo ""COMMIT_RANGE=""${{ github.event.before }}.."""" >> $GITHUB_ENV

      - name: Set commit range (pull request)
        if: github.event_name == 'pull_request'
        run: echo ""COMMIT_RANGE=""HEAD~.."""" >> $GITHUB_ENV

      - name: Build
        run: .github/workflows/build/build.sh
        shell: bash
        env:
          COMMIT_RANGE: ${{ env.COMMIT_RANGE }}
          REGEX: ${{ matrix.regex }}
",,,,,,Objective-C
44,https://github.com/armadsen/orsserialport,"name: CI

on: [push]

jobs:
    build:
        runs-on: macOS-latest
        steps:
          - name: Checkout 
            uses: actions/checkout@v1
          - name: Build and Test
            run: |
                cd ""Framework Project""
                echo $(pwd)
                xcodebuild test -scheme ORSSerial
",,,,,,Objective-C
45,https://github.com/zorgiepoo/bit-slicer,"name: XCTests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test Bit Slicer on macOS
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        env:
            DEVELOPER_DIR: '/Applications/Xcode_15.0.1.app/Contents/Developer'
        run: |
          xcodebuild build-for-testing -target 'Bit Slicer Tests' -scheme 'Bit Slicer' -derivedDataPath build CODE_SIGN_IDENTITY=""-""
      - name: Test
        run: |
          xcodebuild test-without-building -target 'Bit Slicer Tests' -scheme 'Bit Slicer' -derivedDataPath build
      - name: Archive Test Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
            name: 'build-logs'
            path: build/Logs
",,,,,,Objective-C
46,https://github.com/apache/cordova-plugin-statusbar,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: iOS Testsuite

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'

jobs:
  test:
    name: iOS ${{ matrix.versions.ios-version }} Test
    runs-on: ${{ matrix.versions.os-version }}
    continue-on-error: true

    # hoist configurations to top that are expected to be updated
    env:
      # Storing a copy of the repo
      repo: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      node-version: 16

      # > Starting April 26, 2021, all iOS and iPadOS apps submitted to the App Store must be built with Xcode 12 and the iOS 14 SDK.
      # Because of Apple's requirement, listed above, We will only be using the latest Xcode release for testing.
      # To customize these options, add ""xcode-version"" to the strategy matrix with its overriding value.
      default_xcode-version: latest-stable

    strategy:
      matrix:
        versions:
          - os-version: macos-11
            ios-version: 13.x
            xcode-version: 11.x

          - os-version: macos-11
            ios-version: 14.x
            xcode-version: 12.x

          - os-version: macos-11
            ios-version: 15.x
            xcode-version: 13.x

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
      - uses: maxim-lobanov/setup-xcode@881be567d30efed8fb3f12b5099d68c3fb72aa3d
        env:
          xcode-version: ${{ matrix.versions.xcode-version == '' && env.default_xcode-version || matrix.versions.xcode-version }}
        with:
          xcode-version: ${{ env.xcode-version }}

      - name: Run Environment Information
        run: |
          node --version
          npm --version
          xcodebuild -version

      - name: Run npm install
        run: |
          npm i -g cordova@latest ios-deploy@latest
          npm ci

      - name: Run paramedic install
        if: ${{ endswith(env.repo, '/cordova-paramedic') != true }}
        run: npm i -g github:apache/cordova-paramedic

      - name: Run paramedic tests
        env:
          test_config: 'ios-${{ matrix.versions.ios-version }}.config.json'
          # Generally, this should automatically work for cordova-paramedic & plugins. If the path is unique, this can be manually changed.
          test_plugin_path: ${{ endswith(env.repo, '/cordova-paramedic') && './spec/testable-plugin/' || './' }}
          paramedic: ${{ endswith(env.repo, '/cordova-paramedic') && 'node main.js' || 'cordova-paramedic' }}
        run: ${{ env.paramedic }} --config ./pr/local/${{ env.test_config }} --plugin ${{ env.test_plugin_path }}
",,,,,,Objective-C
48,https://github.com/apache/cordova-plugin-network-information,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: iOS Testsuite

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - '.eslint*'

jobs:
  test:
    name: iOS ${{ matrix.versions.ios-version }} Test
    runs-on: ${{ matrix.versions.os-version }}
    continue-on-error: true

    # hoist configurations to top that are expected to be updated
    env:
      # Storing a copy of the repo
      repo: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      node-version: 16

      # > Starting April 26, 2021, all iOS and iPadOS apps submitted to the App Store must be built with Xcode 12 and the iOS 14 SDK.
      # Because of Apple's requirement, listed above, We will only be using the latest Xcode release for testing.
      # To customize these options, add ""xcode-version"" to the strategy matrix with its overriding value.
      default_xcode-version: latest-stable

    strategy:
      matrix:
        versions:
          - os-version: macos-11
            ios-version: 13.x
            xcode-version: 11.x

          - os-version: macos-11
            ios-version: 14.x
            xcode-version: 12.x

          - os-version: macos-11
            ios-version: 15.x
            xcode-version: 13.x

          - os-version: macos-12
            ios-version: 16.x
            xcode-version: 14.x

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - uses: maxim-lobanov/setup-xcode@9a697e2b393340c3cacd97468baa318e4c883d98
        env:
          xcode-version: ${{ matrix.versions.xcode-version == '' && env.default_xcode-version || matrix.versions.xcode-version }}
        with:
          xcode-version: ${{ env.xcode-version }}

      - name: Run Environment Information
        run: |
          node --version
          npm --version
          xcodebuild -version

      - name: Run npm install
        run: |
          npm i -g cordova@latest ios-deploy@latest
          npm ci

      - name: Run paramedic install
        if: ${{ endswith(env.repo, '/cordova-paramedic') != true }}
        run: npm i -g github:apache/cordova-paramedic

      - name: Run paramedic tests
        env:
          test_config: 'ios-${{ matrix.versions.ios-version }}.config.json'
          # Generally, this should automatically work for cordova-paramedic & plugins. If the path is unique, this can be manually changed.
          test_plugin_path: ${{ endswith(env.repo, '/cordova-paramedic') && './spec/testable-plugin/' || './' }}
          paramedic: ${{ endswith(env.repo, '/cordova-paramedic') && 'node main.js' || 'cordova-paramedic' }}
        run: ${{ env.paramedic }} --config ./pr/local/${{ env.test_config }} --plugin ${{ env.test_plugin_path }}
",,,,,,Objective-C
49,https://github.com/acidanthera/maciasl,"name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

env:
  PROJECT_TYPE: TOOL

jobs:
  build:
    name: Build
    runs-on: macos-latest
    env:
      JOB_TYPE: BUILD
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: brew install create-dmg
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: CI Bootstrap
        run: |
          src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/ocbuild/master/ci-bootstrap.sh) && eval ""$src"" || exit 1
          /usr/bin/curl -OL ""https://github.com/acidanthera/ocbuild/raw/master/codesign/appsign.sh"" || exit 1
          chmod a+x appsign.sh || exit 1

      - name: Compile with codesign (DEBUG)
        if: github.repository_owner == 'acidanthera' && github.event_name != 'pull_request'
        env:
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          MAC_ACCOUNT_NAME: ${{ secrets.MAC_ACCOUNT_NAME }}
          MAC_ACCOUNT_PASSWORD: ${{ secrets.MAC_ACCOUNT_PASSWORD }}
        run: DEPLOY_SCRIPT=""$(pwd)/appsign.sh"" xcodebuild -jobs 1 -configuration Debug

      - name: Compile with codesign (RELEASE)
        if: github.repository_owner == 'acidanthera' && github.event_name != 'pull_request'
        env:
          MAC_CERTIFICATE_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          MAC_ACCOUNT_NAME: ${{ secrets.MAC_ACCOUNT_NAME }}
          MAC_ACCOUNT_PASSWORD: ${{ secrets.MAC_ACCOUNT_PASSWORD }}
        run: DEPLOY_SCRIPT=""$(pwd)/appsign.sh"" xcodebuild -jobs 1 -configuration Release

      - name: Compile (DEBUG)
        if: github.repository_owner != 'acidanthera' || github.event_name == 'pull_request'
        run: xcodebuild -jobs 1 -configuration Debug

      - name: Compile (RELEASE)
        if: github.repository_owner != 'acidanthera' || github.event_name == 'pull_request'
        run: xcodebuild -jobs 1 -configuration Release

      - name: Upload to Artifacts
        if: github.repository_owner == 'acidanthera' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: build/*/*.dmg

      - name: Upload to Release
        if: github.event_name == 'release' && github.repository_owner == 'acidanthera'
        uses: svenstaro/upload-release-action@e74ff71f7d8a4c4745b560a485cc5fdb9b5b999d
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*/*.dmg
          tag: ${{ github.ref }}
          file_glob: true

      - name: Get Sparkle 1.26
        if: github.event_name == 'release' && github.repository_owner == 'acidanthera'
        run: |
          curl -L -s ""https://github.com/sparkle-project/Sparkle/releases/download/1.26.0/Sparkle-1.26.0.tar.xz"" -o Sparkle.tar.xz || exit 1
          tar -xf Sparkle.tar.xz || exit 1

      - name: Get Information & Sign
        if: github.event_name == 'release' && github.repository_owner == 'acidanthera'
        run: |
           TAG_VER=${GITHUB_REF/refs\/tags\//}
           DATE=$(date -R)
           ./bin/sign_update -s ${{ secrets.SIGNATURE_FOR_SIGNING }} build/Release/MaciASL-${TAG_VER}-RELEASE.dmg || exit 1
           ./bin/generate_appcast -o appcast.xml -s ${{ secrets.SIGNATURE_FOR_SIGNING }} --download-url-prefix https://github.com/acidanthera/MaciASL/releases/download/${TAG_VER}/ build/Release || exit 1

      - name: Commit Appcast
        if: github.event_name == 'release' && github.repository_owner == 'acidanthera'
        run: |
          # The 41898282 identifier comes from the GitHub Actions API: https://api.github.com/users/github-actions%5Bbot%5D.
          git config --local user.email ""41898282+github-actions[bot]@users.noreply.github.com""
          git config --local user.name ""GitHub Action""
          git checkout --orphan appcast
          git add appcast.xml
          git commit appcast.xml -m ""Update Appcast""
          git push --set-upstream origin appcast --force

  analyze-clang:
    name: Analyze Clang
    runs-on: macos-latest
    env:
      JOB_TYPE: ANALYZE
    steps:
      - uses: actions/checkout@v3
      - name: CI Bootstrap
        run: |
          src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/ocbuild/master/ci-bootstrap.sh) && eval ""$src"" || exit 1

      - run: xcodebuild analyze -quiet -scheme MaciASL -configuration Debug CLANG_ANALYZER_OUTPUT=plist-html CLANG_ANALYZER_OUTPUT_DIR=""$(pwd)/clang-analyze"" && [ ""$(find clang-analyze -name ""*.html"")"" = """" ]
      - run: xcodebuild clean -quiet -scheme MaciASL
      - run: xcodebuild analyze -quiet -scheme MaciASL -configuration Release CLANG_ANALYZER_OUTPUT=plist-html CLANG_ANALYZER_OUTPUT_DIR=""$(pwd)/clang-analyze"" && [ ""$(find clang-analyze -name ""*.html"")"" = """" ]

  analyze-coverity:
    name: Analyze Coverity
    runs-on: macos-latest
    env:
      JOB_TYPE: COVERITY
    if: github.repository_owner == 'acidanthera' && github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: CI Bootstrap
        run: |
          src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/ocbuild/master/ci-bootstrap.sh) && eval ""$src"" || exit 1

      - name: Run Coverity
        run: |
          src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/ocbuild/master/coverity/covstrap.sh) && eval ""$src"" || exit 1
        env:
          COVERITY_SCAN_TOKEN: ${{ secrets.COVERITY_SCAN_TOKEN }}
          COVERITY_SCAN_EMAIL: ${{ secrets.COVERITY_SCAN_EMAIL }}
          COVERITY_BUILD_COMMAND: xcodebuild -configuration Release
",,,,,,Objective-C
50,https://github.com/mixedinkey-opensource/mikmidi,"name: CI

on: [push]

jobs:
    build:
        runs-on: macOS-latest
        steps:
          - name: Checkout 
            uses: actions/checkout@v1
          - name: Install Tools
            run: |
                gem install xcpretty
          - name: Build and Test
            run: |
                cd ""Framework""
                echo $(pwd)
                xcodebuild test -scheme MIKMIDI | xcpretty
",,,,,,Objective-C
51,https://github.com/adjust/ios_sdk,"on:
  push:
    branches:
      - refs/tags/*
name: Build framework
jobs:
  static:
    name: Build static SDK
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          mkdir -p frameworks/static
          xcodebuild -target AdjustStatic -configuration Release clean build

          mkdir AdjustSdkStatic
          mv frameworks/static/* AdjustSdkStatic
          zip -ry AdjustSdkStatic.framework.zip AdjustSdkStatic/*
      - name: Upload files
        uses: actions/upload-artifact@v2
        with:
          name: static_framework
          path: AdjustSdkStatic.framework.zip
  tvOS:
    name: Build Static tvOS SDK
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Universal tvOS SDK
        run: |
          mkdir -p frameworks/static_tvos
          xcodebuild -configuration Release -target AdjustSdkTv -arch x86_64 -sdk appletvsimulator clean build
          xcodebuild -configuration Release -target AdjustSdkTv -arch arm64 -sdk appletvos build
          cp -Rv build/Release-appletvos/AdjustSdkTv.framework frameworks/static_tvos
          lipo -create -output frameworks/static_tvos/AdjustSdkTv.framework/AdjustSdkTv build/Release-appletvos/AdjustSdkTv.framework/AdjustSdkTv build/Release-appletvsimulator/AdjustSdkTv.framework/AdjustSdkTv

          mkdir AdjustSdkTvStatic
          mv frameworks/static_tvos/* AdjustSdkTvStatic
          zip -ry AdjustSdkTvStatic.framework.zip AdjustSdkTvStatic/*
      - name: Upload files
        uses: actions/upload-artifact@v2
        with:
          name: universal_tvos
          path: AdjustSdkTvStatic.framework.zip

  dynamic_ios_tvos:
    name: Build dynamic iOS and tvOS targets with Carthage
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Carthage
        run: |
          brew install carthage
      - name: Build dynamic framework
        run: |
          mv Adjust.xcodeproj/xcshareddata/xcschemes/AdjustSdkIm.xcscheme \
            Adjust.xcodeproj/xcshareddata/xcschemes/AdjustSdkWebBridge.xcscheme .
          carthage build --no-skip-current
          
          mkdir AdjustSdkDynamic
          mv Carthage/Build/iOS/* AdjustSdkDynamic
          zip -ry AdjustSdkDynamic.framework.zip AdjustSdkDynamic/*

          mkdir AdjustSdkTvDynamic
          mv Carthage/Build/tvOS/* AdjustSdkTvDynamic
          zip -ry AdjustSdkTvDynamic.framework.zip AdjustSdkTvDynamic/*
      - name: Upload iOS
        uses: actions/upload-artifact@v2
        with:
          name: dynamic_ios
          path: AdjustSdkDynamic.framework.zip
      - name: Upload tvOS
        uses: actions/upload-artifact@v2
        with:
          name: dynamic_tvos
          path: AdjustSdkTvDynamic.framework.zip

  dynamic_imessage:
    name: Build dynamic iMessage target with Carthage
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Carthage
        run: |
          brew install carthage
      - name: Build dynamic framework
        run: |
          mv Adjust.xcodeproj/xcshareddata/xcschemes/*.xcscheme .
          mv AdjustSdkIm.xcscheme Adjust.xcodeproj/xcshareddata/xcschemes

          carthage build --no-skip-current
          
          mkdir AdjustSdkImDynamic
          mv Carthage/Build/iOS/* AdjustSdkImDynamic
          zip -ry AdjustSdkIm.framework.zip AdjustSdkImDynamic/*
      - name: Upload framework
        uses: actions/upload-artifact@v2
        with:
          name: dynamic_imessage
          path: AdjustSdkIm.framework.zip

  dynamic_webbridge:
    name: Build dynamic WebBridge target with Carthage
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Carthage
        run: |
          brew install carthage
      - name: Build dynamic framework
        run: |
          mv Adjust.xcodeproj/xcshareddata/xcschemes/*.xcscheme .
          mv AdjustSdkWebBridge.xcscheme Adjust.xcodeproj/xcshareddata/xcschemes

          carthage build --no-skip-current
          mkdir AdjustSdkWebBridgeDynamic
          mv Carthage/Build/iOS/* AdjustSdkWebBridgeDynamic
          zip -ry AdjustSdkWebBridge.framework.zip AdjustSdkWebBridgeDynamic/*
      - name: Upload framework
        uses: actions/upload-artifact@v2
        with:
          name: dynamic_webbridge
          path: AdjustSdkWebBridge.framework.zip

  release:
    name: Create new release and upload assets
    runs-on: ubuntu-latest
    needs: [static, tvOS, dynamic_ios_tvos, dynamic_imessage, dynamic_webbridge]
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Download all frameworks
        uses: actions/download-artifact@v2
        with:
          path: frameworks
          
      - name: Upload static framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/static_framework/AdjustSdkStatic.framework.zip
          asset_name: AdjustSdkStatic.framework.zip
          asset_content_type: application/zip
          
      - name: Upload tvOS framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/universal_tvos/AdjustSdkTvStatic.framework.zip
          asset_name: AdjustSdkTvStatic.framework.zip
          asset_content_type: application/zip
          
      - name: Upload dynamic iOS framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/dynamic_ios/AdjustSdkDynamic.framework.zip
          asset_name: AdjustSdkDynamic.framework.zip
          asset_content_type: application/zip
          
      - name: Upload dynamic tvOS framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/dynamic_tvos/AdjustSdkTvDynamic.framework.zip
          asset_name: AdjustSdkTvDynamic.framework.zip
          asset_content_type: application/zip
          
      - name: Upload dynamic iMessage framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/dynamic_imessage/AdjustSdkIm.framework.zip
          asset_name: AdjustSdkIm.framework.zip
          asset_content_type: application/zip
          
      - name: Upload dynamic WebBridge framework
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: frameworks/dynamic_webbridge/AdjustSdkWebBridge.framework.zip
          asset_name: AdjustSdkWebBridge.framework.zip
          asset_content_type: application/zip

",,,,,,Objective-C
54,https://github.com/square/aardvark,"name: CI

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  xcode-build:
    name: Xcode Build
    runs-on: macOS-12
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Bundle Install
        run: bundle install
      - name: Select Xcode Version
        run: sudo xcode-select --switch /Applications/Xcode_13.1.app/Contents/Developer
      - name: Build and Test Frameworks
        run: |
          xcodebuild \
            -project Aardvark.xcodeproj \
            -scheme ""All Frameworks"" \
            -sdk iphonesimulator \
            -destination ""platform=iOS Simulator,name=iPhone 13 Pro"" \
            test
      - name: Build Sample App
        run: |
          xcodebuild \
            -project AardvarkSample/AardvarkSample.xcodeproj \
            -scheme AardvarkSample \
            -sdk iphonesimulator \
            -configuration Debug \
            -PBXBuildsContinueAfterErrors=0 \
            ACTIVE_ARCH_ONLY=0 \
            build
  pod-lint:
    name: Pod Lint
    runs-on: macOS-11
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Bundle Install
        run: bundle install
      - name: Select Xcode Version
        run: sudo xcode-select --switch /Applications/Xcode_13.1.app/Contents/Developer
      - name: Lint CoreAardvark Podspec
        run: bundle exec pod lib lint --verbose --fail-fast CoreAardvark.podspec
      - name: Lint Aardvark Podspec
        run: bundle exec pod lib lint --verbose --fail-fast Aardvark.podspec --include-podspecs=CoreAardvark.podspec
      - name: Lint AardvarkLoggingUI Podspec
        run: bundle exec pod lib lint --verbose --fail-fast AardvarkLoggingUI.podspec --include-podspecs=CoreAardvark.podspec
      - name: Lint AardvarkMailUI Podspec
        run: bundle exec pod lib lint --verbose --fail-fast AardvarkMailUI.podspec --include-podspecs=""{CoreAardvark,Aardvark}.podspec""
",,,,,,Objective-C
6014,https://github.com/fruitcake/laravel-cors,"name: Unit Tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - ""*""
  schedule:
  - cron: '0 0 * * *'

jobs:
  php-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      COMPOSER_NO_INTERACTION: 1

    strategy:
      matrix:
        php: [8.2, 8.1, 8.0, 7.4]
        laravel: [^9.33, ^8, ^7, ^6]
        dependency-version: [prefer-lowest, prefer-stable, dev]
        exclude:
          - laravel: ^6
            php: 7.4
            dependency-version: prefer-lowest
          - laravel: ^6
            php: 8.1
          - laravel: ^7
            php: 8.1
          - laravel: ^8
            php: 8.1
          - laravel: ^6
            php: 8.2
          - laravel: ^7
            php: 8.2
          - laravel: ^8
            php: 8.2
          - laravel: ^9.33
            php: 7.4

    name: P${{ matrix.php }} - L${{ matrix.laravel }} - ${{ matrix.dependency-version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        coverage: none
        tools: composer:v2

    - name: Install dependencies
      run: |
        composer require ""laravel/framework:${{ matrix.laravel }}"" --no-interaction --no-update
        composer update --${{ matrix.dependency-version }} --prefer-dist --no-progress

    - name: Update Dusk Chromedriver
      run: vendor/bin/dusk-updater detect --auto-update

    - name: Execute Unit Tests
      run: vendor/bin/phpunit

    - name: Upload Failed Screenshots
      uses: actions/upload-artifact@v2-preview
      if: failure()
      with:
        name: screenshots
        path: tests/Browser/screenshots/*

    - name: Check PSR-12 Codestyle
      run: vendor/bin/phpcs --standard=psr12 src/
",,,,,,PHP
7542,https://github.com/api-platform/demo,"name: CI

on:
  push:
    branches:
      - main
  pull_request: ~
  workflow_dispatch: ~

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker images
        uses: docker/bake-action@v4
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.override.yaml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}},mode=max
      -
        name: Start services
        run: docker compose up --wait --no-build
      -
        name: Debug services
        if: failure()
        run: |
          docker compose ps
          docker compose logs
      -
        name: Check HTTP reachability
        run: curl -v -o /dev/null http://localhost
      -
        name: Check API reachability
        run: curl -vk -o /dev/null https://localhost
      -
        name: Check PWA reachability
        run: ""curl -vk -o /dev/null -H 'Accept: text/html' https://localhost""
      -
        name: Create test database
        run: docker compose exec -T php bin/console -e test doctrine:database:create
      -
        name: Run migrations
        run: docker compose exec -T php bin/console -e test doctrine:migrations:migrate --no-interaction
      -
        name: Run PHPUnit
        run: docker compose exec -T php bin/phpunit
      -
        name: Doctrine Schema Validator
        run: docker compose exec -T php bin/console -e test doctrine:schema:validate
      -
        name: Run Psalm
        run: docker compose exec -T php vendor/bin/psalm
      -
        name: Lint PWA
        run: docker compose exec -T pwa pnpm lint

  # run e2e tests iso-prod
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    env:
      PHP_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/php:latest
      PWA_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/pwa:latest
      KEYCLOAK_DOCKER_IMAGE: eu.gcr.io/${{ secrets.GKE_PROJECT }}/keycloak:latest
      APP_SECRET: ba63418865d58089f7f070e0a437b6d16b1fb970
      CADDY_MERCURE_JWT_SECRET: 33b04d361e437e0d7d715600fc24fdefba317154
      NEXTAUTH_SECRET: 77e4c3f5a6fb652b6245a5df8a704e04ad90bc7e
      POSTGRES_PASSWORD: aae5bf316ef5fe87ad806c6a9240fff68bcfdaf7
      KEYCLOAK_POSTGRES_PASSWORD: 26d7f630f1524eb210bbf496443f2038a9316e9e
      KEYCLOAK_ADMIN_PASSWORD: 2f31e2fad93941b818449fd8d57fd019b6ce7fa5
      KEYCLOAK_HTTPS_CERTIFICATE_FILE: ./helm/api-platform/keycloak/certs/tls.crt
      KEYCLOAK_HTTPS_CERTIFICATE_KEY_FILE: ./helm/api-platform/keycloak/certs/tls.pem
      # https://docs.docker.com/compose/environment-variables/envvars/#compose_file
      COMPOSE_FILE: compose.yaml:compose.prod.yaml:compose.e2e.yaml
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build Docker Images
        uses: docker/bake-action@v4
        with:
          pull: true
          load: true
          files: |
            compose.yaml
            compose.prod.yaml
          set: |
            *.cache-from=type=gha,scope=${{github.ref}}-e2e
            *.cache-from=type=gha,scope=${{github.ref}}
            *.cache-from=type=gha,scope=refs/heads/main
            *.cache-to=type=gha,scope=${{github.ref}}-e2e,mode=max
      -
        name: Start Services
        run: docker compose up --wait --no-build
      -
        name: Debug Services
        if: failure()
        run: |
          docker compose ps
          docker compose logs
      -
        name: Load Fixtures
        run: docker compose run --rm php bin/console doctrine:fixtures:load --no-interaction
      -
        name: Cache Playwright Binaries
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright
      -
        name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.2
      -
        name: Install Dependencies
        working-directory: pwa
        run: pnpm install
      -
        name: Install Playwright Browsers
        working-directory: pwa
        run: pnpm exec playwright install --with-deps
      -
        name: Run Playwright @read
        working-directory: pwa
        # don't run @read and @write scenarios to prevent conflict between them
        run: pnpm exec playwright test --grep @read
      -
        name: Run Playwright @write
        working-directory: pwa
        # run all e2e tests even if @read ones fail
        if: ${{ !cancelled() }}
        # use 1 worker to prevent conflict between scenarios
        run: pnpm exec playwright test --grep @write --workers=1
      -
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: pwa/test-results

  lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
",,,,,,PHP
7642,https://github.com/neos/neos-development-collection,"name: build

on:
  workflow_dispatch:
  push:
    branches: [ master, '[0-9]+.[0-9]' ]
  pull_request:
    branches: [ master, '[0-9]+.[0-9]' ]

permissions: {}
jobs:
  build:
    permissions:
      contents: read # to fetch code (actions/checkout)

    if: ""!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip travis]')""
    name: ""PHP ${{ matrix.php-versions }} Test ${{ matrix.parallel-parts  }} (deps: ${{ matrix.dependencies }})""

    continue-on-error: ${{ matrix.experimental }}

    strategy:
      fail-fast: false
      matrix:
        php-versions: ['8.2']
        dependencies: ['highest']
        composer-arguments: [''] # to run --ignore-platform-reqs in experimental builds

        # we want to parallelize quite some parts of the test suite; but these need similar setup steps.
        # that's why we parallelize via a Matrix; and not via different jobs.
        # escr-behavioral determines the length of the build (because it is slowest). That's why we run this and
        # all the other parts in parallel.
        parallel-parts:
          - linting-unit-functionaltests-mysql
          - functionaltests-postgres
          - escr-behavioral
        experimental: [false]
        #include:
          #- php-versions: '7.3'
          #  parallel-parts: 'psalm'
          #  experimental: false
          #  dependencies: 'highest'

          # Experimental build for PHP nightly
          #- php-versions: 'nightly'
          #  composer-arguments: '--ignore-platform-reqs'
          #  parallel-parts: 'no'
          #  experimental: true
          #  dependencies: 'highest'

          # Build for minimum dependencies. Fails right now, hence deactivated.
          #- php-versions: '7.1'
          #  parallel-parts: 'no'
          #  experimental: false
          #  dependencies: 'lowest'

    runs-on: ubuntu-20.04
    services:
      mariadb:
        # see https://mariadb.com/kb/en/mariadb-server-release-dates/
        # this should be a current release, e.g. the LTS version
        image: mariadb:10.8
        env:
          MYSQL_USER: neos
          MYSQL_PASSWORD: neos
          MYSQL_DATABASE: flow_functional_testing
          MYSQL_ROOT_PASSWORD: neos
        ports:
          - ""3306:3306""
        options: --health-cmd=""mysqladmin ping"" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        # see https://www.postgresql.org/support/versioning/
        # this should be a current release
        image: postgres:14.2
        env:
          POSTGRES_USER: neos
          POSTGRES_PASSWORD: neos
          POSTGRES_DB: flow_functional_testing
          POSTGRES_ROOT_PASSWORD: neos
        ports:
          - ""5432:5432""
        options:  --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis:alpine
        ports:
          - ""6379:6379""
        options: --health-cmd ""redis-cli ping"" --health-interval 10s --health-timeout 5s --health-retries 5
      memcached:
        image: memcached:alpine
        ports:
          - ""11211:11211""
        # options: --health-cmd ""timeout 5 bash -c 'cat < /dev/null > /dev/udp/127.0.0.1/11211'"" --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      FLOW_CONTEXT: Testing
      NEOS_TARGET_VERSION: 9.0
      NEOS_DIST_FOLDER: neos-development-distribution
      NEOS_FOLDER: neos-development-collection

    defaults:
      run:
        working-directory: ${{ env.NEOS_DIST_FOLDER }}

    steps:
      - name: Set Neos target branch name
        run: echo ""NEOS_TARGET_VERSION=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}"" >> $GITHUB_ENV
        working-directory: .

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: ${{ env.NEOS_FOLDER }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, xml, json, zlib, iconv, intl, pdo_sqlite, mysql, pgsql, redis, memcached, memcache, apcu
          ini-values: date.timezone=""Africa/Tunis"", opcache.fast_shutdown=0, apc.enable_cli=on

      - name: Checkout development distribution
        uses: actions/checkout@v2
        with:
          repository: neos/neos-development-distribution
          ref: ${{ env.NEOS_TARGET_VERSION }}
          path: ${{ env.NEOS_DIST_FOLDER }}

      - name: Set alias branch name
        run: if [ ""${NEOS_TARGET_VERSION}"" == ""master"" ]; then echo ""NEOS_BRANCH_ALIAS=dev-master""; else echo ""NEOS_BRANCH_ALIAS=${NEOS_TARGET_VERSION}.x-dev""; fi >> $GITHUB_ENV

      - name: Update composer.json
        run: |
          git -C ../${{ env.NEOS_FOLDER }} checkout -b build
          composer config repositories.neos '{ ""type"": ""path"", ""url"": ""../${{ env.NEOS_FOLDER }}"", ""options"": { ""symlink"": false } }'
          composer require --no-update neos/neos-development-collection:""dev-build as ${{ env.NEOS_BRANCH_ALIAS }}""

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/composer
            ${{ env.NEOS_DIST_FOLDER }}/Packages
          key: php-${{ matrix.php-versions }}-${{ matrix.dependencies }}${{ hashFiles('**/composer.json') }}
          restore-keys: php-${{ matrix.php-versions }}-${{ matrix.dependencies }}

      - name: Install dependencies
        run: |
          composer ${{ matrix.dependencies == 'locked' && 'install' || 'update' }} --no-progress --no-interaction ${{ matrix.dependencies == 'lowest' && '--prefer-lowest' || '' }} ${{ matrix.composer-arguments }}

      - name: Set Flow Context
        run: echo ""FLOW_CONTEXT=${{ env.FLOW_CONTEXT }}"" >> $GITHUB_ENV

      - name: Setup Flow configuration
        run: |
          rm -f Configuration/Routes.yaml
          rm -f Configuration/Testing/Settings.yaml
          cat <<EOF >> Configuration/Testing/Settings.yaml
          Neos:
            Flow:
              persistence:
                backendOptions:
                  host: '127.0.0.1'
                  driver: pdo_mysql
                  user: 'neos'
                  password: 'neos'
                  dbname: 'flow_functional_testing'
            ContentRepositoryRegistry:
              postgres:
                persistence:
                  backendOptions:
                    host: '127.0.0.1'
                    port: 5432
                    driver: pdo_pgsql
                    dbname: 'flow_functional_testing'
                    user: 'neos'
                    password: 'neos'
                    charset: 'UTF8'

              # We enable the race condition tracker
              presets:
                'default':
                  projections:
                    'Neos.ContentRepository:ContentGraph':
                      catchUpHooks:
                        'Neos.ContentRepository.BehavioralTests:RaceConditionTracker':
                          factoryObjectName: Neos\ContentRepository\BehavioralTests\ProjectionRaceConditionTester\RaceTrackerCatchUpHookFactory
            ContentRepository:
              BehavioralTests:
                raceConditionTracker:
                  enabled: true
                  redis:
                    host: 127.0.0.1
                    port: 6379

          EOF
          mkdir Configuration/Testing/Postgres
          cat <<EOF >> Configuration/Testing/Postgres/Settings.yaml
          Neos:
            Flow:
              persistence:
                backendOptions:
                  host: '127.0.0.1'
                  port: 5432
                  driver: pdo_pgsql
                  charset: 'UTF8'
                  user: 'neos'
                  password: 'neos'
                  dbname: 'flow_functional_testing'
          EOF
          echo ""Running in context '$FLOW_CONTEXT'""
          # Enable for debugging: ./flow configuration:show
          # Enable for debugging: ./flow routing:list

      - name: Run Linter
        if: matrix.parallel-parts == 'linting-unit-functionaltests-mysql'
        run: |
          cd Packages/Neos
          composer lint

      - name: Run unit tests
        if: matrix.parallel-parts == 'linting-unit-functionaltests-mysql'
        run: bin/phpunit --colors -c Build/BuildEssentials/PhpUnit/UnitTests.xml --verbose

      - name: Run functional tests
        if: matrix.parallel-parts == 'linting-unit-functionaltests-mysql'
        run: |
          FLOW_CONTEXT=Testing ./flow doctrine:migrate --quiet
          bin/phpunit --colors --stop-on-failure -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml --testsuite ""Neos tests"" --verbose

      - name: Run Behavioral Tests (ES CR && Neos.Neos)
        id: escrtests
        if: matrix.parallel-parts == 'escr-behavioral'
        # DEBUG MODE: comment-in the next line, because we want to reach the Upload Mysql/Postgres DB dump step.
        continue-on-error: true
        run: |
          echo ${{ github.workspace }}
          ls ${{ github.workspace }}

          pwd
          mkdir -p ${{ github.workspace }}/Data/DebugDatabaseDumps
          touch ${{ github.workspace }}/Data/DebugDatabaseDumps/keep

          ./flow package:list --loading-order
          cd Packages/Neos

          # composer test:behavioral

          # DEBUG MODE: ALTERNATIVELY, comment in the following lines to dump the DB.
          # do not exit the script if the tests break; as we want to upload the database dumps afterwards.
          set +e
          CATCHUPTRIGGER_ENABLE_SYNCHRONOUS_OPTION=1 composer test:behavioral:stop-on-failure
          retVal=$?

          # automatically search for race conditions
          cd ../../
          ./flow raceConditionTracker:analyzeTrace --store-trace ${{ github.workspace }}/Data/DebugDatabaseDumps/race-trace.ndjson

          set -e
          if [ $retVal -ne 0 ]; then
            echo ""DUMPING POSTGRES AND MYSQL DATABASE (because of error)""

            echo ""copying logs""
            cp -R Data/Logs ${{ github.workspace }}/Data/DebugDatabaseDumps/Logs

            sudo DEBIAN_FRONTEND=noninteractive apt -y remove mysql-client libmysqlclient-dev mysql-server
            sudo DEBIAN_FRONTEND=noninteractive apt -y autoremove
            sudo DEBIAN_FRONTEND=noninteractive apt -y autoclean
            sudo apt-get update
            sudo apt-get install -y postgresql-client mariadb-client
            echo ""writing PW file""
            touch ~/.pgpass
            echo ""127.0.0.1:5432:flow_functional_testing:neos:neos"" > ~/.pgpass
            chmod 600 ~/.pgpass

            echo ""starting pg_dump""
            pg_dump --file=${{ github.workspace }}/Data/DebugDatabaseDumps/pg_dump.sql --format=plain --no-owner --dbname=flow_functional_testing --host=127.0.0.1 --username=neos --no-password
            echo ""pg_dump finished, starting mysqldump""
            mysqldump --force --host=127.0.0.1 -u neos -pneos flow_functional_testing > ${{ github.workspace }}/Data/DebugDatabaseDumps/mysqldump.sql
          fi
          exit $retVal
          # END OF DEBUG SCRIPT

      - name: Upload Postgres/Mysql DB dump
        uses: actions/upload-artifact@v2
        if: matrix.parallel-parts == 'escr-behavioral'
        with:
          name: database-dumps
          path: Data/DebugDatabaseDumps

      - name: Fail pipeline if ES CR tests broke (after uploading artifacts)
        if: matrix.parallel-parts == 'escr-behavioral' && steps.escrtests.outcome != 'success'
        # we want to reach the Upload Postgres/Mysql DB dump step.
        # Here we want to fail everything, as described in https://stackoverflow.com/a/58003436/4921449
        run: |
          echo '${{ toJSON(steps) }}'
          exit 1

      - name: Setup Flow configuration (PGSQL)
        if: matrix.parallel-parts == 'functionaltests-postgres'
        run: |
          rm -f Configuration/Testing/Settings.yaml
          cat <<EOF >> Configuration/Testing/Settings.yaml
          Neos:
            Flow:
              persistence:
                backendOptions:
                  host: '127.0.0.1'
                  port: 5432
                  driver: pdo_pgsql
                  user: 'neos'
                  password: 'neos'
                  dbname: 'flow_functional_testing'
                  charset: 'utf8'
                  defaultTableOptions:
                    charset: 'utf8'
          EOF
          mkdir Configuration/Testing/Behat
          cp Configuration/Testing/Settings.yaml Configuration/Testing/Behat/Settings.yaml
          rm -Rf Data/Temporary

      - name: Run functional tests (PGSQL)
        if: matrix.parallel-parts == 'functionaltests-postgres'
        run: bin/phpunit --colors --stop-on-failure -c Build/BuildEssentials/PhpUnit/FunctionalTests.xml --testsuite ""Neos tests"" --verbose

  buildall:
    if: ""!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[skip travis]')""
    runs-on: ubuntu-20.04
    name: CI build (matrix)
    needs: build
    steps:
      - name: Check build matrix status
        if: ${{ needs.build.result != 'success' }}
        run: exit 1
",,,,,,PHP
7672,https://github.com/bottelet/daybydaycrm,"name: Run tests

on: [push, pull_request]

jobs:
  run-tests:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: daybyday_test
        ports:
          - 3306:3306
        options: --health-cmd=""mysqladmin ping"" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Setup PHP
        uses: shivammathur/setup-php@v1
        with:
          php-version: '7.3'
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick
          coverage: none

      - name: Create daybyday testing database
        env:
          PORT: ${{ job.services.mysql.ports[3306] }}
        run: mysql -h 127.0.0.1 --port ""$PORT"" -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS daybyday_test;'

      - name: Run yarn
        run: yarn && yarn dev

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}

      - name: Run composer install
        run: composer install --no-ansi --no-scripts --no-interaction --optimize-autoloader --prefer-dist

      - name: Prepare Laravel Application
        run: |
          cp .env.ci .env
          php artisan key:generate

      - name: Database setup
        run:  php artisan migrate --seed

      - name: Run tests
        run: ./vendor/bin/phpunit
        env:
          ELASTICSEARCH_PORT: ${{ job.services.elasticsearch.ports[9200] }}
",,,,,,PHP
8174,https://github.com/coollabsio/coolify,"name: Docker Image CI

on:
  # push:
  #   branches: [ ""main"" ]
  # pull_request:
  #   branches: [ ""*"" ]
  push:
    branches: [""this-does-not-exist""]
  pull_request:
    branches: [""this-does-not-exist""]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/share/ca-certificates
            /var/cache/apt/archives
            /var/lib/apt/lists
            ~/.cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-
      - name: Build the Docker image
        run: |
          cp .env.example .env
          docker run --rm -u ""$(id -u):$(id -g)"" \
            -v ""$(pwd):/app"" \
            -w /app composer:2 \
            composer install --ignore-platform-reqs
          ./vendor/bin/spin build
      - name: Start the stack
        run: |
          ./vendor/bin/spin up -d
          ./vendor/bin/spin exec coolify php artisan key:generate
          ./vendor/bin/spin exec coolify php artisan migrate:fresh --seed
      - name: Test (missing E2E tests)
        run: |
          ./vendor/bin/spin exec coolify php artisan test
",,,,,,PHP
495,https://github.com/returntocorp/semgrep-rules,"name: validate-r2c-registry-metadata

# Test this workflow using github.com/nektos/act
# > brew install act
# > echo '{""pull_request"":{""head"":{""ref"":develop""}},{""base"":{""ref"":""release""}}}' > act-env.json
# > act pull_request --verbose --eventpath act-env.json -j validate-metadata

on:
  pull_request:
    branches: [develop, release]
  push:
    branches: [develop, release]

jobs:
  validate-metadata:
    if: github.repository == 'semgrep/semgrep-rules'
    name: Validate r2c registry metadata
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: changed-files
        name: get changed files
        env:
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          echo ""CHANGED_FILES=$(git diff --name-only origin/${BASE_REF} origin/${HEAD_REF} | xargs )"" >> $GITHUB_OUTPUT
      - id: print-changed-files
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        name: debugging step - print changed files
        run: echo $CHANGED_FILES
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9.2
      - name: install deps
        run: pip install jsonschema pyyaml
      - name: validate metadata
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        run: |
          python .github/scripts/validate-metadata.py -s ./metadata-schema.yaml.schm -f $CHANGED_FILES
",,,,,,Python
540,https://github.com/cesena/ghidra2dwarf,"name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  test-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""
      
      - name: install 32bit libs
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libc6:i386

      - name: install gdb
        run: sudo apt install gdb

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: install python requirements
        run: |
          cd test
          sudo python3 -m pip install -r requirements.txt

      - name: test
        run: |
          cd test
          #./generate_dbg.py $GHIDRA_INSTALL_DIR
          #cd binaries
          #chmod +x ./passcode_dbg
          #gdb --batch -ex 'start < passcode_input.txt' -ex list -ex continue ./passcode_dbg
          ./run_tests.sh $GHIDRA_INSTALL_DIR

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        shell: cmd
        run: |
          cd lib
          bash fetch_libs_and_build.sh
          move target\libdwarf.jar ..\src

      - name: test
        shell: cmd
        run: |
          cd test
          copy %pythonLocation%\python.exe python3.exe
          call run_tests %GHIDRA_INSTALL_DIR%

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: NextLight/setup-ghidra@octokit-auth
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: test
        run: |
          cd test
          ./generate_dbg.py $GHIDRA_INSTALL_DIR
",,,,,,Python
815,https://github.com/arcadelab/deepdrr,"name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python
977,https://github.com/docopt/docopt.c,"name: PyPi publish

on:
  push:
    branches:
    - 'master'
  pull_request:
    types:
    - opened
    - reopened

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.9]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
            -   name: PyPi release
                run: |
                    pip install twine
                    python setup.py sdist bdist_wheel
                    python -m twine upload --repository pypi dist/*
                env:
                    TWINE_USERNAME: __token__
                    TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
                    TWINE_NON_INTERACTIVE: 1
                if: matrix.python-version == '3.9' && matrix.os.name == 'Linux' && github.ref == 'refs/heads/master'
",,,,,,Python
1886,https://github.com/electronstudio/raylib-python-cffi,"name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-mac:
    runs-on: macos-11
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install

      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name macosx_10_15_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

#  build-mac12-arm64:
#    runs-on: macos-12
#    strategy:
#      matrix:
#        python-version: ['3.10', '3.11.0-alpha - 3.11.0' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      # Only build raylib for arm64 (although we could make a fat universal2 binary by asking for x86_64 as well)
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64""  -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#      # Name defaults to universal2 and it technically is, but we override name to arm64.  Why don't we make a working universal2 wheel?  Because
#      # I'd rather have a separate x86_64 that I can test, and I want it to work on 10_15 but I'm not sure a 'macosx_10_15_universal2' is valid
#      # given that there is no SDK for universal until macosx_11_0
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_12_0_arm64
#
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#
#
#  build-mac11-arm64:
#    runs-on: macos-11
#    strategy:
#      matrix:
#        python-version: [ '3.10.5' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    env:
#      MACOSX_DEPLOYMENT_TARGET: 11.6
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      #  build raylib for arm64 and x86_64 as well
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64"" -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_11_0_arm64
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#


  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/
      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name manylinux2014_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*


#  build-rpi:
#    runs-on: rpi
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
#          make -j2
#          make install
#      - name: Copy extras
#        run: |
#          cp physac/src/physac.h /usr/local/include/
#          cp raygui/src/raygui.h /usr/local/include/
#
#      - name: Build raylib-python-cffi
#        run: |
#          python3 setup.py bdist_wheel
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version:  [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          msbuild raylib.sln /target:raylib /property:Configuration=Release
          copy raylib\Release\raylib.lib ..\..
          cd ..\..
        shell: cmd

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          del raylib\dynamic\*.so* >nul 2>&1
          del raylib\dynamic\*.dll >nul 2>&1
          del raylib\dynamic\*.dylib >nul 2>&1
          del raylib\dynamic\32bit\* >nul 2>&1
          python setup.py bdist_wheel
        shell: cmd
          
      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/* 
          
  source-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

  dynamic-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib-python-cffi-dynamic
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          cd dynamic
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dynamic/dist/*
",,,,,,Python
1955,https://github.com/pydata/bottleneck,"name: Github Actions

on: [""push"", ""pull_request""]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        os:
          [
            ubuntu-latest,
            macos-latest,
            windows-latest,
            windows-2022,
            macos-10.15,
          ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          pip install .

      - name: Test with pytest
        run: |
          pip install pytest
          pytest --pyargs bottleneck

  check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder for CI checks in PRs
        run: echo ""Done""

  build_wheels:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_SKIP: pp*

      - name: Store wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN}}
",,,,,,Python
105,https://github.com/chipsec/chipsec,"name: Run tests

on: [push, pull_request]

jobs:
  build-linux-km:
    name: Linux kernel module
    strategy:
      matrix:
        distro:
          - {name: ""alpine"", tag: ""3.18"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.17"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.16"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.15"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.14"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-zen"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""base"", image_prefix: ""docker.io/library/""}
          - {name: ""centos"", tag: ""stream9"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""stream8"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""7"", image_prefix: ""quay.io/centos/""}
          - {name: ""debian"", tag: ""bookworm-slim"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""11"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""10"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""23.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""22.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""20.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""18.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""16.04"", image_prefix: ""docker.io/library/""}
    runs-on: ubuntu-22.04
    container:
      image: docker://${{ matrix.distro.image_prefix }}${{ matrix.distro.name }}:${{ matrix.distro.tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Alpine dependencies
      if: matrix.distro.name == 'alpine'
      run: |
        apk --no-cache --update add linux${{ matrix.distro.variant }} linux${{ matrix.distro.variant }}-dev nasm

        # DKMS is not yet packaged in Alpine
        apk --no-cache --update add bash gcc git make
        git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
        make -C /opt/dkms install

    - name: Install Arch Linux dependencies
      if: matrix.distro.name == 'archlinux'
      run: |
        pacman -Syu --noconfirm dkms linux${{ matrix.distro.variant }}-headers nasm

    - name: Install CentOS dependencies
      if: matrix.distro.name == 'centos'
      run: |
        if [ ""${{ matrix.distro.tag }}"" = 7 ] ; then
            yum install -y kernel kernel-devel nasm
            yum install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream8 ] ; then
            dnf install -y --enablerepo=powertools kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream9 ] ; then
            dnf install -y --enablerepo=crb kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        fi

        # DKMS is not longer packaged in CentOS Stream
        if ! command -v dkms > /dev/null 2>&1 ; then
            git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
            make -C /opt/dkms install
        fi

    - name: Install Debian dependencies
      if: matrix.distro.name == 'debian'
      run: |
        apt-get update -q
        apt-get install -qqy dkms nasm

    - name: Install Ubuntu dependencies
      if: matrix.distro.name == 'ubuntu'
      run: |
        apt-get update -q
        apt-get install -qqy dkms linux-headers-generic nasm

    - name: Compute packaged kernel version
      id: versions
      run: |
        KERNEL_VER=''
        if [ ""${{ matrix.distro.name }}"" = alpine ] ; then
            # Parse ""lib/modules/5.15.53-0-lts/build""
            KERNEL_VER=""$(apk info --contents ""linux${{ matrix.distro.variant }}-dev"" | sed -n 's:^lib/modules/\([^/][^/]*\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = archlinux ] ; then
            # Parse ""/usr/lib/modules/5.18.0-arch1-1/build/""
            KERNEL_VER=""$(pacman -Qql ""linux${{ matrix.distro.variant }}-headers"" | sed -n 's:^/usr/lib/modules/\([^/]\+\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = centos ] ; then
            # Parse ""Source RPM  : kernel-3.10.0-1160.71.1.el7.src.rpm""
            KERNEL_VER=""$(LANG=C rpm -qi kernel-devel | sed -n 's/^Source RPM *: kernel-\(.*\).src.rpm$/\1.x86_64/p' | tail -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = debian ] ; then
            # Parse ""Depends: linux-headers-5.10.0-15-amd64 (= 5.10.120-1)""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-amd64 | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = ubuntu ] ; then
            # Parse ""Depends: linux-headers-5.15.0-40-generic""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-generic | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        fi
        if [ -z ""${KERNEL_VER}"" ] ; then
            echo >&2 ""Error: no kernel package found""
            exit 1
        fi
        echo ""Found packaged kernel ${KERNEL_VER}""
        echo ""KERNEL_VER=${KERNEL_VER}"" >> ""$GITHUB_ENV""

        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""CHIPSEC_MODULE_VER=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_ENV""

        echo ""kernel=${KERNEL_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""chipsec=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""uname_m=$(uname -m)"" >> ""$GITHUB_OUTPUT""

    - name: Build Linux driver with DKMS for ${{ steps.versions.outputs.kernel }}
      run: |
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        dkms add drivers/linux
        dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Show dkms status
      run: dkms status

    - name: Show modinfo on the kernel module
      id: modinfo
      run: |
        MODULE=""$(ls -1 ""/var/lib/dkms/chipsec/${CHIPSEC_MODULE_VER}/${KERNEL_VER}/$(uname -m)/module/chipsec.ko""* | head -n1)""
        echo ""module_path=${MODULE}"" >> ""$GITHUB_OUTPUT""
        modinfo ""${MODULE}""

    - name: Upload Linux driver from ${{ steps.modinfo.outputs.module_path }}
      uses: actions/upload-artifact@v3
      with:
        name: chipsec-${{ steps.versions.outputs.chipsec }}.${{ matrix.distro.name }}-${{ matrix.distro.tag }}${{ matrix.distro.variant }}-${{ steps.versions.outputs.kernel }}.${{ steps.versions.outputs.uname_m }}
        path: ${{ steps.modinfo.outputs.module_path }}
        if-no-files-found: error

  windows_driver:
    name: Windows driver matrix
    strategy:
      matrix:
        versions:
          - {window: ""2019"", python: ""3.11""}
          - {window: ""2019"", python: ""3.10""}
          - {window: ""2019"", python: ""3.9""}
          - {window: ""2019"", python: ""3.8""}
          - {window: ""2019"", python: ""3.7""}
          
          - {window: ""2022"", python: ""3.11""}
          - {window: ""2022"", python: ""3.10""}
          - {window: ""2022"", python: ""3.9""}
          - {window: ""2022"", python: ""3.8""}
          - {window: ""2022"", python: ""3.7""}
          
    runs-on: windows-${{ matrix.versions.window }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - name: Install dependencies
      shell: bash
      run: pip install -r windows_requirements.txt

    - name: Build Windows driver
      shell: bash
      run: python setup.py build_ext -i

    - name: Upload Windows Main driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/chipsec/x64
        if-no-files-found: error
    
    - name: Upload Windows PCI Filter driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/pcifilter/x64
        if-no-files-found: error

    - name: Run Python unit tests
      shell: bash
      run: python -m unittest
      
    - name: Run xml cfg checker
      shell: bash
      run: |
        python tests/cfg_checker.py
        
    - name: Run chipsec tests
      shell: bash
      run: |
        python chipsec_util.py cpu info

  ubuntu-test:
    name: Test on Ubuntu matrix
    strategy:
      matrix:
        versions:
          - {ubuntu: ""22.04"", python: ""3.11""}
          - {ubuntu: ""22.04"", python: ""3.10""}
          - {ubuntu: ""22.04"", python: ""3.9""}
          - {ubuntu: ""22.04"", python: ""3.8""}
          - {ubuntu: ""22.04"", python: ""3.7""}

          - {ubuntu: ""20.04"", python: ""3.11""}
          - {ubuntu: ""20.04"", python: ""3.10""}
          - {ubuntu: ""20.04"", python: ""3.9""}
          - {ubuntu: ""20.04"", python: ""3.8""}
          - {ubuntu: ""20.04"", python: ""3.7""}
          
    runs-on: ubuntu-${{ matrix.versions.ubuntu }}

    steps:
    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - uses: actions/checkout@v3

    - name: Patch chipsec_main to return true even when some module failed
      run: |
        sed 's/^        return modules_failed$/        return 0/' -i chipsec_main.py

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qqy dkms nasm python3-setuptools
        pip install distro
        pip install -r linux_requirements.txt
        sudo pip install -r linux_requirements.txt

    - name: Build the driver with Python
      run: python3 setup.py build_ext -i

    - name: Build the driver with DKMS
      run: |
        KERNEL_VER=""$(uname -r)""
        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        sudo dkms add drivers/linux
        sudo dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Run Python unit tests
      run: |
        python3 -m unittest
        
    - name: Run xml cfg checker
      run: |
        python3 tests/cfg_checker.py

    - name: pylint pilot for modules folder
      run: |
        pylint chipsec/modules

    - name: Install chipsec
      run: sudo python3 setup.py install

    - name: Run chipsec_main test
      run: |
        PYTHONEXE=""$(which python)""
        CHIPSECEXIT=""$($(sudo ${PYTHONEXE} chipsec_main.py -p PMC_I440FX 1>&2); echo $?)""
        if echo ""0 1 2 4 8"" | grep -qw $CHIPSECEXIT; then $(exit 0); else $(exit $CHIPSECEXIT); fi

",,,,,,Python
298,https://github.com/aio-libs/multidict,"name: CI

on:
  push:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-2-dev
        pip install -r requirements/doc.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
      env:
        MULTIDICT_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9', '3.10', '3.11']
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: windows
            no-extensions: 'Y'
        include:
          - pyver: pypy-3.8
            no-extensions: 'Y'
            os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo ""::set-output name=dir::$(pip cache dir)""    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
      env:
        MULTIDICT_NO_EXTENSIONS: ${{ matrix.no-extensions }}
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        python -m pytest tests -vv
    - name: Prepare coverage artifact
      # combining Linux and Windows paths is tricky, left this exercise for others
      # multidict has no Winows or MacOS specific code paths anyway
      if: ${{ matrix.os == 'ubuntu' }}
      uses: aio-libs/prepare-coverage@v22.1.2

  test-summary:
    name: Tests status
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Checkout
      uses: actions/checkout@v4
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v22.1.4

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Dummy
        run: |
            echo ""Predeploy step""

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        qemu: ['']
        include:
          # Split ubuntu job for the sake of speed-up
        - os: ubuntu
          qemu: aarch64
        - os: ubuntu
          qemu: ppc64le
        - os: ubuntu
          qemu: s390x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      if: ${{ matrix.qemu }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
      id: qemu
    - name: Prepare emulation
      run: |
        if [[ -n ""${{ matrix.qemu }}"" ]]; then
          # Build emulated architectures only if QEMU is set,
          # use default ""auto"" otherwise
          echo ""CIBW_ARCHS_LINUX=${{ matrix.qemu }}"" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.1
      env:
        CIBW_ARCHS_MACOS: x86_64 arm64 universal2
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./wheelhouse/*.whl

  deploy:
    name: Deploy
    needs: [build-tarball, build-wheels]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    environment:
      name: pypi
      url: https://pypi.org/p/multidict

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Login
      run: |
        echo ""${{ secrets.GITHUB_TOKEN }}"" | gh auth login --with-token
    - name: Download dists
      uses: actions/download-artifact@v3
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: multidict
        version_file: multidict/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        artifact: dist
        fix_issue_regex: "":issue:`(\\d+)`""
        fix_issue_repl: ""(#\\1)""

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v1
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**
",,,,,,Python
451,https://github.com/theonlypwner/crc32,"name: Test

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test:
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""pypy2.7""
          - ""pypy3.7""
          - ""pypy3.8""
          - ""pypy3.9""
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install Coveralls
      run: pip3 install coveralls
    - name: Test
      run: coverage run --branch --source=crc32 test.py
    - name: Upload coverage
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.python }}
        COVERALLS_PARALLEL: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
    - run: pip install --upgrade coveralls
    - run: coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
452,https://github.com/gogotanaka/hilbert,"name: Python

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -
    - name: Poetry Version
      run: |
        poetry --version
    - name: Poetry Install Dependencies
      run: |
        poetry install --no-interaction
    - name: Test with pytest
      run: |
        poetry run pytest",,,,,,Python
453,https://github.com/salimane/flask-mvc,"name: Flask-mvc

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
",,,,,,Python
454,https://github.com/lamerman/shellpy,"name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.6, 3.7, 3.8, 3.9, pypy-2.7, pypy-3.6]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install mock
          python ./setup.py install
      - name: Test with pytest
        run: |
          python -m unittest discover

      - name: Run test scripts
        run: |
          example/import_from_python/import.py

      - name: Run test scripts python2
        if: matrix.python-version == '2.7' || matrix.python-version == 'pypy-2.7'
        run: |
          shellpy example/allinone/test.spy

      - name: Run test scripts python3
        if: matrix.python-version != '2.7' && matrix.python-version != 'pypy-2.7'
        run: |
          shellpy3 example/allinone/test3.spy
",,,,,,Python
455,https://github.com/mbforbes/py-factorgraph,"name: build

on: [""push"", ""pull_request""]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-cov coveralls
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          py.test --cov=factorgraph tests/

      - name: Coveralls
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
456,https://github.com/pycqa/flake8-docstrings,"name: main

on:
  push:
    branches: [main]
    tags:
  pull_request:

jobs:
  main:
    strategy:
      matrix:
        include:
        # linux
        - os: ubuntu-latest
          python: 3.7
        - os: ubuntu-latest
          python: 3.8
        - os: ubuntu-latest
          python: 3.9
        - os: ubuntu-latest
          python: '3.10'
        # windows
        - os: windows-latest
          python: 3.7
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - run: python -mpip install --upgrade setuptools pip tox virtualenv
    - run: tox -e py
",,,,,,Python
457,https://github.com/pinterest/ptracer,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [2.7, 3.7, 3.8, 3.9, ""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: matrix.python-version == '2.7'
      run: |
        python -m pip install --upgrade pip
        pip install mock
    - name: Tests
      run: |
        python setup.py test
",,,,,,Python
458,https://github.com/smarr/latex-to-html5,"name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: texlive/texlive:latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
            apt-get update
            apt-get install -y tidy python3-pip
            python -m pip install --break-system-packages beautifulsoup4 html5lib

      - name: Run Tests
        run: |
            python run-tests.py
",,,,,,Python
459,https://github.com/samuelcolvin/dnserver,"name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: >
            lint
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('requirements/linting.txt') }}

      - name: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements/linting.txt

      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files --verbose

  test:
    name: test ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        # test 3.11-dev and pypy on ubuntu only to speed up CI, no reason why macos X pypy should fail separately
        include:
          - os: 'ubuntu'
            python-version: '3.11-dev'
          - os: 'ubuntu'
            python-version: 'pypy-3.7'
          - os: 'ubuntu'
            python-version: 'pypy-3.8'
          - os: 'ubuntu'
            python-version: 'pypy-3.9'

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/pyproject.txt') }}-${{ hashFiles('requirements/testing.txt') }}

      - run: pip install -r requirements/pyproject.txt -r requirements/testing.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - run: coverage run -m pytest

      - run: coverage xml

      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          env_vars: PYTHON,OS

  docker-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: docker build . -t dnserver
      - run: docker run --rm dnserver --help

  deploy:
    name: Deploy
    needs: [lint, test, docker-build]
    if: ""success() && startsWith(github.ref, 'refs/tags/')""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: samuelcolvin
          password: ${{ secrets.dockerhub_token }}

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install
        run: pip install -U twine build packaging

      - name: check version
        id: check-version
        run: python <(curl -Ls https://gist.githubusercontent.com/samuelcolvin/4e1ad439c5489e8d6478cdee3eb952ef/raw/check_version.py)
        env:
          VERSION_PATH: 'dnserver/version.py'

      - name: build
        run: python -m build

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: samuelcolvin/dnserver:latest,samuelcolvin/dnserver:v${{ steps.check-version.outputs.VERSION }}
",,,,,,Python
460,https://github.com/condemil/gist,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  black:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q black
      - run: black --check --diff --skip-string-normalization --target-version py33

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q pylint
      - run: pylint *.py

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q coveralls pytest-cov
      - run: pytest --cov
      - run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
461,https://github.com/pennersr/django-trackstats,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  testenv:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        django-version: ['3.2', '4.0', '4.1']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions coveralls
    - name: Tox Test
      run: tox
      env:
        PYTHON_VER: ${{ matrix.python-version }}
        DJANGO: ${{ matrix.django-version }}
  extra:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        extra-env: ['checkqa']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Tox Test
      run: tox
      env:
        TOXENV: ${{ matrix.extra-env }}
",,,,,,Python
462,https://github.com/wakatime/wakadump,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./wakadump --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
",,,,,,Python
463,https://github.com/matejak/imreg_dft,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.TWINE_API_TOKEN }}
",,,,,,Python
464,https://github.com/bbc/audio-offset-finder,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build, Test and Lint

on: [push, pull_request]

jobs:
  build_and_test:
    name: Build/test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3

    - name: Install FFMPEG (Windows-only)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: FedericoCarboni/setup-ffmpeg@v1
      id: setup-ffmpeg

    - name: Install FFMPEG (Non-Windows)
      run: |
        if [ ""$RUNNER_OS"" == ""macOS"" ]; then
          brew install ffmpeg
        elif [ ""$RUNNER_OS"" == ""Linux"" ]; then
          # apt-spy needed because of issues with the default APT repos for Workflow hosts - https://github.com/actions/runner-images/issues/675
          sudo gem install apt-spy2
          sudo apt-spy2 fix --commit --launchpad --country=US
          sudo apt-get update
          sudo apt install -y ffmpeg
        fi

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        pip install .
    - name: Lint with black
      uses: psf/black@stable
      with:
        version: ""22.3.0""
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
465,https://github.com/kinegratii/django-echarts,"name: unittest
on:
  push:
    branches:
      - master
      - dev
      - 'release/**'
  pull_request:
    branches:
      - master
jobs:
  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
        django-version: [ '2.2', '3.2' ]
        pyecharts-version: ['1.9.1', '2.0.2']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django~=${{ matrix.django-version }}
          pip install borax~=4.0
          pip install pyecharts~=${{ matrix.pyecharts-version }}
          pip install typing_extensions~=4.5
          pip install htmlgenerator~=1.2
          pip install flake8~=3.9
          pip install nose2~=0.10
      - name: Lint with flake8
        run: |
          flake8 django_echarts tests
      - name: Test with pytest
        run: |
          nose2 --with-coverage --coverage django_echarts --coverage-report xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true",,,,,,Python
466,https://github.com/zh217/aiochan,"name: Python package

on:
  push:
    branches:
      - ""*""
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.5"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install -r test_req.txt
    - name: Test with pytest
      run: |
        pytest --verbose --cov=./aiochan
",,,,,,Python
467,https://github.com/scoder/acora,"name: Build & Publish wheel

on:
  push:
  create:

jobs:
  sdist:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ""3.10""

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install -r requirements.txt

    - name: Build sdist
      run: make sdist

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.tar.gz

    - name: Archive sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz
        if-no-files-found: ignore

  Tests:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        python-version: [""2.7"", ""3.5"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12-dev""]

        include:
          - python-version: ""3.12-dev""
            allowed_failure: true

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      if: startsWith(matrix.python-version, '3.')
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python2 (Linux)
      if: matrix.python-version == '2.7' && startsWith(matrix.os, 'ubuntu')
      run: |
          sudo ln -fs python2 /usr/bin/python
          sudo apt-get update
          sudo apt-get install python-setuptools python2-dev
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python2 get-pip.py
          ls -l /usr/bin/pip* /usr/local/bin/pip*
          which pip

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install -r requirements.txt

    - name: Build
      continue-on-error: ${{ matrix.allowed_failure || false }}
      run: make local

    - name: Run tests
      continue-on-error: ${{ matrix.allowed_failure || false }}
      run: make test

  Linux:

    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        image:
          - manylinux1_x86_64
          - manylinux1_i686
          - manylinux_2_24_i686
          - manylinux_2_24_x86_64
          - manylinux_2_28_x86_64
          - musllinux_1_1_x86_64
        pyversion: [""cp*""]

        include:
          - image: manylinux_2_24_aarch64
            pyversion: ""cp37*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp38*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp39*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp310*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp311*""
          - image: manylinux_2_28_aarch64
            pyversion: ""cp312*""

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ""3.10""

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install --pre -r requirements.txt

    - name: Building wheel
      run: |
        make PYTHON_WHEEL_BUILD_VERSION=""${{ matrix.pyversion }}"" sdist wheel_${{ matrix.image }}

    - name: Copy wheels in dist
      run: cp -v wheelhouse*/*-m*linux*.whl dist/  # manylinux / musllinux

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.whl

    - name: Archive Wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.image }}
        path: dist/*.whl
        if-no-files-found: ignore

  non-Linux:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        #os: [macos-10.15, windows-latest]
        #os: [macos-10.15, macOS-M1]
        os: [macos-11.0, windows-latest]
        python-version: [""2.7"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12-dev""]

        include:
          - python-version: ""3.12-dev""
            allowed_failure: true
        exclude:
          - python-version: ""2.7""
            os: windows-latest

    runs-on: ${{ matrix.os }}
    env: { MACOSX_DEPLOYMENT_TARGET: 11.0 }

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      if: startsWith(matrix.python-version, '3.')
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python2 (Linux)
      if: matrix.python-version == '2.7' && startsWith(matrix.os, 'ubuntu')
      run: |
          sudo ln -fs python2 /usr/bin/python
          sudo apt-get update
          sudo apt-get install python-setuptools python2-dev
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python2 get-pip.py
          ls -l /usr/bin/pip* /usr/local/bin/pip*
          which pip

    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install --pre -r requirements.txt

    - name: Build wheels
      run: make sdist wheel

    - name: Run tests
      run: make test

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.whl

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/*.whl
        if-no-files-found: ignore
",,,,,,Python
468,https://github.com/carlthome/tensorflow-convlstm-cell,"on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ hashFiles('requirements.txt') }}
    - run: pip install -r requirements.txt
    - run: python -c 'exec(open(""README.md"").read().split(""```"")[1][6:])'
",,,,,,Python
469,https://github.com/fabianp/mord,"name: build
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    name: Python ${{ matrix.python-version }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: python --version
      - run: pip install --upgrade pip pytest numpy pandas scipy scikit-learn
      - run: pytest
",,,,,,Python
470,https://github.com/jvkersch/pyconcorde,"name: Run unit tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install package
      run: |
        python -m pip install -e . -v
    - name: Run unit tests
      run: |
        python -m unittest discover -v .
",,,,,,Python
471,https://github.com/ermlab/python-ddd,"name: Run tests

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432        
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install Poetry
      run: |
          pip install poetry
          poetry self update
    - name: Install dependencies
      run: poetry install
    - name: Run all tests
      run: |
        poetry run pytest src
      env:
        # The hostname used to communicate with the PostgreSQL service container
        DATABASE_URL: postgresql://postgres:password@localhost:5432/test_db                
",,,,,,Python
472,https://github.com/voronind/vk,"name: Check

on:
  pull_request:
  push:

  schedule:
    - cron: ""0 12 */2 * *""

jobs:
  test:
    name: Run tests - Python ${{ matrix.py }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""
          - ""pypy-3.7""
          - ""pypy-3.8""
    steps:
      - name: Setup Python for tox
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install tox
        run: pip install tox
      - name: Setup Python ${{ matrix.py }} for test
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Pick environment to run
        run: |
          import codecs
          import os
          import platform
          import sys
          cpy = platform.python_implementation() == 'CPython'
          base =('{}{}{}' if cpy else '{}{}').format('py' if cpy else 'pypy', *sys.version_info[0:2])
          env = 'TOXENV={}\n'.format(base)
          print('Picked:\n{}for {}'.format(env, sys.version))
          with codecs.open(os.environ['GITHUB_ENV'], 'a', 'utf-8') as file:
            file.write(env)
        shell: python
      - name: Setup test suite
        run: tox -vv --notest
      - name: Run test suite
        run: tox --skip-pkg-install
        env:
          VK_ACCESS_TOKEN: ${{ secrets.VK_ACCESS_TOKEN }}
          VK_USER_LOGIN: ${{ secrets.VK_USER_LOGIN }}
          VK_USER_PASSWORD: ${{ secrets.VK_USER_PASSWORD }}
          VK_GROUP_IDS: ${{ secrets.VK_GROUP_IDS }}
      - name: Upload coverage
        uses: codecov/codecov-action@v2

  check:
    name: Check - Tox ${{ matrix.tox_env }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tox_env:
          - fix
          - docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python for tox
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install tox
        run: pip install tox
      - name: Setup test suite
        run: tox -vv --notest -e ${{ matrix.tox_env }}
      - name: Run test suite
        run: tox --skip-pkg-install -e ${{ matrix.tox_env }}

  publish:
    name: Publish on PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [ test, check ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install dependencies
        run: pip install build
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: python -m build --sdist --wheel --outdir dist/ .
      - name: Publish on PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
473,https://github.com/rmariano/clean-code-in-python,"name: Build
on:
  - pull_request

permissions:
  contents: write

jobs:
  build:
    defaults:
      run:
        working-directory: book/src
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests
      run: |
        make test
  auto-merge:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.1.1
        with:
          github-token: ""${{ secrets.GITHUB_TOKEN }}""
      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor' }}
        run: gh pr merge --auto --rebase ""$PR_URL""
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
",,,,,,Python
474,https://github.com/brandonrobertz/sparselsh,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python test and lint

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.9"", ""3.10""]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest flake8
        pip install -r requirements.txt
        python setup.py install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
475,https://github.com/bundestag/gesetze-tools,"name: bundestag gesetze tool test CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ##############################################################################
  # JOB: Test ##################################################################
  ##############################################################################
  test:
    name: test
    runs-on: ubuntu-latest
    #needs: [nothing]
    strategy:
      matrix:
        python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11""]
    steps:
    ##########################################################################
    # CHECKOUT CODE ##########################################################
    ##########################################################################
    - uses: actions/checkout@v2
    ##########################################################################
    # SETUP SYSTEM ###########################################################
    ##########################################################################
    - name: Install system dependencies
      run: sudo apt-get install libxml2-utils libxml2-dev libxslt1-dev -y
    ##########################################################################
    # SETUP PYTHON ###########################################################
    ##########################################################################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    ##########################################################################
    # LINT ###################################################################
    ##########################################################################
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-line-length=127 --statistics
    ##########################################################################
    # TEST ###################################################################
    ##########################################################################
    #- name: Test with pytest
    #  run: |
    #    pytest
",,,,,,Python
476,https://github.com/shibing624/parrots,"on:
  workflow_dispatch: # Manually running a workflow
  push:
    branches:
      - release/*
name: Linux build
jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #python-version: [ 3.7, 3.8, 3.9 ]
        python-version: [ 3.8 ]
    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache huggingface models
        uses: actions/cache@v2
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install torch
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          pip install torch
      - name: Install from pypi
        run: |
          pip install -U parrots
          python -c ""import parrots; print(parrots.__version__)""
          pip uninstall -y textgen
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
          pip install .
      - name: PKG-TEST
        run: |
          python -m pytest
",,,,,,Python
477,https://github.com/sublimetext/ctags,"name: CI
on: [push, pull_request]

jobs:
  tests:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install Universal CTags
      run: sudo apt-get install universal-ctags
    - name: Install PyTest
      run: pip install pytest
    - name: Run PyTest
      run: pytest .

",,,,,,Python
478,https://github.com/nedbat/cog,"name: ""CI""

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ""${{ github.workflow }}-${{ github.ref }}""
  cancel-in-progress: true

jobs:
  tests:
    name: ""Python ${{ matrix.python }} on ${{ matrix.os }}""
    runs-on: ""${{ matrix.os }}""

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python:
          # When changing this list, be sure to check the [gh] list in
          # tox.ini so that tox will run properly.
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""${{ matrix.python }}""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Run tox for ${{ matrix.python }}""
        run: |
          python -m tox
          python -m coverage debug data

      - name: ""Upload coverage data""
        uses: actions/upload-artifact@v2
        with:
          name: covdata
          path: .coverage.*

  combine:
    name: ""Combine and report coverage""
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""
        with:
          fetch-depth: ""0""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""3.8""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Download coverage data""
        uses: actions/download-artifact@v2
        with:
          name: covdata

      - name: ""Combine and report""
        run: |
          python -m coverage combine
          python -m coverage report -m
",,,,,,Python
479,https://github.com/alanhamlett/readtime,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./readtime --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
",,,,,,Python
480,https://github.com/missial/hikvision-client,"name: Publish Python 🐍 distributions 📦 to PyPI

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
481,https://github.com/aarongarrett/inspyred,"name: Continuous builds

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
      fail-fast: false

    steps:

    - uses: actions/checkout@v3
    - name: Set up Python  ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install tox tox-gh-actions

    - name: List packages so far
      run: |
        pip list

    - name: Run tests
      run: |
          tox

    - name: Run example tests
      run: |
          pip install -r ./requirements_dev.txt
          pip install .
          # uses pp, which is not available for py3
          # python3 ./tests/evaluator_tests.py
          python3 ./tests/example_tests.py
          python3 ./tests/observer_tests.py
          # intermittently fails
          python3 ./tests/operator_tests.py || exit 0
          python3 ./tests/supplemental_tests.py
",,,,,,Python
482,https://github.com/xilopaint/alfred-pdf-tools,"# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: macos-latest-xlarge

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.11
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10.11""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint bandit
    - name: Lint with Pylint
      run: |
        pylint $(git ls-files '*.py')
    - name: Lint with Bandit
      run: |
        bandit -c .bandit src/alfred_pdf_tools.py src/workflow/*.py tests/*.py
    - name: Test with unittest
      run: |
        python -m unittest discover tests
",,,,,,Python
483,https://github.com/dbrgn/drf-dynamic-fields,"on:
  push:
    branches:
      - master
  pull_request:

name: CI

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deps:
          - { python: '3.7', django: '~=2.2.0', drf: '~=3.10.0' }
          - { python: '3.7', django: '~=3.2.0', drf: '~=3.11.0' }
          - { python: '3.8', django: '~=3.2.0', drf: '~=3.12.0' }
          - { python: '3.10', django: '~=3.2.0', drf: '~=3.12.0' }
          - { python: '3.9', django: '~=4.0.0', drf: '~=3.13.0' }
          - { python: '3.10', django: '~=4.0.0', drf: '~=3.13.0' }
      fail-fast: false
    name: Python ${{ matrix.deps.python }} / Django ${{ matrix.deps.django }} / DRF ${{ matrix.deps.drf }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.deps.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.deps.python }}
      - name: Upgrade pip
        run: pip install -U pip
      - name: Install dependencies
        run: pip install ""django${{ matrix.deps.django }}"" ""djangorestframework${{ matrix.deps.drf }}""
      - name: Run tests
        run: python runtests.py

  check-formatting:
    runs-on: ubuntu-latest
    name: Check code formatting
    steps:
      - uses: actions/checkout@v2
      - name: Black Code Formatter
        uses: lgeiger/black-action@master
        with:
          args: ""drf_dynamic_fields tests runtests.py --check --diff""
",,,,,,Python
484,https://github.com/wecatch/app-turbo,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: app-turbo

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""2.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
          - python setup.py install
          - coverage run -m tests.runtests
",,,,,,Python
485,https://github.com/gawel/aiocron,"name: tox

on: [push, pull_request]

jobs:
  tox:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9, ""3.10"", ""3.11""]

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox and any other packages
        run: pip install tox
      - name: Run Tox
        run: tox -e py
",,,,,,Python
486,https://github.com/requests/requests-ntlm,"name: Test requests-ntlm
on:
  push:
    branches:
    - master
    paths-ignore:
    - LICENSE
    - README.rst

  pull_request:
    branches:
    - master
    paths-ignore:
    - LICENSE
    - README.rst

  release:
    types:
    - published

jobs:
  test:
    name: test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - python-version: '3.7'
        - python-version: '3.8'
        - python-version: '3.9'
        - python-version: '3.10'
        - python-version: '3.11'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run tests
      shell: bash
      run: |
        python -m pip install -U pip setuptools
        python -m pip install .
        python -m pip install -r requirements.txt

        python -m tests.test_server &

        python -m pytest \
            --ignore=tests/functional/test_functional.py \
            --ignore=tests/test_server.py \
            --cov requests_ntlm \
            --cov-report term-missing \
            tests

  publish:
    name: publish
    needs:
    - test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Installing baseline packages
      run: |
        echo ""Installing baseline pip packages""
        python -m pip install --upgrade pip setuptools wheel

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Capture Wheel and SDist
      uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: dist/*

    - name: Publish
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
487,https://github.com/runfalk/spans,"name: CI

on:
  # This avoids having duplicate builds for a pull request
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Check code formatting
        run: poetry run black --check spans tests
      - name: Check import ordering
        run: poetry run isort --check spans tests

  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10""]
        os: [""ubuntu-latest""]
    name: Pytest (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      # Remove the lock file unless we're using the stable version of Python.
      # This is required because older Python version require ""polyfills"" for
      # some libraries
      - name: Remove poetry.lock file
        run: rm poetry.lock
        if: ${{ matrix.python-version != '3.10' }}
      - name: Install dev dependencies
        run: poetry install
      - name: Run pytest
        run: poetry run pytest

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Build documentation
        run: |
          poetry run sphinx-build -b html doc doc-build
          touch doc-build/.nojekyll
      - name: Deploy
        uses: crazy-max/ghaction-github-pages@v3
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        with:
          allow_empty_commit: false
          build_dir: doc-build/
          author: Andreas Runfalk <andreas@runfalk.se>
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
      - docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Validate that version matches the tag
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        run: test ""$(poetry version --short)"" == ""${{ github.ref_name }}""
      - name: Build package
        run: poetry build
      - name: Deploy
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish
",,,,,,Python
488,https://github.com/google/importlab,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ['3.6','3.7','3.8', '3.9','3.10', '3.11-dev']
    steps:
    - uses: actions/checkout@v3
    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: pip install networkx>=2 pytype

    - name: Type-Check
      if: matrix.python-version != '3.11-dev'
      run: pytype -j auto

    - name: Run Tests
      run: ./tests/run_all.sh
",,,,,,Python
489,https://github.com/kstaats/karoo_gp,"name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  
jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Run Karoo GP tests
        run: pytest -v
",,,,,,Python
490,https://github.com/ironfroggy/straight.plugin,"# GitHub Action that uses Black to reformat the Python code in an incoming pull request.
# If all Python code in the pull request is compliant with Black then this Action does nothing.
# Othewrwise, Black is run and its changes are committed back to the incoming pull request.
# https://github.com/cclauss/autoblack

name: autoblack
on: [pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install Black
        run: pip install black
      - name: Run black --check .
        run: black --check .
      - name: If needed, commit black changes to the pull request
        if: failure()
        run: |
          black .
          git config --global user.name 'autoblack'
          git config --global user.email 'cclauss@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am ""fixup: Format Python code with Black""
          git push
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Test with tox
        run: |
          VERSION=${{ matrix.python-version }}
          tox -e py${VERSION/./}",,,,,,Python
491,https://github.com/ninja-ide/ninja-ide,"name: Linux Tests

on: [push, pull_request]

jobs:
  build:
    name: Linux Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare Environment
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: PEP8
        run: |
          make pep8
      - name: unittest
        run: |
          make unittest
",,,,,,Python
492,https://github.com/ajcr/rolling,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
8,https://github.com/flori/json,"name: CI

on:
- push
- pull_request
- workflow_dispatch

jobs:
  ruby-versions:
    uses: ruby/actions/.github/workflows/ruby_versions.yml@master
    with:
      min_version: 2.3

  host:
    needs: ruby-versions
    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - ubuntu-22.04
        - macos-11
        - macos-12
        - windows-latest
        ruby: ${{ fromJson(needs.ruby-versions.outputs.versions) }}
        include:
        - { os: windows-latest , ruby: mswin     } # ruby/ruby windows CI
        - { os: ubuntu-latest  , ruby: jruby-9.1 } # Ruby 2.3
        - { os: ubuntu-latest  , ruby: jruby-9.2 } # Ruby 2.5
        - { os: ubuntu-latest  , ruby: jruby-9.3 } # Ruby 2.7
        exclude:
        - { os: windows-latest, ruby: truffleruby }
        - { os: windows-latest, ruby: truffleruby-head }
        - { os: windows-latest, ruby: jruby }
        - { os: windows-latest, ruby: jruby-head }

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          apt-get: ragel
          brew: ragel
          # only needed for Ruby 2.3
          mingw: ragel

      - run: bundle install

      - run: rake compile

      - run: rake test

      - run: rake build

      - run: gem install pkg/*.gem
        if: ${{ matrix.ruby != '3.2' }}
",,,,,,Ruby
780,https://github.com/banister/binding_of_caller,"name: Test

on:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 0 11,25 * *' # roughly every two weeks to run on new Ruby versions
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    name: ""Unit""
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby:
          - ""2.1""
          - ""2.2""
          - ""2.3""
          - ""2.4""
          - ""2.5""
          - ""2.6""
          - ""2.7""
          - ""3.0""

    steps:

    - uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true

    - name: Test
      run: bundle exec rspec -f doc

  system:
    name: ""System""
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ruby:
          - ""2""
          - ""3.0""
          - ""jruby""
          - ""truffleruby""
        exclude:
          # Windows releases of jruby and truffleruby have issues. Skip them for now.
          - { ruby: ""jruby"", os: ""windows-latest"" }
          - { ruby: ""truffleruby"", os: ""windows-latest"" }

    steps:

    - uses: actions/checkout@v2

    - name: Determine ruby version name
      id: ruby_version
      run: |
        if [[ $OS == 'windows-latest' && $RUBY == '3.0' ]]; then
          # Windows doesn't have 3.0, so run head there but nowhere else.
          echo ""::set-output name=release::head""
        else
          echo ""::set-output name=release::$RUBY""
        fi
      shell: bash
      env:
        OS: ${{ matrix.os }}
        RUBY: ${{ matrix.ruby }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ steps.ruby_version.outputs.release }}
        bundler-cache: true

    - name: Install gem
      run: bundle exec rake install

    - name: Create directory for gem test
      run: mkdir -p tmp/gem-test

    - name: Create test Gemfile
      run: echo ""gem 'binding_of_caller'"" > Gemfile
      working-directory: ./tmp/gem-test

    - name: Test gem load
      run: bundle exec ruby -e ""require 'binding_of_caller'""

    - name: Test gem functionality
      if: ${{ matrix.ruby != 'jruby' && matrix.ruby != 'truffleruby' }}
      run: bundle exec ruby -e ""require 'binding_of_caller'; binding.of_caller(0).eval('var = :hello')""
      env:
        JRUBY_OPTS: ""--dev"" # This will support JRuby once the gem is updated to support JRuby 9.x
",,,,,,Ruby
1951,https://github.com/msgpack/msgpack-ruby,"name: ci

on:
  pull_request:
    branches: '*'
  push:
    branches:
      - master
      - main
      - 'release-*'

jobs:
  mri:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['2.5', '2.6', '2.7', '3.0', '3.1', '3.2']
        include:
          - os: macos
            ruby: '2.5'
          - os: macos
            ruby: '3.2'
          - os: windows
            ruby: '2.5'
          - os: windows
            ruby: '3.2'
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake
        env:
          MSGPACK_DEBUG: ""true""

  valgrind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true # 'bundle install' and cache
      - run: sudo apt-get install -y valgrind
      - run: bundle exec rake spec:valgrind

  other:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['jruby-9.3', 'jruby-9.4', 'truffleruby']
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake spec
        env:
          MSGPACK_DEBUG: ""true""

  head-versions:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['ruby-head', 'jruby-head']
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake spec || echo ""failed, but ignore it""
        env:
          MSGPACK_DEBUG: ""true""
",,,,,,Ruby
2218,https://github.com/matteocrippa/awesome-swift,"name: PullRequest Check

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
      - run: gem install awesome_bot
      - run: pip install json-spec
      - run: awesome_bot --allow=429 contents.json -w AERecord,theswiftwebdeveloper,bluemix,swiftplayground,awesome-for-swift-cheatsheet
      - run: json validate --schema-file=.github/schema.json --document-file=contents.json",,,,,,Ruby
2130,https://github.com/couchbase/couchbase-ruby-client,"name: linters

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  rubocop:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Install dependencies
        run: bundle install
      - name: Run rubocop
        run: bundle exec rubocop

  clang_format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 2
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang-format
      - name: Run clang-format
        run: ./bin/check-clang-format

  clang_static_analyzer:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev cmake curl wget gnupg2
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo bash -c ""echo 'deb https://apt.llvm.org/focal/ llvm-toolchain-focal-11 main' >> /etc/apt/sources.list""
          sudo apt-get update -y
          sudo apt-get install -y clang-11 clang-tools-11
      - name: Run scan build
        run: ./bin/check-clang-static-analyzer
        env:
          CB_CC: /usr/bin/clang-11
          CB_CXX: /usr/bin/clang++-11
          CB_SCAN_BUILD: /usr/bin/scan-build-11
      - name: Upload scan-build report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: ext/cmake-build-report.tar.gz
",,,,,,Ruby
5778,https://github.com/ruby2d/ruby2d,"name: Ruby
on: [push, pull_request]
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        ruby: ['3.2']
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
      - if: runner.os == 'Linux'
        run: sudo apt install -y libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev
      - run: bundle install
      - run: git submodule update --init --recursive --depth 1
      - run: gem build ruby2d.gemspec --verbose
      - run: gem install ruby2d-*.gem --local --verbose
      - run: rspec
",,,,,,Ruby
7816,https://github.com/fnando/i18n-js,"---
name: ruby-tests

on:
  pull_request_target:
  push:
  workflow_dispatch:
    inputs: {}

jobs:
  build:
    name:
      Tests with Ruby ${{ matrix.ruby }}, Node ${{ matrix.node }} and ${{
      matrix.gemfile }}
    runs-on: ""ubuntu-latest""
    strategy:
      fail-fast: false
      matrix:
        ruby: [""2.7"", ""3.0"", ""3.1""]
        node: [""16"", ""18""]
        gemfile:
          - Gemfile
    if: |
      github.actor == 'dependabot[bot]' && github.event_name == 'pull_request_target' ||
      github.actor != 'dependabot[bot]'

    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: bundler-cache
        with:
          path: vendor/bundle
          key: >
            ${{ runner.os }}-${{ matrix.ruby }}-gems-${{
            hashFiles(matrix.gemfile) }}

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: vendor/bundle
          key: >
            ${{ runner.os }}-${{ matrix.node }}-npm-${{
            hashFiles('package.json') }}

      - name: Set up Node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node }}

      - name: Install npm dependencies
        run: |
          yarn install

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: Install gem dependencies
        env:
          BUNDLE_GEMFILE: ${{ matrix.gemfile }}
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle update --jobs 4 --retry 3

      - name: Run Tests
        env:
          BUNDLE_GEMFILE: ${{ matrix.gemfile }}
        run: |
          yarn compile
          bundle exec rake
",,,,,,Ruby
813,https://github.com/k0kubun/xremap,"name: cargo
on:
  push:
    branches:
      - master
      - feature*
    tags:
      - v*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  schedule:
    - cron: '00 15 * * *' # 7:00 PST (-8), 8:00 PDT (-7)
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
        feature: [x11, gnome, kde, sway, hypr, wlroots]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.arch }}-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
        with:
          key: ubuntu-latest-${{ matrix.arch }}-${{ matrix.feature }}

      - run: cargo install cross
      - name: cross build
        run: cross build --release --features ${{ matrix.feature }} --target=${{ matrix.arch }}-unknown-linux-musl

      - name: package
        run: zip ""xremap-linux-${{ matrix.arch }}-${{ matrix.feature }}.zip"" xremap
        working-directory: target/${{ matrix.arch }}-unknown-linux-musl/release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: xremap-${{ matrix.arch }}-${{ matrix.feature }}
          path: target/${{ matrix.arch }}-unknown-linux-musl/release/xremap-linux-${{ matrix.arch }}-${{ matrix.feature }}.zip

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo fmt
        run: cargo fmt -- --check

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - run: cargo test

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest

      # Release crate
      - name: cargo login
        run: cargo login ""$CARGO_TOKEN""
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - run: cargo publish

      # Fetch x86_64 binary
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-x11,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-gnome,   path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-kde,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-sway,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-hypr,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-wlroots, path: package/ } }

      # Fetch aarch64 binary
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-x11,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-gnome,   path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-kde,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-sway,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-hypr,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-wlroots, path: package/ } }

      # Release binary
      - name: Release
        run: |
          export VERSION=$(echo ""$GITHUB_REF"" | sed -e 's!refs/tags/!!')
          curl -L ""https://github.com/tcnksm/ghr/releases/download/${GHR_VERSION}/ghr_${GHR_VERSION}_linux_amd64.tar.gz"" | tar xvz
          ""ghr_${GHR_VERSION}_linux_amd64/ghr"" -u k0kubun -r xremap -replace -n ""$VERSION"" ""$VERSION"" package/
        env:
          GHR_VERSION: v0.14.0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Rust
861,https://github.com/lobaro/freertos-rust,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  freertos-rust:
    name: Build freertos-rust
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy
    #- name: Format
    # run: cargo fmt -- --check
    - name: Build
      run: cargo build --verbose
    #- name: Test
    #  run: cargo test
    #- name: Clippy
    #  run: cargo clippy -- -Dwarnings
  freertos-rust-stable:
    name: Build freertos-rust using stable
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}-stable
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build
      run: cargo build --verbose --no-default-features --features=sync,time,hooks,interrupt --package freertos-rust # Don't build the whole workspace because the examples use nightly features which will fail the build
  freertos-rust-examples:
    name: Build examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          #- example: win
          #  target: x86_64-pc-windows-gnu
          #- example: linux
          #  target: x86_64-unknown-linux-gnu
          #- example: stm32-cortex-m3
          #  target: thumbv7m-none-eabi
          - example: stm32-cortex-m4-blackpill
            target: thumbv7em-none-eabihf
          #- example: nrf9160
          #  target: thumbv8m.main-none-eabihf
    #env:
    #  RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}
    - name: Install cross deps
      run: |
        case ${{ matrix.target }} in
          ""x86_64-pc-windows-gnu"")
            sudo apt-get install -y gcc-mingw-w64
            ;;
          ""thumbv7m-none-eabi"" | ""thumbv7em-none-eabihf"" | ""thumbv8m.main-none-eabihf"")
            sudo apt-get install -y gcc-arm-none-eabi
            ;;
        esac
    - name: Build example
      run: cargo build --verbose --example ${{ matrix.example }} --target ${{ matrix.target }}
",,,,,,Rust
1025,https://github.com/aflplusplus/libafl,"name: build and test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  common:
    strategy:
      matrix:
          os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install mimetype
        if: runner.os == 'Linux'
        run: sudo apt-get install libfile-mimeinfo-perl
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: install mdbook
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: mdbook
      - name: install linkcheck
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: mdbook-linkcheck
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Check for binary blobs
        if: runner.os == 'Linux'
        run: ./scripts/check_for_blobs.sh
      - name: Build libafl debug
        run: cargo build -p libafl
      - name: Build the book
        run: cd docs && mdbook build
      - name: Test the book
        # TODO: fix books test fail with updated windows-rs
        if: runner.os != 'Windows'
        run: cd docs && mdbook test -L ../target/debug/deps
      - name: Run tests
        run: cargo test
      - name: Test libafl no_std
        run: cd libafl && cargo test --no-default-features
      - name: Test libafl_bolts no_std no_alloc
        run: cd libafl_bolts && cargo test --no-default-features
      - name: Test libafl_targets no_std
        run: cd libafl_targets && cargo test --no-default-features
     
  ubuntu:
    runs-on: ubuntu-22.04
    steps:
    - name: Remove Dotnet & Haskell
      run: rm -rf /usr/share/dotnet && rm -rf /opt/ghc
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install and cache deps
      uses: awalsh128/cache-apt-pkgs-action@v1.1.0
      with:
        packages: llvm-15 llvm-15-dev clang-15 ninja-build clang-format-13 shellcheck libgtk-3-dev gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libslirp-dev libz3-dev
    - name: get clang version
      run: command -v llvm-config-15 && clang-15 -v
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --component miri --allow-downgrade
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2

    # ---- format check ----
    # pcguard edges and pcguard hitcounts are not compatible and we need to build them seperately
    - name: Check pcguard edges
      run: cargo check --features=sancov_pcguard_edges
    - name: Format
      run: cargo fmt -- --check
    - name: Cleanup
      run: cargo clean
    - name: Run clang-format style check for C/C++ programs.
      run: clang-format-13 -n -Werror --style=file $(find . -type f \( -name '*.cpp' -o -iname '*.hpp' -o -name '*.cc' -o -name '*.cxx' -o -name '*.cc' -o -name '*.h' \) | grep -v '/target/' | grep -v 'libpng-1\.6\.37' | grep -v 'stb_image\.h' | grep -v 'dlmalloc\.c' | grep -v 'QEMU-Nyx')
    - name: run shellcheck
      run: shellcheck ./scripts/*.sh
    - name: Run clippy
      run: ./scripts/clippy.sh
      
    # ---- doc check ----
    - name: Build Docs
      run: RUSTFLAGS=""--cfg docsrs"" cargo +nightly doc --all-features
    - name: Test Docs
      run: RUSTFLAGS=""--cfg docsrs"" cargo +nightly test --doc --all-features
    # ---- build normal and examples ----
    - name: Run a normal build
      run: cargo build --verbose
    - name: Build examples
      run: cargo build --examples --verbose
    
    # --- miri undefined behavior test --
    - name: Run miri tests
      run: RUST_BACKTRACE=1 MIRIFLAGS=""-Zmiri-disable-isolation"" cargo +nightly miri test

    # Clean up files to save up disk space
    - name: Cleanup
      run: cargo clean
      
    # --- test embedding the libafl_libfuzzer_runtime library
    # Fix me plz
    # - name: Test Build libafl_libfuzzer with embed
    #  run: cargo +nightly test --features=embed-runtime --manifest-path libafl_libfuzzer/Cargo.toml

  ubuntu-check:
    runs-on: ubuntu-22.04
    steps:
    - name: Remove Dotnet & Haskell
      run: rm -rf /usr/share/dotnet && rm -rf /opt/ghc
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install and cache deps
      uses: awalsh128/cache-apt-pkgs-action@v1.1.0
      with:
        packages: llvm-15 llvm-15-dev clang-15 ninja-build clang-format-13 shellcheck libgtk-3-dev gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libslirp-dev libz3-dev
    - name: get clang version
      run: command -v llvm-config-15 && clang-15 -v
    - name: Install cargo-hack
      run: curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
    - name: Add nightly
      run: rustup toolchain install nightly --allow-downgrade
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2

    # ---- build and feature check ----
    # cargo-hack's --feature-powerset would be nice here but libafl has a too many knobs
    - name: Check each feature
      # Skipping `python` as it has to be built with the `maturin` tool
      # `agpl`, `nautilus` require nightly
      # `sancov_pcguard_edges` is tested seperately
      run: LLVM_CONFIG=llvm-config-15 cargo hack check --each-feature --clean-per-run --exclude-features=prelude,agpl,nautilus,python,sancov_pcguard_edges,arm,aarch64,i386,be,systemmode --no-dev-deps
    - name: Check nightly features
      run: cargo +nightly check --features=agpl && cargo +nightly check --features=nautilus

  ubuntu-concolic:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Install smoke test deps
      run: sudo ./libafl_concolic/test/smoke_test_ubuntu_deps.sh 
    - name: Run smoke test
      run: ./libafl_concolic/test/smoke_test.sh 

  bindings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install deps
      run: sudo apt-get install -y llvm-15 llvm-15-dev clang-15 ninja-build python3-dev python3-pip python3-venv libz3-dev
    - name: Install maturin
      run: python3 -m pip install maturin
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Run a maturin build
      run: export LLVM_CONFIG=llvm-config-15 && cd ./bindings/pylibafl && python3 -m venv .env && . .env/bin/activate && pip install --upgrade --force-reinstall . && ./test.sh
    - name: Run python test
      run: . ./bindings/pylibafl/.env/bin/activate && cd ./fuzzers/baby_fuzzer && python3 baby_fuzzer.py 2>&1 | grep ""Bye""

  fuzzers:
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove Dotnet (macOS)
      if: runner.os == 'macOS'
      run: rm -rf /usr/local/bin/dotnet
    - name: Free Disk Space (Ubuntu)
      if: runner.os == 'Linux'
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to ""true"" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # ""false"" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: false
        docker-images: true
        swap-storage: true
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --allow-downgrade
    - name: Add no_std toolchain
      run: rustup toolchain install nightly-x86_64-unknown-linux-gnu ; rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Install cxxbridge
      if: runner.os == 'macOS'
      run: cargo install cxxbridge-cmd
    - name: Install python (macOS)
      # Removing macOS things already installed in CI against failed linking
      if: runner.os == 'macOS'
      run: rm /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc3* /usr/local/bin/python3*; brew install --force-bottle --overwrite python
    - name: Remove obsolete llvm (macOS)
      if: runner.os == 'macOS'
      run: brew remove --force llvm clang
    - name: Remove obsolete llvm (Linux)
      if: runner.os == 'Linux'
      run: sudo apt purge llvm* clang*
    - uses: lyricwulf/abc@v1
      with:  
        linux: llvm-15 llvm-15-dev clang-15 nasm ninja-build gcc-arm-linux-gnueabi g++-arm-linux-gnueabi gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-mipsel-linux-gnu g++-mipsel-linux-gnu gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-dev-i386-cross libc6-dev libc6-dev-i386 lib32gcc-11-dev lib32stdc++-11-dev libgtk-3-dev pax-utils libz3-dev
        # update bash for macos to support `declare -A` command`
        macos: llvm@15 libpng nasm coreutils z3 bash wget
    - name: Set clang version
      if: runner.os == 'Linux'
      run: sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
    - name: Set clang++ version
      if: runner.os == 'Linux'
      run: sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
    - name: pip install
      run: python3 -m pip install msgpack jinja2 find_libpython
    # Note that nproc needs to have coreutils installed on macOS, so the order of CI commands matters.
    - name: enable mult-thread for `make`
      run: export MAKEFLAGS=""-j$(expr $(nproc) \+ 1)""
    - name: install cargo-make
      uses: baptiste0928/cargo-install@v1.3.0
      with:
        crate: cargo-make
    - name: install wasm-pack
      uses: baptiste0928/cargo-install@v1.3.0
      with:
        crate: wasm-pack
    - name: install chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
    - uses: actions/checkout@v3
      with:
        submodules: true # recursively checkout submodules
        fetch-depth: 0 # to diff with origin/main
    - uses: Swatinem/rust-cache@v2
    - name: Symlink Headers
      if: runner.os == 'Linux'
      # We can't install gcc-multilib which would usually do this for us due to collisions with other packages
      run: sudo ln -s /usr/include/asm-generic /usr/include/asm
    - name: Build and run example fuzzers (Linux)
      if: runner.os == 'Linux'
      run: RUN_ON_CI=1 LLVM_CONFIG=llvm-config-15 ./scripts/test_all_fuzzers.sh
    - name: Build and run example fuzzers (macOS)
      if: runner.os == 'macOS' # use bash v4
      run: /usr/local/bin/bash -c 'RUN_ON_CI=1 ./scripts/test_all_fuzzers.sh'

  executions-check:
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Fix python (macOS)
      if: runner.os == 'macOS'
      run: rm /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc3* /usr/local/bin/python3*
    - name: Remove obsolete llvm (macOS)
      if: runner.os == 'macOS'
      run: brew remove --force llvm clang
    - name: Remove obsolete llvm (Linux)
      if: runner.os == 'Linux'
      run: sudo apt purge llvm* clang*
    - uses: lyricwulf/abc@v1
      with: 
        linux: llvm-15 llvm-15-dev clang-15
        macos: python@3.11 llvm@15 bash coreutils
    - uses: actions/checkout@v3
      with:
        submodules: true # recursively checkout submodules
        fetch-depth: 0
    - uses: Swatinem/rust-cache@v2
    - name: Build and run libfuzzer_libpng (Linux)
      if: runner.os == 'Linux'
      run: ./scripts/executions-check.sh 
    - name: Build and run libfuzzer_libpng (macOS) 
      if: runner.os == 'macOS'
      run: /usr/local/bin/bash -c './scripts/executions-check.sh'

  nostd-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy, rust-src
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Add targets
      run: rustup target add arm-linux-androideabi && rustup target add thumbv6m-none-eabi
    - name: Build aarch64-unknown-none
      run: cd ./fuzzers/baby_no_std && cargo +nightly build -Zbuild-std=core,alloc --target aarch64-unknown-none -v --release && cd ../..
    - name: run x86_64 until panic!
      run: cd ./fuzzers/baby_no_std && cargo +nightly run || test $? -ne 0 || exit 1
    - name: no_std tests
      run: cd ./libafl && cargo test --no-default-features 
    - name: libafl armv6m-none-eabi (32 bit no_std) clippy
      run: cd ./libafl && cargo clippy --target thumbv6m-none-eabi --no-default-features
    - name: Build no_std no_alloc bolts
      run: cd ./libafl_bolts && cargo +nightly build -Zbuild-std=core --target aarch64-unknown-none --no-default-features -v --release && cd ../

  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build docker
      run: docker build -t libafl .

  windows:
    runs-on: windows-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Windows Build
      run: cargo build --verbose
    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
    - name: Build docs
      run: cargo doc
    - name: Set LIBCLANG_PATH
      run: echo ""LIBCLANG_PATH=$((gcm clang).source -replace ""clang.exe"")"" >> $env:GITHUB_ENV
    - name: install cargo-make
      run: cargo install --force cargo-make
    - uses: ilammy/msvc-dev-cmd@v1
    - name: install cxx bridge
      run: cargo install cxxbridge-cmd
    - name: Build fuzzers/libfuzzer_stb_image 
      run: cd fuzzers/libfuzzer_stb_image && cargo build --release
    - name: Build fuzzers/frida_libpng
      run: cd fuzzers/frida_libpng/ && cargo make test
    - name: Build fuzzers/frida_gdiplus
      run: cd fuzzers/frida_gdiplus/ && cargo make test
    - name: Build fuzzers/tinyinst_simple
      run: cd fuzzers/tinyinst_simple/ && cargo make test
      
  macos:
    runs-on: macOS-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --allow-downgrade
    - name: Install deps
      run: brew install z3 gtk+3
    - name: Install cxxbridge
      run: cargo install cxxbridge-cmd
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: MacOS Build
      run: cargo build --verbose
    - name: Run clippy
      run: ./scripts/clippy.sh
    - name: Increase map sizes
      run: ./scripts/shmem_limits_macos.sh
    - name: Run Tests
      run: cargo test

  other_targets:
    runs-on: macOS-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
    - name: install ios
      run: rustup target add aarch64-apple-ios
    - name: install android
      run: rustup target add aarch64-linux-android
    - name: install cargo ndk
      run: cargo install cargo-ndk
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Build iOS
      run: cargo build --target aarch64-apple-ios && cd libafl_frida && cargo build --target aarch64-apple-ios && cd ..
    - name: Build Android
      run: cargo ndk -t arm64-v8a build --release 
    #run: cargo build --target aarch64-linux-android
    # TODO: Figure out how to properly build stuff with clang
    #- name: Add clang path to $PATH env
    #  if: runner.os == 'Windows'
    #  run: echo ""C:\msys64\mingw64\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
    #- name: Try if clang works
    #  run: clang -v
    #- name: Windows Test
    #  run: C:\Rust\.cargo\bin\cargo.exe test --verbose

  freebsd:
    runs-on: ubuntu-22.04
    name: Simple build in FreeBSD
    steps:
    - uses: actions/checkout@v3
    - name: Test in FreeBSD
      id: test
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        sync: rsync
        copyback: false
        mem: 2048
        release: 13.2
        prepare: |
          pkg install -y curl bash sudo llvm16
          curl https://sh.rustup.rs -sSf | sh -s -- -y

        run: |
          freebsd-version
          . ""$HOME/.cargo/env""
          rustup toolchain install nightly
          export LLVM_CONFIG=/usr/local/bin/llvm-config16
          pwd
          ls -lah
          echo ""local/bin""
          ls -lah /usr/local/bin/
          which llvm-config
          chmod +x ./scripts/clippy.sh
          bash ./scripts/shmem_limits_fbsd.sh
          bash ./scripts/clippy.sh
          cargo test
",,,,,,Rust
1236,https://github.com/dyc3/steamguard-cli,"name: Lint, Build, Test

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - run: rustup component add clippy rustfmt
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.5.0
      - name: Check format
        run: cargo fmt --all -- --check
      - name: Check
        run: cargo check --verbose --all-targets --all-features
      - name: Clippy
        run: cargo clippy --workspace --no-deps --all-features --all-targets -- -D warnings
      - name: Validate documentation
        run: cargo doc --workspace --no-deps --all-features
      - name: Run tests
        run: cargo test --verbose --all-features --all-targets --workspace
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, x86_64-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.5.0
        with:
          prefix-key: v0-rust-${{ matrix.target }}
      - name: Install Cross
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cross
      - name: Check
        run: cross check --verbose --all-targets --all-features --target ${{ matrix.target }}
",,,,,,Rust
1815,https://github.com/rust-lang/flate2-rs,"name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # I don't really understand the build matrix here...
        build: [stable, beta, nightly, macos, windows, mingw]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-2022
            rust: stable
          - build: mingw
            os: windows-2022
            rust: stable-x86_64-gnu
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      shell: bash
    - run: cargo build
    - run: rustdoc --test README.md -L target/debug/deps --extern flate2=target/debug/libflate2.rlib --edition=2018
    - run: cargo test
    - run: cargo test --features zlib
    - run: cargo test --features zlib --no-default-features
    - run: cargo test --features zlib-default --no-default-features
    - run: cargo test --features zlib-ng-compat --no-default-features
      if: matrix.build != 'mingw'
    - run: cargo test --features zlib-ng --no-default-features
      if: matrix.build != 'mingw'
    - run: cargo test --features cloudflare_zlib --no-default-features
      if: matrix.build != 'mingw'
    - run: |
        if ! cargo check --no-default-features 2>&1 | grep ""You need to choose""; then 
          echo ""expected message stating a zlib backend must be chosen""
          exit 1
        fi
      if: matrix.build == 'stable' 

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check

  wasm:
    name: WebAssembly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [wasm32-unknown-unknown, wasm32-wasi]
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup target add ${{ matrix.target }}
    - run: cargo build --target ${{ matrix.target }}
",,,,,,Rust
954,https://github.com/cdown/tzupdate,"jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - run: cargo build

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - run: cargo test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
      - run: cargo clippy -- -D warnings

on:
  push:
  pull_request:
  workflow_dispatch:
",,,,,,Rust
1671,https://github.com/stacked-git/stgit,"name: CI

on:
  push:
    branches: [ '*' ]
    tags: [ '*' ]
  pull_request:
  schedule:
  # Every Sunday at 1:30
  - cron: '30 1 * * 0'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: i686-unknown-linux-musl,x86_64-unknown-linux-musl,aarch64-unknown-linux-musl
        components: clippy, rustfmt
    - name: Build
      run: |
        cargo --locked build --profile release
    - name: Install Test Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install quilt gnupg2 libio-pty-perl
    - name: Test
      env:
        STG_PROVE_OPTS: ""--jobs=2""
        STG_TEST_OPTS: ""--verbose-log""
        STG_PROFILE: ""release""
      run: |
        timeout 900s make -C t prove
    - name: Show Failures
      if: ${{ failure() }}
      run: |
        make -C t show-failure-results
    - name: Install Doc Dependencies
      run: |
        sudo apt-get install asciidoc asciidoctor docbook-xsl-ns xmlto
    - name: Build Docs Asciidoc
      run: |
        make -j2 doc
    - name: Build Docs Asciidoctor
      env:
        USE_ASCIIDOCTOR: ""1""
      run: |
        make -j2 doc
    - name: Install HTML Docs
      env:
        USE_ASCIIDOCTOR: ""1""
      run: |
        make -j2 htmldir=""$GITHUB_WORKSPACE""/stgit-html install-html
    - name: Upload HTML Docs
      uses: actions/upload-artifact@v3
      with:
        name: html-doc
        path: ${{ github.workspace }}/stgit-html
    - name: Install cargo-deb
      uses: baptiste0928/cargo-install@v2
      with:
        crate: cargo-deb
    - name: Install cargo-generate-rpm
      uses: baptiste0928/cargo-install@v2
      with:
        crate: cargo-generate-rpm
        version: ""^0.13.0""
    - name: Install aarch64 Dependencies
      run: |
        sudo apt-get install gcc-aarch64-linux-gnu
    - name: Static Build x86_64
      run: |
        make build-static-x86_64
    - name: Static Build i686
      run: |
        make build-static-i686
    - name: Build  Build aarch64
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ""aarch64-linux-gnu-gcc""
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_STRIP: ""aarch64-linux-gnu-strip""
      run: |
        make build-static-aarch64
    - name: Build Packages
      env:
        USE_ASCIIDOCTOR: ""1""
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ""aarch64-linux-gnu-gcc""
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_STRIP: ""aarch64-linux-gnu-strip""
      run: |
        make packages
    - name: Upload Packages
      uses: actions/upload-artifact@v3
      with:
        name: stgit-packages
        path: target/pkg/*

  build-and-test:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            profile: dev
            toolchain: stable
          - os: ubuntu-latest
            profile: dev
            toolchain: nightly
          - os: macos-latest
            profile: dev
            toolchain: stable
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.toolchain }}
    - name: Build
      run: |
        cargo --locked build --profile ${{ matrix.profile }}
    - name: Install Test Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install quilt gnupg2 libio-pty-perl
    - name: Install Test Dependencies (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # coreutils provides the `timeout` command used to wrap `make` below.
        # gnu-sed is needed by some tests (e.g. t3400-pick.sh).
        brew install coreutils cpanminus gnu-sed
        echo ""$(brew --prefix)/opt/gnu-sed/libexec/gnubin"" >> $GITHUB_PATH
        echo ""$(brew --prefix)/opt/coreutils/libexec/gnubin"" >> $GITHUB_PATH
        sudo cpanm IO::Pty
    - name: Test
      env:
        STG_PROVE_OPTS: ""--jobs=2""
        STG_TEST_OPTS: ""--verbose-log""
        STG_PROFILE: ${{ matrix.profile }}
      run: |
        timeout 900s make -C t prove
    - name: Show Failures
      if: ${{ failure() }}
      run: |
        make -C t show-failure-results

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Run Unit Tests
      run: |
        cargo --locked test

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: clippy
    - name: Clippy Checks
      run: |
        cargo --locked clippy -- --deny warnings

  rustfmt:
    name: Format Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: |
        cargo --locked fmt --all --check

  api-docs:
    name: API Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Build docs
      run: |
        cargo rustdoc -- --deny warnings

  windows-build:
    name: Windows Build
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Build
      run: |
        cargo --locked build --profile release
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: diffutils make
        path-type: inherit
    - name: Test
      shell: msys2 {0}
      env:
        STG_PROVE_OPTS: ""--jobs=2""
        STG_TEST_OPTS: ""--verbose-log""
        STG_PROFILE: ""release""
      run: |
        timeout 900s make -C t prove
    - name: Show Failures
      if: ${{ failure() }}
      shell: msys2 {0}
      run: |
        make -C t show-failure-results
    - name: Install Wix Toolset v4
      run: |
        dotnet tool install --global wix --version 4.0.0
    - name: Install Wix UI Extension
      run: |
        wix extension add -g WixToolset.UI.wixext
    - name: Build MSI Installer
      shell: msys2 {0}
      run: |
        make -C contrib/wix
    - name: Upload MSI Package
      uses: actions/upload-artifact@v3
      with:
        name: stgit-msi-package
        path: contrib/wix/stgit-*.msi
",,,,,,Rust
2168,https://github.com/rust-lang/rust-bindgen,"name: bindgen

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  rustfmt-clippy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # TODO: Should ideally be stable, but we use some nightly-only
          # features.
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --tests

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install msrv for lib
        uses: dtolnay/rust-toolchain@master
        with:
          # MSRV below is documented in Cargo.toml and README.md, please update those if you
          # change this.
          toolchain: 1.60.0

      - name: Test lib with msrv
        run: cargo +1.60.0 test --package bindgen

      - name: Install msrv for cli
        uses: dtolnay/rust-toolchain@master
        with:
          # MSRV below is documented in Cargo.toml and README.md, please update those if you
          # change this.
          toolchain: 1.64.0

      - name: Test cli with msrv
        run: cargo +1.64.0 build --package bindgen-cli

  minimal:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Check without default features 
        run: cargo check -p bindgen --no-default-features --features=runtime 

  docs:
    runs-on: ubuntu-latest
    env:
      RUSTDOCFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Generate documentation for `bindgen` 
        run: cargo doc --document-private-items --no-deps -p bindgen 

      - name: Generate documentation for `bindgen-cli` 
        run: cargo doc --document-private-items --no-deps -p bindgen-cli

  quickchecking:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # TODO: Actually run quickchecks once `bindgen` is reliable enough.
      - name: Build quickcheck tests
        run: cd bindgen-tests/tests/quickchecking && cargo test

  test-expectations:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Test expectations
        run: cd bindgen-tests/tests/expectations && cargo test

  test:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        target:
          - debian: null
            cross: null
            rust: null
        llvm_version: [""5.0"", ""9.0""]
        main_tests: [1]
        release_build: [0, 1]
        no_default_features: [0, 1]
        # FIXME: There are no pre-built static libclang libraries, so the
        # `static` feature is not testable atm.
        feature_runtime: [0, 1]
        feature_extra_asserts: [0]

        include:
          # Test with extra asserts + docs just with latest llvm versions to
          # prevent explosion
          - os: ubuntu-latest
            llvm_version: ""9.0""
            release_build: 0
            no_default_features: 0
            feature_extra_asserts: 1

          # FIXME: Seems installing multiarch packages fails:
          #
          #   https://github.com/rust-lang/rust-bindgen/pull/2037/checks?check_run_id=2441799333
          #
          # - os: ubuntu-latest
          #   target:
          #     debian: arm64
          #     cross: aarch64-linux-gnu
          #     rust: aarch64-unknown-linux-gnu
          #   llvm_version: ""9.0""
          #   main_tests: 0
          #   release_build: 0
          #   feature_extra_asserts: 0

          # Ensure stuff works on macos too
          - os: macos-latest
            llvm_version: ""9.0""
            release_build: 0
            no_default_features: 0
            feature_extra_asserts: 0
    steps:
      - uses: actions/checkout@v3

      - name: Install multiarch packages
        if: matrix.target.debian
        run: |
          sudo apt-get install binfmt-support qemu-user-static gcc-${{matrix.target.cross}} g++-${{matrix.target.cross}}
          source /etc/lsb-release
          sudo tee /etc/apt/sources.list <<EOF >/dev/null
          deb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME main
          deb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-updates main
          deb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-backports main
          deb [arch=${{matrix.target.debian}}] http://ports.ubuntu.com/ubuntu-ports/ $DISTRIB_CODENAME-security main
          EOF
          sudo dpkg --add-architecture ${{matrix.target.debian}}
          sudo apt-get update
          sudo apt-get install libc6:${{matrix.target.debian}} libstdc++6:${{matrix.target.debian}}

      - name: Install stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{matrix.target.rust}}
          override: true
      - name: Install libtinfo
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install libtinfo5
      - name: Run all the tests
        env:
          GITHUB_ACTIONS_OS: ${{matrix.os}}
          RUST_CROSS_COMPILER: ${{matrix.target.cross}}
          RUST_TARGET: ${{matrix.target.rust}}
          LLVM_VERSION: ${{matrix.llvm_version}}
          BINDGEN_MAIN_TESTS: ${{matrix.main_tests}}
          BINDGEN_RELEASE_BUILD: ${{matrix.release_build}}
          BINDGEN_FEATURE_RUNTIME: ${{matrix.feature_runtime}}
          BINDGEN_FEATURE_EXTRA_ASSERTS: ${{matrix.feature_extra_asserts}}
          BINDGEN_NO_DEFAULT_FEATURES: ${{matrix.no_default_features}}
        run: ./ci/test.sh

  check-cfg:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v3
      
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      
      - name: Check cfg
        run: cargo check -Z unstable-options -Z check-cfg

  test-book:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # NOTE(emilio): Change deploy-book as well if you change this.
      - name: Test book
        run: |
          curl -L https://github.com/rust-lang/mdBook/releases/download/v0.4.5/mdbook-v0.4.5-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./mdbook build book
          ./mdbook test book
",,,,,,Rust
2468,https://github.com/scille/parsec-cloud,"name: CI Rust

on:
  workflow_call:
    inputs:
      run-wasm-tests:
        description: Run wasm test
        required: true
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      run-wasm-tests:
        description: Run wasm test
        required: true
        default: false
        type: boolean

# We set `concurrency` to prevent having this workflow being run on code that is not up-to-date on a PR (a user make multiple push in a quick manner).
# But on the main branch, we don't want that behavior.
# Having the workflow run on each merge commit is something we would like, that could help us where a regression was made and missed by previous checks.
#
# For that we use `head_ref` that is only defined on `pull-request` and fallback to `run_id` (this is a counter, so it's value is unique between workflow call).
concurrency:
  group: ci-rust-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_CI_FLAGS: --locked --profile ci-rust
  CARGO_NEXTEST_CI_FLAGS: --locked --cargo-profile ci-rust
  WINFSP_VERSION: 2.0.23075
  WINFSP_TEST_EXE: C:/Program Files (x86)/WinFsp/bin/winfsp-tests-x64.exe

permissions:
  contents: read
  packages: read

jobs:
  # Cannot factorize the jobs with a matrix since we use a service container that is
  # only available on linux (see https://github.com/orgs/community/discussions/25578)
  test-rust-linux:
    name: ""🐧 Linux: 🦀 Rust tests""
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 30
    runs-on: ubuntu-20.04
    # Testbed server comes as a Docker image, so it will eventually goes out of sync
    # with the tests (typically a new API is introduced in the Parsec server, or a new
    # testbed template is introduced).
    # In such case, the container url should be updated from the, see:
    # https://github.com/Scille/parsec-cloud/pkgs/container/parsec-cloud%2Fparsec-testbed-server
    env:
      TESTBED_SERVER: http://localhost:6777
    services:
      parsec-testbed-server:
        image: ghcr.io/scille/parsec-cloud/parsec-testbed-server:v2.16.0-a.0-dev.2023-11-04-sha.91145b3
        ports:
          - 6777:6777
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin v4.1.1
        timeout-minutes: 5

      - uses: actions-rust-lang/setup-rust-toolchain@f3c84ee10bf5a86e7a5d607d487bf17d57670965 # pin v1.5.0
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 10

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # pin v2.7.1
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not across PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5

      # Install fuse
      - name: Install fuse
        shell: bash
        run: |
          until sudo apt-get -y install fuse3 libfuse3-dev; do
            echo ""Fail to install APT package retrying ..."";
          done
        timeout-minutes: 5

      # Install cargo nextest command
      - uses: taiki-e/install-action@ccc14bdc8d34cddf54e4f9fb2da0c208427207a3 # pin v2.21.17
        with:
          tool: nextest@0.9.54, wasm-pack@0.11.0, cargo-deny@0.14.3

      - name: Categorize workspace crates
        id: crates
        run: |
          (
            for type in agnostic platform bindings; do
              echo -n ""$type="" && python misc/libparsec_crates_flags.py $type
            done
          ) | tee -a $GITHUB_OUTPUT
        timeout-minutes: 2

      - name: Test agnostic rust codebase
        run: cargo nextest run ${{ env.CARGO_NEXTEST_CI_FLAGS }} ${{ steps.crates.outputs.agnostic }}
        env:
          RUST_LOG: debug
        timeout-minutes: 10

      # By default `libparsec_crypto` uses RustCrypto, so here we test the sodiumoxide
      # implementation and it compatibility with the rest of the project
      - name: Test sodiumoxide rust crypto
        run: cargo nextest run ${{ env.CARGO_NEXTEST_CI_FLAGS }} --package libparsec_crypto --features use-sodiumoxide
        env:
          RUST_LOG: debug
        timeout-minutes: 10

      - name: Check agnostic & platform crates using sodium crypto features
        run: cargo check ${{ env.CARGO_CI_FLAGS }} ${{ steps.crates.outputs.agnostic }} ${{ steps.crates.outputs.platform }} --features use-sodiumoxide
        timeout-minutes: 10
        env:
          RUST_LOG: debug

      # Use sodiumoxide here given 1) it is composed of C code, so not totally
      # platform independant and 2) it is what is going to be used in release
      - name: Test platform crates using sodium crypto features (🐧 Linux specific)
        shell: bash
        run: cargo nextest run ${{ env.CARGO_NEXTEST_CI_FLAGS }} ${{ steps.crates.outputs.platform }} --features libparsec_crypto/use-sodiumoxide
        timeout-minutes: 30
        env:
          RUST_LOG: debug

      - name: Test platform-async on wasm
        if: inputs.run-wasm-tests
        run: wasm-pack test --headless --firefox libparsec/crates/platform_async
        timeout-minutes: 10

      # Clippy basically compile the project, hence it's faster to run it in
      # the test-rust-matrix job where compilation cache is reused !
      - uses: ./.github/actions/use-pre-commit
        with:
          extra-args: clippy --verbose
        timeout-minutes: 10

      - name: Check rust code format
        run: cargo fmt --check
        timeout-minutes: 2

      - name: Check restricted usage with cargo-deny
        run: |
          echo ""::add-matcher::.github/custom-problem-matchers/cargo-deny.json""
          # cargo-deny outputs the report on stderr and it needs to be redirected to stdout for the problem matcher to work.
          cargo deny --color=never check --hide-inclusion-graph --show-stats 2>&1
          echo ""::remove-matcher owner=cargo-deny::""
        timeout-minutes: 2

  test-rust-non-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 🍎 macOS
            os: macos-12
          - name: 🏁 Windows
            os: windows-2022
    name: ""${{ matrix.name }}: 🦀 Rust tests""
    # Just a fail-safe timeout, see the fine grain per-task timeout instead
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # pin v4.1.1
        timeout-minutes: 5

      - uses: actions-rust-lang/setup-rust-toolchain@f3c84ee10bf5a86e7a5d607d487bf17d57670965 # pin v1.5.0
        with:
          # We setup the cache by hand, see below
          cache: false
        timeout-minutes: 10

      - name: Retrieve Rust cache
        uses: Swatinem/rust-cache@3cf7f8cc28d1b4e7d01e3783be10a97d55d483c8 # pin v2.7.1
        with:
          # Cache is limited to 10Go (and cache is ~700mo per platform !). On top of that.
          # cache is only shared between master and the PRs (and not across PRs).
          # So we only save the cache on master build given it's the ones that are the
          # most likely to be reused.
          save-if: ${{ github.ref == 'refs/heads/master' }}
        timeout-minutes: 5

      # Building OpenSSL requires a perl interpreter.
      # The default one does not provide windows-style filesystem
      # paths so we have to switch to Strawberry.
      - name: Use strawberry perl
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
        timeout-minutes: 1

      - name: Install winfsp
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          set -eux
          choco install winfsp -y --version=${{ env.WINFSP_VERSION }}
          curl -L https://github.com/winfsp/winfsp/releases/download/v2.0/winfsp-tests-${{ env.WINFSP_VERSION }}.zip -o D:/a/_temp/winfsp-tests.zip
          unzip D:/a/_temp/winfsp-tests.zip -d D:/a/_temp/
          mv 'D:/a/_temp/winfsp-tests-x64.exe' 'C:/Program Files (x86)/WinFsp/bin/'

      # Install cargo nextest command
      - uses: taiki-e/install-action@ccc14bdc8d34cddf54e4f9fb2da0c208427207a3 # pin v2.21.17
        with:
          tool: nextest@0.9.54

      - name: Test Rust codebase (${{ matrix.name }} specific)
        shell: bash
        run: |
          set -ex
          CRATES=`python3 misc/libparsec_crates_flags.py platform`
          cargo nextest run ${{ env.CARGO_NEXTEST_CI_FLAGS }} $CRATES --features libparsec_crypto/use-sodiumoxide
          # By default `libparsec_crypto` uses RustCrypto, so here we test the sodiumoxide
          # implementation and it compatibility with the rest of the project
          cargo nextest run ${{ env.CARGO_NEXTEST_CI_FLAGS }} --package libparsec_crypto --features use-sodiumoxide
          NON_BINDINGS_CRATES=`python3 misc/libparsec_crates_flags.py agnostic platform`
          cargo check ${{ env.CARGO_CI_FLAGS }} $NON_BINDINGS_CRATES --features use-sodiumoxide
        timeout-minutes: 50 # It can be very slow if cache has missed
        env:
          RUST_LOG: debug
          TESTBED_SERVER: http://localhost:6777
",,,,,,Rust
5003,https://github.com/stencila/stencila,"# Workflow for running linting, tests, and other checks

name: Test

on:
  push:
    branches: [""main""]
  pull_request:
    branches: [""main""]

env:
  RUST_VERSION: '1.71.0'
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: '4096'
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy,rustfmt,llvm-tools

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
      - run: which chrome
      
      - name: Show disk usage
        run: df -h && du -hd1
        
      - name: Install dependencies
        run: make install

      - name: Run linting
        run: make lint

      - name: Run tests with coverage
        run: make cover

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true

      - name: Run accessibility checks
        run:	make a11y

      - name: Run dependency audits
        run: make audit

      - name: Run package publishing checks
        run: make pubcheck

      - name: Make generated files
        run: make generated

      - name: Pull branch before commit
        if: github.ref == 'refs/heads/main'
        run: git pull origin main

      - name: Commit generated files
        if: github.ref == 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: ""chore(*): Update generated files""

      - name: Show disk usage
        run: df -h && du -hd1
",,,,,,Rust
6125,https://github.com/buttplugio/buttplug,"name: Buttplug CI Build

on:
  push:
    branches:
      - dev
      - master

jobs:
  build-stable:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v2
    - name: Fix ~/.cargo directory permissions
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/
    - name: Update package list
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get -y update
    - name: Install required packages
      if: startsWith(matrix.os, 'ubuntu')
      run: sudo apt-get -y install libudev-dev libusb-1.0-0-dev libdbus-1-dev
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/cache_version') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/cache_version') }}
    - name: Rust toolchain fetch
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    - name: Formatting check
      continue-on-error: true
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check
    - name: Build Debug
      run: cargo build
    - name: Run tests
      run: cargo test
    # Only run doc gen on windows. It has the most code to build anyways, all other projects are a subset of it.
    - name: Run doc gen
      if: startsWith(matrix.os, 'windows')
      run: cargo doc --no-deps
#    - name: Build Release
#      run: cargo build --release
  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Fix ~/.cargo directory permissions
      run: sudo chown -R $(whoami):$(id -ng) ~/.cargo/
    - name: Update package list
      run: sudo apt-get -y update
    - name: Install required packages
      run: sudo apt-get -y install libudev-dev libusb-1.0-0-dev libdbus-1-dev
    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/cache_version') }}
    - name: Cache cargo build
      uses: actions/cache@v1
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('.github/workflows/cache_version') }}
    - name: Rust toolchain fetch
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    - name: WASM Toolchain fetch
      uses: jetli/wasm-pack-action@v0.4.0
      with:
        version: 'latest'
    - name: Build Dev
      run: wasm-pack build --dev --no-default-features --features wasm
      working-directory: ./buttplug",,,,,,Rust
6400,https://github.com/dominikwilkowski/cfonts,"name: Testing

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - 'released'
  pull_request:
    branches:
      - 'released'

jobs:
  # ---------------------------------| RUST |--------------------------------- #
  # ***********
  # RUST - linting
  # ***********
  lint-rust:
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./rust

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          args: --manifest-path ./rust/Cargo.toml

      - name: Run Makefile
        run: make

      - name: Tree files
        run: |
          sudo apt-get -y install tree & which tree
          tree -I ""node_modules*|.git*""

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path ./rust/Cargo.toml -- --check

      - name: Annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --manifest-path ./rust/Cargo.toml

      # disabled until https://github.com/actions-rs/audit-check/issues/194 is fixed
      # - name: Security audit
      #   uses: actions-rs/audit-check@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}

  # ***********
  # RUST - testing
  # ***********
  test-rust:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    env:
      OS: ${{ matrix.OS }}
    defaults:
      run:
        working-directory: ./rust

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Instal dependencies and build nodejs files
        run: cd ../nodejs && yarn && yarn build

      - name: Run Makefile
        run: make

      - name: Run build
        run: cargo build --release --verbose

      - name: Run cargo tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-fail-fast --manifest-path ./rust/Cargo.toml -- --nocapture

  # ---------------------------------| NODE |--------------------------------- #
  # ***********
  # NODEJS - testing
  # ***********
  test-nodejs:
    strategy:
      matrix:
        node: [ 12, 14, 16, 18 ]
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./nodejs

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo ""::set-output name=dir::$(yarn cache dir)""

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Node version
        run: node --version

      - name: npm version
        run: npm --version

      - name: Yarn version
        run: yarn --version

      - name: Yarn install dependencies
        run: yarn install --frozen-lockfile

      - name: Build files
        run: yarn build

      - name: Tree files
        run: npx tree-cli -l 5 --ignore ""node_modules/, .git/""

      - name: Yarn test
        run: yarn test

  # -------------------------------| COVERAGE |------------------------------- #
  # ***********
  # COVERAGE - nodejs
  # ***********
  coverage-nodejs:
    needs: test-nodejs
    strategy:
      matrix:
        node: [16]
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./nodejs

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo ""::set-output name=dir::$(yarn cache dir)""

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Yarn install dependencies
        run: yarn install --frozen-lockfile

      - name: Build files
        run: yarn build

      - name: Produce Coverage
        run: yarn jest --coverage

      - name: Print last few lines of lcov.info
        run: tail ./coverage/lcov.info

      - name: Upload to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./nodejs/coverage/lcov.info
          flag-name: nodejs
          parallel: true
          base-path: ./nodejs
        env:
          NODE_COVERALLS_DEBUG: 1

  # ***********
  # COVERAGE - rust
  # ***********
  coverage-rust:
    needs: test-rust
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./rust

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Instal dependencies and build nodejs files
        run: cd ../nodejs && yarn && yarn build

      - name: Run Makefile
        run: make

      - name: Install Rust
        run: rustup toolchain install stable --component llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Print last few lines of lcov.info
        run: tail ./lcov.info

      - name: Upload to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./rust/lcov.info
          flag-name: rust
          parallel: true
        env:
          NODE_COVERALLS_DEBUG: 1

  # ***********
  # COVERAGE - finalizing
  # ***********
  coverage-finish:
    needs: [coverage-nodejs, coverage-rust]
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Coveralls Parallel Build Finished
        uses: coverallsapp/github-action@v1.1.0
        with:
          github-token: ${{ secrets.github_token }}
          parallel-finished: true
        env:
          NODE_COVERALLS_DEBUG: 1
",,,,,,Rust
7538,https://github.com/iden3/circom,"name: Publish binaries
on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: circom
            asset_name: circom-linux-amd64
          - os: windows-latest
            artifact_name: circom.exe
            asset_name: circom-windows-amd64.exe
          - os: macos-latest
            artifact_name: circom
            asset_name: circom-macos-amd64

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Build
        run: cargo build --verbose --release

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: target/release/${{ matrix.artifact_name }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          asset_name: ${{ matrix.asset_name }}
",,,,,,Rust
7921,https://github.com/servo/mozjs,"name: Rust

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  merge_group:
    types: [checks_requested]
  schedule:
    # Runs at 03:30, every Saturday
    - cron: ""30 3 * * 6""

env:
  RUST_BACKTRACE: 1
  SHELL: /bin/bash
  CARGO_INCREMENTAL: 0

jobs:
  mac:
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        features: [""--features debugmozjs"", """"]
    env:
      RUSTC_WRAPPER: sccache
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: ""true""
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: brew install llvm yasm
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        run: |
          cargo build --verbose ${{ matrix.features }}
          cargo test --tests --examples --verbose ${{ matrix.features }}
  linux:
    env:
      RUSTC_WRAPPER: ""sccache""
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: ""true""
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features: [""--features debugmozjs"", """"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install deps
        run: |
          sudo apt install llvm -y
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        run: |
          cargo build --verbose ${{ matrix.features }}
          cargo test --tests --examples --verbose ${{ matrix.features }}
      - name: Check wrappers integrity
        # we generate wrappers only without debugmozjs
        if: ${{ matrix.features == '' }}
        run: |
          bash ./mozjs/src/generate_wrappers.sh
          git diff --quiet --exit-code

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        features: [""--features debugmozjs"", """"]
        target: [""x86_64-pc-windows-msvc"", ""aarch64-pc-windows-msvc""]
    env:
      LINKER: ""lld-link.exe""
      CC: ""clang-cl""
      CXX: ""clang-cl""
      MOZTOOLS_PATH: ""${{ github.workspace }}\\target\\dependencies\\moztools-4.0""
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: ""true""
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install deps
        run: |
          curl -SL ""https://github.com/servo/servo-build-deps/releases/download/msvc-deps/moztools-4.0.zip"" --create-dirs -o target/dependencies/moztools.zip
          cd target/dependencies && unzip -qo moztools.zip -d .
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build Windows
        shell: cmd
        run: |
          cargo build --verbose --target ${{ matrix.target }} ${{ matrix.features }}
      - name: Test Windows
        if: ${{ !contains(matrix.target, 'aarch64') }}
        shell: cmd
        run: |
          cargo test --tests --examples --verbose --target ${{ matrix.target }} ${{ matrix.features }}

  android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: armv7-linux-androideabi
      - name: Build
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          ./android-build cargo build --target=""armv7-linux-androideabi""

  linux-cross-compile:
    name: linux (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
    container: ghcr.io/servo/cross-${{ matrix.target }}:main
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - run: cargo test --tests --examples --target ${{ matrix.target }}

  integrity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Check formatting
        run: cargo fmt --check
      - name: Get mozjs
        run: |
          bash ./mozjs-sys/etc/get_mozjs.sh
      - name: Apply patch
        run: |
          python3 ./mozjs-sys/etc/update.py --no-commit mozjs.tar.xz
          # Run `git add` here to force CRLF converted into LF
          # so that we can check diff properly in next run
          git add --all mozjs
      - name: Check patch integrity
        working-directory: ./mozjs-sys
        # Because we've added files in previous run, we need to
        # check diff with `--staged`.
        run: |
          git diff --staged --no-ext-diff --quiet --exit-code

  build_result:
    name: Result
    runs-on: ubuntu-latest
    needs:
      [""android"", ""linux"", ""linux-cross-compile"", ""mac"", ""windows"", ""integrity""]
    if: ${{ always() }}
    steps:
      - name: Mark the job as successful
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: exit 0
      - name: Mark the job as unsuccessful
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
",,,,,,Rust
8219,https://github.com/danleh/wasabi,"name: CI
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always
jobs:
  wasabi_wasm:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install wabt && wasm-validate --version
      name: Install WABT
    - run: cargo --version; rustc --version; cargo clippy --version
      name: Rust version
    - run: cargo build
      working-directory: crates/wasabi_wasm/
    - run: cargo clippy
      working-directory: crates/wasabi_wasm/
    - run: cargo test -- --nocapture --test-threads=1 --color=always
      working-directory: crates/wasabi_wasm/
  wasabi:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - run: sudo apt install wabt && wasm-validate --version
      name: Install WABT
    - run: cargo --version; rustc --version; cargo clippy --version
      name: Rust version
    - run: cargo build
      working-directory: crates/wasabi/
    - run: cargo clippy
      working-directory: crates/wasabi/
    - run: cargo test -- --nocapture --test-threads=1 --color=always
      working-directory: crates/wasabi/
",,,,,,Rust
961,https://github.com/ofalk/libdnet,"name: cmake

'on':
    pull_request:
    push:
        branches:
          - master
          - develop
          - feature/**

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
          
jobs:
    build:
        runs-on: ubuntu-${{ matrix.ubuntu_version }}
        name: Ubuntu-${{ matrix.ubuntu_version }}
        strategy:
            fail-fast: false
            matrix:
                ubuntu_version: [22.04]
                shared: [ON, OFF]

        steps:
          - name: Checkout
            uses: actions/checkout@v3
            with:
                fetch-depth: 0


          - name: Install packages
            run: |
                sudo apt-get install -y gcc g++ cmake wget git


          - name: Configure
            run: cmake -DCMAKE_BUILD_TYPE=""${{env.BUILD_TYPE}}"" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -B ""${{github.workspace}}/build"" 

          - name: Build
            run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    MSVC:
      name: windows-${{ matrix.win_version }}
      runs-on: windows-${{ matrix.win_version }}
      strategy:
        fail-fast: false
        matrix:
          win_version: [2019, 2022]
          shared: [ON, OFF]

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
              fetch-depth: 0

        - name: Configure CMake
          run: cmake -DCMAKE_BUILD_TYPE=""${{env.BUILD_TYPE}}"" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -B ""${{github.workspace}}/build""

        - name: Build
          run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}",,,,,,Shell
1804,https://github.com/pl3xgaming/purpur,"name: Build
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - ""ver/**""

jobs:
  build:
    runs-on: ubuntu-latest
    if: ""!contains(github.event.commits[0].message, '[ci-skip]')""
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - uses: actions/setup-java@v3.6.0
        with:
          distribution: temurin
          java-version: 17
          cache: 'gradle'
      - name: Configure Git
        run: git config --global user.email ""no-reply@github.com"" && git config --global user.name ""Github Actions""
      - name: Apply Patches
        run: ./gradlew applyPatches --no-daemon --stacktrace
      - name: Build
        run: ./gradlew build --no-daemon --stacktrace
      - name: Rebuild on Failure
        if: ${{ failure() }}
        run: |
          ./gradlew clean cleanCache
          ./gradlew applyPatches --no-daemon --stacktrace 
          ./gradlew build --no-daemon --stacktrace
",,,,,,Shell
2031,https://github.com/webassembly/wasi-sdk,"name: CI

on:
  create:
    tags:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Native Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.cache/ccache
          # Bump the prefix number to evict all previous caches and
          # enforce a clean build, in the unlikely case that some
          # weird build error occur and ccache becomes a potential
          # suspect.
          key: 0-cache-ubuntu-latest-${{ github.run_id }}
          restore-keys: |
            0-cache-ubuntu-latest
        if: matrix.os == 'ubuntu-latest'
      - uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: 0-cache-macos-latest-${{ github.run_id }}
          restore-keys: |
            0-cache-macos-latest
        if: matrix.os == 'macos-latest'
      - name: Install wasmtime for tests
        run: curl -f -L --retry 5 https://wasmtime.dev/install.sh | bash -s -- --version v8.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # We can't use `--depth 1` here sadly because the GNU config
      # submodule is not pinned to a particular tag/branch. Please
      # bump depth (or even better, the submodule), in case of ""error:
      # Server does not allow request for unadvertised object"" in the
      # future.
      - run: git submodule update --init --depth 32 --jobs 3
      - name: Install ccache, ninja (macOS)
        run: brew install ccache ninja
        if: matrix.os == 'macos-latest'
      - name: Install ccache, ninja (Linux)
        run: sudo apt install ccache ninja-build
        if: matrix.os == 'ubuntu-latest'
      - name: Build
        run: NINJA_FLAGS=-v make package LLVM_CMAKE_FLAGS=-DLLVM_CCACHE_BUILD=ON
        shell: bash
      - name: Run the testsuite
        run: NINJA_FLAGS=-v make check RUNTIME=~/.wasmtime/bin/wasmtime
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: ${{ format( 'dist-{0}', matrix.os) }}
          path: dist

  winbuild:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            sys: clang64
            env: clang-x86_64
          - arch: x86
            sys: clang32
            env: clang-i686
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/AppData/Local/ccache
          key: 0-${{ format( 'cache-windows-latest-{0}', matrix.arch) }}-${{ github.run_id }}
          restore-keys: |
            0-${{ format( 'cache-windows-latest-{0}', matrix.arch) }}
      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            base-devel
            git
            mingw-w64-${{ matrix.env }}-ccache
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-ninja
            mingw-w64-${{ matrix.env }}-toolchain
          msystem: ${{ matrix.sys }}
          update: true
          release: false
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git submodule update --init --depth 32 --jobs 3
      - name: Build
        shell: msys2 {0}
        run: |
          make package LLVM_CMAKE_FLAGS=-DLLVM_CCACHE_BUILD=ON
          make check
      - name: Does it work sans msys2?
        run: |
          C:\wasi-sdk\bin\clang.exe --version
          C:\wasi-sdk\bin\llvm-ar.exe --version
          C:\wasi-sdk\bin\wasm-ld.exe --version
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: ${{ format( 'dist-windows-latest-{0}', matrix.arch) }}
          path: dist

  dockerbuild:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: 0-cache-ubuntu-bionic-${{ github.run_id }}
          restore-keys: |
            0-cache-ubuntu-bionic

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git submodule update --init --depth 32 --jobs 3

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha

      - name: Run docker_build script
        run: ./docker_build.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: dist-ubuntu-bionic
          path: dist

      - name: Build and push wasi-sdk docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
",,,,,,Shell
2765,https://github.com/laubonghaudoi/chinese_rime,"name: Regular update
on:
  push:
    branches:
      - master
  schedule:
    - cron: '30 10 * * 0'
jobs:
  regular_update:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x' 
          architecture: 'x64'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYaml
      - name: Update submodules
        run: |
          git submodule update --init --recursive
          cd ./script
          chmod +x ./update_submodules.sh
          ./update_submodules.sh
          cd ../
      - name: Update downloads
        run: |
          cd ./script
          chmod +x ./update_download.py
          ./update_download.py
          cd ../
      - name: commit
        run: |
          git config --global user.name ""github-actions[bot]""
          git config --global user.email ""41898282+github-actions[bot]@users.noreply.github.com""
          git add .
          if [ -n ""$(git status --porcelain)"" ]; then
            git commit -m ""Regular update""
            git push origin master
          fi
",,,,,,Shell
3512,https://github.com/grafana/grafana-plugin-examples,"name: integration tests
on:
  pull_request:
  schedule:
    - cron: ""0 11 * * *"" #once a day at 11 UTC
concurrency:
  group: integration-tests-${{ github.ref }}
  cancel-in-progress: true
jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      pluginDirs: ${{ steps.set-plugin-dirs.outputs.pluginDirs }}
      canaryVersion: ${{ steps.npm-canary-version.outputs.version }}
      canaryDockerTag: ${{ steps.docker-canary-tag.outputs.result }}
      latestVersion: ${{ steps.npm-latest-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup plugin dir variable
        id: set-plugin-dirs
        run: echo ""pluginDirs=$(find ./examples -type d -name ""src"" -not -path ""*/node_modules*"" -maxdepth 3 -exec test -e ""{}/plugin.json"" \; -print | sed ""s/\/src$//"" | jq -R -s -c 'split(""\n"")[:-1]')"" >> $GITHUB_OUTPUT
      - name: Setup NPM canary version variable
        id: npm-canary-version
        run: echo ""version=$(npm view @grafana/ui dist-tags.canary)"" >> $GITHUB_OUTPUT
      - name: Setup docker canary tag variable
        id: docker-canary-tag
        uses: actions/github-script@v6
        env:
          INPUT_NPM-TAG: ${{ steps.npm-canary-version.outputs.version }}
        with:
          result-encoding: string
          script: |
            const script = require('./.github/workflows/scripts/npm-to-docker-image.js');
            return await script({ core });
      - name: Setup NPM latest version variable
        id: npm-latest-version
        run: echo ""version=$(npm view @grafana/ui dist-tags.latest)"" >> $GITHUB_OUTPUT

  run-integration-tests:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pluginDir: ${{ fromJson(needs.setup-matrix.outputs.pluginDirs) }}
      fail-fast: false
    env:
      GF_AUTH_ANONYMOUS_ENABLED: ""true""
      GF_AUTH_ANONYMOUS_ORG_ROLE: ""Admin""
      GF_AUTH_BASIC_ENABLED: ""false""
      GF_DEFAULT_APP_MODE: ""development""
      GF_INSTALL_PLUGINS: ""marcusolsson-static-datasource""
    steps:
      - uses: actions/checkout@v3

      - name: Set the name of the plugin-example to be tested
        id: example-name
        run: |
          echo ""PLUGIN_NAME=$(basename ${{ matrix.pluginDir }})"" >> $GITHUB_OUTPUT

      - name: Setup node version
        uses: actions/setup-node@v3
        with:
          node-version: ""20""
          registry-url: ""https://registry.npmjs.org""
          cache: ""npm""

      - name: Install dependencies
        run: |
          npm ci
        working-directory: ${{ matrix.pluginDir }}

      - name: Run frontend tests
        run: |
          npm run test:ci
        working-directory: ${{ matrix.pluginDir }}

      - name: Build plugin frontend
        run: |
          npm run build
        working-directory: ${{ matrix.pluginDir }}

      - name: Check for backend Mage file
        id: backend-check
        run: |
          echo ""MAGEFILE_EXISTS=$(test -f ./Magefile.go && echo true || echo false)"" >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.pluginDir }}

      - uses: actions/setup-go@v4
        with:
          go-version: ""~1.20""
          check-latest: true
          cache-dependency-path: ${{ matrix.pluginDir }}/go.sum
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      - name: Test plugin backend
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: -v test
          workdir: ${{ matrix.pluginDir }}
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      - name: Build plugin backend
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: -v build:linux
          workdir: ${{ matrix.pluginDir }}
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      ## CANARY_VERSION has to use NPM as we only publish the packages on changes
      - name: Set environment vars for testing
        run: |
          echo ""PLUGIN_ID=$(cat src/plugin.json | jq -r '.id')"" >> $GITHUB_ENV
          echo ""EXPECTED_GRAFANA_VERSION=$(npx semver@latest $(cat src/plugin.json | jq -r '.dependencies.grafanaDependency') -c)"" >> $GITHUB_ENV
          echo ""CANARY_VERSION=${{ needs.setup-matrix.outputs.canaryVersion }}"" >> $GITHUB_ENV
          echo ""CANARY_DOCKER_TAG=${{ needs.setup-matrix.outputs.canaryDockerTag }}"" >> $GITHUB_ENV
          echo ""LATEST_STABLE_VERSION=${{ needs.setup-matrix.outputs.latestVersion }}"" >> $GITHUB_ENV
        working-directory: ${{ matrix.pluginDir }}

      - name: Has Integration Tests
        id: has-integration-tests
        continue-on-error: true
        run: |
          echo ""DIR=$(test -d ./cypress && echo true || echo false)"" >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.pluginDir }}

      ## If we're creating examples for new features that are only found in canary versions the grafanaDependency
      ## will be greater than any stable release of Grafana and so will not be available on docker.
      - name: Should run tests against expected and latest
        id: should-run-expected-latest-tests
        continue-on-error: true
        run: |
          npm exec --package semver-compare-cli --call 'semver-compare $LATEST_STABLE_VERSION ge $EXPECTED_GRAFANA_VERSION'
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Docker container using expected version of grafana
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: |
          docker run -d -p 3000:3000 --name $PLUGIN_ID -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana:$EXPECTED_GRAFANA_VERSION
        working-directory: ${{ matrix.pluginDir }}

      ## Expected Version Tests
      ## Runs the plugin tests against the minimum compatible version of Grafana defined in its plugin.json.
      # Only run if should-run-expected-latest-tests so we can build examples of new features without failing tests.
      - name: Start Integration tests using expected versions
        id: expected-version-tests
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        uses: nick-fields/retry@v2
        continue-on-error: true
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: error
          command: npm run e2e --prefix ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with expected versions
        uses: actions/upload-artifact@v3
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.expected-version-tests.outcome != 'success' && steps.should-run-expected-latest-tests.outcome == 'success'
        with:
          name: ${{steps.example-name.outputs.PLUGIN_NAME}}-expected-version-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3

      - name: Failing build due to test failures (expected versions)
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.expected-version-tests.outcome != 'success'  && steps.should-run-expected-latest-tests.outcome == 'success'
        run: exit 1

      - name: Stop and remove Docker container
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: |
          docker stop $PLUGIN_ID && docker rm $PLUGIN_ID
        working-directory: ${{ matrix.pluginDir }}

      # Latest Version Tests
      # Runs the plugin tests against the latest stable version of Grafana.
      # Only run if should-run-expected-latest-tests so we can build examples of new features without failing tests.
      - name: Install latest version of e2e libraries
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: |
          npm install @grafana/e2e-selectors@latest @grafana/e2e@latest
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Docker container using latest version of grafana
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: |
          docker run -d -p 3000:3000 --name $PLUGIN_ID -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana:latest
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Integration tests using latest version of Grafana
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        id: latest-version-tests
        uses: nick-fields/retry@v2
        continue-on-error: true
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: error
          command: npm run e2e --prefix ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with latest version of Grafana
        uses: actions/upload-artifact@v3
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.latest-version-tests.outcome != 'success' && steps.should-run-expected-latest-tests.outcome == 'success'
        with:
          name: ${{steps.example-name.outputs.PLUGIN_NAME}}-latest-version-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3

      - name: Failing build due to test failures (latest version of Grafana)
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.latest-version-tests.outcome != 'success' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: exit 1

      - name: Stop and remove Docker container
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.should-run-expected-latest-tests.outcome == 'success'
        run: |
          docker stop $PLUGIN_ID && docker rm $PLUGIN_ID
        working-directory: ${{ matrix.pluginDir }}

      ## Canary Version Tests
      ## Runs the plugin tests against the latest build of Grafana main branch.

      - name: Upgrade @grafana packages using canary_version
        run: |
          npm install --legacy-peer-deps $(echo $(cat package.json | jq -r --arg version $CANARY_VERSION '[""@grafana/eslint-config"", ""@grafana/tsconfig"", ""@grafana/scenes"", ""@grafana/experimental""] as $blacklist | [(.devDependencies,.dependencies) | keys] | flatten | unique | map(select ( test(""^@grafana"") ) ) as $deps | $deps - $blacklist | map(""\(.)@\($version)"") | join("" "")') )
          npm install --force --save-optional @swc/core  @swc/core-linux-arm-gnueabihf @swc/core-linux-arm64-gnu @swc/core-linux-arm64-musl @swc/core-linux-x64-gnu @swc/core-linux-x64-musl
        working-directory: ${{ matrix.pluginDir }}

      - name: Run frontend tests
        run: |
          npm run test:ci
        working-directory: ${{ matrix.pluginDir }}

      - name: Build plugin with canary_version @grafana dependencies
        run: |
          npm run build
        working-directory: ${{ matrix.pluginDir }}

      - name: Build plugin backend
        uses: magefile/mage-action@v2
        with:
          version: latest
          args: -v build:linux
          workdir: ${{ matrix.pluginDir }}
        if: steps.backend-check.outputs.MAGEFILE_EXISTS == 'true'

      # Canary versions live at grafana/grafana-dev
      - name: Start Docker container using canary version of grafana
        if: steps.has-integration-tests.outputs.DIR == 'true'
        run: |
          docker run -d -p 3000:3000 --name $PLUGIN_ID -v ${PWD}/dist:/var/lib/grafana/plugins/$PLUGIN_ID -v ${PWD}/provisioning:/etc/grafana/provisioning -e GF_DEFAULT_APP_MODE -e GF_INSTALL_PLUGINS -e GF_AUTH_ANONYMOUS_ORG_ROLE -e GF_AUTH_ANONYMOUS_ENABLED -e GF_AUTH_BASIC_ENABLED grafana/grafana-dev:$CANARY_DOCKER_TAG
        working-directory: ${{ matrix.pluginDir }}

      - name: Start Integration tests using canary version of Grafana
        id: canary-version-tests
        if: steps.has-integration-tests.outputs.DIR == 'true'
        continue-on-error: true
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: error
          command: npm run e2e --prefix ${{ matrix.pluginDir }}

      - name: Uploading artifacts for tests with canary versions
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.canary-version-tests.outcome != 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.example-name.outputs.PLUGIN_NAME}}-canary-version-tests
          path: |
            ${{ matrix.pluginDir }}/cypress/screenshots
            ${{ matrix.pluginDir }}/cypress/videos
            ${{ matrix.pluginDir }}/cypress/report.json
          retention-days: 3

      - name: Failing build due to test failures (canary versions)
        if: steps.has-integration-tests.outputs.DIR == 'true' && steps.canary-version-tests.outcome != 'success'
        run: exit 1

      - name: Stop and remove Docker container
        if: steps.has-integration-tests.outputs.DIR == 'true'
        run: |
          docker stop $PLUGIN_ID && docker rm $PLUGIN_ID
        working-directory: ${{ matrix.pluginDir }}

  notify:
    if: ${{ (always() && github.event_name == 'schedule') }}
    runs-on: ubuntu-latest
    needs: [run-integration-tests]
    steps:
      - name: Send GitHub Action trigger data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        if: contains(fromJson('[""failure""]'), needs.run-integration-tests.result)
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          payload: |
            {
              ""blocks"": [
                    {
                      ""type"": ""section"",
                      ""text"": {
                        ""type"": ""mrkdwn"",
                        ""text"": "":blob-sad: <${{ github.server_url }}/${{ github.repository }}|Plugin Examples> Integration Test `${{ needs.run-integration-tests.result }}`""
                      }
                    },
                    {
                      ""type"": ""actions"",
                      ""elements"": [
                        {
                          ""type"": ""button"",
                          ""text"": {
                            ""type"": ""plain_text"",
                            ""text"": "":octocat: Open Job"",
                            ""emoji"": true
                          },
                          ""url"": ""${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}"",
                          ""action_id"": ""actionId-0""
                        }
                      ]
                    },
                    {
                      ""type"": ""divider""
                    },
                    {
                      ""type"": ""context"",
                      ""elements"": [
                        {
                          ""type"": ""mrkdwn"",
                          ""text"": ""*Commit*: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>""
                        },
                        {
                          ""type"": ""mrkdwn"",
                          ""text"": ""*Event*: ${{ github.event_name }}""
                        },
                        {
                          ""type"": ""mrkdwn"",
                          ""text"": ""*Branch*: `${{ github.head_ref || github.ref_name }}`""
                        },
                        {
                          ""type"": ""mrkdwn"",
                          ""text"": ""*PR Number*: `${{ github.event.pull_request.number || 'Not triggered by a PR' }}`""
                        }
                      ]
                    }
                ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
",,,,,,Shell
3582,https://github.com/hecrj/setup-rust-action,"name: Test
on:
  push:
    branches: '*'
  schedule:
    - cron: '0 0 * * *'
jobs:
  setup:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, nightly]
        include:
          - os: macOS-latest
            rust: stable
            components: rustfmt, clippy
            targets: x86_64-apple-darwin
          - os: windows-latest
            rust: stable
            components: rustfmt, clippy
            targets: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            rust: stable
            components: rustfmt, clippy
            targets: x86_64-unknown-linux-musl
    steps:
    - uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
        components: ${{ matrix.components || '' }}
        targets: ${{ matrix.targets || '' }}
    - name: Check cargo availability
      run: cargo --version
    - name: Check rustup default toolchain
      run: rustup default | grep '${{ matrix.rust }}'
    - name: Check rustfmt and clippy are available on MacOS
      if: matrix.os == 'macOS-latest' && matrix.rust == 'stable'
      run: |
        cargo fmt --version
        cargo clippy --version
    - name: Check targets are installed correctly
      if: matrix.rust == 'stable'
      run: rustup target list --installed | grep '${{ matrix.targets }}'
",,,,,,Shell
3618,https://github.com/purcell/setup-emacs,"name: ""CI""
on:
  pull_request:
  push:
    paths-ignore:
    - '**.md'
    - '**.org'
    - '.dir-locals.el'
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        emacs_version: [23.4, 24.1, 24.2, 24.3, 24.4, 24.5, 25.1, 25.2, 25.3, 26.1, 26.2, 26.3, 27.1, 27.2, 28.1, 28.2, 29.1, release-snapshot, snapshot]
        exclude:
          - os: macos-latest
            emacs_version: 23.4
          - os: macos-latest
            emacs_version: 24.1
          - os: macos-latest
            emacs_version: 24.2

    steps:
    - uses: actions/checkout@v2
    - name: Setup Emacs
      uses: ./
      with:
        version: ${{ matrix.emacs_version }}
    - name: Check emacs version
      run: emacs --version
    - name: Check nix tools visible
      run: ""nix-shell -p cowsay --run 'cowsay hello'""
",,,,,,Shell
3631,https://github.com/dtolnay/rust-toolchain,"name: CI

on:
  push:
    branches: [master]
  pull_request:
  workflow_dispatch:
  schedule: [cron: ""40 1 * * *""]

permissions:
  contents: read

jobs:
  install:
    name: Rust ${{matrix.rust}} on ${{matrix.os == 'ubuntu' && 'Linux' || matrix.os == 'macos' && 'macOS' || matrix.os == 'windows' && 'Windows' || '???'}}
    runs-on: ${{matrix.os}}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        rust: [nightly, beta, stable, 1.62.0, stable 18 months ago, stable minus 8 releases]
        include:
          - os: ubuntu
            rust: 1.0.0
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      - uses: ./
        name: Run dtolnay/rust-toolchain${{contains(matrix.rust, ' ') && ' for ' || '@'}}${{matrix.rust}}
        id: toolchain
        with:
          toolchain: ${{matrix.rust}}
      - name: echo ${{'${{steps.toolchain.outputs.cachekey}}'}}
        run: echo '${{steps.toolchain.outputs.cachekey}}'
      - name: check ${{'${{steps.toolchain.outputs.cachekey}}'}}
        if: matrix.rust == '1.62.0'
        run: cmp -s <(echo ${{steps.toolchain.outputs.cachekey}}) <(echo 20220627a831)
        shell: bash
      - run: rustc --version
      - run: cargo init . --bin --name CI
        if: matrix.rust == 'nightly' || matrix.rust == 'beta' || matrix.rust == 'stable'
      - run: cargo add syn@1
        if: matrix.rust == 'nightly' || matrix.rust == 'beta' || matrix.rust == 'stable'
      - run: cargo check
        if: matrix.rust == 'nightly' || matrix.rust == 'beta' || matrix.rust == 'stable'
",,,,,,Shell
3804,https://github.com/cosmos/testnets,"name: Gentx
on:
  pull_request:
    paths:
      - /**/gentx/*.json
jobs:
  verify-gentx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: gentx-validation
        run: |
          bash -x ./scripts/verify-gentx.sh
      # - name: gentx-verification-failed
      #   if: ${{ failure() }}
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     message: ""Invalid Gentx. Please create a new Gentx""
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      # - name: gentx-verification-success
      #   if: ${{ !failure() }}
      #   uses: mshick/add-pr-comment@v1
      #   with:
      #     message: ""Valid Gentx. Thank you!""
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Shell
3822,https://github.com/ful1e5/bibata_cursor,"name: build

on:
  push:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main, dev]
  pull_request:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main]

jobs:
  build:
    runs-on: ""ubuntu-latest""

    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Installing Node Dependencies
        run: |
          rm -rf node_modules yarn.lock
          yarn install --frozen-lockfile
        continue-on-error: false

      - name: Print cbmp version
        run: npx cbmp --version

      - name: Rendering Bitmaps
        run: yarn render
        continue-on-error: false

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Installing PyPi Dependencies
        run: python -m pip install --upgrade pip clickgen
        continue-on-error: false

      - name: Print clickgen Version
        run: |
          clickgen --version
          ctgen --version

      - name: Building `Bibata Modern Amber` Cursors
        run: ctgen build.toml -n 'Bibata-Modern-Amber' -c 'Yellowish and rounded edge Bibata cursors.' -d 'bitmaps/Bibata-Modern-Amber'

      - name: Building `Bibata Original Amber` Cursors
        run: ctgen build.toml -n 'Bibata-Original-Amber' -c 'Yellowish and sharp edge Bibata cursors.' -d 'bitmaps/Bibata-Original-Amber'

      - name: Building `Bibata Modern Classic` Cursors
        run: ctgen build.toml -n 'Bibata-Modern-Classic' -c 'Black and rounded edge Bibata cursors.' -d 'bitmaps/Bibata-Modern-Classic'

      - name: Building `Bibata Original Classic` Cursors
        run: ctgen build.toml -n 'Bibata-Original-Classic' -c 'Black and sharp edge Bibata cursors.' -d 'bitmaps/Bibata-Original-Classic'

      - name: Building `Bibata Modern Ice` Cursors
        run: ctgen build.toml -n 'Bibata-Modern-Ice' -c 'White and rounded edge Bibata cursors.' -d 'bitmaps/Bibata-Modern-Ice'

      - name: Building `Bibata Original Ice` Cursors
        run: ctgen build.toml -n 'Bibata-Original-Ice' -c 'White and sharp edge bibata cursors.' -d 'bitmaps/Bibata-Original-Ice'
",,,,,,Shell
3846,https://github.com/ful1e5/apple_cursor,"name: build

on:
  push:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main, dev]
  pull_request:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Installing pip dependencies
        run: python -m pip install --upgrade pip clickgen
        continue-on-error: false

      # https://github.com/returntocorp/semgrep/issues/4794
      - name: Fixing 'attr' module error
        run: pip install --force-reinstall --upgrade attrs

      - name: Building `macOS BigSur` Cursors
        run: ctgen build.toml -d 'bitmaps/macOS-BigSur' -n 'macOS-BigSur' -c 'macOS BigSur Cursors'

      - name: Building `macOS BigSur White` Cursors
        run: ctgen build.toml -d 'bitmaps/macOS-BigSur-White' -n 'macOS-BigSur-White' -c 'macOS BigSur White Cursors'

      - name: Building `macOS Monterey` Cursors
        run: ctgen build.toml -d 'bitmaps/macOS-Monterey' -n 'macOS-Monterey' -c 'macOS Monterey Cursors'

      - name: Building `macOS Monterey White` Cursors
        run: ctgen build.toml -d 'bitmaps/macOS-Monterey-White' -n 'macOS-Monterey-White' -c 'macOS Monterey White Cursors'
",,,,,,Shell
3848,https://github.com/ful1e5/google_cursor,"name: build

on:
  push:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main, dev]
  pull_request:
    paths-ignore:
      - ""**.md""
      - LICENSE
      - .github/FUNDING.yml
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Installing pip dependencies
        run: python -m pip install --upgrade pip clickgen
        continue-on-error: false

      # https://github.com/returntocorp/semgrep/issues/4794
      - name: Fixing 'attr' module error
        run: pip install --force-reinstall --upgrade attrs

      - name: Building `GoogleDot Blue` Cursors
        run: ctgen build.toml -d 'bitmaps/GoogleDot-Blue' -n 'GoogleDot-Blue' -c 'Blue cursor theme inspired on Google'

      - name: Building `GoogleDot White` Cursors
        run: ctgen build.toml -d 'bitmaps/GoogleDot-White' -n 'GoogleDot-White' -c 'White cursor theme inspired on Google'

      - name: Building `GoogleDot Black` Cursors
        run: ctgen build.toml -d 'bitmaps/GoogleDot-Black' -n 'GoogleDot-Black' -c 'Black cursor theme inspired on Google'

      - name: Building `GoogleDot Red` Cursors
        run: ctgen build.toml -d 'bitmaps/GoogleDot-Red' -n 'GoogleDot-Red' -c 'Red cursor theme inspired on Google'
",,,,,,Shell
4290,https://github.com/subosito/flutter-action,"name: Main workflow
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    paths:
      - setup.sh
      - action.yml
jobs:
  lint_shellcheck:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: ludeeus/action-shellcheck@master
  test_channel:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]
        channel: [stable, beta, master]
        include:
          - operating-system: ubuntu-latest
            channel: main
    steps:
    - uses: actions/checkout@v3
    - id: flutter-action
      uses: ./
      with:
        channel: ${{ matrix.channel }}
    - name: Echo outputs
      run: |
        echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}
        echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}
        echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}
        echo VERSION=${{ steps.flutter-action.outputs.VERSION }}
        echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}
      shell: bash
    - run: dart --version
      shell: bash
    - run: flutter --version
      shell: bash
  test_cache:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: ./
      with:
        channel: stable
        flutter-version: '3.10.6'
        cache: true
    - run: dart --version
      shell: bash
    - run: flutter --version
      shell: bash
  test_print_output:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - run: ./setup.sh -t -p                        | grep 'stable'
      shell: bash
    - run: ./setup.sh -t -p                        | grep '3.7.7'
      shell: bash
    - run: ./setup.sh -t -p                        | grep 'x64'
      shell: bash
    - run: ./setup.sh -t -p stable                 | grep 'stable'
      shell: bash
    - run: ./setup.sh -t -p beta                   | grep 'beta'
      shell: bash
    - run: ./setup.sh -t -p beta                   | grep '3.9.0-0.1.pre'
      shell: bash
    - run: ./setup.sh -t -p -n 3.3.10 stable       | grep '3.3.10'
      shell: bash
    - run: ./setup.sh -t -p -n 3.3.1 stable        | grep '3.3.1'
      shell: bash
    - run: ./setup.sh -t -p -n 2 stable            | grep '2.10.5'
      shell: bash
    - run: ./setup.sh -t -p -n 2 beta              | grep '2.13.0-0.4.pre'
      shell: bash
    - run: ./setup.sh -t -p -n 2 any               | grep 'beta'
      shell: bash
    - run: ./setup.sh -t -p -n 2 any               | grep '2.13.0-0.4.pre'
      shell: bash
    - run: ./setup.sh -t -p -n 3 any               | grep 'beta'
      shell: bash
    - run: ./setup.sh -t -p -n 3 any               | grep '3.9.0-0.1.pre'
      shell: bash
    - run: ./setup.sh -t -p -n 3 -a arm64 any      | grep 'arm64'
      shell: bash
    - run: ./setup.sh -t -p -n any -a arm64 stable | grep 'stable'
      shell: bash
    - run: ./setup.sh -t -p -n any -a arm64 stable | grep '3.7.7'
      shell: bash
    - run: ./setup.sh -t -p -n any -a arm64 stable | grep 'arm64'
      shell: bash
    - run: ./setup.sh -t -p -n 1 stable            | grep '1.22.6'
      shell: bash
    - run: ./setup.sh -t -p -n 0 any               | grep 'beta'
      shell: bash
    - run: ./setup.sh -t -p -n 0 any               | grep '0.11.13'
      shell: bash
    - run: ./setup.sh -t -p                        | grep 'flutter-macos-stable-3.7.7-x64-2ad6cd72c040113b47ee9055e722606a490ef0da'
      shell: bash
    - run: ./setup.sh -t -p stable                 | grep 'flutter-macos-stable-3.7.7-x64-2ad6cd72c040113b47ee9055e722606a490ef0da'
      shell: bash
    - run: ./setup.sh -t -p beta                   | grep 'flutter-macos-beta-3.9.0-0.1.pre-x64-f732038a8cf4562ce38a1d7debb30209ae3da896'
      shell: bash
    - run: ./setup.sh -t -p dev                    | grep 'flutter-macos-dev-2.11.0-0.1.pre-x64-b101bfe32f634566e7cb2791a9efe19cf8828b15'
      shell: bash
    - run: ./setup.sh -t -p master                 | grep 'flutter-macos-master-any-x64-master'
      shell: bash
    - run: ./setup.sh -t -p -n 5b12b74 master      | grep 'flutter-macos-master-5b12b74-x64-master'
      shell: bash
    - run: ./setup.sh -t -p -n 3.12.0-12.0.pre master     | grep 'flutter-macos-master-3.12.0-12.0.pre-x64-master'
      shell: bash
    - run: ./setup.sh -t -p -n stable master       | grep 'flutter-macos-master-stable-x64-master'
      shell: bash
    - run: ./setup.sh -t -p -n 2 any               | grep 'flutter-macos-beta-2.13.0-0.4.pre-x64-25caf1461b8f643092a9f6f5b224453b5c057d10'
      shell: bash
    - run: ./setup.sh -t -p -n 1 any               | grep 'flutter-macos-beta-1.26.0-17.8.pre-x64-044f2cf5607a26f8818dab0f766400e85c52bdff'
      shell: bash
    - run: ./setup.sh -t -p -n 0 any               | grep 'flutter-macos-beta-0.11.13-x64-58c8489fcdb4e4ef6c010117584c9b23d15221aa'
      shell: bash
    - run: ./setup.sh -t -p                        | grep '/Users/runner/work/_temp/flutter/stable-3.7.7-x64'
      shell: bash
    - run: ./setup.sh -t -p stable                 | grep '/Users/runner/work/_temp/flutter/stable-3.7.7-x64'
      shell: bash
    - run: ./setup.sh -t -p beta                   | grep '/Users/runner/work/_temp/flutter/beta-3.9.0-0.1.pre-x64'
      shell: bash
    - run: ./setup.sh -t -p dev                    | grep '/Users/runner/work/_temp/flutter/dev-2.11.0-0.1.pre-x64'
      shell: bash
    - run: ./setup.sh -t -p master                 | grep '/Users/runner/work/_temp/flutter/master-any-x64'
      shell: bash
    - run: ./setup.sh -t -p -k 'custom-:channel:-:version:-:hash:'       | grep 'custom-stable-3.7.7-2ad6cd72c040113b47ee9055e722606a490ef0da'
      shell: bash
    - run: ./setup.sh -t -p -k 'custom-:channel:-:version:-:sha256:'     | grep 'custom-stable-3.7.7-78957b52f023a0d811add27eddc59b1a59d27d2ada5df123f39d0315708fb2d5'
      shell: bash
    - run: ./setup.sh -t -p -c '/tmp/flutter/:channel:-:version:-:hash:' | grep '/tmp/flutter/stable-3.7.7-2ad6cd72c040113b47ee9055e722606a490ef0da'
      shell: bash
",,,,,,Shell
4504,https://github.com/rlespinasse/github-slug-action,"name: '[v4] Test and Release'
on: [push, pull_request]
jobs:
  check-v3compatibility:
    name: 'Check v3 compatibility'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load using v4.x with prefix
        uses: ./
        with:
          prefix: V4_
          short-length: 8

      - name: Load using v3.x
        uses: rlespinasse/github-slug-action@v3.x

      - name: Validate // Partial variables
        run: |
          [[ ""${{ env.GITHUB_REPOSITORY_OWNER_PART }}"" == ""${{ env.V4_GITHUB_REPOSITORY_OWNER_PART }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_NAME_PART }}"" == ""${{ env.V4_GITHUB_REPOSITORY_NAME_PART }}"" ]]
        shell: bash

      - name: Validate // Slug variables
        run: |
          [[ ""${{ env.GITHUB_REPOSITORY_SLUG }}"" == ""${{ env.V4_GITHUB_REPOSITORY_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"" == ""${{ env.V4_GITHUB_REPOSITORY_OWNER_PART_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"" == ""${{ env.V4_GITHUB_REPOSITORY_NAME_PART_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_REF_SLUG }}"" == ""${{ env.V4_GITHUB_REF_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_HEAD_REF_SLUG }}"" == ""${{ env.V4_GITHUB_HEAD_REF_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_BASE_REF_SLUG }}"" == ""${{ env.V4_GITHUB_BASE_REF_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_REF_SLUG }}"" == ""${{ env.V4_GITHUB_EVENT_REF_SLUG }}"" ]]
        shell: bash
      - name: Validate // Slug variables (Case Sensitive)
        run: |
          [[ ""${{ env.GITHUB_REPOSITORY_SLUG_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_OWNER_PART_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_NAME_PART_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_REF_SLUG_CS }}"" == ""${{ env.V4_GITHUB_REF_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_HEAD_REF_SLUG_CS }}"" == ""${{ env.V4_GITHUB_HEAD_REF_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_BASE_REF_SLUG_CS }}"" == ""${{ env.V4_GITHUB_BASE_REF_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_REF_SLUG_CS }}"" == ""${{ env.V4_GITHUB_EVENT_REF_SLUG_CS }}"" ]]
        shell: bash
      - name: Validate // Slug URL variables
        run: |
          [[ ""${{ env.GITHUB_REPOSITORY_SLUG_URL }}"" == ""${{ env.V4_GITHUB_REPOSITORY_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"" == ""${{ env.V4_GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"" == ""${{ env.V4_GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_REF_SLUG_URL }}"" == ""${{ env.V4_GITHUB_REF_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_HEAD_REF_SLUG_URL }}"" == ""${{ env.V4_GITHUB_HEAD_REF_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_BASE_REF_SLUG_URL }}"" == ""${{ env.V4_GITHUB_BASE_REF_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_REF_SLUG_URL }}"" == ""${{ env.V4_GITHUB_EVENT_REF_SLUG_URL }}"" ]]
        shell: bash
      - name: Validate // Slug URL variables (Case Sensitive)
        run: |
          [[ ""${{ env.GITHUB_REPOSITORY_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_OWNER_PART_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_REPOSITORY_NAME_PART_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_REF_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_REF_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_HEAD_REF_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_HEAD_REF_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_BASE_REF_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_BASE_REF_SLUG_URL_CS }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_REF_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_EVENT_REF_SLUG_URL_CS }}"" ]]
        shell: bash

      - name: Validate // Ref Name
        run: |
          [[ ""${{ env.GITHUB_REF_NAME }}"" == ""${{ env.V4_GITHUB_REF_NAME }}"" ]]
          [[ ""${{ env.GITHUB_REF_NAME_SLUG }}"" == ""${{ env.V4_GITHUB_REF_NAME_SLUG }}"" ]]
          [[ ""${{ env.GITHUB_REF_NAME_SLUG_URL }}"" == ""${{ env.V4_GITHUB_REF_NAME_SLUG_URL }}"" ]]
          [[ ""${{ env.GITHUB_REF_NAME_SLUG_CS }}"" == ""${{ env.V4_GITHUB_REF_NAME_SLUG_CS }}"" ]]
          [[ ""${{ env.GITHUB_REF_NAME_SLUG_URL_CS }}"" == ""${{ env.V4_GITHUB_REF_NAME_SLUG_URL_CS }}"" ]]
        shell: bash

      - name: Validate // Short SHA variables
        run: |
          [[ ""${{ env.GITHUB_SHA_SHORT }}"" == ""${{ env.V4_GITHUB_SHA_SHORT }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"" == ""${{ env.V4_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"" ]]
        shell: bash

  check-v3compatibility-without-checkout:
    name: 'Check v3 compatibility (without checkout)'
    needs:
      - check-v3compatibility
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: this-action
          ref: ${{ github.ref }}

      - name: Load using v4.x with prefix
        uses: ./this-action
        with:
          prefix: V4_
          short-length: 8

      - name: Load using v3.x
        uses: rlespinasse/github-slug-action@v3.x

      - name: Validate // Short SHA variables
        run: |
          [[ ""${{ env.GITHUB_SHA_SHORT }}"" == ""${{ env.V4_GITHUB_SHA_SHORT }}"" ]]
          [[ ""${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"" == ""${{ env.V4_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"" ]]
        shell: bash

  display:
    name: 'Display produced variables'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Load using v4.x
        uses: ./

      - name: Partial variables
        run: |
          echo ""repository owner : ${{ env.GITHUB_REPOSITORY_OWNER_PART }}""
          echo ""repository name  : ${{ env.GITHUB_REPOSITORY_NAME_PART }}""
        shell: bash

      - name: Slug variables
        run: |
          echo ""repository       : ${{ env.GITHUB_REPOSITORY_SLUG }}""
          echo ""repository owner : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}""
          echo ""repository name  : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}""
          echo ""ref              : ${{ env.GITHUB_REF_SLUG }}""
          echo ""head ref         : ${{ env.GITHUB_HEAD_REF_SLUG }}""
          echo ""base ref         : ${{ env.GITHUB_BASE_REF_SLUG }}""
          echo ""event ref        : ${{ env.GITHUB_EVENT_REF_SLUG }}""
        shell: bash
      - name: Slug variables (Case Sensitive)
        run: |
          echo ""repository       : ${{ env.GITHUB_REPOSITORY_SLUG_CS }}""
          echo ""repository owner : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_CS }}""
          echo ""repository name  : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_CS }}""
          echo ""ref              : ${{ env.GITHUB_REF_SLUG_CS }}""
          echo ""head ref         : ${{ env.GITHUB_HEAD_REF_SLUG_CS }}""
          echo ""base ref         : ${{ env.GITHUB_BASE_REF_SLUG_CS }}""
          echo ""event ref        : ${{ env.GITHUB_EVENT_REF_SLUG_CS }}""
        shell: bash
      - name: Slug URL variables
        run: |
          echo ""repository       : ${{ env.GITHUB_REPOSITORY_SLUG_URL }}""
          echo ""repository owner : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}""
          echo ""repository name  : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}""
          echo ""ref              : ${{ env.GITHUB_REF_SLUG_URL }}""
          echo ""head ref         : ${{ env.GITHUB_HEAD_REF_SLUG_URL }}""
          echo ""base ref         : ${{ env.GITHUB_BASE_REF_SLUG_URL }}""
          echo ""event ref        : ${{ env.GITHUB_EVENT_REF_SLUG_URL }}""
        shell: bash
      - name: Slug URL variables (Case Sensitive)
        run: |
          echo ""repository       : ${{ env.GITHUB_REPOSITORY_SLUG_URL_CS }}""
          echo ""repository owner : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL_CS }}""
          echo ""repository name  : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL_CS }}""
          echo ""ref              : ${{ env.GITHUB_REF_SLUG_URL_CS }}""
          echo ""head ref         : ${{ env.GITHUB_HEAD_REF_SLUG_URL_CS }}""
          echo ""base ref         : ${{ env.GITHUB_BASE_REF_SLUG_URL_CS }}""
          echo ""event ref        : ${{ env.GITHUB_EVENT_REF_SLUG_URL_CS }}""
        shell: bash

      - name: Ref Name
        run: |
          echo ""raw                       : ${{ env.GITHUB_REF_NAME }}""
          echo ""slug                      : ${{ env.GITHUB_REF_NAME_SLUG }}""
          echo ""slug url                  : ${{ env.GITHUB_REF_NAME_SLUG_URL }}""
          echo ""slug (Case Sensitive)     : ${{ env.GITHUB_REF_NAME_SLUG_CS }}""
          echo ""slug url (Case Sensitive) : ${{ env.GITHUB_REF_NAME_SLUG_URL_CS }}""
        shell: bash

      - name: Short SHA variables
        run: |
          echo ""sha              : ${{ env.GITHUB_SHA_SHORT }}""
          echo ""pull request sha : ${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}""
        shell: bash

  display-without-checkout:
    name: 'Display produced variables (without checkout)'
    needs:
      - display
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: this-action
          ref: ${{ github.ref }}

      - name: Load using v4.x with prefix
        uses: ./this-action
        with:
          prefix: V4_
          short-length: 8

      - name: Load using v3.x
        uses: rlespinasse/github-slug-action@v3.x

      - name: Short SHA variables
        run: |
          echo ""sha              : ${{ env.GITHUB_SHA_SHORT }}""
          echo ""pull request sha : ${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}""
        shell: bash

  input-short-length:
    name: ""Input 'short-length'""
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Test 1
      - name: Using correct short length
        uses: ./
        with:
          prefix: 'CSL_'
          short-length: 4
      - name: Using correct length // Validate that all short variables lengths are equals to short-length
        run: |
          env | grep ""CSL_"" | grep ""_SHORT"" | cut -d""="" -f2 | while read -r value; do [ ""$(echo ""$value"" | wc -m)"" -le 5 ] ; done
        shell: bash

      # Test 2
      - name: Using wrong short length
        id: using-wrong-short-length
        uses: ./
        with:
          prefix: 'WSL_'
          short-length: 'wrong'
        continue-on-error: true
      - name: Using wrong short length // Validate that the action end with an error
        run: |
          [[ ""$(env | grep ""WSL_"" | grep ""_SHORT"" | wc -l)"" -eq 0 ]]
          [[ ""${{ steps.using-wrong-short-length.outcome }}"" == ""failure"" ]]
          [[ ""${{ steps.using-wrong-short-length.conclusion }}"" == ""success"" ]]
        shell: bash

  input-short-length-without-checkout:
    name: ""Input 'short-length' (without checkout)""
    needs:
      - input-short-length
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: this-action
          ref: ${{ github.ref }}

      # Test 1
      - name: Using correct short length
        uses: ./this-action
        with:
          prefix: 'CSL_'
          short-length: 4
      - name: Using correct length // Validate that all short variables lengths are equals to short-length
        run: |
          env | grep ""CSL_"" | grep ""_SHORT"" | cut -d""="" -f2 | while read -r value; do [ ""$(echo ""$value"" | wc -m)"" -le 5 ] ; done
        shell: bash

      # Test 2
      - name: Using empty short length
        id: using-empty-short-length
        uses: ./this-action
        with:
          prefix: 'ESL_'
        continue-on-error: true
      - name: Using empty short length // Validate that the action don't end with an error
        run: |
          [[ ""$(env | grep ""ESL_"" | grep ""_SHORT"" | wc -l)"" -gt 0 ]]
          [[ ""${{ steps.using-empty-short-length.outcome }}"" == ""success"" ]]
          [[ ""${{ steps.using-empty-short-length.conclusion }}"" == ""success"" ]]
        shell: bash

      # Test 3
      - name: Using wrong short length
        id: using-wrong-short-length
        uses: ./this-action
        with:
          prefix: 'WSL_'
          short-length: 'wrong'
        continue-on-error: true
      - name: Using wrong short length // Validate that the action end with an error
        run: |
          [[ ""$(env | grep ""WSL_"" | grep ""_SHORT"" | wc -l)"" -eq 0 ]]
          [[ ""${{ steps.using-wrong-short-length.outcome }}"" == ""failure"" ]]
          [[ ""${{ steps.using-wrong-short-length.conclusion }}"" == ""success"" ]]
        shell: bash

  input-slug-maxlength:
    name: ""Input 'slug-maxlength'""
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Test 1
      - name: Using correct slug max length
        uses: ./
        with:
          prefix: 'CML_'
          slug-maxlength: 1
      - name: Using correct max length // Validate that all slug variables lengths are equals or under the slug-maxlength
        run: |
          env | grep ""CML_"" | grep ""_SLUG"" | cut -d""="" -f2 | while read -r value; do [ ""$(echo ""$value"" | wc -m)"" -le 2 ] ; done
        shell: bash

      # Test 2
      - name: Using wrong slug max length
        id: using-wrong-slug-max-length
        uses: ./
        with:
          prefix: 'WML_'
          slug-maxlength: 'wrong'
        continue-on-error: true
      - name: Using wrong slug max length // Validate that the action end with an error
        run: |
          [[ ""$(env | grep ""WML_"" | grep ""_SLUG"" | wc -l)"" -eq 0 ]]
          [[ ""${{ steps.using-wrong-slug-max-length.outcome }}"" == ""failure"" ]]
          [[ ""${{ steps.using-wrong-slug-max-length.conclusion }}"" == ""success"" ]]
        shell: bash

      # Test 3
      - name: Using empty slug max length
        id: using-empty-slug-max-length
        uses: ./
        with:
          prefix: 'EML_'
          slug-maxlength: ''
        continue-on-error: true
      - name: Using empty slug max length // Validate that the action end with an error
        run: |
          [[ ""$(env | grep ""EML_"" | grep ""_SLUG"" | wc -l)"" -eq 0 ]]
          [[ ""${{ steps.using-empty-slug-max-length.outcome }}"" == ""failure"" ]]
          [[ ""${{ steps.using-empty-slug-max-length.conclusion }}"" == ""success"" ]]
        shell: bash

      # Test 4
      - name: Using no limit on slug max length
        id: using-nolimit-slug-max-length
        uses: ./
        with:
          prefix: 'NLML_'
          slug-maxlength: 'nolimit'
      - name: Using no limit on slug max length // Validate that the action end with an error
        run: |
          [[ ""$(env | grep ""NLML_"" | grep ""_SLUG"" | wc -l)"" -gt 0 ]]
          [[ ""${{ steps.using-nolimit-slug-max-length.outcome }}"" == ""success"" ]]
          [[ ""${{ steps.using-nolimit-slug-max-length.conclusion }}"" == ""success"" ]]
        shell: bash

  release:
    runs-on: ubuntu-latest
    concurrency:
      group: release-${{ github.ref }}-${{ github.event_name }}
    needs:
      - check-v3compatibility-without-checkout
      - display-without-checkout
      - input-short-length-without-checkout
      - input-slug-maxlength
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Release this GitHub Action
        uses: rlespinasse/release-that@v1
",,,,,,Shell
4953,https://github.com/ramsey/composer-install,"# GitHub Actions Documentation: https://docs.github.com/en/actions

name: ""build""

on: [""pull_request"", ""push"", ""workflow_dispatch""]

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  composer:
    name: ""Check Composer""
    runs-on: ""ubuntu-latest""
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Set up PHP""
        uses: ""shivammathur/setup-php@v2""
        with:
          php-version: 8.1
          tools: composer-normalize
          coverage: none
      - name: ""Run Composer normalize""
        run: ""composer-normalize --dry-run""

  test:
    name: ""Expect tests""
    runs-on: ""ubuntu-latest""
    strategy:
      matrix:
        composer-version:
          - ""v1""
          - ""v2""
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Install expect""
        run: |
          sudo apt-get update
          sudo apt-get -y install expect
      - name: ""Set up PHP""
        uses: ""shivammathur/setup-php@v2""
        with:
          php-version: ""latest""
          tools: ""composer:${{ matrix.composer-version }}""
          coverage: ""none""
        env:
          fail-fast: true
      - name: ""Run expect tests""
        run: ""composer test""

  code-coverage:
    needs: test
    if: github.repository == 'ramsey/composer-install'
    name: ""Code coverage""
    runs-on: ""ubuntu-latest""
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Install expect""
        run: |
          sudo apt-get update
          sudo apt-get -y install expect
      - name: ""Set up Ruby""
        uses: ""ruby/setup-ruby@v1""
        with:
          ruby-version: ""3.2""
      - name: ""Install Ruby dependencies""
        run: |
          gem install bashcov
          gem install codecov
      - name: ""Set up PHP""
        uses: ""shivammathur/setup-php@v2""
        with:
          php-version: ""latest""
          tools: ""composer:v2""
          coverage: ""none""
      - name: ""Run expect tests""
        run: ""bashcov --root ./bin -- ./tests/bash-test.sh tests/tests.sh""
      - name: ""Publish coverage report to Codecov""
        uses: ""codecov/codecov-action@v3""
        with:
          files: ""./bin/coverage/codecov-result.json""

  static-analysis:
    name: ""Static analysis""
    runs-on: ""ubuntu-latest""
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Run shellcheck""
        run: ""shellcheck --exclude=SC2230 bin/*.sh tests/*.sh""

  run:
    needs: test
    name: ""Run action""
    runs-on: ""${{ matrix.operating-system }}""
    strategy:
      matrix:
        operating-system:
          - ""ubuntu-latest""
          - ""windows-latest""
        dependency-versions:
          - ""lowest""
          - ""highest""
          - ""locked""
        composer-version:
          - ""v1""
          - ""v2""
        working-directory:
          - ""tests/fixtures/with-lock-file""
          - ""tests/fixtures/no-lock-file""
          - ""tests/fixtures/out-of-sync-lock""
          - """"
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Set up PHP""
        uses: ""shivammathur/setup-php@v2""
        with:
          php-version: ""latest""
          tools: ""composer:${{ matrix.composer-version }}""
          coverage: ""none""
        env:
          fail-fast: true

      - name: ""Test: plain install""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore platform reqs""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          composer-options: '--ignore-platform-reqs'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore platform reqs, ignore cache""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          composer-options: '--ignore-platform-reqs'
          ignore-cache: 'yes'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore platform reqs, custom cache key""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          composer-options: '--ignore-platform-reqs'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore platform reqs, ignore cache, custom cache key""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          composer-options: '--ignore-platform-reqs'
          ignore-cache: 'yes'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore cache""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          ignore-cache: 'yes'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: ignore cache, custom cache key""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          ignore-cache: 'yes'
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: custom cache key""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          custom-cache-key: 'my-super-custom-cache-key'

      - name: Clean up between tests
        run: |
          git clean -ffdx && git reset --hard HEAD
          composer clear-cache

      - name: ""Test: custom cache suffix""
        uses: ./
        with:
          working-directory: ""${{ matrix.working-directory }}""
          dependency-versions: ""${{ matrix.dependency-versions }}""
          custom-cache-suffix: $(/bin/date -u --date='last Mon' ""+%F"")

  run-no-cleanup:
    needs: test
    name: ""Run unclean""
    runs-on: ""${{ matrix.operating-system }}""
    strategy:
      matrix:
        operating-system:
          - ""ubuntu-latest""
          - ""windows-latest""
        composer-version:
          - ""v1""
          - ""v2""
    steps:
      - name: ""Checkout repository""
        uses: ""actions/checkout@v3""
      - name: ""Set up PHP""
        uses: ""shivammathur/setup-php@v2""
        with:
          php-version: ""latest""
          tools: ""composer:${{ matrix.composer-version }}""
          coverage: ""none""
        env:
          fail-fast: true

      - name: ""Test: plain install""
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'

      - name: ""Test: switch to lowest dependencies""
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'
          dependency-versions: 'lowest'

      - name: ""Test: switch to highest dependencies""
        uses: ./
        with:
          working-directory: 'tests/fixtures/with-lock-file'
          dependency-versions: 'highest'
",,,,,,Shell
5727,https://github.com/jlesage/docker-baseimage-gui,"name: Docker Baseimage CI/CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE_NAME: jlesage/baseimage-gui

on:
  push:
    branches: '*'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-pre.[0-9]+
  pull_request:

jobs:
  build:
    name: Build image
    runs-on: ubuntu-20.04

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    strategy:
      fail-fast: false
      matrix:
        info:
          - '{ ""tag_prefix"": ""alpine-3.14"",  ""baseimage"": ""jlesage/baseimage:alpine-3.14-v3.5.2"",  ""platforms"": ""linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""alpine-3.15"",  ""baseimage"": ""jlesage/baseimage:alpine-3.15-v3.5.2"",  ""platforms"": ""linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""alpine-3.16"",  ""baseimage"": ""jlesage/baseimage:alpine-3.16-v3.5.2"",  ""platforms"": ""linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""alpine-3.17"",  ""baseimage"": ""jlesage/baseimage:alpine-3.17-v3.5.2"",  ""platforms"": ""linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""alpine-3.18"",  ""baseimage"": ""jlesage/baseimage:alpine-3.18-v3.5.2"",  ""platforms"": ""linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""debian-10"",    ""baseimage"": ""jlesage/baseimage:debian-10-v3.5.2"",    ""platforms"": ""linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""debian-11"",    ""baseimage"": ""jlesage/baseimage:debian-11-v3.5.2"",    ""platforms"": ""linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""ubuntu-16.04"", ""baseimage"": ""jlesage/baseimage:ubuntu-16.04-v3.5.2"", ""platforms"": ""linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""ubuntu-18.04"", ""baseimage"": ""jlesage/baseimage:ubuntu-18.04-v3.5.2"", ""platforms"": ""linux/amd64,linux/386,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""ubuntu-20.04"", ""baseimage"": ""jlesage/baseimage:ubuntu-20.04-v3.5.2"", ""platforms"": ""linux/amd64,linux/arm/v7,linux/arm64/v8"" }'
          - '{ ""tag_prefix"": ""ubuntu-22.04"", ""baseimage"": ""jlesage/baseimage:ubuntu-22.04-v3.5.2"", ""platforms"": ""linux/amd64,linux/arm/v7,linux/arm64/v8"" }'

    steps:
      - name: Free disk space
        run: |
          # Free disk space.
          echo ""::group::Before""
          df -h /
          echo ""::endgroup::""
          echo ""::group::Removing unneeded softwares and files...""
          for DIR in /usr/local/lib/android /usr/share/dotnet /opt/ghc
          do
            if [ -d ""$DIR"" ]; then
                echo ""Removing $DIR...""
                sudo rm -r ""$DIR""
            fi
          done
          echo ""::endgroup::""
          echo ""::group::After""
          df -h /
          echo ""::endgroup::""

      - name: Prepare
        id: prep
        run: |
          # Determine the Docker container version.
          VERSION=unknown
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
            # Git tag pushed: use tag as the version.
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF =~ refs/heads/* ]]; then
            # Git commit pushed: use the commit SHA as the version.
            VERSION=${GITHUB_SHA::8}
          elif [[ $GITHUB_REF =~ refs/pull/* ]]; then
            # Pull request: use PR number as the version.
            VERSION=pr-${{ github.event.number }}
          else
            echo ""::error::Unexpected GITHUB_REF: $GITHUB_REF""
            exit 1
          fi
          # Determine the version to put in container label.
          LABEL_VERSION=${VERSION}
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
            LABEL_VERSION=${VERSION:1}
          fi
          # Determine the Docker container tags.
          TAGS=""${{ env.DOCKER_IMAGE_NAME }}:${{ fromJSON(matrix.info).tag_prefix }}-${VERSION}""
          if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            # For version with format vX.Y.Z, we want to add additional tags:
            #   - vX.Y
            #   - vX
            V=${VERSION:1}
            MAJOR_MINOR=${V%.*}
            MAJOR=${MAJOR_MINOR%.*}
            TAGS=""$TAGS,${{ env.DOCKER_IMAGE_NAME }}:${{ fromJSON(matrix.info).tag_prefix }}-v${MAJOR_MINOR}""
            TAGS=""$TAGS,${{ env.DOCKER_IMAGE_NAME }}:${{ fromJSON(matrix.info).tag_prefix }}-v${MAJOR}""
          fi
          # Determine the release type.
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
              IS_RELEASE=yes
              if [[ $GITHUB_REF =~ -pre\.[0-9]+ ]]; then
                  RELEASE_TYPE=""pre""
              else
                  RELEASE_TYPE=""standard""
              fi
          else
              IS_RELEASE=no
              RELEASE_TYPE=""n/a""
          fi
          # Print results.
          echo ""::group::Results""
          echo ""Github reference: $GITHUB_REF""
          echo ""Release: $IS_RELEASE""
          echo ""Release type: $RELEASE_TYPE""
          echo ""Docker container version: $VERSION""
          echo ""Docker container version label: $LABEL_VERSION""
          echo ""Docker container tag(s): $TAGS""
          echo ""::endgroup::""
          # Export outputs.
          echo ""is_release=${IS_RELEASE}"" >> $GITHUB_OUTPUT
          echo ""release_type=${RELEASE_TYPE}"" >> $GITHUB_OUTPUT
          echo ""version=${VERSION}"" >> $GITHUB_OUTPUT
          echo ""label_version=${LABEL_VERSION}"" >> $GITHUB_OUTPUT
          echo ""tags=${TAGS}"" >> $GITHUB_OUTPUT
          #echo ""build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup BATS
        uses: mig4/setup-bats@v1

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm,arm64,ppc64le,mips64,s390x

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Build and push to local registry
        uses: docker/build-push-action@v4
        with:
          push: true
          pull: true
          provenance: false
          platforms: ${{ fromJSON(matrix.info).platforms }}
          tags: localhost:5000/${{ env.DOCKER_IMAGE_NAME }}:github-ci
          build-args: |
            BASEIMAGE=${{ fromJSON(matrix.info).baseimage }}
            IMAGE_VERSION=${{ steps.prep.outputs.label_version }}
          cache-from: type=gha,scope=${{ fromJSON(matrix.info).tag_prefix }}
          cache-to: type=gha,mode=max,scope=${{ fromJSON(matrix.info).tag_prefix }}

      - name: Inspect
        id: inspect
        run: |
          docker buildx imagetools inspect localhost:5000/${{ env.DOCKER_IMAGE_NAME }}:github-ci
          echo ""raw=$(docker buildx imagetools inspect --raw localhost:5000/${{ env.DOCKER_IMAGE_NAME }}:github-ci | tr -d '\n')"" >> $GITHUB_OUTPUT

      - name: Test image
        run: |
          for SHA in ${{ join(fromJSON(steps.inspect.outputs.raw).manifests.*.digest, ' ') }}
          do
            export DOCKER_IMAGE=localhost:5000/${{ env.DOCKER_IMAGE_NAME }}:github-ci@$SHA
            docker pull $DOCKER_IMAGE
            docker run --rm $DOCKER_IMAGE sh -c 'echo Testing image on $(uname -m)...'
            bats tests
          done

      - name: Login to DockerHub
        if: ${{ steps.prep.outputs.is_release == 'yes' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push to Dockerhub
        # NOTE: The `--load` option of `buildx` only works with a single
        #       platform.  Thus, we cannot build the image with `--load`, test
        #       the image and then `docker push` it.  We need to build the image
        #       twice, with different tags.  The second build should however
        #       be very fast because of cache.  See:
        #         - https://github.com/docker/buildx/issues/59
        #         - https://github.com/docker/build-push-action/issues/132
        if: ${{ steps.prep.outputs.is_release == 'yes' }}
        uses: docker/build-push-action@v4
        with:
          push: true
          provenance: false
          platforms: ${{ fromJSON(matrix.info).platforms }}
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            BASEIMAGE=${{ fromJSON(matrix.info).baseimage }}
            IMAGE_VERSION=${{ steps.prep.outputs.label_version }}
          cache-from: type=gha,scope=${{ fromJSON(matrix.info).tag_prefix }}

  post-build:
    name: Post-build
    needs: [ build ]
    runs-on: ubuntu-20.04
    steps:
      - name: Prepare
        id: prep
        run: |
          # Determine the release type.
          if [[ $GITHUB_REF =~ refs/tags/* ]]; then
              IS_RELEASE=yes
              if [[ $GITHUB_REF =~ -pre\.[0-9]+ ]]; then
                  RELEASE_TYPE=""pre""
              else
                  RELEASE_TYPE=""standard""
              fi
          else
              IS_RELEASE=no
              RELEASE_TYPE=""n/a""
          fi
          # Print results.
          echo ""::group::Results""
          echo ""Github reference: $GITHUB_REF""
          echo ""Release: $IS_RELEASE""
          echo ""Release type: $RELEASE_TYPE""
          echo ""::endgroup::""
          # Export outputs.
          echo ""is_release=${IS_RELEASE}"" >> $GITHUB_OUTPUT
          echo ""release_type=${RELEASE_TYPE}"" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3

      - name: Dockerhub description
        if: ${{ steps.prep.outputs.release_type == 'standard' }}
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKER_IMAGE_NAME }}
          readme-filepath: DOCKERHUB.md

  notification:
    name: Notification
    needs: [ build, post-build ]
    runs-on: ubuntu-20.04
    if: ${{ always() }}

    steps:
      - name: Pushover notification
        uses: desiderati/github-action-pushover@v1
        with:
          job-status: ${{ needs.build.result }}
          pushover-api-token: ${{ secrets.PUSHOVER_API_TOKEN }}
          pushover-user-key: ${{ secrets.PUSHOVER_USER_KEY }}
",,,,,,Shell
5783,https://github.com/roleoroleo/yi-hack-allwinner-v2,"name: Build

on:
  push:
    tags:
    branches:
      - main
      - master

env:
  SUNXI_TOOLCHAIN: /opt/yi/toolchain-sunxi-musl

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y git unzip build-essential \
            bison bisonc++ libbison-dev autoconf autotools-dev \
            automake libssl-dev zlib1g-dev libzzip-dev flex libfl-dev \
            yui-compressor closure-compiler optipng jpegoptim libtidy5deb1 node-less \
            sassc sass-spec libhtml-tidy-perl libxml2-utils rsync
      - name: Download toolchain
        run: |
          git clone https://github.com/lindenis-org/lindenis-v536-prebuilt
          sudo mkdir -p ${SUNXI_TOOLCHAIN}
          sudo cp -r lindenis-v536-prebuilt/gcc/linux-x86/arm/toolchain-sunxi-musl/toolchain ${SUNXI_TOOLCHAIN}/
      - name: Build
        run: bash -ex scripts/compile.sh
      - name: Pack
        run: sudo bash -ex scripts/pack_fw.all.sh
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: out/**/*.tgz
",,,,,,Shell
8276,https://github.com/apachecn/pytorch-doc-zh,"name: Deploy to Github Pages

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - uses: actions/cache@v2
        with:
          key: ${{ github.ref }}
          path: .cache
      - run: pip install mkdocs mkdocs-material
      - run: mkdocs gh-deploy --force
",,,,,,Shell
1931,https://github.com/colemancda/networkobjects,"name: Swift

on: [push]

jobs:
  build:
    name: Build
    strategy:
      matrix:
        swift: [5.7.3, 5.8.1]
        os: [ubuntu-20.04, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Swift
      uses: slashmo/install-swift@v0.3.0
      with:
        version: ${{ matrix.swift }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Swift Version
      run: swift --version
    - name: Build (Debug)
      run: swift build -c debug
    - name: Build (Release)
      run: swift build -c release

  test:
    name: Test
    strategy:
      matrix:
        swift: [5.8.1]
        os: [ubuntu-20.04, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Swift
      uses: slashmo/install-swift@v0.3.0
      with:
        version: ${{ matrix.swift }}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Swift Version
      run: swift --version
    - name: Test (Debug)
      run: swift test --configuration debug
",,,,,,Swift
1932,https://github.com/swiftodon/mastodon.swift,"name: Run tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - phoenix
      - main

jobs:
  run_tests:
    name: Run Tests
    runs-on: macos-12
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Select required Xcode version
        run: sudo xcode-select -switch /Applications/Xcode_14.1.app
      - name: Run tests
        run: swift test
",,,,,,Swift
1933,https://github.com/brokenhandsio/vapor-oauth,"name: Vapor OAuth

on:
  push:
    branches: [ ""main"" ]
    tags:
      - '*'
  pull_request:
    branches: '*'

jobs:
  ubuntu_test:
    name: Ubuntu Build & Test
    runs-on: ubuntu-22.04
    container: swift:5.7.3-jammy
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test
  macos_test:
    name: macOS Build & Test
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test
",,,,,,Swift
1934,https://github.com/ibm/mac-ibm-enrollment-app,"name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main

jobs:
  SwiftLint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: GitHub Action for SwiftLint
        uses: norio-nomura/action-swiftlint@3.2.1
        env:
          WORKING_DIRECTORY: ./enrollment/
  test:
    runs-on: macos-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Run Xcodebuild Test, Build
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          cd enrollment
          xcodebuild -project ""enrollment.xcodeproj"" -scheme ""Mac@IBM Enrollment"" -destination 'platform=OS X' clean build CODE_SIGN_IDENTITY=- | xcpretty
",,,,,,Swift
1935,https://github.com/mattt/euler,"name: CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macOS-latest]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build and Test
      run: swift test
",,,,,,Swift
1936,https://github.com/procedurekit/procedurekit,"name: ProcedureKit CI

on: push

jobs:

  macOS:
    name: Test macOS 
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1    
      - name: macOS
        run: xcodebuild -project ""ProcedureKit.xcodeproj"" -scheme ""Mac"" -destination ""platform=macOS"" clean test | tee .ci/results/xcodebuild-mac.log
  iOS:
    name: Test iOS 
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1            
      - name: iOS
        run: xcodebuild -project ""ProcedureKit.xcodeproj"" -scheme ""iOS"" -destination ""platform=iOS Simulator,name=iPhone X"" clean test | tee .ci/results/xcodebuild-ios.log
  tvOS:
    name: Test tvOS 
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1            
      - name: tvOS
        run: xcodebuild -project ""ProcedureKit.xcodeproj"" -scheme ""tvOS"" -destination ""platform=tvOS Simulator,name=Apple TV"" clean test | tee .ci/results/xcodebuild-tvOS.log

  stressTest:
    name: Stress Test
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1            
      - name: Stress Test
        run: xcodebuild -project ""ProcedureKit.xcodeproj"" -scheme ""Stress Tests"" -destination ""platform=macOS"" clean test | tee .ci/results/xcodebuild-stress.log
        
  cocoapods:
    name: Test Integration with Cocoapods
    runs-on: macOS-latest    
    needs: [macOS, iOS, tvOS, stressTest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.x'      
      - name: Install Ruby dependencies
        run: bundle install --quiet
      - name: CocoaPods Install
        run: |      
          cd 'Integrations/CocoaPods'
          bundle exec pod install
      - name: Mac Build & Test
        run: |      
          cd 'Integrations/CocoaPods'
          bundle exec xcodebuild -workspace TryProcedureKit.xcworkspace -scheme TryProcedureKit clean build test | xcpretty

  spm:
    name: Test Integration with SPM
    runs-on: macOS-latest    
    needs: [macOS, iOS, tvOS, stressTest]
    steps:
      - uses: actions/checkout@v1
      - name: SPM Build & Test
        run: |      
          cd 'Integrations/SPM'
          swift package update
          swift build
          swift test
",,,,,,Swift
1937,https://github.com/nshipster/confettiview,"name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    paths:
      - .github/workflows/ci.yml
      - ""**/*.swift""

jobs:
  cocoapods:
    runs-on: macos-latest

    name: Validate CocoaPods specification

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Lint podspec file
        run: pod lib lint

  swiftlint:
    runs-on: macos-latest

    name: Lint with SwiftLint

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Lint Swift Code
        run: swiftlint lint --strict --reporter github-actions-logging

  swift_build:
    runs-on: macos-latest

    name: ""Build with Swift Package Manager""

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: swift build

  xcodebuild:
    runs-on: macos-latest

    name: ""Build with Xcode""

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Initialize Example project
        run: pod install --project-directory=Example
      - name: Build
        run: >-
          xcodebuild build
          -workspace Example/ConfettiView.xcworkspace
          -scheme ConfettiView-Example 
          -destination 'platform=iOS Simulator,name=iPhone 11'
",,,,,,Swift
1938,https://github.com/raulriera/cacher,"name: CI

on:
  - push

jobs:
  build:

    runs-on: macOS-latest
    
    steps:
    - uses: actions/checkout@v1
    - name: Xcode select
      run: |
        sudo xcode-select -s /Applications/Xcode_11.app/Contents/Developer
    - name: Generating project
      run: swift package generate-xcodeproj
    - name: Testing
      run: |
        xcodebuild clean test -project Cacher.xcodeproj -scheme Cacher-Package -destination ""platform=iOS Simulator,OS=13.0,name=iPhone 8""
",,,,,,Swift
1939,https://github.com/soffes/color,"name: Tests
on: [push]
jobs:
  test-swift-package:
    name: Test Swift Package
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: 'Select Xcode 11.2.1'
        run: sudo xcode-select -s /Applications/Xcode_11.2.1.app
      - name: 'Test'
        run: swift test
  test-macos:
    name: Test macOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: 'Select Xcode 11.2.1'
        run: sudo xcode-select -s /Applications/Xcode_11.2.1.app
      - name: 'Test'
        run: xcodebuild test -project Color.xcodeproj -scheme Color-macOS | xcpretty --color; exit ${PIPESTATUS[0]}
  test-ios:
    name: Test iOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: 'Select Xcode 11.2.1'
        run: sudo xcode-select -s /Applications/Xcode_11.2.1.app
      - name: 'Test'
        run: xcodebuild test -project Color.xcodeproj -scheme Color-iOS -destination ""platform=iOS Simulator,name=iPhone 8"" | xcpretty --color; exit ${PIPESTATUS[0]}
  test-tvos:
    name: Test tvOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: 'Select Xcode 11.2.1'
        run: sudo xcode-select -s /Applications/Xcode_11.2.1.app
      - name: 'Test'
        run: xcodebuild test -project Color.xcodeproj -scheme Color-tvOS -destination ""platform=tvOS Simulator,name=Apple TV 4K (at 1080p)"" | xcpretty --color; exit ${PIPESTATUS[0]}
  test-watchos:
    name: Build watchOS
    runs-on: macos-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v1
      - name: 'Select Xcode 11.2.1'
        run: sudo xcode-select -s /Applications/Xcode_11.2.1.app
      - name: 'Build'
        run: xcodebuild build -project Color.xcodeproj -scheme Color-watchOS -destination ""platform=watchOS Simulator,name=Apple Watch Series 4 - 40mm"" | xcpretty --color; exit ${PIPESTATUS[0]}
",,,,,,Swift
1940,https://github.com/swiftbrew/swiftbrew,"name: Build
on: [pull_request]

jobs:
  build:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@master
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1941,https://github.com/groue/grmustache.swift,"name: check-pr

on: [push]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build
        run: swift build

      - name: Test
        run: swift test",,,,,,Swift
1942,https://github.com/jakeheis/ice,"name: Test

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-16.04]
        swift: [""5.4""]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - uses: fwal/setup-swift@v1
      with:
        swift-version: ${{ matrix.swift }}
    - name: Build
      run: swift build
    - name: Run tests
      run: swift test
",,,,,,Swift
1943,https://github.com/giginet/crossroad,"name: Crossroad

on: 
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
jobs:
  SwiftPM:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        swift test --verbose
  Carthage:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        DESTINATION=""platform=iOS Simulator,name=iPhone 8"" SCHEME=""Crossroad-iOS""
        xcodebuild test -project Crossroad.xcodeproj -scheme ""${SCHEME}"" -destination ""${DESTINATION}""
  Demo:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Build Demo
      run: |
        DESTINATION=""platform=iOS Simulator,name=iPhone 8"" SCHEME=""Crossroad-iOS""
        xcodebuild build -project Demo/Demo.xcodeproj -scheme Demo -destination ""${DESTINATION}""
  tvOS:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        DESTINATION=""platform=tvOS Simulator,name=Apple TV 4K"" SCHEME=""Crossroad-tvOS""
        xcodebuild test -project Crossroad.xcodeproj -scheme ""${SCHEME}"" -destination ""${DESTINATION}""
  macOS:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Run Tests
      run: |
        DESTINATION=""platform=macOS"" SCHEME=""Crossroad-macOS""
        xcodebuild test -project Crossroad.xcodeproj -scheme ""${SCHEME}"" -destination ""${DESTINATION}""
  Lint:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: |
        gem install cocoapods
        pod repo update
    - name: SwiftLint
      run: swiftlint --strict
    - name: CocoaPods
      run: pod lib lint --allow-warnings
",,,,,,Swift
1944,https://github.com/vpeschenkov/securedefaults,"# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1945,https://github.com/antoninbiret/absteppedprogressbar,"name: SwiftLint

on: 
   pull_request:
        branches:
          - master
        paths:
          - '.github/workflows/switflint.yml'
          - '.swiftlint.yml'
          - '**/*.swift'
jobs:
  SwiftLint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Github Action for SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1

  BuildFramework:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - name: List available Xcode versions
      run: ls /Applications | grep Xcode
    - name: Build XC Framework
      run: ./generate-xcframework.sh
",,,,,,Swift
1946,https://github.com/zssz/berkanansdk,"name: build

on: [push]

jobs:
  build:

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1947,https://github.com/giginet/rxspritekit,"name: RxSpriteKit

on: [push]

jobs:
  build:
    runs-on: macos
    strategy:
      matrix:
        platform: [iOS, macOS, tvOS]
    env: 
      PLATFORM: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: Carthage
        key: ${{ matrix.platform }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
        restore-keys: |
          ${{ matrix.platform }}-carthage-
    - name: Install Dependencies
      run: |
        carthage update --platform $PLATFORM --cache-builds
    - name: Run Tests and Build Demos
      run: ./scripts/run_tests
  lint:
    runs-on: macos
    steps:
    - uses: actions/checkout@v2
    - name: Install Dependencies
      run: |
        gem install cocoapods
        pod repo update
        brew install swiftlint
    - name: SwiftLint
      run: swiftlint --strict
",,,,,,Swift
1948,https://github.com/kylehickinson/swiftui-webview,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
",,,,,,Swift
1949,https://github.com/hartbit/yaap,"name: Test

on:
  pull_request:
    branches:
    - master

jobs:
  test:
    name: Test on Swift ${{ matrix.swift_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        swift_version: [""5.1""]
        os: [ubuntu-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v1
    - uses: YOCKOW/Action-setup-swift@master
      with:
        swift-version: ${{ matrix.swift_version }}
    - run: swift test --verbose
",,,,,,Swift
1950,https://github.com/yonaskolb/genesis,"name: CI
on:
  push: {}
  pull_request: {}
jobs:
  run:
    runs-on: macos-11
    name: Xcode ${{ matrix.xcode }}
    strategy:
      matrix:
        xcode: [""13.0""]
    steps:
    - uses: actions/checkout@master
    - name: Set Xcode
      run: |
        echo ""Available Xcode versions:""
        ls /Applications | grep Xcode
        echo ""Choosing Xcode_${{ matrix.xcode }}.app""
        sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app
        xcodebuild -version
        swift --version
        swift package --version
    - name: Resolve
      run: swift package resolve
    - name: Build
      run: swift build
    - name: Test
      run: swift test 2>&1 | xcpretty
",,,,,,Swift
1951,https://github.com/alanquatermain/aqui,"name: Swift

on: [push]

jobs:
  build:

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1952,https://github.com/ibanimatable/ibanimatable,"name: build
on: push
jobs:
  build:
    name: build
    runs-on: macOS-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Swift build
        run: |
          sdk=`xcrun -sdk iphonesimulator -show-sdk-path`
          sdkVersion=`echo $sdk | sed -E 's/.*iPhoneSimulator(.*)\.sdk/\1/'`
          swift build  -Xswiftc ""-sdk"" -Xswiftc ""$sdk"" -Xswiftc ""-target"" -Xswiftc ""x86_64-apple-ios$sdkVersion-simulator""
",,,,,,Swift
1953,https://github.com/kylef/commander,"on: [push, pull_request]
jobs:
  windowstest:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-vsdevenv@master
      - name: Install swift-5.4
        run: |
          Install-Binary -Url ""https://swift.org/builds/swift-5.4-release/windows10/swift-5.4-RELEASE/swift-5.4-RELEASE-windows10.exe"" -Name ""installer.exe"" -ArgumentList (""-q"")
      - name: Set Environment Variables
        run: |
          echo ""SDKROOT=C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk"" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo ""DEVELOPER_DIR=C:\Library\Developer"" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Adjust Paths
        run: |
          echo ""C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo ""C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Supporting Files
        run: |
          Copy-Item ""$env:SDKROOT\usr\share\ucrt.modulemap"" -destination ""$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap""
          Copy-Item ""$env:SDKROOT\usr\share\visualc.modulemap"" -destination ""$env:VCToolsInstallDir\include\module.modulemap""
          Copy-Item ""$env:SDKROOT\usr\share\visualc.apinotes"" -destination ""$env:VCToolsInstallDir\include\visualc.apinotes""
          Copy-Item ""$env:SDKROOT\usr\share\winsdk.modulemap"" -destination ""$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap""
      - name: Test
        run: swift test",,,,,,Swift
1954,https://github.com/davecom/swiftgraph,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v -c debug --filter ""SwiftGraphTests""
",,,,,,Swift
1955,https://github.com/kam800/machobfuscator,"name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1956,https://github.com/brokenhandsio/steampress,"name: CI
on:
- push
jobs:
  xenial:
    container: 
      image: vapor/swift:5.1-xenial
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: swift test --enable-test-discovery --enable-code-coverage
  bionic:
    container: 
      image: vapor/swift:5.1-bionic
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Run Bionic Tests
      run: swift test --enable-test-discovery --enable-code-coverage
    - name: Setup container for codecov upload
      run: apt-get update && apt-get install curl
    - name: Process coverage file
      run: llvm-cov show .build/x86_64-unknown-linux/debug/SteamPressPackageTests.xctest -instr-profile=.build/x86_64-unknown-linux/debug/codecov/default.profdata > coverage.txt
    - name: Upload code coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_UPLOAD_KEY }}
        file: coverage.txt
",,,,,,Swift
1957,https://github.com/devxoul/moyasugar,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    runs-on: macOS-latest
    strategy:
      matrix:
        env:
          - sdk: iphonesimulator13.0
            destination: platform=iOS Simulator,name=iPhone 11 Pro,OS=13.0

          - sdk: macosx10.15
            destination: arch=x86_64

          - sdk: appletvsimulator13.0
            destination: OS=13.0,name=Apple TV

    steps:
    - uses: actions/checkout@v1

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_11.app

    - name: Generate Xcode Project
      run: swift package generate-xcodeproj --enable-code-coverage

    - name: Build and Test
      run: |
        set -o pipefail && xcodebuild clean build test \
          -project ""$PROJECT"" \
          -scheme ""$SCHEME"" \
          -sdk ""$SDK"" \
          -destination ""$DESTINATION"" \
          -configuration Debug \
          -enableCodeCoverage YES \
          CODE_SIGN_IDENTITY="""" CODE_SIGNING_REQUIRED=NO | xcpretty -c;
      env:
        PROJECT: MoyaSugar.xcodeproj
        SCHEME: MoyaSugar-Package
        SDK: ${{ matrix.env.sdk }}
        DESTINATION: ${{ matrix.env.destination }}

    - name: Upload Code Coverage
      run: |
        bash <(curl -s https://codecov.io/bash) \
          -J MoyaSugar \
          -t f88cd7cb-d7b4-47c5-af37-782cb49048cc
",,,,,,Swift
1958,https://github.com/eonist/hybridcamera,"# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    ##- uses: actions/checkout@v3
    ##- name: Build
      run: swift build -v
    ##- name: Run tests
    ##  run: swift test -v
",,,,,,Swift
1959,https://github.com/thoughtbot/argo,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1960,https://github.com/mczachurski/wallpapper,"name: Build

on:
  push:

jobs:
  build:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@master
    - name: Build
      run: swift build --configuration release --arch arm64 --arch x86_64

    - uses: actions/upload-artifact@v3
      with:
        name: wallpaper
        path: |
          .build/apple/Products/Release/wallpapper
          .build/apple/Products/Release/wallpapper-exif
",,,,,,Swift
1961,https://github.com/querykit/querykit,"on: push
jobs:
  test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v1
      - run: swift test
",,,,,,Swift
1962,https://github.com/soffes/hotkey,"name: Tests
on: [push]
jobs:
  test:
    name: Test
    runs-on: macOS-13
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run tests
        run: swift test
",,,,,,Swift
1963,https://github.com/sergdort/combinefeedback,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1964,https://github.com/mattt/commonmarkattributedstring,"name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  macos:
    runs-on: macos-latest

    strategy:
      matrix:
        destination:
          - platform=macOS
          - platform=iOS Simulator,name=iPhone 11
          - platform=tvOS Simulator,name=Apple TV

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Generate Xcode Project
        run: swift package generate-xcodeproj
      - name: Run Test Target
        run: xcodebuild test -destination '${{ matrix.destination }}' -scheme CommonMarkAttributedString-Package
",,,,,,Swift
1965,https://github.com/tattn/morecodable,"name: Continuous Integration

on:
  - push
  - pull_request

jobs:
  continuous-integration:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - run: rm .swift-version
      - name: Install Swift
        uses: YOCKOW/Action-setup-swift@master
        with:
          swift-version: '5.1'
      - name: Test
        run: swift test --enable-test-discovery
",,,,,,Swift
1966,https://github.com/mdiep/tentacle,"on:
  push:
    branches:
      - master
      - main
  pull_request:
jobs:
  xcode:
    name: Xcode - ${{ matrix.scheme }}
    runs-on: macos-latest
    strategy:
      matrix:
        scheme:
          - Tentacle-iOS
          - Tentacle-OSX        
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build
        run: script/cibuild Tentacle.xcworkspace ${{ matrix.scheme }} build-for-testing
      - name: Test
        run: script/cibuild Tentacle.xcworkspace ${{ matrix.scheme }} test-without-building

  spm:
    name: SwiftPM
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build
        run: swift build --build-tests
      - name: Test
        run: swift test --skip-build

  update-test-fixures:
    name: Update Test Fixtures
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Build
        run: script/cibuild Tentacle.xcworkspace update-test-fixtures build
",,,,,,Swift
1967,https://github.com/zntfdr/selenops,"name: Swiftlint

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  swiftlint_check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: GitHub Action for SwiftLint
      uses: norio-nomura/action-swiftlint@3.0.1",,,,,,Swift
1968,https://github.com/shindyu/applystylekit,"name: Swift

on: [push]

jobs:
  build:

    runs-on: macOS-latest

    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1969,https://github.com/tomlokhorst/xcodeedit,"name: Swift

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: '*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
",,,,,,Swift
1970,https://github.com/kean/pulse,"name: ""Pulse CI""

on: 
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - '*'

jobs:
  ios-latest:
    name: Unit Tests (iOS 16.4, Xcode 14.3.1)
    runs-on: macOS-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          Scripts/test.sh -s ""Pulse"" -d ""OS=16.4,name=iPhone 14 Pro""
          Scripts/test.sh -s ""PulseUI"" -d ""OS=16.4,name=iPhone 14 Pro""
  macos-latest:
    name: Unit Tests (macOS, Xcode 14.3.1)
    runs-on: macOS-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: Scripts/test.sh -d ""platform=macOS""
  tvos-latest:
    name: Unit Tests (tvOS 16.4, Xcode 14.3.1)
    runs-on: macOS-13
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          Scripts/test.sh -s ""Pulse"" -d ""OS=16.4,name=Apple TV""
          Scripts/test.sh -s ""PulseUI"" -d ""OS=16.4,name=Apple TV""
  watchos-latest:
    name: Run Build (watchOS 9.2, Xcode 14.2)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          Scripts/build.sh -s ""Pulse"" -d ""OS=9.2,name=Apple Watch Series 8 (45mm)""
          Scripts/build.sh -s ""PulseUI"" -d ""OS=9.2,name=Apple Watch Series 8 (45mm)""
  ios-xcode-previous:
    name: Unit Tests (iOS 16.2, Xcode 14.2)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: |
          Scripts/test.sh -s ""Pulse"" -d ""OS=16.2,name=iPhone 14 Pro""
          Scripts/test.sh -s ""PulseUI"" -d ""OS=16.2,name=iPhone 14 Pro""
  swift-build:
    name: Swift Build (SPM)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: swift build
  discover-typos:
    name: Discover Typos
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Discover typos
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install codespell
          codespell --ignore-words-list=""hart,inout,msdos,sur"" --skip=""./.build/*,./Tests/*,./Sources/PulseUI/Mocks/*""
  build-demo-ios:
    name: Build Demo (iOS)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Build Demo
        run: |
          set -o pipefail
          xcodebuild build -scheme ""Pulse Demo iOS"" -destination ""OS=16.2,name=iPhone 14 Pro"" | xcpretty
  build-demo-tvos:
    name: Build Demo (tvOS)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Build Demo
        run: |
          set -o pipefail
          xcodebuild build -scheme ""Pulse Demo tvOS"" -destination ""OS=16.1,name=Apple TV"" | xcpretty
  build-integration-examples-ios:
    name: Build Integration Examples (iOS)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Build Integration Tests
        run: |
          set -o pipefail
          xcodebuild build -scheme ""Pulse Integration Examples iOS"" -destination ""OS=16.2,name=iPhone 14 Pro"" | xcpretty
",,,,,,Swift
1971,https://github.com/swiftdocorg/markup,"name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  macos:
    runs-on: macos-latest

    strategy:
      matrix:
        xcode: [""12.4"", ""11.7"", ""11.3""]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install System Dependencies
        if: matrix.xcode == '11.3'
        run: brew bundle
      - name: Build and Test
        run: swift test
        env:
          DEVELOPER_DIR: /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        swift: [""5.3"", ""5.2"", ""5.1""]

    container:
      image: swift:${{ matrix.swift }}

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install System Dependencies
        run: |
          apt-get update
          apt-get install -y libxml2-dev
      - name: Build and Test
        run: swift test --enable-test-discovery

  windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - uses: seanmiddleditch/gha-setup-vsdevenv@master

      # TODO(compnerd) figure out how to build libxml2
      - name: Fetch libxml2
        run: |
          Invoke-WebRequest -Uri ""https://artprodeus21.artifacts.visualstudio.com/A8fd008a0-56bc-482c-ba46-67f9425510be/3133d6ab-80a8-4996-ac4f-03df25cd3224/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2NvbXBuZXJkL3Byb2plY3RJZC8zMTMzZDZhYi04MGE4LTQ5OTYtYWM0Zi0wM2RmMjVjZDMyMjQvYnVpbGRJZC8zNTI5NS9hcnRpZmFjdE5hbWUveG1sMi13aW5kb3dzLXg2NA2/content?format=zip"" -OutFile xml-windows-x64.zip
          Expand-Archive -Path xml-windows-x64.zip -DestinationPath $env:Temp -Force
          Move-Item -Path $env:Temp\xml2-windows-x64\Library -Destination C:\ -Force

      - name: Install swift-5.4
        run: |
          Install-Binary -Url ""https://swift.org/builds/swift-5.4-release/windows10/swift-5.4-RELEASE/swift-5.4-RELEASE-windows10.exe"" -Name ""installer.exe"" -ArgumentList (""-q"")
      - name: Set Environment Variables
        run: |
          echo ""SDKROOT=C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk"" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo ""DEVELOPER_DIR=C:\Library\Developer"" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Adjust Paths
        run: |
          echo ""C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo ""C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Supporting Files
        run: |
          Copy-Item ""$env:SDKROOT\usr\share\ucrt.modulemap"" -destination ""$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap""
          Copy-Item ""$env:SDKROOT\usr\share\visualc.modulemap"" -destination ""$env:VCToolsInstallDir\include\module.modulemap""
          Copy-Item ""$env:SDKROOT\usr\share\visualc.apinotes"" -destination ""$env:VCToolsInstallDir\include\visualc.apinotes""
          Copy-Item ""$env:SDKROOT\usr\share\winsdk.modulemap"" -destination ""$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap""

      - name: Build and Test
        run: swift test --enable-test-discovery -Xcc -DLIBXML_STATIC -Xcc -IC:\Library\libxml2-development\usr\include -Xcc -IC:\Library\libxml2-development\usr\include\libxml2 -Xlinker -LC:\Library\libxml2-development\usr\lib
",,,,,,Swift
1972,https://github.com/timdonnelly/advance,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1973,https://github.com/dokun1/lumina,"name: Pull Request Testing
on:
  pull_request:
jobs:
  build:
    runs-on: macos-latest
    name: Check Build
    steps:
      - name: Import Actions
        uses: actions/checkout@master
      
      - name: bundle install
        run: bundle install --without=documentation
        
      - name: danger
        env:
            DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}
        run: bundle exec danger

      - name: Run xcodebuild
        run: swift build -Xswiftc ""-sdk"" -Xswiftc ""`xcrun --sdk iphonesimulator --show-sdk-path`"" -Xswiftc ""-target"" -Xswiftc ""x86_64-apple-ios13.0-simulator""",,,,,,Swift
1974,https://github.com/samuelmeuli/glance,"name: Lint

on:
  - push
  - pull_request

jobs:
  lint-swift:
    name: Lint (Swift)
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Homebrew dependencies
        run: brew install mint

      - name: Restore Mint cache
        id: mint-cache
        uses: actions/cache@v1
        with:
          path: /usr/local/lib/mint/
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}

      - name: Install Mint dependencies
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap

      - name: Run linters
        run: |
          mint run swiftlint --quiet --strict
          mint run swiftformat --lint .

  lint-go:
    name: Lint (Go)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./HTMLConverter/

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.14

      - name: Restore Go Modules cache
        id: go-mod-cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod/
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-mod-

      - name: Run linters
        run: docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v1.25.1 golangci-lint run
",,,,,,Swift
1975,https://github.com/nicklockwood/expression,"name: build

on:
  push:
  pull_request:
jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        xcode: [""14.2.0"", ""13.4.1""]
    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build and Test
        run:
          xcodebuild -scheme ""Expression (Mac)"" -sdk macosx clean build test
      - name: Codecov
        run: bash <(curl -s https://codecov.io/bash) -t f835f552-0734-4266-b5c6-0c184c368bd9
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift: [""5.7"", ""5.6"", ""5.5"", ""5.2""]
    container:
      image: swift:${{ matrix.swift }}
      options: --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --security-opt apparmor=unconfined
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build and Test
        run: swift test --enable-test-discovery

",,,,,,Swift
1976,https://github.com/rapierorg/telegram-bot-swift,"name: Build Project

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Swift
      uses: fwal/setup-swift@d43a564349d1341cd990cfbd70d94d63b8899475
      with:
        swift-version: ""5.4""
    - name: Build
      run: swift build
  build-linux:
    runs-on: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libcurl4-openssl-dev
      - name: Setup Swift
        uses: fwal/setup-swift@d43a564349d1341cd990cfbd70d94d63b8899475
        with:
          swift-version: ""5.4""
      - name: Build
        run: swift build
",,,,,,Swift
1977,https://github.com/a2/messagepack.swift,"name: Swift

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run tests
      run: swift test -v
",,,,,,Swift
1978,https://github.com/kean/align,"name: ""Align CI""

on: 
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - '*'

jobs:
  macos-run-tests:
    name: Unit Tests (macOS, Xcode 13.3.1)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: swift test

  ios-run-tests:
    name: Unit Tests (iOS 15.4, Xcode 13.3.1)
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.3.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Run Tests
        run: xcodebuild test -scheme ""Align"" -destination ""OS=15.4,name=iPhone 13 Pro""

  discover-typos:
    name: Discover Typos
    runs-on: macOS-12
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.4.1.app/Contents/Developer
    steps:
      - uses: actions/checkout@v2
      - name: Discover typos
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install codespell
          codespell --ignore-words-list=""inout""
",,,,,,Swift
1979,https://github.com/samuelmeuli/tmignore,"name: Lint

on:
  - push
  - pull_request

jobs:
  lint:
    name: Lint
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Install Homebrew dependencies
        run: brew install mint

      - name: Restore Mint cache
        id: mint-cache
        uses: actions/cache@v1
        with:
          path: /usr/local/lib/mint/
          key: ${{ runner.os }}-mint-${{ hashFiles('**/Mintfile') }}

      - name: Install Mint dependencies
        if: steps.mint-cache.outputs.cache-hit != 'true'
        run: mint bootstrap

      - name: Run linters
        run: |
          mint run swiftlint --quiet --strict
          mint run swiftformat --lint .
",,,,,,Swift
1980,https://github.com/taketo1024/swiftymath,"name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: swift test -v
  linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run tests
      run: swift test -v
",,,,,,Swift
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
",,,,,,TypeScript
250,https://github.com/venkataravuri/e-commerce-microservices-sample,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    defaults:
      run:
        working-directory: ./products-cna-microservice

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: products-cna-microservice/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
419,https://github.com/awslabs/smithy-typescript,"name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Java ${{ matrix.java }} ${{ matrix.os }}
    strategy:
      matrix:
        java: [17]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'corretto'

      - name: clean and build
        run: ./gradlew clean build -Plog-tests

  lint-typescript:
    runs-on: ubuntu-latest
    name: TypeScript Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run eslint
        run: yarn lint --concurrency=3

  test-typescript:
    runs-on: smithy-typescript_ubuntu-latest_8-core
    name: TypeScript Test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: ""yarn""
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Install dependencies
        run: yarn
      - name: Build packages
        run: yarn build
      - name: Run unit tests
        run: yarn test
      - name: Run integration tests
        run: |
          yarn config set enableImmutableInstalls false
          yarn test:integration

  ensure-typescript-formatted:
    runs-on: ubuntu-latest
    name: Ensure TypeScript is formatted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run the code formatter
        run: yarn format
      # This checks the output of git diff. If it's not empty (i.e there were
      # changes) it'll return a non-zero error code.
      - name: Ensure there are no changes from running the formatter
        run: |
          git diff
          test -z ""$(git diff)""

  ensure-typescript-packages-have-changesets:
    runs-on: ubuntu-latest
    name: Ensure TypeScript packages have changesets
    steps:
      - uses: actions/checkout@v3
        # Include full git history needed for `yarn changeset status`
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install
        run: yarn
      - name: Ensure changesets exist for each changed package
        run: yarn changeset status --since=origin/main
",,,,,,TypeScript
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
",,,,,,TypeScript
2159,https://github.com/codetrixstudio/capacitorgoogleauth,"name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NpmToken}}
",,,,,,TypeScript
53,https://github.com/birkir/react-native-carplay,"name: ci/packages

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn config get cacheFolder)""

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-
      - name: Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo
            ${{ github.workspace }}/**/.eslintcache
          key: ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('packages/**.[jt]sx?', 'packages/**.json') }}
          restore-keys: |
            ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Typecheck
        run: |
          yarn workspaces foreach -tv --from 'react-native-carplay' --since=origin/master --recursive run typecheck
      - name: Linter
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master --recursive run lint --cache
      - name: Run build for changed packages
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master run build
",,,,,,TypeScript
343,https://github.com/jdiaz5513/capnp-ts,"name: ci
on:
  pull_request:
  push:
    branches: master
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - ""12""
          - ""14""
          - ""16""
          - ""17""
    name: Test on node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install capnproto libcapnp-dev
          npm i -g npm@latest
          npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
",,,,,,TypeScript
1496,https://github.com/mamba-org/gator,"name: Publish Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ""3.x""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine jupyterlab~=3.0 jupyter_packaging~=0.7.9
      - name: Build and publish NPM package
        if: ${{ startsWith(github.event.release.tag_name, 'npm') }}
        run: |
          if [[ ${PRE_RELEASE} == ""true"" ]]; then export TAG=""next""; else export TAG=""latest""; fi
          echo Publishing ${VERSION} with distribution tag ${TAG}
          npm install -g yarn
          yarn install
          # yarn lerna version ${VERSION} --yes --no-git-tag-version
          pushd packages/common
          yarn run publish --access public --tag ${TAG}
          popd
          pushd packages/labextension
          yarn run publish --access public --tag ${TAG}
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
          VERSION: ${{ github.event.release.name }}
      - name: Publish Python package
        if: ${{ !startsWith(github.event.release.tag_name, 'npm') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          npm install -g yarn
          yarn install
          yarn build
          python setup.py sdist bdist_wheel
          twine upload dist/*
",,,,,,TypeScript
1808,https://github.com/norkator/open-intelligence,"name: Frontend test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
      working-directory: ./front-end/
    - run: npm install react-scripts
      working-directory: ./front-end/
    - run: npm run build --if-present
      working-directory: ./front-end/
    - run: npm run test-ci
      working-directory: ./front-end/
",,,,,,TypeScript
2068,https://github.com/compilelife/loginsight,"name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Release Files
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release_on_${{ matrix. os }}
          path: release/loginsight[-_]*
          retention-days: 5",,,,,,TypeScript
3230,https://github.com/orchest/orchest,"# Runs all front-end/UI checks
name: UI

on:
  push:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""
  pull_request:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""

jobs:
  pnpm-fe-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ""${{ steps.nvm.outputs.NVMRC }}""

      # Run our pnpm hook manually, with additional build checks
      - name: Setup pnpm
        run: npm run setup && pnpm install

      - name: Build pnpm packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test

      - name: Lint pnpm packages
        run: pnpm run check

      - name: Type check
        run: pnpm run ts:check
",,,,,,TypeScript
3246,https://github.com/jupyterlab/extension-examples,"name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build_extensions:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        example:
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - notifications
          - react-widget
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: ${{ matrix.example }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - '${{ matrix.example }}/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff ../hello-world/setup.py setup.py
          diff ../hello-world/tsconfig.json tsconfig.json
          diff ../hello-world/.yarnrc.yml .yarnrc.yml
          diff ../hello-world/ui-tests/jupyter_server_test_config.py ./ui-tests/jupyter_server_test_config.py
          diff ../hello-world/ui-tests/playwright.config.js ./ui-tests/playwright.config.js
        shell: bash
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip ""jupyterlab>=4.0.0""
      # This is challenging to test in collaboration;
      # got trouble with the file ID service and the uncontrolled auto-save
      # - if: steps.filter.outputs.extension == 'true' && matrix.example == 'documents'
      #   run: |
      #     python -m pip install jupyter-collaboration
      - name: Build the extension
        if: steps.filter.outputs.extension == 'true'
        run: |
          # Same commands as in TL;DR to ensure it works
          touch yarn.lock
          pip install -e . -v
          jupyter labextension develop . --overwrite
        shell: bash
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: jlpm run lint:check
      - name: Check extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/*.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: ${{ matrix.example }}/ui-tests
      - name: Install kernel-output dependencies
        if: steps.filter.outputs.extension == 'true' && matrix.example == 'kernel-output'
        run: pip install numpy pandas
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            ${{ matrix.example }}/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_serverextension:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - 'server-extension/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('server-extension/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff hello-world/setup.py server-extension/setup.py
          diff hello-world/tsconfig.json server-extension/tsconfig.json
          diff hello-world/.yarnrc.yml server-extension/.yarnrc.yml
          diff hello-world/ui-tests/jupyter_server_test_config.py server-extension/ui-tests/jupyter_server_test_config.py
          diff hello-world/ui-tests/playwright.config.js server-extension/ui-tests/playwright.config.js
        shell: bash
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip jupyterlab~=4.0.0 build
      - name: Install the NPM dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm run lint:check
      - name: Build extension as user
        if: steps.filter.outputs.extension == 'true'
        # Force the usage of the source distribution (good practice)
        run: |
          cd server-extension
          python -m build --sdist
          pip install ./dist/jupyterlab_examples_server* --pre --find-links=dist --no-cache-dir
          python -m jupyterlab.browser_check
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
      - name: Clean extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          pip uninstall -y jupyterlab_examples_server
          jupyter lab clean
          jupyter server extension list
          jupyter labextension list
      - name: Build extension as dev
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          pip install .
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: server-extension/ui-tests
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            server-extension/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('server-extension/pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache lerna
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyterlab~=4.0.0 pytest pytest-check-links ""pytest-jupyter[server]>=0.6.0""
      - name: Bootstrap the jlpm deps
        run: jlpm
      - name: Build all the extensions
        run: |
          # Check embedded snippets
          jlpm lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in main)
          jlpm run lerna exec --concurrency 4 -- ""pytest --check-links""
",,,,,,TypeScript
3351,https://github.com/bashleigh/nestjs-blog,"# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: ./docker-compose.yml

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: env sync
        run: cp .env.dist .env && export $(cat ./.env | xargs)  

      # Runs a single command using the runners shell
      - name: build docker db
        run: docker-compose up -d
      
      - name: install
        run: yarn install --ignore-scripts
      
      - name: build
        run: yarn build

      - name: check docker
        run: docker-compose up -d

      - name: docker logs
        run: docker-compose logs && docker-compose ps

      # Runs a set of commands using the runners shell
      - name: tests
        run: yarn test --coverage
",,,,,,TypeScript
3352,https://github.com/rhysd/shiba,"name: Watchdogs
on: [push, pull_request]
env:
  TERM: xterm
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1
defaults:
  run:
    working-directory: v2

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - run: sudo bash ./scripts/install_apt_deps.bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: npm ci
      - run: npm run bundle
      - run: cargo clippy --all --benches --tests -- -D warnings
      - run: cargo test
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Clippy runs on each platforms in `test` job
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - uses: actions/setup-python@v4
        with:
          python-version: '3'
      - run: pip install yamllint
      - run: sudo bash ./scripts/install_apt_deps.bash
      - run: npm ci
      - run: npm run lint:tsc
      - run: npm run lint:prettier
      - run: npm run lint:eslint
      - run: npm run lint:stylelint
      - run: cargo fmt --all --check
      - run: shellcheck ./scripts/gen_macos_app.bash ./scripts/install_apt_deps.bash
      - run: yamllint --strict ./src/assets/default_config.yml
",,,,,,TypeScript
3353,https://github.com/ganlvtech/phaser-catch-the-cat,"name: Build and Deploy
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2.3.1

      - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          npm install
          npm run build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist # The folder the action should deploy.",,,,,,TypeScript
3354,https://github.com/vercel/uid-promise,"name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    name: Node.js ${{ matrix.node }} on ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16, 18, 20]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use pnpm
        run: corepack enable pnpm && pnpm --version
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm test
      - name: Maybe Release
        if: matrix.os == 'ubuntu-latest' && matrix.node == 16 && github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
        run: pnpm dlx semantic-release@19.0.5
",,,,,,TypeScript
3355,https://github.com/tb/ng2-nouislider,"name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install
      - run: pnpm test
",,,,,,TypeScript
3356,https://github.com/chenshenhai/pictool,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build
    - run: npm test
",,,,,,TypeScript
3357,https://github.com/sfeir-open-source/angular-search-experience,"name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: ""upload""
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: ""/"" # App source code path
          api_location: """" # Api source code path - optional
          output_location: ""dist/angular-search-experience"" # Built app content directory - optional
          app_build_command: ""npm run build:prod""
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          action: ""close""
",,,,,,TypeScript
3358,https://github.com/lzghzr/mdr_proxy,"name: Download Firmware

on:
  workflow_dispatch:

  schedule:
    - cron:  '0 8 * * *'

jobs:
  download:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Caching npm dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
      
      - name: Download
        run: npm run download

      - name: Commit files
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add firmware/* mdrdownload.json
          updated_service_ids=`git status -s | grep ""^A "" | awk '{print $2}' | xargs -i sh -c 'basename $(dirname $(dirname {}))' | grep -v ""\."" | sort -u | sed -z 's/\n/, /g' | sed 's/, $//'`
          git diff-index --cached --quiet HEAD -- || (git commit -m ""Auto download firmware (${updated_service_ids})"" && git push)
",,,,,,TypeScript
3360,https://github.com/thlorenz/spok,"name: Node CI 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install, lint and test
      run: |
        yarn install
        yarn lint
        yarn build
        yarn test-main
      env:
        CI: true
",,,,,,TypeScript
3361,https://github.com/cloudflare/db-connect,"name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        node_version: [8, 10, 12]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          version: ${{matrix.node_version}}
      - run: npm ci
      - run: npm test
",,,,,,TypeScript
3362,https://github.com/kriasoft/universal-router,"name: Node.js CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Test
      run: npm run test -- --coverage --verbose --ci
    - name: Build
      run: npm run build
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
",,,,,,TypeScript
3363,https://github.com/mrmartineau/design-system-utils,"name: Test

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - run: yarn install
    - run: yarn test
      env:
        CI: true
",,,,,,TypeScript
3364,https://github.com/microsoft/fluent-ui-react,"name: Screener
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  test:
    name: Test visuals on Screener
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - run: yarn install
      - run: yarn test:visual
        env:
          CI: true
          SCREENER_API_KEY: ${{secrets.SCREENER_API_KEY}}
",,,,,,TypeScript
3365,https://github.com/gcanti/newtype-ts,"name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3366,https://github.com/loomnetwork/loom-js,"name: CI

on:
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ""1.10.2""
      - uses: actions/checkout@v2
      - uses: actions/setup-node@master
        with:
          node-version: ""16.x""

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn cache dir)""
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Setup protoc3
        run: ./scripts/ci_install_protoc3.sh

      - run: yarn install
      - run: xvfb-run --auto-servernum yarn test:browser
      - run: yarn test:node
      # e2e tests currently sporadically fail with Error: Failed to check for transaction receipt
      # which originates from the test contract deployment, re-enable once the underlying issue is
      # resolved
      #- run: chmod +x ./e2e_tests.sh
      #- run: ./e2e_tests.sh
      #  working-directory: "".""
      #  env:
      #    BUILD_ID: build-1346
",,,,,,TypeScript
3367,https://github.com/joule-labs/webln,"name: Build package

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Package
        run: npm pack
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: webln
          path: ""*.tgz""
",,,,,,TypeScript
3368,https://github.com/umijs/umi-next,"name: CI

env:
  NODE_OPTIONS: --max-old-space-size=6144

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'examples/**'
      - 'docs/**'
      - '**/*.md'
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo ""::set-output name=pnpm_cache_dir::$(pnpm store path)""

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-

      # We use week in the turbo cache key to keep the cache from infinitely growing
      - name: Get cache expires mark
        id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-

      - name: Install dependencies
        run: pnpm i

      - run: pnpm build
      - run: pnpm tsc --noEmit
      - run: pnpm test
        env:
          CI: true
          NODE_ENV: test
",,,,,,TypeScript
3369,https://github.com/macfire10/react-shortcuts-hook,"name: Node.js CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install --save-dev react react-dom
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true
",,,,,,TypeScript
3370,https://github.com/gcanti/retry-ts,"name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3371,https://github.com/niklasvh/css-line-break,"name: CI

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
      - name: Tests
        run: npm run test
  publish:
    runs-on: ubuntu-latest
    name: Publish
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
      - name: NPM Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,TypeScript
3372,https://github.com/telesoho/vscode-markdown-paste-image,"name: Run Tests

on:
  push:
  pull_request:
    branches: [master]

jobs:
  build:
    name: ""(${{ matrix.os }})""
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node v${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup XVFB
        if: matrix.os == 'ubuntu-latest'
        run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Setup ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y xclip

      - name: npm install
        run: npm install

      - name: npm lint
        run: npm run lint

      - name: npm test
        run: npm test
        env:
          CI: true
          ELECTRON_NO_ATTACH_CONSOLE: 1
          DISPLAY: "":99.0""
",,,,,,TypeScript
3373,https://github.com/jetbridge/axios-jwt,"name: Build, lint and test

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: Run prettier
        run: ./node_modules/.bin/prettier -c ./src

      - name: Run eslint
        run: ./node_modules/.bin/eslint ./src --color --max-warnings 0

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: 'Build Project'
        id: build
        run: npm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage axios@1.4.0

      - name: Run rests
        run: npm run test
",,,,,,TypeScript
3374,https://github.com/theintern/leadfoot,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node: [12, 14, 16]
        include:
          - node: 16
            os: ubuntu-latest
            full-ci: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm run build
      - if: ${{ matrix.full-ci }}
        run: npm test config=@ci
        env:
          # Please get your own free key if you want to test yourself
          BROWSERSTACK_USERNAME: sitepenlabs1
          BROWSERSTACK_ACCESS_KEY: xm1uYrJuV3gZMJqCyZJX
      - if: ${{ ! matrix.full-ci }}
        run: npm test
      - if: ${{ matrix.full-ci }}
        uses: codecov/codecov-action@v2
",,,,,,TypeScript
3375,https://github.com/formatjs/formatjs-old,"name: Node CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 110
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install
      run: |
        yarn install --frozen-lockfile
      env:
        CI: true
    - name: yarn build
      run: |
        yarn build
      env:
        CI: true
    - name: yarn test
      run: |
        yarn test
      env:
        CI: true
",,,,,,TypeScript
3376,https://github.com/davfoundation/missioncontrol,"name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1

      - name: Login to Image Registry
        run: echo ""${{ secrets.GITHUB_TOKEN }}"" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Node Setup
        uses: actions/setup-node@v1
        with:
          node-version: ""11.x""

      - name: NPM Install
        run: |
          npm i

      - name: Test/Verify
        run: |
          make tslint tsc jest

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDD-HHmm

      - name: Build
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make build

      - name: Push Images
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make push-images

      - name: Commit distribution files
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          git config --local user.email ""action@github.com""
          git config --local user.name ""GitHub Action""
          git add k8s/dist/.
          git commit -m ""Version Distribution $TIMESTAMP"" -a

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,TypeScript
3377,https://github.com/ethereumjs/ethereumjs-blockchain,"name: blockchain-test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x, 13.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v1
      - run: npm install
      - run: npm test
        env:
          CI: true
",,,,,,TypeScript
3378,https://github.com/mdevils/css-selector-parser,"name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci --prefer-offline --no-audit --no-update-notifier
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - run: npm run test:dist
",,,,,,TypeScript
3379,https://github.com/jamiemason/imageoptim-cli,"name: verify

on:
  pull_request:
  push:

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 20.x

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color

      - name: Lint
        run: yarn lint
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color
",,,,,,TypeScript
3380,https://github.com/wessouza/calendar-base,"# ⚠️ WARNING
# This file is auto-generated by https://github.com/WesSouza/wes-cli

name: Lint, Type Check, Test, Build

on:
  pull_request:
  push:

jobs:
  check:
    name: Using Node ${{ matrix.node }}/${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ['16.x', '18.x']
        os: [ubuntu-latest, macOS-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install wes-cli
        run: |
          npm i -g wes-cli@3.0.0
          wes install

      - name: Use Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Lint
        run: yarn lint

      - name: Check Types
        run: yarn check:types

      - name: Test
        run: yarn test:ci

      - name: Build
        run: yarn build
",,,,,,TypeScript
3381,https://github.com/idered/typescript-expect-plugin,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
",,,,,,TypeScript
3382,https://github.com/ember-fastboot/simple-dom,"name: CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request: {}

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 12.x
          cache: yarn
      - name: install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: linting
        run: yarn lint
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 12.x
          cache: yarn
      - name: install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: linting
        run: yarn test
",,,,,,TypeScript
3383,https://github.com/seth-brown/formd,"name: Build Status

on: [push]

jobs:
  github:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v1
      - name: setup node
        uses: actions/setup-node@v1
      - name: install deps
        run: |
          npm install
      - name: run tests
        run: |
          npm test
      - name: build
        run: |
          npm run build
",,,,,,TypeScript
3384,https://github.com/fent/timequeue.js,"name: Node CI

on: [push, pull_request]

jobs:
  test:
    name: Test on node ${{ matrix.node-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm test

    - uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
",,,,,,TypeScript
3385,https://github.com/reedsy/quill-cursors,"name: Test

on:
  push:
    branches:
    - main
    - lint
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://npm.pkg.github.com'
    - name: Install
      # Skip post-install to avoid malicious scripts stealing PAT
      run: npm install --ignore-script
      env:
        # GITHUB_TOKEN can't access packages hosted in private repos,
        # even within the same organisation
        NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Post-install
      run: npm rebuild && npm run prepare --if-present
    - name: Build
      run: npm run build
    - name: Test
      run: npm test
",,,,,,TypeScript
3386,https://github.com/ryanelian/ts-polyfill,"name: Node CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, build, and test
      run: |
        npm install -g yarn
        yarn
        yarn build
        # npm test
      env:
        CI: true
",,,,,,TypeScript
3387,https://github.com/axetroy/vscode-deno,"name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [""12.16.1""]
        deno: [""0.35.0""]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: test in ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Deno
        uses: denolib/setup-deno@master
        with:
          deno-version: ${{ matrix.deno }}

      - name: Environment
        run: |
          node -v
          npm -v
          yarn --version
          deno --version

      - name: Install
        run: yarn

      - name: Check code format
        run: npm run check

      - name: Lint
        run: npm run lint

      - name: Test and Coveralls
        if: runner.os == 'macOS' && github.event_name != 'pull_request'
        env:
          COVERALLS_REPO_TOKEN: ""${{ secrets.COVERALLS_REPO_TOKEN }}""
          COVERALLS_GIT_BRANCH: ""${{ github.ref }}""
        run: npm run test-coveralls

      - name: Test
        if: github.event_name == 'pull_request'
        run: npm run test

      - name: Compile
        run: |
          npm run compile

      - name: Package
        run: npm run build

      - uses: actions/upload-artifact@v1
        if: runner.os == 'macOS'
        with:
          name: package
          path: ./vscode-deno.vsix

  release:
    runs-on: ubuntu-latest
    name: ""Release to vscode market and github""
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: package

      - uses: actions/setup-node@v1
        with:
          node-version: ""12.x""

      - name: publish to vscode market
        # require Azure DevOps Personal Access Token
        run: npx vsce publish --packagePath ./package/vscode-deno.vsix --pat ${{ secrets.ADO_TOKEN }}

      - uses: softprops/action-gh-release@v1
        name: publish to Github
        env:
          # require Github Personal Access Token
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            ./package/vscode-deno.vsix
          draft: false
",,,,,,TypeScript
3388,https://github.com/gcanti/fp-ts-routing,"name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm test
",,,,,,TypeScript
3389,https://github.com/ethereum/js-ethereum-cryptography,"name: Node CI

on: [push]
env:
  FORCE_COLOR: 2
jobs:
  test:
    name: v${{ matrix.node }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [18, 20]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}
    - run: npm install
    - name: Build and run tests
      run: |
        npm run build --if-present
        npm test
    - name: Run browser tests and lint
      run: |
        npm run browser-tests
        npm run lint
",,,,,,TypeScript
