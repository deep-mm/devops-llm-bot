Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language
1,https://github.com/sparklemotion/nokogiri,"name: upstream
concurrency:
  group: ""${{github.workflow}}-${{github.ref}}""
  cancel-in-progress: true
on:
  workflow_dispatch:
  schedule:
    - cron: ""0 8 * * 1,3,5"" # At 08:00 on Monday, Wednesday, and Friday # https://crontab.guru/#0_8_*_*_1,3,5
  pull_request:
    types: [opened, synchronize]
    branches:
      - '*'
    paths:
      - .github/workflows/upstream.yml # this file

jobs:
  xmlsoft-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""3.2""
          apt-get: ""autogen libtool shtool""
          brew: ""automake autogen libtool shtool""
          mingw: ""autotools""
          bundler-cache: true
          bundler: latest
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Compile against libxml2 and libxslt source directories""
        shell: bash
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test""

  xmlsoft-head-valgrind:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Run bundle install""
        run: ""bundle install --local || bundle install""
      - name: ""Compile against libxml2 and libxslt source directories""
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test:valgrind""
      - run: ""bundle exec rake test:memcheck""

  ruby-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
        sys: [""enable"", ""disable""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config""
          mingw: ""_upgrade_ libxml2 libxslt pkgconf""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-${{matrix.plat}}-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test

  ruby-head-valgrind:
    strategy:
      fail-fast: false
      matrix:
        sys: [""enable"", ""disable""]
    runs-on: ubuntu-20.04 # warning that 22.04 binary has dwarf5 debug info that valgrind can't read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config valgrind""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-ubuntu-head-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test:valgrind
      - run: bundle exec rake test:memcheck

  jruby-head:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ""jruby-head""
          bundler-cache: true
          bundler: latest
      - run: bundle exec rake compile
      - run: bundle exec rake test

  html5lib-tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.2
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/cache@v3
        with:
          path: ports
          key: ports-ubuntu-3.2-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - name: Update html5lib-tests
        run: |
          cd test/html5lib-tests
          git remote update origin
          git checkout origin/master
          git log --pretty=oneline -n1
      - run: bundle install --local || bundle install
      - run: bundle exec rake compile -- --disable-system-libraries
      - run: bundle exec rake test
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3

    - name: Build and Test
      run: |
        rake build
        rake test",0.041349954393432656,0.10295881607435135,Valid,0.2911392405063291,C
381,https://github.com/ivpn/android-app,"name: Build

on:
  push:
    branches: [ ""main"", ""develop"" ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Checkout submodules
      run: git submodule update --init --recursive
    
    - name: Set up NDK
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
    
    - name: Install liboqs dependencies
      run: sudo apt-get update && sudo apt-get install -y astyle cmake gcc ninja-build libssl-dev python3-pytest python3-pytest-xdist unzip xsltproc doxygen graphviz python3-yaml valgrind

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Gradle :core:assemble
      run: ./gradlew :core:assemble -x validateSigningProductionRelease
","name: Build and Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Validate Gradle Wrapper
        uses: actions/gradle/wrapper-validation-action@v1
      - name: Set up NDK
        uses: actions/setup-ndk@v1
      - name: Initialize CodeQL
        uses: actions/checkout@v2
        with:
          repository: github/codeql-action
          ref: v2
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",0.35487528344671204,0.5801579518919915,Valid,0.09976239968268798,C
740,https://github.com/zserge/partcl,"name: Build Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: make tcl
    - name: Test
      run: make test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Partcl
      run: |
        git clone https://github.com/zserge/partcl
        cd partcl
        make
        sudo make install
    - name: Build
      run: make
    - name: Test
      run: |
        if [ -f tcl_test.c ]; then
          make test
        fi",0.5387994143484627,0.20811209493551827,Valid,0.641025641025641,C
741,https://github.com/pinkavaj/rtl-sdr,"name: C/C++ CI

on:
  push:
    branches: [ master, development ]
  pull_request:
    branches: [ master, development ]

jobs:
  build_ubuntu-amd64_latest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: prerequisites
    # pre-installed on ubuntu-1804: build-essential, git 2.28.0, cmake 3.10/3.17, make
    # pre-installed: clang 6.0 / 8 / 9, gcc/++ 7.5.0/8.4.0/9.3.0
      run: sudo apt -qq update && sudo apt -yqq install libusb-1.0-0-dev
    - name: cmake_make
      run: mkdir build && cmake -S . -B build && cd build && make
    - name: compress
      run: tar zcvf librtlsdr_build_ubuntu-amd64_latest.tar.gz --directory=build/src --exclude=CMakeFiles --exclude=*.cmake --exclude=Makefile --exclude=rtl_app_ver.h .
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu_latest_build
        path: librtlsdr_build_ubuntu-amd64_latest.tar.gz

  build_macos_latest:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    #- name: prerequisites
    # pre-installed on macos-10.15: git 2.28.0, cmake 3.18.2, libusb 1.0.23
    # pre-installed: clang/LLVM 10.0.1, gcc/++ 8.4.0/9.3.0
    #  run: brew install libusb
    - name: cmake_make
      run: mkdir build && cmake -S . -B build && cd build && make
    - name: compress
      run: tar zcvf librtlsdr_build_macos-latest.tar.gz --directory=build/src --exclude=CMakeFiles --exclude=*.cmake --exclude=Makefile --exclude=rtl_app_ver.h .
    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: macos_latest_build
        path: librtlsdr_build_macos-latest.tar.gz

  cross_build_win32_win64_latest:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - name: prerequisites
      run: sudo apt -qq update && sudo apt -yqq install gcc-mingw-w64
    - name: build_w32_static
      run: bash ./cross_build_mingw32.sh static -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON
    - name: build_w32_static_udpsrv
      run: bash ./cross_build_mingw32.sh static_udpsrv -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON -DPROVIDE_UDP_SERVER=ON
    - name: build_w32_dlldep
      run: bash ./cross_build_mingw32.sh dlldep
    - name: build_w32_dlldep_udpsrv
      run: bash ./cross_build_mingw32.sh dlldep_udpsrv -DPROVIDE_UDP_SERVER=ON

    - name: build_w64_static
      run: bash ./cross_build_mingw64.sh static -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON
    - name: build_w64_static_udpsrv
      run: bash ./cross_build_mingw64.sh static_udpsrv -DLINK_RTLTOOLS_AGAINST_STATIC_LIB=ON -DPROVIDE_UDP_SERVER=ON
    - name: build_w64_dlldep
      run: bash ./cross_build_mingw64.sh dlldep
    - name: build_w64_dlldep_udpsrv
      run: bash ./cross_build_mingw64.sh dlldep_udpsrv -DPROVIDE_UDP_SERVER=ON

    - name: 'upload w32 static artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_static
        path: rtlsdr-bin-w32_static/bin/
    - name: 'upload w32 static_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_static_udpsrv
        path: rtlsdr-bin-w32_static_udpsrv/bin/
    - name: 'upload w32 dlldep artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_dlldep
        path: rtlsdr-bin-w32_dlldep/bin/
    - name: 'upload w32 dlldep_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w32_dlldep_udpsrv
        path: rtlsdr-bin-w32_dlldep_udpsrv/bin/

    - name: 'upload w64 static artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_static
        path: rtlsdr-bin-w64_static/bin/
    - name: 'upload w64 static_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_static_udpsrv
        path: rtlsdr-bin-w64_static_udpsrv/bin/
    - name: 'upload w64 dlldep artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_dlldep
        path: rtlsdr-bin-w64_dlldep/bin/
    - name: 'upload w64 dlldep_udpsrv artifact'
      uses: actions/upload-artifact@v2
      with:
        name: rtlsdr-bin-w64_dlldep_udpsrv
        path: rtlsdr-bin-w64_dlldep_udpsrv/bin/

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install -y cmake

    - name: Build the application
      run: cmake . && make

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up dependencies
      run: sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev

    - name: Run tests
      run: ctest --output-on-failure",0.0655534941249227,0.12590574104186633,Valid,0.25531040180341225,C
742,https://github.com/vbirds/tinyftp,"name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install -y cmake
    - name: Build
      run: cmake . && make
    - name: Test
      run: ctest",0.07068062827225131,0.2623216693511038,Valid,0.20588235294117646,C
743,https://github.com/gerhobbelt/pthread-win32,"name: All Platforms

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022]
        build_type: ['Release', 'Debug']
        link_type: ['static', 'shared']
        include:
          - link_type: static
            BUILD_SHARED_LIBS: OFF
          - link_type: shared
            BUILD_SHARED_LIBS: ON

    steps:
    - uses: actions/checkout@v3

    - name: Build
      run: |
        cmake -B ${{github.workspace}}/build-${{matrix.link_type}}-${{matrix.build_type}} -DBUILD_SHARED_LIBS=${{matrix.BUILD_SHARED_LIBS}} -DCMAKE_INSTALL_PREFIX=""${{github.workspace}}/install-${{matrix.link_type}}-${{matrix.build_type}}""
        cmake --build ${{github.workspace}}/build-${{matrix.link_type}}-${{matrix.build_type}} --config ${{matrix.build_type}} --target install
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Set up CMake
      uses: microsoft/setup-cmake@v1.0.2

    - name: Set up pthreads
      run: |
        git clone https://github.com/GerHobbelt/pthread-win32.git
        cd pthread-win32
        mkdir build
        cd build
        cmake ..
        cmake --build .
        cmake --install .

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Run tests
      run: |
        ctest --output-on-failure",0.07995003123048094,0.4328415626837824,Valid,0.23274161735700197,C
744,https://github.com/jibsen/parg,"name: parg CI

on: [push, pull_request]

jobs:
  windows:
    name: Windows ${{ matrix.config.name }}
    runs-on: windows-2022

    strategy:
      matrix:
        config:
          - name: MSVC x64
            generator: Visual Studio 17 2022
            cmake-flags: -A x64

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -G ""${{ matrix.config.generator }}"" ${{ matrix.config.cmake-flags }} -B build

      - name: Build
        run: cd build && cmake --build . --config Debug

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0 -C Debug

  linux:
    name: Linux ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    env:
      CC: ${{ matrix.config.cc }}

    strategy:
      matrix:
        config:
          - name: Clang UBSan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-g -fsanitize=undefined'

          - name: Clang ASan
            cc: clang
            cmake-flags: -DCMAKE_C_FLAGS_DEBUG='-O1 -g -fsanitize=address -fno-omit-frame-pointer'

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake ${{ matrix.config.cmake-flags }} -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && cmake --build . --verbose

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

  coverage:
    name: Linux Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure
        run: cmake -DCMAKE_C_FLAGS_DEBUG='-g -O0 --coverage' -DCMAKE_BUILD_TYPE=Debug -B build

      - name: Build
        run: cd build && cmake --build . --verbose

      - name: Test
        run: cd build && ctest -V --output-on-failure --interactive-debug-mode 0

      - name: Generate coverage
        run: cd build && gcov -b CMakeFiles/parg.dir/parg.c.gcno -o CMakeFiles/parg.dir

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./build/parg.c.gcov
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up parg
      run: |
        git clone https://github.com/jibsen/parg.git
        cd parg
        make
        sudo make install
    - name: Build
      run: |
        cmake .
        make
    - name: Test
      run: |
        if [ -d ""test"" ]; then
          cd test
          make
          ./test
        fi",0.05074971164936563,0.20283124614606016,Valid,0.26790096870680086,C
745,https://github.com/mischief/efivim,"name: VIM.EFI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: variables
        id: variables
        run: echo ""name=$(git describe --always --tags)"" >> $GITHUB_OUTPUT

      - name: dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential nasm mtools gdisk

      - name: build
        run:
          make vim.efi vim.img.gz

      - name: release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ steps.variables.outputs.name }}
          tag_name: ${{ steps.variables.outputs.name }}
          files: |
            vim.efi
            vim.img.gz

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up efivim
      uses: mischief/efivim

    - name: Build and Test
      run: |
        make
        make test",,,Invalid,,C
746,https://github.com/firehol/iprange,"on: [ push, pull_request, workflow_dispatch ]

jobs:
   prep:
      runs-on: ubuntu-latest
      name: Prepare build
      steps:
      - name: Extract tag/branch variables
        shell: bash
        run: |
           echo ""##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/}|grep -v '/')""
           echo ""##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/}|grep -v '/')""
        id: extract
      outputs:
         tag: ${{ steps.extract.outputs.tag }}
         branch: ${{ steps.extract.outputs.branch }}

   build:
      runs-on: ubuntu-latest
      name: Build package
      needs: prep
      steps:
      - uses: actions/checkout@v2
      - name: Set up build tools
        run: ./.github/workflows/setup.sh
      - name: Server-side run of commit hooks in case developer skipped them
        run: git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 | ./packaging/check-files -
        env:
           TRAVIS_TAG: ${{ needs.prep.outputs.tag }}
      - name: Obtain GPG keys to validate tag signature
        if: ${{ needs.prep.outputs.tag != '' }}
        run: |
            ./packaging/gpg-recv-key phil@firehol.org ""0762 9FF7 89EA 6156 012F  9F50 C406 9602 1359 9237""
            ./packaging/gpg-recv-key costa@tsaousis.gr ""4DFF 624A E564 3B51 2872  1F40 29CA 3358 89B9 A863""
            git fetch --tags -f
        env:
           KEYSERVER: pool.sks-keyservers.net
      - name: Run build
        run: fakeroot ./packaging/git-build && ./configure && make check
        env:
           TRAVIS_TAG: ${{ needs.prep.outputs.tag }}
      - name: Create checksums
        run: |
           for i in *.tar.*
           do
              md5sum -b $i > $i.md5
              sha512sum -b $i > $i.sha
           done
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
           name: build-artifacts
           path: |
              *.tar.*

   publish_branch:
      runs-on: ubuntu-latest
      name: Publish to website if branch
      needs: [ prep, build ]
      env:
         DEPLOY_ARTIFACTS: ""*.tar.*""
         DEPLOY_SERVER: travis@firehol.org
         DEPLOY_DIR: uploads/iprange/${{needs.prep.outputs.branch}}
         SERVER_DEPLOY_LOG: https://firehol.org/travis-project.log
         SERVER_DEPLOY_TIMEOUT: 300
      if: >-
         ${{ ( needs.prep.outputs.branch == 'main'
            || needs.prep.outputs.branch == 'master'
            || startsWith( needs.prep.outputs.branch, 'stable-' ) ) }}
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
           name: build-artifacts
      - name: Setup SSH
        id: ssh
        run: |
           echo ""$FIREHOL_ORG_PUBLISH_SSH"" > firehol_org_publish_key
           chmod 600 firehol_org_publish_key
           eval ""$(ssh-agent)""
           if ssh-add firehol_org_publish_key; then
              echo ""Key added: setting agent environment""
              echo ""##[set-output name=ssh_agent_pid;]$SSH_AGENT_PID""
              echo ""##[set-output name=ssh_auth_sock;]$SSH_AUTH_SOCK""
              mkdir -p $HOME/.ssh
              chmod 700 $HOME/.ssh
              echo PasswordAuthentication=no >> $HOME/.ssh/config
              chmod 644 $HOME/.ssh/config
           else
              echo ""Key not added: skipping ssh-agent environment""
           fi
           rm -f firehol_org_publish_key
        env:
           FIREHOL_ORG_PUBLISH_SSH: ${{secrets.FIREHOL_ORG_PUBLISH_SSH}}
      - name: Prepare deployment check
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: curl -s -oresult.orig $SERVER_DEPLOY_LOG
      - name: Deploy to website ${{needs.prep.outputs.branch}}
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: |
           ssh-keyscan -H firehol.org >> ~/.ssh/known_hosts
           ssh $DEPLOY_SERVER mkdir -p ""$DEPLOY_DIR""
           rsync -a $DEPLOY_ARTIFACTS ""$DEPLOY_SERVER:$DEPLOY_DIR/""
           ssh $DEPLOY_SERVER touch ""$DEPLOY_DIR/complete.txt""
        env:
           SSH_AGENT_PID: ${{ steps.ssh.outputs.ssh_agent_pid }}
           SSH_AUTH_SOCK: ${{ steps.ssh.outputs.ssh_auth_sock }}
      - name: Check deployment
        if: ${{ steps.ssh.outputs.ssh_agent_pid != '' }}
        run: |
           pause=10
           attempts=$(( $SERVER_DEPLOY_TIMEOUT / $pause ))
           while [ $attempts -gt 0 ]
           do
              sleep $pause
              attempts=$((attempts - 1))
              curl -s -o result $SERVER_DEPLOY_LOG
              if ! cmp -s result result.orig
              then
                 cat result
                 if grep -q ""not deploying"" result
                 then
                    exit 2
                 else
                    exit 0
                 fi
              fi
           done
           exit 1

   publish_tag:
      runs-on: ubuntu-latest
      name: Publish to github if tag
      needs: [ prep, build ]
      if: ${{ needs.prep.outputs.tag != '' }}
      steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
           name: build-artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           tag_name: ${{ github.ref }}
           release_name: Release ${{ github.ref }}
           draft: true
      - name: Upload
        uses: actions/github-script@v3
        with:
           github-token: ${{secrets.GITHUB_TOKEN}}
           script: |
              const path = require('path');
              const fs = require('fs');
              const release_id = '${{ steps.create_release.outputs.id }}';
              for (let file of await fs.readdirSync('./')) {
                 console.log('uploadReleaseAsset', file);
                 await github.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release_id,
                    name: file,
                    data: await fs.readFileSync(`./${file}`)
                 });
              }
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get install cmake

    - name: Build
      run: cmake . && make

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get install cmake

    - name: Build
      run: cmake . && make

    - name: Test
      run: make test",0.041834752726729416,0.07584005758879293,Valid,0.394380935790051,C
747,https://github.com/singpolyma/mnemonicode,"name: releaser

on:
    push:
        tags:
            - '*.*.*'

jobs:
    ubuntubuild:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
                with:
                    fetch-depth: 0
            -   name: Build
                run: |
                  sudo apt-get install -y build-essential gcc mingw-w64-tools zip gzip tar g++-mingw-w64-x86-64
                  make
                  tar czf linux-amd64.tar.gz mnencode mndecode
            - name: Upload release binaries
              uses: alexellis/upload-assets@0.4.0
              env:
                GITHUB_TOKEN: ${{ github.token }}
              with:
                asset_paths: '[""linux-amd64.tar.gz""]'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install dependencies
      run: |
        npm install
    - name: Build
      run: |
        npm run build
    - name: Test
      run: |
        npm test",0.14483319772172498,0.4168090921078505,Valid,0.1282051282051282,C
748,https://github.com/aetf/kmscon,"name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    branches:
    - release-*
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install meson
        run: pip install meson ninja
      - name: Install dependencies
        run: |
          sudo apt-get install -y check libudev-dev libxkbcommon-dev libdrm-dev libgbm-dev libegl1-mesa-dev libgles-dev libpango1.0-dev libsystemd-dev
      - name: Install libtsm
        run: |
          pip install cmake
          curl -L -o libtsm.tar.gz $(curl -s https://api.github.com/repos/Aetf/libtsm/releases/latest \
            | grep ""tarball_url"" \
            | awk '{ print $2 }' \
            | sed 's/,$//'       \
            | sed 's/""//g' )
          mkdir libtsm
          tar -xf libtsm.tar.gz -C libtsm --strip 1
          cd libtsm
          cmake -Bbuilddir
          cmake --build builddir
          sudo cmake --install builddir
      - name: Meson setup
        run: meson setup builddir/
      - name: Create source distribution
        # no unit tests yet
        run: meson dist -C builddir/
      - name: Create release note
        run: tools/extract_release_note.py NEWS ${{ github.workspace }}-release-note.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release-files
          path: |
            builddir/meson-dist/*
            ${{ github.workspace }}-release-note.txt
      - name: Release
        uses: softprops/action-gh-release@v1
        # only actually create the release when run on tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: builddir/meson-dist/*
          body_path: ${{ github.workspace }}-release-note.txt
",,,,,,C
749,https://github.com/rxtx/rxtx,"# This workflow will build a distribution bundle containing everything needed to run rxtx on supported platforms.

name: build rxtx-distribution

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-osx-binaries:

    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Build with Maven
      run: mvn --batch-mode -Pwith-osx-x86_64 package --file pom.xml
    - name: upload rxtxSerial binaries built on osx
      uses: actions/upload-artifact@v2
      with:
        name: rxtxSerial-binaries-built-on-osx
        path: rxtxSerial-osx-*/target/librxtxSerial-osx-*.jnilib
        if-no-files-found: error

  main-build:
    needs: build-osx-binaries
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Prepare installation of 32bit packages
      run: sudo dpkg --add-architecture i386 && sudo apt update
    - name: Install cross toolchains and libraries
      run: sudo apt install libc6-dev-i386 linux-libc-dev:i386 gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf gcc-mingw-w64-i686 gcc-mingw-w64-x86-64
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - uses: actions/download-artifact@v2
      with:
        name: rxtxSerial-binaries-built-on-osx
    - name: determine version string
      run: mvn help:evaluate -Dexpression=project.version -q -DforceStdout > project-version.txt
    - name: install osx native library
      run: cd rxtxSerial-osx-x86_64 && mvn --batch-mode install:install-file -Dfile=target/librxtxSerial-osx-x86_64.jnilib -DgroupId=gnu.io.rxtx -DartifactId=librxtxSerial-osx-x86_64 -Dversion=$(< ../project-version.txt) -Dpackaging=jnilib --file pom.xml
    - name: Build for all other platforms
      run: mvn --batch-mode -Pwith-linux-x86,with-linux-x86_64,with-linux-armel,with-linux-armhf,with-windows-x86,with-windows-x86_64 package install --file pom.xml
    - name: Bundle rxtx Java and native libs
      run: mvn --batch-mode -Dmake.release package --file pom.xml
    - name: upload rxtx-distribution
      uses: actions/upload-artifact@v2
      with:
        name: rxtx-distribution
        path: |
          rxtx-api/target/rxtx-api-*.jar
          rxtxSerial/target/rxtxSerial-*.jar
        if-no-files-found: error
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          rxtx-api/target/rxtx-api-*.jar
          rxtxSerial/target/rxtxSerial-*.jar
","name: Build and Test

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run Tests
        run: mvn test",,,Invalid,,C
750,https://github.com/mcufont/mcufont,"name: Run tests on Ubuntu

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  test_linux:
    name: Test on Ubuntu 20.04
    runs-on: ubuntu-20.04

    steps:
      - name: Check out code from GitHub
        uses: actions/checkout@v3
        with:
          path: mcufont

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libfreetype-dev cxxtest imagemagick
      
      - name: Build and run tests
        run: |
          cd mcufont
          make
      
      - name: Archive test case output
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            mcufont/tests/layout/*.bmp
            mcufont/tests/layout/*.bmp.*

      - name: Archive generated font files
        uses: actions/upload-artifact@v3
        with:
          name: font-files
          path: |
            mcufont/fonts/*.c
            mcufont/fonts/*.h

","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up MCUFont
        run: |
          git clone https://github.com/mcufont/mcufont.git
          cd mcufont
          make
      - name: Build application
        run: make
      - name: Run tests
        run: |
          if [ -d ""tests"" ]; then
            cd tests
            make test
          fi
",0.13333333333333333,0.4366199655339205,Valid,0.4888888888888889,C
751,https://github.com/xiotechnologies/fusion,"name: CI

on:
  push:
    branches: [ main ]
    tags: [ ""*"" ]
  pull_request:
    branches: [ main ]

jobs:
  build_wheels:
    runs-on: ${{ matrix.target[0] }}

    strategy:
      fail-fast: false
      matrix:
        target: # [ os, cibuildwheel-platform ]
          - [ macos-latest, macosx_x86_64 ]
          - [ macos-latest, macosx_arm64 ]
          - [ ubuntu-latest, manylinux_aarch64 ]
          - [ ubuntu-latest, manylinux_x86_64 ]
          - [ windows-latest, win_amd64 ]

        python-version: [ ""cp38-"", ""cp39-"", ""cp310-"", ""cp311-"", ""cp312-"" ]

    steps:
      - uses: actions/checkout@v3

      - name: Build CMake targets
        run: |
          mkdir cmake-build-release
          cd cmake-build-release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - if: matrix.target[0] == 'ubuntu-latest'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheel
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_ARCHS: all
          CIBW_BUILD: ${{ matrix.python-version }}${{ matrix.target[1] }}
          CIBW_BEFORE_BUILD: pip install numpy
          CIBW_BEFORE_TEST: pip install numpy matplotlib
          CIBW_TEST_COMMAND: cd {project}/Python && python advanced_example.py no_block && python simple_example.py no_block
          CIBW_TEST_COMMAND_WINDOWS: cd /D {project}/Python && python advanced_example.py no_block && python simple_example.py no_block

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload wheel
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: python -m twine upload --verbose --repository pypi wheelhouse/* --skip-existing

  build_sdist:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ""3.9"" # build sdist on lowest supported Python

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy
          python -m pip install twine

      - name: Build sdist
        run: python setup.py sdist

      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload sdist
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TOKEN }}
        run: python -m twine upload --verbose --repository pypi dist/*
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build application
      run: |
        cmake .
        make

    - name: Run tests
      run: |
        if [ -f ""test.py"" ]; then
          python test.py
        fi",0.0735930735930736,0.21309612815331563,Valid,0.328548644338118,C
752,https://github.com/madushadhanushka/simple-sqlite,"name: CMake

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      # Build your program with the given configuration
      run: make

    - name: Test
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./simple_sqlite
      
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install cmake
    - name: Build
      run: cmake . && make
    - name: Test
      run: make test",0.066543438077634,0.25806024587240556,Valid,0.4199430199430199,C
753,https://github.com/bjornblissing/osg-3rdparty-cmake,"# Workflow to build binary artifacts for tagged versions
name: Build


# Triggers the workflow when a new tag is pushed (but disregard new branches)
on: 
  push:
    tags:
    - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a matrix job called ""Release""
  Release:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - name: v141-x86
            os: windows-2016
            generator: ""Visual Studio 15 2017""
            arch: Win32
          - name: v141-x64
            os: windows-2016
            generator: ""Visual Studio 15 2017""
            arch: x64
          - name: v142-x86
            os: windows-2019
            generator: ""Visual Studio 16 2019""
            arch: Win32
          - name: v142-x64
            os: windows-2019
            generator: ""Visual Studio 16 2019""
            arch: x64

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache source code
        uses: actions/cache@v2
        with:
          # Cache the downloaded external source code and only update the cache when the download_dependencies.bat file is changed
          path: c:/3rdparty
          key: ${{ hashFiles('download_dependencies.bat') }}

      # Download source code
      - name: Download source code
        run: .\download_dependencies.bat
          
      # Compile code
      - name: Compile code
        run: |
            mkdir build
            cd build
            cmake ${env:GITHUB_WORKSPACE} -G ""${{ matrix.generator }}"" -A ${{ matrix.arch }} -DZLIB_SOURCE_DIR=c:/3rdparty/zlib -DLIBPNG_SOURCE_DIR=c:/3rdparty/libpng -DLIBJPEG_SOURCE_DIR=c:/3rdparty/libjpeg -DLIBTIFF_SOURCE_DIR=c:/3rdparty/tiff -DFREETYPE_SOURCE_DIR=c:/3rdparty/freetype -DGLUT_SOURCE_DIR=c:/3rdparty/glut -DGIFLIB_SOURCE_DIR=c:/3rdparty/giflib -DCURL_SOURCE_DIR=c:/3rdparty/curl -DCMAKE_INSTALL_PREFIX=""C:/projects/osg-3rdparty-cmake/build/3rdParty/${{ matrix.name }}""
            cmake --build . --config ""Debug"" --target install 
            cmake --build . --config ""Release"" --target install
            
      - name: Compress archive
        run: |
          cd C:\projects\osg-3rdparty-cmake\build\3rdParty\${{ matrix.name }}
          7z a C:\projects\osg-3rdparty-cmake\${{ matrix.name }}.zip . 
          
      - name: Publish artifact
        uses: ncipollo/release-action@v1
        with:
          artifacts: ""c:\\projects\\osg-3rdparty-cmake\\${{ matrix.name }}.zip""
          allowUpdates: true
          bodyFile: ""versions.md""
          token: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Set up CMake
      run: |
        mkdir -p build
        cd build
        cmake ..

    - name: Build
      run: |
        cd build
        cmake --build .

    - name: Test
      run: |
        cd build
        ctest --output-on-failure",0.09361939258846476,0.1776115295390278,Valid,0.15707078428374865,C
754,https://github.com/amadvance/advancecomp,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: autoreconf -i
      - run: ./configure
      - run: make all
      - run: make distcheck
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get install cmake

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        make

    - name: Run tests
      run: |
        if [ -d ""test"" ]; then
          cd test
          make test
        fi",0.10327455919395466,0.390758830497114,Valid,0.24303197725124637,C
755,https://github.com/rt-thread-packages/nimble,"name: NIMBLE

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  # Runs at 16:00 UTC (BeiJing 00:00) on the 31st of March
  schedule:
    - cron:  '0 9 31 3,9 *'
  push:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - documentation/**
      - '**/README.md'
      - '**/README_zh.md'

jobs:
  build:
    runs-on: ubuntu-latest
    name: ${{ matrix.legs.RTT_BSP }}
    strategy:
      fail-fast: false
      matrix:
       legs:
         - {RTT_BSP: ""acm32/acm32f0x0-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""CME_M7"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""apm32/apm32f103xe-minibroard"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""apollo2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""asm9260t"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at91/at91sam9g45"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at91/at91sam9260"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""allwinner_tina"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""cypress/psoc6-cy8ckit-062S2-43012"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""ft32/ft32f072xb-starter"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32103c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32105c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32105r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32107c-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32205r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32207i-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32303e-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32305r-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32307e-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32407v-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32/arm/gd32450z-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32e230k-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""gd32vf103v-eval"", RTT_TOOL_CHAIN: ""sourcery-riscv-none-embed""}
         - {RTT_BSP: ""gd32303e-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""gd32450z-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imx6sx/cortex-a9"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-atk-commander"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-fire-pro"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1052-seeed-ArchMix"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1060-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""imxrt/imxrt1064-nxp-evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tm4c123bsp"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tm4c129x"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""lpc55sxx/lpc55s69_nxp_evk"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""lpc408x"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""lpc1114"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""lpc54114-lite"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""mini2440"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""nrf5x/nrf51822"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52832"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52833"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""nrf5x/nrf52840"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""qemu-vexpress-a9"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""qemu-vexpress-gemini"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f072-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f091-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f103-100ask-mini"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-100ask-pro"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f103-atk-nano"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-atk-warshipv3"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-blue-pill"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32f103-dofly-lyc8"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-dofly-M3S"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-fire-arbitrary"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32f103-gizwits-gokitv21"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-hw100k-ibox"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-onenet-nbiot"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f103-yf-ufun"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f107-uc-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f207-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f302-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f401-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f405-smdz-breadfruit"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-armfly-v5"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-atk-explorer"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-robomaster-c"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f407-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32f410-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f411-atk-nano"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f411-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f412-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f413-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f427-robomaster-a"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-armfly-v6"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-fire-challenger"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f429-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f446-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f469-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f746-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f746-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-fire-challenger-v1"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f767-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32f769-st-disco"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32g070-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32g071-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32g431-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32g474-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-armfly-v7"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-atk-apollo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-openmv-h7plus"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h743-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h747-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32h750-artpi"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r5-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r9-st-eval"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l4r9-st-sensortile-box"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l010-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l053-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l412-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
        # - {RTT_BSP: ""stm32/stm32l431-BearPi"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l432-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l433-ali-startkit"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""stm32/stm32l433-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l452-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l475-atk-pandora"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l475-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l476-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l496-ali-developer"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l496-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32l552-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32mp157a-st-discovery"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32mp157a-st-ev1"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32u575-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""stm32/stm32wb55-st-nucleo"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         #- {RTT_BSP: ""wch/arm/ch32f103c8-core"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""wch/arm/ch32f203r-evt"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""synwit/swm320"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""synwit/swm341"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""beaglebone"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""zynqmp-r5-axu4ev"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""frdm-k64f"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f403a-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f407-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f413-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f415-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f435-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""at32/at32f437-start"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""smartfusion2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""raspberry-pico"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32/ev_hc32f4a0_lqfp176"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32/ev_hc32f460_lqfp100_v2"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""hc32l196"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""tae32f5300"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/samc21"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/same54"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         - {RTT_BSP: ""microchip/same70"", RTT_TOOL_CHAIN: ""sourcery-arm""}
         
         #- {RTT_BSP: ""bluetrum/ab32vg1-ab-prougen"", RTT_TOOL_CHAIN: ""sourcery-riscv64-unknown-elf""}
         - {RTT_BSP: ""k210"", RTT_TOOL_CHAIN: ""sourcery-riscv-none-embed""}
         - {RTT_BSP: ""qemu-virt64-aarch64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         #- {RTT_BSP: ""raspberry-pi/raspi3-64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         #- {RTT_BSP: ""raspberry-pi/raspi4-64"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         - {RTT_BSP: ""rockchip/rk3568"", RTT_TOOL_CHAIN: ""sourcery-aarch64""}
         
    steps:
      - uses: actions/checkout@v3
        with:
          repository: RT-Thread/rt-thread
          fetch-depth: 0
          ref: lts-v4.1.x

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      - name: Install Tools
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get -qq install gcc-multilib libncurses5-dev scons
          sudo python -m pip install --upgrade pip -qq
          pip install requests -qq
          git config --global http.postBuffer 524288000
          python -c ""import tools.menuconfig; tools.menuconfig.touch_env()""
          echo ""RTT_ROOT=${{ github.workspace }}"" >> $GITHUB_ENV
          echo ""RTT_CC=gcc"" >> $GITHUB_ENV

      - name: Install Arm ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-arm' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.3/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
          sudo tar xjf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2 -C /opt
          /opt/gcc-arm-none-eabi-10-2020-q4-major/bin/arm-none-eabi-gcc --version
          echo ""RTT_EXEC_PATH=/opt/gcc-arm-none-eabi-10-2020-q4-major/bin"" >> $GITHUB_ENV
          
      - name: Install AArch64 ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-aarch64' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.6/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz
          sudo tar -xf gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz -C /opt
          /opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin/aarch64-none-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf/bin"" >> $GITHUB_ENV
          
      - name: Install Mips ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-mips' && success() }}
        shell: bash
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.1/mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2
          sudo tar xjf mips-2016.05-7-mips-sde-elf-i686-pc-linux-gnu.tar.bz2 -C /opt
          /opt/mips-2016.05/bin/mips-sde-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/mips-2016.05/bin"" >> $GITHUB_ENV
          
      - name: Install Riscv64-unknown-elf ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-riscv64-unknown-elf' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.4/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
          sudo tar zxvf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz -C /opt
          /opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin/riscv64-unknown-elf-gcc --version
          echo ""RTT_EXEC_PATH=/opt/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14/bin"" >> $GITHUB_ENV
      - name: Install Riscv-none-embed ToolChains
        if: ${{ matrix.legs.RTT_TOOL_CHAIN == 'sourcery-riscv-none-embed' && success() }}
        run: |
          wget -q https://github.com/RT-Thread/toolchains-ci/releases/download/v1.5/xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz
          sudo tar zxvf xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz -C /opt
          /opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin/riscv-none-embed-gcc --version
          echo ""RTT_EXEC_PATH=/opt/xpack-riscv-none-embed-gcc-8.3.0-2.3/bin"" >> $GITHUB_ENV
          
      - name: Bsp Scons Compile
        if: ${{ success() }}
        shell: bash
        env:
          RTT_BSP: ${{ matrix.legs.RTT_BSP }}
          RTT_TOOL_CHAIN: ${{ matrix.legs.RTT_TOOL_CHAIN }}
        run: |
          source ~/.env/env.sh
          sed -i ""s/# CONFIG_PKG_USING_NIMBLE is not set/CONFIG_PKG_USING_NIMBLE=y/g"" bsp/$RTT_BSP/.config
          scons --pyconfig-silent -C bsp/$RTT_BSP
          sed -i ""s/CONFIG_PKG_NIMBLE_CTLR=y/CONFIG_PKG_NIMBLE_CTLR=n/g"" bsp/$RTT_BSP/.config
          sed -i ""s/# CONFIG_PKG_NIMBLE_HCI_USING_RTT_UART is not set/CONFIG_PKG_NIMBLE_HCI_USING_RTT_UART=y/g"" bsp/$RTT_BSP/.config
          sed -i ""s/CONFIG_PKG_USING_NIMBLE_V100=y/# CONFIG_PKG_USING_NIMBLE_V100 is not set/g"" bsp/$RTT_BSP/.config
          sed -i ""s/# CONFIG_PKG_USING_NIMBLE_LATEST_VERSION is not set/CONFIG_PKG_USING_NIMBLE_LATEST_VERSION=y/g"" bsp/$RTT_BSP/.config
          scons --pyconfig-silent -C bsp/$RTT_BSP
          cat bsp/$RTT_BSP/.config
          pushd bsp/$RTT_BSP && pkgs --update && popd
          scons -C bsp/$RTT_BSP
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Build the application
        run: |
          # Add build commands here
      - name: Run tests
        run: |
          # Add test commands here",0.023587619376366355,0.02581257075381257,Valid,0.05551660782720816,C
756,https://github.com/jgm/lunamark,"name: Run luacheck and unit tests
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  luacheck:
    name: Run luacheck
    runs-on: ubuntu-latest
    container:
      image: ubuntu:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install additional packages
        run: |
          set -ex
          apt -qy update
          apt -qy install lua-check
      - name: Run luacheck
        run: luacheck lunamark/
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Build docker image
        run: |
          set -ex
          export DOCKER_BUILDKIT=1
          docker build -t jgm/lunamark .
      - name: Run unit tests
        run: |
          docker run --rm -v ""$PWD"":/mnt -w /mnt --entrypoint /bin/sh jgm/lunamark -c 'make test'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Lua
      uses: actions/setup-lua@v1
      with:
        lua-version: '5.1'
    - name: Build
      run: make
    - name: Run Tests
      run: make test",0.130568356374808,0.33586055579335905,Valid,0.1886216085209863,C
758,https://github.com/pyocd/flashalgo,"name: linux develop build ""GCC with Make""

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: syphar/restore-virtualenv@v1
    
    - name: install requirements
      run: sudo apt-get install -y gcc-arm-none-eabi
      
    - name: install requirements
      run: pip install -r requirements.txt

    - name: build
      run: progen build -t make_gcc_arm
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install Jinja2
        pip install pyelftools

    - name: Build and Test
      run: |
        # Add build and test commands here
        # Example:
        # python build.py
        # python test.py
",0.22262773722627738,0.5318548552605368,Valid,0.2591434386403076,C
2,https://github.com/connectbot/connectbot,"name: Continuous Integration

on:
  push:
    branches: [ main ]
    tags:
      - ""v*.*.*""
  pull_request:
    branches: [ main ]
  schedule:
    - cron: ""0 7 */3 * *""
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-latest

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Home files
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          GITHUB_TAG=""git-$(git describe)""
          GITHUB_TITLE=""$(git log -1 --pretty=%B | head -1)""
          echo ""${GITHUB_TAG}"" > tag.txt
          echo ""${GITHUB_TAG}: ${GITHUB_TITLE}"" > release-title.txt
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab

      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  upload:
    name: Upload to GitHub releases
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""RELEASE_TITLE=$(cat release-title.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          body: ""Untested build""
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  signing:
    name: Trigger remote signing
    needs: upload
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Call remote signer
        uses: joelwmale/webhook-action@814998dae0915eaf4faec992291eb956ad37d902
        with:
          url: ${{ secrets.SIGNER_WEBHOOK_URL }}
          body: '{""TAG_ID"": ""${{ steps.name.outputs.GITHUB_TAG }}""}'
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run tests
        run: |
          ./gradlew test",0.11038696537678208,0.153310887109055,Valid,0.4715370018975332,Java
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.2840989399293286,0.4120071259648482,Valid,0.8088709677419355,Java
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
5,https://github.com/rzwitserloot/lombok,"name: Tests

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Build with Ant
        run: ant -noinput dist
        
      - uses: actions/upload-artifact@v3
        with:
          name: lombok.jar
          path: dist/lombok.jar
    
  
  test-javac:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
        goal: [javacCurrent]
        include:
          - jdk: 11
            goal: javac6
          - jdk: 11
            goal: javac8
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ matrix.jdk }}
        if: ${{ matrix.jdk != 21 }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'zulu'
      
      - name: Set up JDK 21-ea
        if: ${{ matrix.jdk == 21 }}
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 21
          version: latest
          
      - name: Install Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.zip
          unzip apache-ant-1.10.13-bin.zip -d ""${HOME}""
          echo ""ANT_HOME=${HOME}/apache-ant-1.10.13"" >> $GITHUB_ENV
          echo ""${HOME}/apache-ant-1.10.13/bin"" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Run tests
        run: ant -noinput test.${{ matrix.goal }}
  
  test-eclipse:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        version:
        - eclipse-oxygen
        - eclipse-202006
        - eclipse-202006-jdk8
        - eclipse-202212
        - eclipse-oxygen-full
        - eclipse-2022-03-full
        - ecj11
        - ecj14
        - ecj16
        - ecj19
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
          
      - name: Build with Ant
        run: xvfb-run ant -noinput dist test.${{ matrix.version }}
        
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [8, 11, 17, 21]
        tool: 
          - {name: ""maven"",  cmd: ""mvn compile""}
          - {name: ""gradle"", cmd: ""gradle assemble""}
          - {name: ""ant"",    cmd: ""ant dist""}
          - {name: ""bazel"",  cmd: ""bazel build //:ProjectRunner""}
      fail-fast: false
    env:
      IMAGE_NAME: lombok-${{ matrix.tool.name }}-jdk${{ matrix.jdk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/download-artifact@v3
        with:
          name: lombok.jar
        
      - name: Build container
        working-directory: ./docker
        run: docker build --build-arg jdk=${{ matrix.jdk }} -t $IMAGE_NAME -f ${{ matrix.tool.name }}/Dockerfile .
        
      - name: Compile in container
        run: docker run --entrypoint="""" -v $(pwd)/lombok.jar:/workspace/lombok.jar $IMAGE_NAME /bin/bash -c ""cd classpath; ${{ matrix.tool.cmd }}""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test",,,Invalid,,Java
6,https://github.com/apache/hive,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  macos-jdk8:
    name: 'macOS (JDK 8)'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build project'
        run: |
          mvn clean install -DskipTests -Pitests
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn clean install

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
7,https://github.com/apache/directory-studio,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '42 18 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        mvn -f pom-first.xml clean install
        mvn clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B clean install

    - name: Run Tests
      run: mvn test",0.11613351877607789,0.14492099213855478,Valid,0.5205479452054794,Java
9,https://github.com/github-api/github-api,"name: CI

on: 
  push:
    branches:
      - main
      - '!/refs/heads/dependabot/*'
  pull_request:
    branches:
      - '*'
      - '!/refs/heads/patch*'

# this is required by spotless for JDK 16+
env:
  JAVA_11_PLUS_MAVEN_OPTS: ""--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED""

permissions:
  contents: read

jobs:
  build:
    name: build-only (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Install (skipTests)
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -DskipTests --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
        name: maven-target-directory
        path: target/
        retention-days: 3
  site:
    name: site (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Site
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean site -D enable-ci --file pom.xml
  test:
    name: test (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows ]
        java: [ 11, 17 ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    # JDK 11+
    - name: Maven Install without Code Coverage
      if: matrix.os == 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D japicmp.skip=true --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Maven Install with Code Coverage
      if: matrix.os != 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D enable-ci --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Codecov Report 
      if: matrix.os == 'ubuntu' && matrix.java == '17'
      uses: codecov/codecov-action@v3.1.4

  test-java-8:
    name: test Java 8 (no-build)
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: maven-target-directory
        path: target
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: 'maven'   
    - name: Maven Test (no build) Java 8
      run: mvn -B surefire:test -DfailIfNoTests -Dsurefire.excludesFile=src/test/resources/slow-or-flaky-tests.txt
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test",,,Invalid,,Java
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file ./app/depict/pom.xml

    - name: Run tests
      run: mvn test --file ./app/depict/pom.xml",,,Invalid,,Java
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Validate Gradle wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.01988400994200497,0.15374141491204268,Valid,0.5405405405405406,Java
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.018382794665385078,0.0240540932386775,Valid,0.1941265781398631,Java
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",,,Invalid,,Java
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.04199475065616798,0.20911836342422643,Valid,0.5896609279097758,Java
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",0.15321756894790603,0.7519982301967628,Valid,0.967741935483871,Java
17,https://github.com/enginehub/worldedit,"name: Gradle Build
on: [push, pull_request]

jobs:
  build:
    name: Build WorldEdit on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        cache: 'gradle'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build -s
    - uses: actions/upload-artifact@v3
      name: Archive Reports
      if: always()
      with:
        name: reports for ${{ matrix.os }}
        path: '**/build/reports/**'
    - uses: actions/upload-artifact@v3
      name: Archive Logs
      if: always()
      with:
        name: logs for ${{ matrix.os }}
        path: '**/*.log'

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",,,Invalid,,Java
18,https://github.com/bartdag/py4j,"name: test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        java-version: [ 8 ]
        python-version: [ '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10' ]
        include:
          - os: windows-2019
            java-version: 17
            python-version: '3.10'
          - os: ubuntu-18.04
            java-version: 11
            python-version: '2.7'
          - os: ubuntu-18.04
            java-version: 17
            python-version: '3.8'
    name: Py ${{ matrix.python-version }}, Java ${{ matrix.java-version }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # pin@v2.3.5

      - name: Setup Java 8 JDK for build
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6 # pin @v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Install dependencies
        run: |
          pip install pytest
          cd py4j-java
          # Useful in case the build stops working because of version issues.
          ./gradlew --version
          echo `java -version` && echo `javac -version` && echo `python --version`
          echo $PATH
          echo $JAVA_HOME
          ./gradlew clean
        shell: bash

      - name: Enable IPV6
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

      - name: Run gradle tests
        run: |
          cd py4j-java
          ./gradlew check
          ./gradlew assemble

      - name: Setup Java ${{ matrix.java-version }} JDK for PyTest
        if: ${{ matrix.java-version != '8' }}
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Run PyTest
        run: |
          cd py4j-python
          echo `java -version`
          echo $JAVA_HOME
          # Java TLS tests are disabled until they can be fixed (refs #441)
          pytest -k ""not java_tls_test.""

  test-doc:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: |
          python3 -m pip install -r py4j-web/requirements-doc.txt
          python3 -m pip list

      - name: Setup Java 8 JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Javadoc build
        run: |
          cd py4j-java && ./gradlew javadoc && cd ..
          mv py4j-java/build/docs/javadoc py4j-web/_static/

      - name: Sphinx build
        run: |
          cd py4j-web && make clean html && cd ..
          mv py4j-web/_build/html ../ # Move out of the current repo for GitHub Pages.

      # Publishing documentation only for commits in the master branch.
      - name: Checkout GitHub Pages branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Copy the generated site
        if: github.event_name != 'pull_request'
        run: |
          # Include Javadoc if the commit is tagged (for releases only).
          if [ -z ""`git describe --tags --exact-match 2>/dev/null`"" ]; then
            rm -fr ../html/_static/javadoc
            [ -d _static/javadoc ]  && mv _static/javadoc ../html/_static
          fi

          rm -fr * # Remove existing site
          touch .nojekyll # See https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages
          echo ""www.py4j.org"" > CNAME # Custom domain for GitHub Actions
          cp -r ../html/* . # Move generated site to the current repo.

      - name: Push new site
        uses: EndBug/add-and-commit@v8
        if: github.event_name != 'pull_request'
        with:
          default_author: github_actions
          message: Push new site by ${{ github.sha }}
          add: ""*""
          push: ""--force"" # In case it conflicts with the same step in another workflow.
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install flake8 pytest tox sphinx

    - name: Build and Test
      run: |
        # Add build and test commands here
        # Example:
        # python setup.py build
        # pytest
",0.059267439720228236,0.11168738729918276,Valid,0.2620645020613633,Java
19,https://github.com/plantuml/plantuml,"name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
      do_javadoc: ${{ steps.config.outputs.do_javadoc }}
      do_test_linux: ${{ steps.config.outputs.do_test_linux }}
      do_test_windows: ${{ steps.config.outputs.do_test_windows }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          if [[ ""${GITHUB_EVENT_NAME}"" == ""create"" && ""${REF_TYPE}"" == ""tag"" && ""${REF}"" == v* && \
                ( ""${ACTOR}"" == ""arnaudroques"" || ""${ACTOR}"" == ""${GITHUB_REPOSITORY_OWNER}"" ) \
             ]]; then
            echo ""::notice title=::This run will release '${REF}'""
            echo ""do_release=true"" >> $GITHUB_OUTPUT
            echo ""pom_version=${REF#v}""
            echo ""pom_version=${REF#v}"" >> $GITHUB_OUTPUT # pom_version is the tag without the 'v' prefix
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          elif [[ ""${GITHUB_EVENT_NAME}"" =~ push|workflow_dispatch && ""${REF}"" == ""refs/heads/master"" && ""${ACTOR}"" == ""arnaudroques"" ]]; then
            echo ""::notice title=::This run will release a snapshot""
            echo ""do_snapshot_release=true"" >> $GITHUB_OUTPUT
            V=$(perl -ne 'if (/return (\d{6,7});/) {$v=$1} if (/final int beta = (\d+);/) {$b=$1} END{print(substr($v, 0, 1),""."", substr($v, 1, 4),"".""); if ($b) {print(int(substr($v+1, 5)), ""beta"", $b);} else {print(int(substr($v, 5)))}}' src/net/sourceforge/plantuml/version/Version.java)
            echo ""pom_version=$V-SNAPSHOT""
            echo ""pom_version=$V-SNAPSHOT"" >> $GITHUB_OUTPUT # pom_version is taken from Version.java
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          else
            echo ""This run will NOT make a release""
            echo ""do_javadoc=false"" >> $GITHUB_OUTPUT
            echo ""This run will NOT update the Javadoc""
          fi
          echo ""do_test_linux=true"" >> $GITHUB_OUTPUT
          echo ""do_test_windows=false"" >> $GITHUB_OUTPUT

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  # We split windows and ubuntu because windows is so slow...
  test_linux:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        java_version: [ 8, 17 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/checkout@v4

      - name: Set up java
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: gradle

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle -q compileJava --no-daemon

      - name: Test
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle test --no-daemon -i

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing from several builds
          name: ${{ github.run_number }}-${{ matrix.os }}-java-${{ matrix.java_version }}-test-reports
          path: build/reports/tests/


  build_artifacts:
    needs: [ workflow_config ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
#      - name: Set version in gradle.properties
#        if: env.POM_VERSION
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
#        run: |
#          sed -i ""s/version = .*/version = $POM_VERSION/"" gradle.properties
#          cat gradle.properties
      - name: Generate artifacts
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          gradle clean build \
            pdfJar \
            generateMetadataFileForMavenPublication generatePomFileForMavenPublication \
            -x test
          find . -name ""*.jar""
      - name: Sign artifacts
        if: env.ORG_GRADLE_PROJECT_signingKey
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          gradle -i signMavenPublication signPdfJar
          ls -l build/libs
          ls -l plantuml-asl/build/libs
          ls -l plantuml-bsd/build/libs
          ls -l plantuml-epl/build/libs
          ls -l plantuml-lgpl/build/libs
          ls -l plantuml-mit/build/libs
          ls -l plantuml-gplv2/build/libs
      - name: Get release version
        id: version
        run: |
          echo ""release_version=$(gradle properties -q | grep ""version:"" | awk '{print $2}')"" >> $GITHUB_OUTPUT
      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          enableCrossOsArchive: true

  deploy_javadoc:
    needs: [ build_artifacts, test_linux ]
    if: needs.workflow_config.outputs.do_javadoc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build Javadoc
        run: gradle javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/javadoc


  upload:
    if: |
      needs.workflow_config.outputs.do_release == 'true' ||
      needs.workflow_config.outputs.do_snapshot_release == 'true'
    needs: [ workflow_config, build_artifacts, test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds
          name: ${{ github.run_number }}-artifacts
          path: |
            build/libs/*
            build/publications/maven/*
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs

      - name: Create snapshot
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release-snapshot.sh

      - name: Create release in GitHub and OSSRH
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.ref }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release.sh
          gradle --debug publish

  push_to_docker_registry:
    needs: [ workflow_config, upload, test_linux ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PLANTUML_VERSION=${{ github.event.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
20,https://github.com/kordamp/json-lib,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2006-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on:
  pull_request:

env:
  JAVA_VERSION: '8'
  JAVA_DISTRO: 'zulu'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build -S
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Test with Gradle
        run: |
          ./gradlew test",0.3015463917525773,0.3845977967692568,Valid,0.8823529411764706,Java
21,https://github.com/json-path/jsonpath,"---
name: Java CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 18]
      fail-fast: false
      max-parallel: 4
    name: JDK ${{ matrix.java }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run Tests
        run: ./gradlew check

      - name: Maven Install
        run: ./gradlew clean publishToMavenLocal

...
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test
",0.20071047957371227,0.5332463425358366,Valid,0.6666666666666666,Java
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test",0.021791044776119404,0.06399332930094657,Valid,0.28963437580841395,Java
8,https://github.com/flori/json,"name: CI

on:
- push
- pull_request
- workflow_dispatch

jobs:
  ruby-versions:
    uses: ruby/actions/.github/workflows/ruby_versions.yml@master
    with:
      min_version: 2.3

  host:
    needs: ruby-versions
    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - ubuntu-22.04
        - macos-11
        - macos-12
        - windows-latest
        ruby: ${{ fromJson(needs.ruby-versions.outputs.versions) }}
        include:
        - { os: windows-latest , ruby: mswin     } # ruby/ruby windows CI
        - { os: ubuntu-latest  , ruby: jruby-9.1 } # Ruby 2.3
        - { os: ubuntu-latest  , ruby: jruby-9.2 } # Ruby 2.5
        - { os: ubuntu-latest  , ruby: jruby-9.3 } # Ruby 2.7
        exclude:
        - { os: windows-latest, ruby: truffleruby }
        - { os: windows-latest, ruby: truffleruby-head }
        - { os: windows-latest, ruby: jruby }
        - { os: windows-latest, ruby: jruby-head }

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          apt-get: ragel
          brew: ragel
          # only needed for Ruby 2.3
          mingw: ragel

      - run: bundle install

      - run: rake compile

      - run: rake test

      - run: rake build

      - run: gem install pkg/*.gem
        if: ${{ matrix.ruby != '3.2' }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install

    - name: Build
      run: |
        rake build

    - name: Test
      run: |
        rake test",0.1689291101055807,0.2663187509699864,Valid,0.7193581780538303,Ruby
780,https://github.com/banister/binding_of_caller,"name: Test

on:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 0 11,25 * *' # roughly every two weeks to run on new Ruby versions
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    name: ""Unit""
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ruby:
          - ""2.1""
          - ""2.2""
          - ""2.3""
          - ""2.4""
          - ""2.5""
          - ""2.6""
          - ""2.7""
          - ""3.0""

    steps:

    - uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby }}
        bundler-cache: true

    - name: Test
      run: bundle exec rspec -f doc

  system:
    name: ""System""
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
          - windows-latest
        ruby:
          - ""2""
          - ""3.0""
          - ""jruby""
          - ""truffleruby""
        exclude:
          # Windows releases of jruby and truffleruby have issues. Skip them for now.
          - { ruby: ""jruby"", os: ""windows-latest"" }
          - { ruby: ""truffleruby"", os: ""windows-latest"" }

    steps:

    - uses: actions/checkout@v2

    - name: Determine ruby version name
      id: ruby_version
      run: |
        if [[ $OS == 'windows-latest' && $RUBY == '3.0' ]]; then
          # Windows doesn't have 3.0, so run head there but nowhere else.
          echo ""::set-output name=release::head""
        else
          echo ""::set-output name=release::$RUBY""
        fi
      shell: bash
      env:
        OS: ${{ matrix.os }}
        RUBY: ${{ matrix.ruby }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ steps.ruby_version.outputs.release }}
        bundler-cache: true

    - name: Install gem
      run: bundle exec rake install

    - name: Create directory for gem test
      run: mkdir -p tmp/gem-test

    - name: Create test Gemfile
      run: echo ""gem 'binding_of_caller'"" > Gemfile
      working-directory: ./tmp/gem-test

    - name: Test gem load
      run: bundle exec ruby -e ""require 'binding_of_caller'""

    - name: Test gem functionality
      if: ${{ matrix.ruby != 'jruby' && matrix.ruby != 'truffleruby' }}
      run: bundle exec ruby -e ""require 'binding_of_caller'; binding.of_caller(0).eval('var = :hello')""
      env:
        JRUBY_OPTS: ""--dev"" # This will support JRuby once the gem is updated to support JRuby 9.x
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install

    - name: Build
      run: |
        rake build

    - name: Test
      run: |
        rspec
",0.1712396694214876,0.17954390470211498,Valid,0.3236423651682259,Ruby
1951,https://github.com/msgpack/msgpack-ruby,"name: ci

on:
  pull_request:
    branches: '*'
  push:
    branches:
      - master
      - main
      - 'release-*'

jobs:
  mri:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['2.5', '2.6', '2.7', '3.0', '3.1', '3.2']
        include:
          - os: macos
            ruby: '2.5'
          - os: macos
            ruby: '3.2'
          - os: windows
            ruby: '2.5'
          - os: windows
            ruby: '3.2'
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake
        env:
          MSGPACK_DEBUG: ""true""

  valgrind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true # 'bundle install' and cache
      - run: sudo apt-get install -y valgrind
      - run: bundle exec rake spec:valgrind

  other:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['jruby-9.3', 'jruby-9.4', 'truffleruby']
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake spec
        env:
          MSGPACK_DEBUG: ""true""

  head-versions:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu]
        ruby: ['ruby-head', 'jruby-head']
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # 'bundle install' and cache
      - run: bundle exec rake spec || echo ""failed, but ignore it""
        env:
          MSGPACK_DEBUG: ""true""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.6

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install

    - name: Build and Test
      run: |
        rake build
        rake test",0.0865079365079365,0.191033927607342,Valid,0.3107169620013314,Ruby
11,https://github.com/bigbluebutton/bigbluebutton,"name: Build and Deploy Docs

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
    paths:
      - 'docs/**'

# Do not build the docs concurrently
concurrency:
  group: docs
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./docs/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build static docs
      - name: Build all versions
        run: ./build.sh
      - name: Build website
        run: yarn build
      - name: upload build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./docs/build

  deploy:
    name: Deploy docs to gh-pages
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: Documentation
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          npm install
      - name: Build and Test
        run: |
          bundle exec rake
          npm test",0.20317460317460317,0.4171728018645712,Valid,0.3974429697579716,JavaScript
941,https://github.com/harfbuzz/harfbuzzjs,"name: Build

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

env:
  EM_VERSION: 3.1.16
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{runner.os}}
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Build hb.wasm
        run: ./build.sh
      - name: Build hb-subset.wasm
        run: ./build-subset.sh

      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: NPM install
        run: npm install
      - name: Run tests
        run: npm test
      - name: Test hb.wasm
        run: node examples/hbjs.example.node.js
      - name: Test hb-subset.wasm
        run: node examples/hb-subset.example.node.js
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Test
      run: npm test",0.29411764705882354,0.4892902779497023,Valid,0.483344517678508,JavaScript
1727,https://github.com/microsoft/botbuilder-samples,"name: ci-javascript-samples

env:
  ROOT_FOLDER: BotBuilder-Samples/samples/

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - ""samples/**/*.js""
      - ""samples/**/*.ts""

jobs:
  generate:
    name: detect and generate bot matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: git diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: samples/**/*.+(ts|js)
          ABSOLUTE: true

      - name: generate matrix
        id: set-matrix
        shell: pwsh
        if: env.GIT_DIFF
        run: |
          function UpSearchFolder {
            param ([String] $path, [String] $file)

            while ($path -and !(Test-Path (Join-Path $path $file))) {
              $path = Split-Path $path -Parent
            }

            return $path
          }

          $paths = @(""${{ env.GIT_DIFF_FILTERED }}"" -replace ""'"", """" -split "" "")
          $rootFolder = ""${{ env.ROOT_FOLDER }}""
          $pkg = ""package.json""

          $result = $paths | ForEach-Object { UpSearchFolder -path $_ -file $pkg } | Get-Unique | ForEach-Object {
            $folder = $_
            $json = Get-Content -Raw -Path (Join-Path $folder $pkg) | ConvertFrom-Json
            $files = @($paths | Where-Object { $_.StartsWith($folder) })
            return @{ 
              name = $folder.Substring($folder.IndexOf($rootFolder) + $rootFolder.Length);
              scripts = @($json.scripts | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name);
              folder = $folder;
              files = $files
            } 
          }

          ""Generated matrix:""
          ConvertTo-Json @($result)

          $matrix = ConvertTo-Json -Compress @($result)

          echo ""::set-output name=matrix::$($matrix)""

  build:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{fromJSON(needs.generate.outputs.matrix)}}
      fail-fast: false

    name: bot - ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3

      - name: use node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: yarn install
        run: yarn install
        working-directory: ${{ matrix.folder }}

      - name: yarn build
        if: ${{ contains(matrix.scripts, 'build') }}
        run: yarn build
        working-directory: ${{ matrix.folder }}

      - name: yarn lint
        run: |
          if ${{ endsWith(matrix.files[0], '.js') }}; then
            yarn eslint ${{ join(matrix.files, ' ') }}
          else
            yarn tslint ${{ join(matrix.files, ' ') }}
          fi
        working-directory: ${{ matrix.folder }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        npm install

    - name: Build
      run: |
        npm run build

    - name: Test
      run: |
        npm test",0.06043956043956044,0.14479787263801785,Valid,0.6666666666666666,JavaScript
1818,https://github.com/sodium-friends/sodium-native,"name: Build Status
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        node-version: [lts/*]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Test
      run: npm test",0.32454361054766734,0.6315539712335689,Valid,1.0,JavaScript
2079,https://github.com/dfinity/examples,"name: hosting-photo-storage
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - hosting/photo-storage/**
      - .github/workflows/provision-darwin.sh
      - .github/workflows/provision-linux.sh
      - .github/workflows/hosting-photo-storage-example.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  hosting-photo-storage-darwin:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Provision Darwin
        run: bash .github/workflows/provision-darwin.sh
      - name: Hosting Photo Storage Darwin
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
  hosting-photo-storage-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Provision Linux
        run: bash .github/workflows/provision-linux.sh
      - name: Hosting Photo Storage Linux
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        npm install

    - name: Build
      run: |
        npm run build

    - name: Test
      run: |
        npm test",0.12968917470525188,0.26650099958046214,Valid,0.14432989690721648,JavaScript
115,https://github.com/bk138/multivnc,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install gettext libwxgtk3.0-gtk3-dev libgtk-3-dev libgcrypt20-dev liblzo2-dev
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew uninstall --ignore-dependencies gnutls libgcrypt
          brew install wxwidgets
      - name: Install Windows Build Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        uses: johnwason/vcpkg-action@v4
        id: vcpkg
        with:
          pkgs: wxwidgets
          triplet: x64-windows
          token: ${{ github.token }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} ..
          cmake --build .
          cpack -V -C Debug
      - name: Archive Ubuntu Build Artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Debian Package
          path: build/*.deb
      - name: Archive MacOS Build Artifacts
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC MacOS Package
          path: build/*.dmg
      - name: Archive Windows Build Artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Windows Package
          path: build/*.exe
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up CMake
      uses: actions/setup-cmake@v1
      with:
        cmake-version: '3.20'

    - name: Build
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Test
      run: |
        cd build
        ctest
",0.10335917312661498,0.2175126694812804,Valid,0.4263170204468261,C++
757,https://github.com/9chu/luastgplus,"name: Build Windows

on:
  push:
    branches: [ master ]
    paths:
      - "".github/workflows/build_windows.yaml""
      - ""**.c""
      - ""**.h""
      - ""**.hpp""
      - ""**.cpp""
      - ""**.cmake""
      - ""**.patch""
      - ""**.ico""
      - ""**.rc""
      - ""**.json""
      - ""**.hpp.in""
      - ""**.py""
      - ""**/CMakeLists.txt""
  repository_dispatch:
    types: [ update ]

jobs:
  build_windows:
    #runs-on: windows-2022
    runs-on: self-hosted

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Prepare
        shell: powershell
        run: |
          # Set git tag
          $PROJECT_TAG=git describe --tags --dirty --match ""v*""
          Add-Content -Path $env:GITHUB_ENV -Value ""PROJECT_TAG=$PROJECT_TAG""
          # Find compiler
          $VCVAR_PATH=vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -find ""VC\**\vcvars64.bat""
          if (-Not (Test-Path -Path ""$VCVAR_PATH"")) { Write-Error ""VC++ compiler not found"" -ErrorAction Stop }
          Add-Content -Path $env:GITHUB_ENV -Value ""VCVAR_PATH=$VCVAR_PATH""
          # Create CPM cache folder
          mkdir /cpm_cache -ErrorAction SilentlyContinue
          Add-Content -Path $env:GITHUB_ENV -Value ""CPM_SOURCE_CACHE=/cpm_cache""
          # Create intermediate folders
          mkdir cmake-build-x64
          mkdir dist

      - name: Build x64 Shipping
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja""
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy shipping build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.exe

      - name: Build x64 Development
        shell: cmd
        run: |
          call ""%VCVAR_PATH%"" x64
          cd cmake-build-x64
          cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -G ""Ninja"" -DLSTG_SHIPPING=OFF
          ninja -j %NUMBER_OF_PROCESSORS%

      - name: Copy development build output
        run: |
          copy cmake-build-x64\src\v2\LuaSTGPlus2.exe dist\LuaSTGPlus2.dev.exe
          
      - uses: actions/upload-artifact@v3
        with:
          name: LuaSTGPlus2-${{ env.PROJECT_TAG }}
          path: |
             dist/*.exe
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install

      - name: Build
        run: |
          npm run build

      - name: Test
        run: |
          npm test",0.10053981106612686,0.17302852490344361,Valid,0.12978145568923166,C++
767,https://github.com/jcash/voronoi,"name: Build

on: [push, pull_request]

jobs:
  build-linux:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64"", ""-m32""]
        cversion: [c99, c11, c2x]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: sudo apt-get install -y gcc-multilib g++-multilib
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-darwin:
    strategy:
      matrix:
        feature: ["""", ""USE_ASAN=1""]
        compiler: [clang]
        arch:    [""-m64""]
        cversion: [c99, c11, c2x]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build tests
        env:
          CC: ${{ matrix.compiler }}
          STDVERSION: ${{ matrix.cversion }}
          ARCH: ${{ matrix.arch }}
        run: |
          ${{ matrix.feature }} ./scripts/compile.sh
          (cd test && ${{ matrix.feature }} ./compile.sh)
          (cd src/examples && ${{ matrix.feature }} ./compile.sh)
      - name: Run Tests
        run: |
          ./build/test --test-filter issue28_
          ./build/test_double --test-filter issue28_
          ./build/simple

  build-windows:
    strategy:
      matrix:
        arch:       [amd64, amd64_x86] #, amd64_arm64]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Build main
        run: scripts\compile_cl.bat
      - name: Build tests
        run: |
          cd test
          .\compile_cl.bat
      - name: Build examples
        run: |
          cd src\examples
          .\compile_cl.bat
      - name: Run Tests
        run: |
          .\build\main.exe -?
          .\build\main.exe -w 512 -h 512 -n 100 -o citest.png
          .\build\test.exe
          .\build\test_double.exe
          .\build\simple.exe
","name: Build and Test

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up MSVC dev cmd
        uses: actions/ilammy/msvc-dev-cmd@v1
      - name: Build
        run: |
          cd src
          make
      - name: Test
        run: |
          cd test
          make test",0.12486544671689989,0.15357629688264002,Valid,0.25845947004987735,C++
773,https://github.com/jontio/jaero,"name: build
on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: JAERO
      # install MSYS2 for windows
      - name: if windows install MSYS2
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain autoconf libtool mingw-w64-x86_64-cpputest mingw-w64-x86_64-qt5 mingw-w64-x86_64-cmake mingw-w64-x86_64-libvorbis mingw-w64-x86_64-zeromq zip p7zip unzip
      # build for windows
      - name: Windows-CI-Build
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo 'Running in MSYS2!'
          ./JAERO/ci-windows-build.sh
        shell:  msys2 {0}
      # build for linux
      - name: Linux-CI-Build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo 'Running in bash!'
          ./JAERO/ci-linux-build.sh          
      # upload windows artifacts    
      - name: Upload windows binary artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_windows
          retention-days: 1
          path: |
            JAERO/JAERO/release/*.zip
      # upload linux artifacts    
      - name: Upload linux binary artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: jaero_linux
          retention-days: 1
          path: |
            JAERO/bin/*.tar.gz
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # download all artifacts for this workflow
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v2
      # Create a release
      - name: Create a release
        uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          title: ""Development Build""
          files: |
            jaero_linux/*.tar.gz
            jaero_windows/*.zip
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up MSYS2
      uses: actions/msys2/setup-msys2@v2

    - name: Build on Windows
      run: |
        sh ci-windows-build.sh

    - name: Build on Linux
      run: |
        sh ci-linux-build.sh
",0.12197843064336185,0.15181801800652492,Valid,0.45944336149014514,C++
789,https://github.com/marcocicognani/meetixos,"name: MeetiX CI Build

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Packages
        run: |
          sudo apt update
          sudo apt upgrade
          sudo apt install -y gcc g++ nasm build-essential libgmp-dev libmpfr-dev libmpc-dev cmake make ninja-build xorriso grub-common patch wget tar

      - name: Toolchains
        run: |
          pushd Toolchain
          bash Build.sh --rebuild
          popd

      - name: CMake Config
        run: |
          mkdir -p Build/{Debug,Release}

          pushd Build/Debug
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Debug -GNinja
          popd

          pushd Build/Release
          cmake ../.. -DCMAKE_TOOLCHAIN_FILE=Build/CMakeToolchain.txt -DCMAKE_BUILD_TYPE=Release -GNinja
          popd

      - name: Build MeetiX Debug
        run: |
          pushd Build/Debug
          ninja repack
          popd

      - name: Build MeetiX Release
        run: |
          pushd Build/Release
          ninja repack
          popd

      - name: Uploading image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: MeetixOS
          path: Build/Release/MeetixOS.iso","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build
      run: |
        cmake .
        make

    - name: Run Tests
      run: |
        if [ -f ""test"" ]; then
          ./test
        fi",0.1702388242498469,0.22000365823802565,Valid,0.1591196775640796,C++
877,https://github.com/patriciogonzalezvivo/glslviewer,"name: Build and Release
on:
  pull_request:
  push:
env:
  CMAKE_BUILD_TYPE: Release
jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=DEB ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-amd64.deb
          - os: windows-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP -G ""NMake Makefiles"" ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              dir
            build_artifact: glslViewer-*-win64-AMD64.zip
          - os: macos-latest
            build_command: |
              mkdir build
              cd build
              cmake -DCPACK_GENERATOR=ZIP ..
              cmake --build .
              cpack -C CPackConfig.cmake -V
              ls -l
            build_artifact: glslViewer-*-x86_64.zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake xorg-dev libglu1-mesa-dev libavcodec-dev libavfilter-dev \
            libavdevice-dev libavformat-dev libavutil-dev libswscale-dev \
            libv4l-dev libjpeg-dev libpng-dev libtiff-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          conda install ffmpeg

      - name: Set up MSVC environment (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $FfmpegUri = 'https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-lgpl-shared-4.4.zip'
          $FfmpegZipPath = ""$Env:GITHUB_WORKSPACE\ffmpeg.zip""
          $ZlibUri = 'https://sourceforge.net/projects/gnuwin32/files/zlib/1.2.3/zlib-1.2.3-lib.zip/download'
          $ZlibZipPath = ""$Env:GITHUB_WORKSPACE\zlib.zip""

          $FfmpegPath = ""$Env:GITHUB_WORKSPACE\ffmpeg""

          Start-BitsTransfer -Source ""$FfmpegUri"",""$ZlibUri"" -Destination ""$FfmpegZipPath"",""$ZlibZipPath""

          Expand-Archive -Path ""$FfmpegZipPath"" -DestinationPath ""$FfmpegPath""
          Move-Item -Path ""$FfmpegPath\ffmpeg-*\*"" -Destination ""$FfmpegPath""

          Expand-Archive -Path ""$ZlibZipPath"" -DestinationPath ""$FfmpegPath""

          echo ""CMAKE_PREFIX_PATH=$FfmpegPath"" >>$Env:GITHUB_ENV

      - name: Build
        run: ${{ matrix.build_command }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: glslViewer-${{ matrix.os }}-build
          path: build/${{ matrix.build_artifact }}
          retention-days: 7

  release:
    if: github.event_name == 'push' && github.ref_type == 'tag'
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: GlslViewer ${{ github.ref_name }}
          files: |
            glslViewer-ubuntu-latest-build/*
            glslViewer-windows-latest-build/*
            glslViewer-macos-latest-build/*
          generate_release_notes: true
          body: |
            To use the Windows build, please download [FFmpeg 4.4][ffmpeg] and copy `bin\*.dll` alongside `glslViewer.exe`.

            [ffmpeg]: https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n4.4-latest-win64-gpl-shared-4.4.zip
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install -y cmake

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        make

    - name: Run tests
      run: |
        cd build
        ctest
",0.02620689655172414,0.11006926857521855,Valid,0.24456764863338687,C++
916,https://github.com/norbusan/debian-mu,"name: Build & run tests

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest

    steps:
      - uses: actions/checkout@v2

      - if: contains(matrix.os, 'ubuntu')
        name: ubuntu-deps
        run: |
          sudo apt update
          sudo apt-get install automake autoconf-archive autotools-dev libglib2.0-dev libxapian-dev libgmime-3.0-dev m4 make libtool pkg-config

      - if: contains(matrix.os, 'macos')
        name: macos-deps
        run: |
          brew install autoconf automake libgpg-error libtool pkg-config gettext glib gmime xapian

      - name: configure
        run: ./autogen.sh --disable-guile

      - name: build
        run: make

      - name: test
        run: make test
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Install dependencies
      run: |
        npm install

    - name: Build
      run: |
        npm run build

    - name: Test
      run: |
        npm test",0.17738359201773837,0.39905864799352264,Valid,0.33522257454503623,C++
1461,https://github.com/pfusik/cito,"name: tests
on: push
jobs:
  c-cl-error:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-c test-cl test-error
  cpp-java:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/checkout@main
      - run: make -j3 test-cpp test-java
  cs:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-dotnet@main
      - uses: actions/checkout@main
      - run: make -j3 test-cs
  d:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: dmd-latest
      - uses: actions/checkout@main
      - run: make -j3 test-d
  js-ts:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/checkout@main
      - run: make -j3 test-js test-ts
  py-swift:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - run: pip install mypy
      - uses: swift-actions/setup-swift@main
      - uses: actions/checkout@main
      - run: make -j3 test-py test-swift
  host-diff:
    runs-on: ubuntu-22.04
    steps:
      - uses: Totto16/setup-gcc@master
        with:
          version: 13
      - uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 21
      - uses: actions/setup-node@main
      - uses: actions/checkout@main
      - run: make -j3 host-diff
      - run: make -j3 java/GenBase.java
      - run: make -j3 host-diff-java
      - run: make -j3 test-error FUT_HOST=cs
      - run: make -j3 test-error FUT_HOST=java
      - run: make -j3 test-error FUT_HOST=node
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        npm install
        npm install -g typescript ts-node

    - name: Build
      run: |
        npm run build

    - name: Test
      run: |
        npm test",0.018482864844050827,0.1603303043010768,Valid,0.3437698397050868,C++
1774,https://github.com/itsmattkc/legoislandrebuilder,"name: CI

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'README.md'

jobs:

  build:

    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install Visual C++ 6.0
      run: |
        git clone --depth 1 https://github.com/itsmattkc/MSVC600

    - name: Build
      shell: cmd
      run: |
        call MSVC600/VC98/Bin/vcvars32.bat
        msdev Rebuilder.dsw /make

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.1
      with:
        path:
          Rebuilder/Release/Rebuilder.exe

    - name: Upload to Releases
      shell: bash
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TRAVIS_REPO_SLUG: itsmattkc/LEGOIslandRebuilder
        TRAVIS_COMMIT: ${{ github.sha }}
      run: |
        curl -fLOSs --retry 2 --retry-delay 60 https://github.com/probonopd/uploadtool/raw/master/upload.sh
        ./upload.sh Rebuilder/Release/Rebuilder.exe
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install cmake

    - name: Build the application
      run: cmake . && make

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install cmake

    - name: Run tests
      run: ctest",0.16288539848749273,0.34369294574986686,Valid,0.34712430426716145,C++
1794,https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation,"name: demo

on:
  push:
    branches: [ main ]
    paths:
    - examples/demo/**
  pull_request:
    branches: [ main ]
    paths:
    - examples/demo/**
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4.1.1
    - name: Test demo
      run: make test
      working-directory: examples/demo
      timeout-minutes: 10
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies
      run: |
        npm install
        dotnet restore

    - name: Build
      run: |
        npm run build
        dotnet build

    - name: Test
      run: |
        npm test
        dotnet test",0.38913043478260867,0.438190085387849,Valid,0.41379310344827586,C++
1932,https://github.com/wysaid/xege,"name: 测试构建项目

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  TESTING:
    runs-on: windows-2019
    steps:
      - name: 获取源码
        uses: actions/Checkout@v2

      - name: 尝试构建 MSVC 2019 X64 Release
        run: |
          mkdir build
          cd build
          cmake .. -G ""Visual Studio 16 2019"" -A x64
          cmake --build . -j 

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      run: sudo apt-get update && sudo apt-get install -y cmake

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        make

    - name: Run tests
      run: |
        cd build
        ctest
",0.11303344867358708,0.5721385001264707,Valid,0.5882352941176471,C++
1934,https://github.com/llnl/librom,"name: CI
on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, labeled, synchronize]
    branches:
      - master

jobs:
  docker-image:
    uses: ./.github/workflows/docker.yml
  code-style:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Artistic Style version (for information)
        run: astyle --version
      - name: Check Stylization
        run: |
            cd ${GITHUB_WORKSPACE}/scripts
            ./stylize.sh astyle
  linux:
    runs-on: ubuntu-latest
    needs: [docker-image]
    container:
      image: ghcr.io/llnl/librom/librom_env:latest
      options: --user 1001 --privileged
      volumes:
        - /mnt:/mnt
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
      - name: Check out libROM
        uses: actions/checkout@v3
      - name: Build libROM
        run: |
            mkdir ${GITHUB_WORKSPACE}/build
            cd ${GITHUB_WORKSPACE}/build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - name: Build baseline libROM
        if: ${{ github.event.label.name == 'LGTM' || contains(github.event.pull_request.labels.*.name, 'LGTM') }}
        run: |
            cd ${GITHUB_WORKSPACE}/dependencies
            git clone https://github.com/LLNL/libROM.git
            cd libROM
            mkdir build
            cd build
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Debug -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
            cmake .. -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE} -DCMAKE_BUILD_TYPE=Optimized -DUSE_MFEM=${USE_MFEM} -DMFEM_USE_GSLIB=${MFEM_USE_GSLIB}
            make
      - uses: ./.github/workflows/run_tests
  # mac:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Install Mac dependencies
  #       run: |
  #           brew install open-mpi
  #           brew install openblas
  #           brew install lapack
  #           brew install scalapack
  #           brew install hdf5
  #     - name: Check out libROM
  #       uses: actions/checkout@v2
  #     - uses: ./.github/workflows/checkout_repo
  #     - name: Build libROM
  #       run: |
  #           export FC=/usr/local/bin/gfortran-10
  #           mkdir ${GITHUB_WORKSPACE}/build
  #           cd ${GITHUB_WORKSPACE}/build
  #           cmake -DCMAKE_BUILD_TYPE=Debug ..
  #           make
  #           cmake -DCMAKE_BUILD_TYPE=Optimized ..
  #           make
  #     - uses: ./.github/workflows/run_tests
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up swap space
      uses: pierotofy/set-swap-space@master

    - name: Build and test application
      run: |
        # Add build and test commands here
        cmake .
        make
        # Run tests if present
        if [ -f ""unit_tests"" ]; then
          cd unit_tests
          make test
        fi",0.057925223802001054,0.1352587707647489,Valid,0.15744808063059765,C++
1994,https://github.com/pine64/bl_iot_sdk,"name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-latest]

    steps:
    - uses: actions/checkout@v2

    - run: make
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
      
  build-msys:
    runs-on: windows-latest
    steps:
    - name: setup msys2
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: make
        msystem: MSYS

    - uses: actions/checkout@v2

    - run: make
      shell: msys2 {0}
      working-directory: customer_app
      env:
        BL60X_SDK_PATH: ${{ github.workspace }}
        MAX_MAKE_JOBS: 2
",,,,,,C++
1998,https://github.com/openc2e/openc2e,"name: build

on:
  push:
    branches: [ ""*"" ]
  pull_request:
    branches: [ main ]

env:
  CTEST_OUTPUT_ON_FAILURE: TRUE
  # GitHub runners have two cores each
  MAKEFLAGS: -j3 -k
  # set some variables for Visual Studio
  MultiProcessorCompilation: true
  UseMultiToolTask: true
  EnforceProcessCountAcrossBuilds: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Download clang-format""
      run: ""wget -o- https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-22538c65/clang-format-10_linux-amd64 && chmod +x clang-format-10_linux-amd64""
    - name: ""clang-format""
      run: ""./clang-format-10_linux-amd64 -i src/**/*.cpp src/**/*.h && git diff --exit-code""
      
  build:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest,ubuntu-latest,macos-latest]
    steps:
    - name: ""Check out source""
      uses: actions/checkout@v3
    - name: ""Install dependencies (Ubuntu)""
      if: ""startsWith(matrix.os, 'ubuntu-')""
      run: sudo apt-get update && sudo apt-get install libpng-dev libsdl2-dev libsdl2-mixer-dev zlib1g-dev
    - name: ""Configure""
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo
    - name: ""Build""
      run: cmake --build build --config RelWithDebInfo
    - name: ""Test""
      run: cd build && ctest --build-config RelWithDebInfo
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""openc2e-${{ github.sha }}-${{ runner.os }}""
    - name: ""Create distribution artifact""
      if: runner.os == 'Windows'
      run: cmake --install build --config RelWithDebInfo --prefix ""mngplayer2-${{ github.sha }}-${{ runner.os }}"" --component mngplayer2
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: openc2e-${{ github.sha }}-${{ runner.os }}
        path: openc2e-${{ github.sha }}-${{ runner.os }}
    - name: ""Upload distribution artifact""
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v1
      with:
        name: MNGPlayer2-${{ github.sha }}-${{ runner.os }}
        path: mngplayer2-${{ github.sha }}-${{ runner.os }}
","name: Build and Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up CMake
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
      - name: Build
        run: cmake . && make
      - name: Test
        run: make test",0.05765765765765766,0.15617272007104993,Valid,0.24275135397621478,C++
2050,https://github.com/stardustcfw/haku33,"
name: Build Homebrew

on: [push,workflow_dispatch]
jobs:
  build:

    runs-on: ubuntu-latest
    container:
      image: d3fau4/nx-dev:latest
    steps:
    - uses: actions/checkout@v1
    - name: Update repo.
      run: |
        git submodule update --init --recursive
        
    - name: Make app
      run: |
        make -j$(nproc)
        
    - uses: actions/upload-artifact@master
      with:
        name: Homebrew
        path: Haku33.nro
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Set up CMake
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake
    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        make
    - name: Run tests
      run: |
        if [ -f ""test"" ]; then
          ./test
        fi",0.22018348623853212,0.5488397015088198,Valid,0.2554660675634611,C++
2083,https://github.com/open-dynamic-robot-initiative/master-board,"# This config uses industrial_ci (https://github.com/ros-industrial/industrial_ci.git).
# For troubleshooting, see readme (https://github.com/ros-industrial/industrial_ci/blob/master/README.rst)

name: CI - Linux via ROS

# This determines when this workflow is run
on: [push, pull_request] # on all pushes and PRs

jobs:
  CI:
    strategy:
      matrix:
        env:
          - {ROS_DISTRO: rolling, BUILDER: colcon}
    env:
      CCACHE_DIR: /github/home/.ccache             # Enable ccache
      # The following is a work-around for ROS tooling in conjunction with jrl-cmakemodules:
      #  - catkin_make_isolated has issues with Industrial-CI right now
      #  - colcon cannot find example-robot-data's python bindings due to ROS1 workspace integration hooks
      #  - catkin_tools correctly finds example-robot-data in the upstream_ws, but does not execute the 'run_tests' target
      #    as catkin-tools performs tests as '--catkin-make-args' instead of '--make-args' as colcon and catkin_make_isolated
      # The work-around is thus to use catkin_tools for building and sourcing, and to manually specify execution of the test
      # target after completion of the regular test target. The output of this step does affect the output of the CI process.
      # Note, this does not affect projects that do not have pure CMake projects in their upstream_ws.
      BUILDER: catkin_tools
      AFTER_RUN_TARGET_TEST: 'ici_with_unset_variables source /root/target_ws/install/setup.bash && cd /root/target_ws/build/master_board_sdk && make test'
      IMMEDIATE_TEST_OUTPUT: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # This step will fetch/store the directory used by ccache before/after the ci run
      - uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ matrix.env.ROS_DISTRO }}-${{ matrix.env.ROS_REPO }}
      # Run industrial_ci
      - uses: 'ros-industrial/industrial_ci@9e8b4aaec69f7cade96eda5cfcb3e7da57b99c6e'
        env: ${{ matrix.env }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build
        run: |
          # Add build commands here
      - name: Test
        run: |
          # Add test commands here",,,Valid,,C++
2095,https://github.com/python-greenlet/greenlet,"name: tests

on: [push, pull_request, workflow_dispatch]

env:
  PYTHONHASHSEED: 1042466059
  ZOPE_INTERFACE_STRICT_IRO: 1
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONDEVMODE: 1
  PYTHONFAULTHANDLER: 1
  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # repo settings.
  TWINE_USERNAME: __token__


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, ""3.10"", ""3.11"", ""3.12""]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: setup.py
    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install -U twine
    - name: Install greenlet (non-Mac)
      if: ${{ ! startsWith(runner.os, 'Mac') }}
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
      env:
        # Ensure we test with assertions enabled.
        # As opposed to the manylinux builds, which we distribute and
        # thus only use O3 (because Ofast enables fast-math, which has
        # process-wide effects), we test with Ofast here, because we
        # expect that some people will compile it themselves with that setting.
        CPPFLAGS: ""-Ofast -UNDEBUG""
    - name: Install greenlet (Mac)
      if: startsWith(runner.os, 'Mac')
      run: |
        python setup.py bdist_wheel
        python -m pip install -U -e "".[test,docs]""
        ls -l dist
        # Something in the build system isn't detecting that we're building for both,
        # so we're getting tagged with just x86_64. Force the universal2 tag.
        # (I've verified that the .so files are in fact universal, with both architectures.)
        # The macosx_11_0 tag is conservative: At this writing,
        # on GHA, Python 3.7/3.8/3.9/3.10  all produce that tag, while
        # 3.11/3.12 produce the less restrictive macosx_10_9 tag. (Locally on JAM's mac,
        # the official CPython builds produce 10_9 for everything from 3.9 onward.)
        wheel tags --remove --platform-tag macosx_11_0_universal2 dist/*whl
      env:
        # Unlike the above, we are actually distributing these
        # wheels, so they need to be built for production use.
        CPPFLAGS: ""-O3""
        # Build for both architectures
        ARCHFLAGS: ""-arch x86_64 -arch arm64""

    - name: Check greenlet build
      run: |
        ls -l dist
        twine check dist/*
    - name: Store greenlet wheel
      uses: actions/upload-artifact@v3
      with:
        name: greenlet-${{ runner.os }}-${{ matrix.python-version }}.whl
        path: dist/*whl
    - name: Test
      run: |
        python -VV
        python -c 'import greenlet._greenlet as G; assert G.GREENLET_USE_STANDARD_THREADING'
        python -m unittest discover -v greenlet.tests
    - name: Doctest
      run: |
        sphinx-build -b doctest -d docs/_build/doctrees2 docs docs/_build/doctest2
    - name: Publish package to PyPI (mac)
      # We cannot 'uses: pypa/gh-action-pypi-publish@v1.4.1' because
      # that's apparently a container action, and those don't run on
      # the Mac.
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && startsWith(runner.os, 'Mac')
      env:
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        twine upload --skip-existing dist/*

  CodeQL:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ""3.10""
          cache: 'pip'
          cache-dependency-path: setup.py
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          # Set the `CODEQL-PYTHON` environment variable to the Python executable
          # that includes the dependencies
          echo ""CODEQL_PYTHON=$(which python)"" >> $GITHUB_ENV
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python, cpp
          # Override the default behavior so that the action doesn't attempt
          # to auto-install Python dependencies
          setup-python-dependencies: false
      - name: Install greenlet
        run: |
          python setup.py build
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  manylinux:

    runs-on: ubuntu-latest
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]
        image:
          - manylinux_2_28_x86_64
          - manylinux2014_aarch64
          - manylinux2014_ppc64le
          - manylinux2014_s390x
          - manylinux2014_x86_64
          - musllinux_1_1_x86_64
          - musllinux_1_1_aarch64
    name: ${{ matrix.image }}

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all
      - name: Build and test greenlet
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}
        run: bash ./make-manylinux
      - name: Store greenlet wheels
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*whl
          name: ${{ matrix.image }}_wheels.zip
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dev-requirements.txt

    - name: Build and Test
      run: |
        python setup.py build
        python setup.py test",0.02365346252493588,0.07723913488765981,Valid,0.25341543849912684,C++
121,https://github.com/splitwise/tokenautocomplete,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-split: [
          {model: ""NexusLowRes"", version: 23},
          {model: ""NexusLowRes"", version: 24},
          {model: ""NexusLowRes"", version: 25},
          {model: ""NexusLowRes"", version: 26},
          {model: ""NexusLowRes"", version: 27},
          {model: ""NexusLowRes"", version: 28},
          {model: ""NexusLowRes"", version: 29},
          {model: ""NexusLowRes"", version: 30},

          {model: ""oriole"", version: 31},
          {model: ""oriole"", version: 32},
          {model: ""oriole"", version: 33}
        ]

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
    - name: Build integration test target
      run: ./gradlew assembleAndroidTest
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_CLOUD_SERVICE_KEY: ${{secrets.GOOGLE_CLOUD_SERVICE_KEY}}
        GOOGLE_PROJECT_ID: ${{secrets.GOOGLE_PROJECT_ID}}
      run: |
        echo $GOOGLE_CLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - name: Run Instrumented Tests with Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app example/build/outputs/apk/debug/example-debug.apk --test example/build/outputs/apk/androidTest/debug/example-debug-androidTest.apk --device model=$DEVICE,version=$API_VERSION,locale=en,orientation=portrait --timeout 30m
      env:
        API_VERSION: ${{ matrix.device-split.version }}
        DEVICE: ${{ matrix.device-split.model }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.1985574883326262,0.20959457500712253,Valid,0.6582497897201574,Kotlin
162,https://github.com/jetbrains/idea-gitignore,"# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.03506824991676839,0.07450820043867515,Valid,0.464125283534196,Kotlin
166,https://github.com/jakewharton/byteunits,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test
",0.0809319435928878,0.3754897840202402,Valid,0.967741935483871,Kotlin
167,https://github.com/openmrs/openmrs-contrib-android-client,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
    types:
      - opened
      - synchronize

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew buildDebug
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.524896265560166,0.6992719083482427,Valid,0.8333333333333334,Kotlin
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
","name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.03893611187277214,0.1327673954838252,Valid,0.6330497946351605,Kotlin
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
",name: Build and Test,,,Invalid,,Kotlin
189,https://github.com/coolerfall/android-httpdownloadmanager,"name: Android CI

on:
  pull_request:
    branches: [ develop]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Kotlin
226,https://github.com/googlesamples/android-custom-lint-rules,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # AGP 8.2 requires 34.0.0-rc3 - see https://issuetracker.google.com/issues/236167971#comment36
      # and https://github.com/actions/runner-images/issues/7506#issuecomment-1533097084
      # TODO: Remove when AGP updates Build Tools to 34.0.0 and pre-installed in the runner
      #- name: Install Android Build Tools 34.0.0-rc3
      #  run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager ""build-tools;34.0.0-rc3""
      #  shell: bash
      - name: Build with Gradle
        run: ./gradlew build test
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.1467753891771683,0.5104137687221884,Valid,0.8333333333333334,Kotlin
243,https://github.com/bailuk/aat,"name: Build on ubuntu

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Build with Gradle
      run: ./gradlew build

    - name: Collect files for distribution
      run: ci/collect-artifacts.sh

    - name: Upload artifacts (gtk)
      uses: actions/upload-artifact@v2
      with:
        name: aat-gtk
        path: dist/gtk
        if-no-files-found: error

    - name: Upload artifacts (android)
      uses: actions/upload-artifact@v2
      with:
        name: aat-android
        path: dist/android
        if-no-files-found: error
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.1588089330024814,0.4823428587136378,Valid,0.967741935483871,Kotlin
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",,,Invalid,,Kotlin
301,https://github.com/tommyettinger/gdx-liftoff,"name: build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [8, 11, 17]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: JDK setup
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Gradle setup
        uses: gradle/gradle-build-action@v2
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - name: Build
        run: ./gradlew build check
      - name: Generate sample project
        run: ./gradlew sample
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build with Gradle
        uses: actions/gradle/gradle-build-action@v2
      - name: Validate Gradle Wrapper
        uses: actions/gradle/wrapper-validation-action@v1",0.28663967611336033,0.5968403105977597,Valid,0.6361667451417554,Kotlin
316,https://github.com/theredspy15/ltecleanerfoss,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Kotlin
332,https://github.com/burhanrashid52/photoeditor,"name: UI test in android emulator CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
      - kotlin-conversion

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - name: Build with Gradle
      run: ./gradlew build

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Run all checks
        run: ./gradlew check --stacktrace

  ui-test:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: run ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.07962283918281823,0.2668389265025608,Valid,0.6672043010752688,Kotlin
333,https://github.com/instacart/truetime-android,"name: CI
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Spotless checks
        run: ./gradlew spotlessCheck --stacktrace
      - name: Build the app
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.18020022246941045,0.7193459637950405,Valid,0.967741935483871,Kotlin
339,https://github.com/gotify/android,"on: [push, pull_request]

name: Build

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ./gradlew build --stacktrace
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify.apk
          tag: ${{ github.ref }}
          overwrite: true
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: |
        cd app
        ./gradlew build
    - name: Test with Gradle
      run: |
        cd app
        ./gradlew test",0.13964784456587737,0.298545718170563,Valid,0.5882352941176471,Kotlin
347,https://github.com/mediathekview/zapp,"name: Build and test
on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
        
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
  
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'
        
    - name: Build and test with Gradle
      run: ./gradlew build test -Pci
      
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  ","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Kotlin
368,https://github.com/esafirm/android-image-picker,"name: Android CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2.4.0
        with:
          distribution: adopt-openj9
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          cache-name: gradle
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('build.gradle') }}
          restore-keys: |
            gradle-${{ hashFiles('build.gradle') }}
            gradle-

      - name: Build with Gradle
        run: ./gradlew build -x lint

      - name: Build test
        run: ./gradlew sample:assembleAndroidTest

      - name: Run tests on Firebase Test Lab
        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
        if: github.ref == 'refs/heads/master'
        with:
          arg-spec: 'firebasetest.yml:android-pixel-4'
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2.4.0
      with:
        java-version: '11'

    - name: Cache Gradle
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.3789599521817095,0.5540887610381564,Valid,0.5339102564102564,Kotlin
378,https://github.com/taboolib/taboolib,"name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    if: ""contains(github.event.head_commit.message, 'dev')""
    runs-on: ubuntu-latest
    steps:
      # 环境配置
      - name: checkout repository
        uses: actions/checkout@v2
      - name: cache gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 8.0
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8.0

      # 设置权限
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      # 编译测试
      - name: build test
        id: publish_1
        continue-on-error: true
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew build -Pbuild=$GITHUB_RUN_NUMBER -PtaboolibUsername=$NEXUS_USERNAME -PtaboolibPassword=$NEXUS_PASSWORD","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",,,Invalid,,Kotlin
406,https://github.com/jetbrains-research/astminer,"name: Build with lint

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    needs: setup
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build astminer
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-report
          path: build/astminer/reports/tests/**/*

      - name: Upload Detekt Report
        uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: build/astminer/reports/detekt/detekt.sarif

  run-on-configs:
    needs: build
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Prepare shadowJar
        run: ./gradlew shadowJar

      - name: Run antlr_java_js_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_java_js_ast.yaml

      - name: Run antlr_python_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_python_paths.yaml

      - name: Run gumtree_java_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_ast.yaml

      - name: Run gumtree_java_function_names_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_function_names_paths.yaml
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.0660964230171073,0.17408446897346158,Valid,0.7817433081674674,Kotlin
545,https://github.com/skydoves/baserecyclerviewadapter,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.5869324473975637,0.7852416358132293,Valid,0.7915632754342432,Kotlin
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: |
          npm install
      - name: Build
        run: |
          npm run build
      - name: Test
        run: |
          npm test",0.302261445118588,0.33575653086046287,Valid,0.2247191011235955,TypeScript
250,https://github.com/venkataravuri/e-commerce-microservices-sample,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    defaults:
      run:
        working-directory: ./products-cna-microservice

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: products-cna-microservice/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Test
        run: npm test",0.2744310575635877,0.3935623412109733,Valid,0.8333333333333333,TypeScript
419,https://github.com/awslabs/smithy-typescript,"name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Java ${{ matrix.java }} ${{ matrix.os }}
    strategy:
      matrix:
        java: [17]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'corretto'

      - name: clean and build
        run: ./gradlew clean build -Plog-tests

  lint-typescript:
    runs-on: ubuntu-latest
    name: TypeScript Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run eslint
        run: yarn lint --concurrency=3

  test-typescript:
    runs-on: smithy-typescript_ubuntu-latest_8-core
    name: TypeScript Test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: ""yarn""
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Install dependencies
        run: yarn
      - name: Build packages
        run: yarn build
      - name: Run unit tests
        run: yarn test
      - name: Run integration tests
        run: |
          yarn config set enableImmutableInstalls false
          yarn test:integration

  ensure-typescript-formatted:
    runs-on: ubuntu-latest
    name: Ensure TypeScript is formatted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run the code formatter
        run: yarn format
      # This checks the output of git diff. If it's not empty (i.e there were
      # changes) it'll return a non-zero error code.
      - name: Ensure there are no changes from running the formatter
        run: |
          git diff
          test -z ""$(git diff)""

  ensure-typescript-packages-have-changesets:
    runs-on: ubuntu-latest
    name: Ensure TypeScript packages have changesets
    steps:
      - uses: actions/checkout@v3
        # Include full git history needed for `yarn changeset status`
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install
        run: yarn
      - name: Ensure changesets exist for each changed package
        run: yarn changeset status --since=origin/main
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies
      run: |
        yarn install

    - name: Build application
      run: |
        yarn build

    - name: Run tests
      run: |
        yarn test",0.1334113516676419,0.15524847550240325,Valid,0.6592512425845759,TypeScript
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Dependencies
      run: npm install

    - name: Build Application
      run: npm run build

    - name: Run Tests
      run: npm test",0.058539529269764634,0.15147929579449307,Valid,0.5942731308159441,TypeScript
354,https://github.com/juicycleff/flutter-unity-view-widget,"name: genopets

on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.0'
          channel: 'stable'

      - name: Clean Dependencies
        run: flutter clean

      - name: Install Dependencies
        run: flutter packages get

      - name: Format
        run: flutter format --set-exit-if-changed lib test

      - name: Analyze
        run: flutter analyze lib test

      - name: Run tests
        run: flutter test --no-pub --coverage --test-randomize-ordering-seed random
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '2.x'

    - name: Install dependencies
      run: flutter pub get

    - name: Build
      run: flutter build

    - name: Test
      run: flutter test",0.32727272727272727,0.6059853125377749,Valid,0.35294117647058826,Dart
695,https://github.com/abausg/home_widget,"name: Build

on:
  push:
    branches:
      - main
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - name: Get Packages
        run: flutter pub get
      - name: Analyze
        run: flutter analyze
      - name: Format
        run: dart format . --set-exit-if-changed
      - name: Publishability
        run: flutter pub publish --dry-run
      - name: Test
        run: flutter test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - uses: VeryGoodOpenSource/very_good_coverage@v1.2.0

  android:
    name: Android Integration Tests
    needs: quality
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Run Android Integration Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          working-directory: example
          script: flutter test integration_test/android_test.dart -d emulator-5554

  # iOS Test based on https://medium.com/flutter-community/run-flutter-driver-tests-on-github-actions-13c639c7e4ab
  # by @kate_sheremet
  ios:
    name: iOS Integration Tests
    needs: quality
    strategy:
      matrix:
        device:
          - ""iPhone 13""
      fail-fast: false
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: stable
      - uses: futureware-tech/simulator-action@v1
        id: simulator
        with:
          model: ${{ matrix.device }}
      - name: ""Run iOS integration tests""
        run: flutter test integration_test/ios_test.dart -d ${{steps.simulator.outputs.udid}}
        working-directory: example","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Flutter action
      uses: subosito/flutter-action@v1
      with:
        flutter-version: '2.5.0'

    - name: Install dependencies
      run: flutter pub get

    - name: Build
      run: flutter build apk

    - name: Run tests
      run: flutter test",0.07560627674750357,0.24156292974630775,Valid,0.5717410126105777,Dart
1796,https://github.com/xuexiangjys/flutter_xupdate,"  
name: Pub Publish plugin

on: workflow_dispatch

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Publish
        uses: sakebook/actions-flutter-pub-publisher@v1.3.0
        with:
          credential: ${{ secrets.CREDENTIAL_JSON }}
          flutter_package: true
          skip_test: true
          dry_run: false
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '2.5.2'

    - name: Get dependencies
      run: flutter pub get

    - name: Build
      run: flutter build apk

    - name: Test
      run: flutter test",,,Valid,,Dart
393,https://github.com/subhra74/xdm,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: windows-latest

    defaults:
      run:
        working-directory: ./app/XDM/XDM.Wpf.UI/

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Test
      run: npm test",0.25774225774225773,0.6700548262804472,Valid,0.33235867446393763,C#
1004,https://github.com/webbju/android-plus-plus,"name: CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:

  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore .\src\AndroidPlusPlus.sln

    - name: Build AndroidPlusPlus
      run: msbuild /m /p:Configuration=Release .\src\AndroidPlusPlus.sln
",name: Build and Test,,,Invalid,,C#
1038,https://github.com/logosbible/bsdiff.net,"name: Build

on: [push, pull_request]

env:
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up .NET 7.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:BuildNumber=${{ github.run_number }}
      - name: Test
        run: dotnet test --configuration Release --no-build
      - name: Pack
        run: dotnet pack --configuration Release --no-build
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: NuGet Packages
          path: '**/*.nupkg'
          if-no-files-found: error
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release

    - name: Test
      run: |
        dotnet test --no-build --configuration Release",0.38444924406047515,0.5538266830995915,Valid,0.6661490683229814,C#
1039,https://github.com/lithander/minimal-bitcoin-miner,"name: MSBuild

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: MiniMiner/MiniMiner.csproj

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /p:Configuration=Release ${{env.SOLUTION_FILE_PATH}} /p:DeployOnBuild=true /p:PublishProfile=FolderProfile
   
    - name: Upload Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: Releases
        path: MiniMiner/bin/Release
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: actions/setup-msbuild@v1

    - name: Restore dependencies
      run: |
        nuget restore MiniMiner.sln

    - name: Build
      run: |
        msbuild /p:Configuration=Release MiniMiner.sln

    - name: Test
      run: |
        if [ -f ""./MiniMiner.Tests"" ]; then dotnet test MiniMiner.Tests/MiniMiner.Tests.csproj; fi",0.10049153468050245,0.3445569099608268,Valid,0.5786059351276743,C#
1040,https://github.com/geri-borbas/triangle.net,"name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore Triangle.sln
      working-directory: ./src
    - name: Build
      run: dotnet build Triangle.sln --no-restore
      working-directory: ./src
    - name: Test
      run: dotnet test Triangle.sln --no-build --verbosity normal
      working-directory: ./src
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Test
        run: dotnet test",0.5757009345794393,0.7222400525712133,Valid,0.45104895104895104,C#
1041,https://github.com/snape/rvo2-cs,"#
# ci.yml
# RVO2 Library C#
#
# SPDX-FileCopyrightText: 2008 University of North Carolina at Chapel Hill
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Please send all bug reports to <geom@cs.unc.edu>.
#
# The authors may be contacted via:
#
# Jur van den Berg, Stephen J. Guy, Jamie Snape, Ming C. Lin, Dinesh Manocha
# Dept. of Computer Science
# 201 S. Columbia St.
# Frederick P. Brooks, Jr. Computer Science Bldg.
# Chapel Hill, N.C. 27599-3175
# United States of America
#
# <https://gamma.cs.unc.edu/RVO2/>
#

---
name: ci

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: '0 5 * * *'

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  bazel_arch:
    name: bazel arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            bazel \
            ca-certificates \
            curl \
            gcc \
            git \
            icu \
            lttng-ust \
            python \
            which \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  bazel_macos:
    name: bazel macos latest
    runs-on: macos-latest
    steps:
      - name: pre-checkout setup
        run: |
          rm -f \
            /usr/local/bin/2to3 \
            /usr/local/bin/2to3-3.* \
            /usr/local/bin/go \
            /usr/local/bin/gofmt \
            /usr/local/bin/idle3 \
            /usr/local/bin/idle3.* \
            /usr/local/bin/pydoc3 \
            /usr/local/bin/pydoc3.* \
            /usr/local/bin/python3 \
            /usr/local/bin/python3.* \
            /usr/local/bin/python3-config \
            /usr/local/bin/python3.*-config \
            /usr/local/lib/libtcl8.*.dylib \
            /usr/local/lib/libtk8.*.dylib
          brew update-reset -q
          brew upgrade -f -q
          brew unlink -q bazelisk
          brew install -q \
            bazel \
            buildifier \
            git \
            python \
            jsonlint \
            markdownlint-cli \
            yamllint
          brew cleanup -q -s
          rm -rf $(brew --cache)
        env:
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        shell: zsh -efuo pipefail {0}
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: zsh -efuo pipefail {0}

  bazel_ubuntu:
    name: bazel ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:latest
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            g++ \
            git \
            gnupg \
            libicu70 \
            liblttng-ust1 \
            python-is-python3 \
            zlib1g
          curl -sS https://bazel.build/bazel-release.pub.gpg | gpg --dearmor - \
            > /usr/share/keyrings/bazel-archive-keyring.gpg
          echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8' \
            > /etc/apt/sources.list.d/bazel.list
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            bazel
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package
        run: bazel build ...
        shell: bash

  dotnet_alpine:
    name: dotnet alpine 3
    runs-on: ubuntu-22.04
    container: alpine:3
    steps:
      - name: pre-checkout setup
        run: |
          apk upgrade -q --no-cache
          apk add -q --no-cache \
            bash \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
        shell: sh
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: sh

  dotnet_arch:
    name: dotnet arch latest
    runs-on: ubuntu-22.04
    container: archlinux:latest
    steps:
      - name: pre-checkout setup
        run: |
          pacman --needed --noconfirm --noprogressbar -S -u -y \
            ca-certificates \
            curl \
            git \
            icu \
            lttng-ust \
            zlib
          rm -rf \
            /var/cache/pacman/pkg/* \
            /var/lib/pacman/sync/*
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_fedora:
    name: dotnet fedora latest
    runs-on: ubuntu-22.04
    container: fedora:latest
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_macos:
    name: dotnet macos latest
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}
      - name: build and pack release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: zsh -efuo pipefail {0}

  dotnet_rockylinux:
    name: dotnet rockylinux 9
    runs-on: ubuntu-22.04
    container: rockylinux:9
    steps:
      - name: pre-checkout setup
        run: |
          dnf makecache -q --refresh || (sleep 15; dnf makecache -q --refresh)
          dnf upgrade -q -y
          dnf install -q -y \
            ca-certificates \
            curl-minimal \
            findutils \
            git \
            glibc-langpack-en \
            libicu \
            lttng-ust \
            zlib
          dnf clean all
          rm -rf /var/cache/yum
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash

  dotnet_ubuntu:
    name: dotnet ubuntu 22.04
    runs-on: ubuntu-22.04
    container: ubuntu:22.04
    steps:
      - name: pre-checkout setup
        run: |
          apt-get -qq -o APT::Acquire::Retries=4 update \
            || (sleep 15; apt-get -qq -o APT::Acquire::Retries=4 update)
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
            upgrade
          apt-get -qq -o APT::Acquire::Retries=4 -o Dpkg::Use-Pty=0 \
              --no-install-recommends install \
            ca-certificates \
            curl \
            git \
            libicu70 \
            liblttng-ust1 \
            zlib1g
          apt-get -qq -o Dpkg::Use-Pty=0 autoremove
          rm -rf /var/lib/apt/lists/*
        env:
          DEBIAN_FRONTEND: noninteractive
        shell: bash
      - name: checkout
        uses: actions/checkout@v3
      - name: post-checkout setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
          source-url: https://nuget.pkg.github.com/snape/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: build package debug
        run: |
          dotnet build --configuration Debug --nologo RVOCS.sln
          dotnet pack --configuration Debug --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: build package release
        run: |
          dotnet build --configuration Release --nologo RVOCS.sln
          dotnet pack --configuration Release --no-build --nologo RVOCS/RVOCS.csproj
        shell: bash
      - name: push
        run: |
          dotnet nuget push --no-symbols true --skip-duplicate RVOCS/bin/Release/RVOCS.*.nupkg
        shell: bash
        if: ${{ github.event.release.published }}

  dotnet_windows:
    name: dotnet windows latest
    runs-on: windows-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
      - name: build package debug
        run: |
          dotnet build --configuration Debug RVOCS.sln
          dotnet pack --configuration Debug --no-build RVOCS\RVOCS.csproj
        shell: pwsh
      - name: build and pack release
        run: |
          dotnet build --configuration Release RVOCS.sln
          dotnet pack --configuration Release --no-build RVOCS\RVOCS.csproj
        shell: pwsh
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1
      - name: Build with dotnet
        run: |
          dotnet build --configuration Release
      - name: Test with dotnet
        run: |
          dotnet test",0.026980696131773122,0.03373484020891616,Valid,0.40660339470543677,C#
1042,https://github.com/electroly/sqlnotebook,"name: SQL Notebook

on: push

jobs:
  build:
    runs-on: windows-2022
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Build
      shell: pwsh
      run: |
        Write-Output ""Decoding code signing certificate.""
        Set-Content -Path certificate.txt -Value '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
        certutil -decode certificate.txt certificate.pfx
        $certificatePath = (Resolve-Path ""certificate.pfx"").Path
        $certificatePassword = ""${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}""

        Write-Output ""Finding msbuild.""
        $msbuildPath = & vswhere.exe -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
        Write-Output ""Found msbuild at: $msbuildPath""

        Write-Output ""Building x64.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x64
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-64bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-64bit.zip

        Write-Output ""Building x86.""
        ps1\Clear-TempFiles.ps1
        ps1\New-Release.ps1 -MsbuildPath $msbuildPath -CertificatePath $certificatePath -CertificatePassword $certificatePassword -Platform x86
        Move-Item src/SqlNotebook/bin/SqlNotebook.msi SqlNotebook-32bit.msi
        Move-Item src/SqlNotebook/bin/SqlNotebook.zip SqlNotebook-32bit.zip

    - name: Upload x64 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.msi
        path: SqlNotebook-64bit.msi

    - name: Upload x64 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-64bit.zip
        path: SqlNotebook-64bit.zip

    - name: Upload x86 MSI
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.msi
        path: SqlNotebook-32bit.msi

    - name: Upload x86 ZIP
      uses: actions/upload-artifact@v3
      with:
        name: SqlNotebook-32bit.zip
        path: SqlNotebook-32bit.zip
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Test
      run: dotnet test",0.09017341040462427,0.15444551103611617,Valid,0.041666666666666664,C#
1043,https://github.com/kakone/googlecast,"name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test",0.49134199134199136,0.8787923881767887,Valid,0.5853894533139816,C#
1044,https://github.com/nettitude/sharpsocks,"name: SharpSocks Server

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore SharpSocksServer/SharpSocksServer.csproj
    - name: Build
      run: dotnet build --no-restore --configuration ""Release Linux"" SharpSocksServer/SharpSocksServer.csproj
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Setup MSBuild
      uses: actions/setup-msbuild@v1.0.2
      with:
        msbuild-version: 16.0

    - name: Setup NuGet
      uses: actions/setup-nuget@v1.0.5
      with:
        nuget-version: 5.x

    - name: Restore dependencies
      run: |
        dotnet restore
        nuget restore

    - name: Build solution
      run: |
        msbuild /t:restore
        msbuild /p:Configuration=Release

    - name: Run tests
      run: |
        dotnet test",0.4006092916984006,0.46254026080316574,Valid,0.44,C#
1045,https://github.com/mat-mcloughlin/patientmangement,"name: Build Patient Management

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check Out Repo
        uses: actions/checkout@v1

      - name: Start containers
        run: docker-compose -f ""docker-compose.yml"" up -d

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ""6.0.x""

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Stop containers
        if: always()
        run: docker-compose -f ""docker-compose.yml"" down
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test",0.44224422442244227,0.5315784873489909,Valid,0.4388888888888889,C#
1046,https://github.com/zyzsdy/negativeencoder,"name: Build Test

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '5.0'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test",0.6317103620474407,0.6649816416121908,Valid,0.717948717948718,C#
1047,https://github.com/velcrophysics/velcrophysics,"name: Generic build

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 5.0.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Setup .NET Core 3.1.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - name: Build VelcroPhysics and samples
      run: dotnet build -c LinuxRelease src/VelcroPhysics.All.sln","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: |
        dotnet restore src/VelcroPhysics.All.sln

    - name: Build
      run: |
        dotnet build src/VelcroPhysics.All.sln --configuration Release

    - name: Test
      run: |
        dotnet test src/VelcroPhysics.All.sln --configuration Release
",0.35,0.54455803266326,Valid,0.7578947368421053,C#
1048,https://github.com/deanhume/html-minifier,"name: .NET

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '3.1.301'

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build

    - name: Test
      run: |
        dotnet test",0.39416058394160586,0.817229501817889,Valid,0.5722222222222222,C#
1049,https://github.com/uuksu/rpgmakerdecrypter,"name: .NET

on:
  push:
    tags:
      - v*

jobs:
  build_cli:
  
    env:
      BUILD_CONFIG: 'Release'
      CLI_PROJECT: 'RPGMakerDecrypter.Cli/RPGMakerDecrypter.Cli.csproj'
      GUI_PROJECT: 'RPGMakerDecrypter.Gui/RPGMakerDecrypter.Gui.csproj'

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Fetch tags
      run: git fetch --all --tags
      
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration $Env:BUILD_CONFIG --no-restore
      
    - name: Publish Linux CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r linux-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - name: Publish Windows CLI
      run: dotnet publish $Env:CLI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=Link --self-contained true --output $Env:GITHUB_WORKSPACE
          
    - name: Publish Windows GUI
      run: dotnet publish $Env:GUI_PROJECT --configuration $Env:BUILD_CONFIG -r win-x64 -p:PublishSingleFile=true --self-contained true --output $Env:GITHUB_WORKSPACE
      
    - uses: ncipollo/release-action@v1.12.0
      with:
        bodyFile: CHANGELOG.MD
        artifacts: ""RPGMakerDecrypter-cli,RPGMakerDecrypter-cli.exe,RPGMakerDecrypter.exe""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0
      - name: Restore dependencies
        run: |
          dotnet restore
      - name: Build
        run: |
          dotnet build --configuration Release
      - name: Test
        run: |
          dotnet test --configuration Release",0.1651376146788991,0.30023056075813886,Valid,0.6666666666666666,C#
1050,https://github.com/uknowsec/sharpsqltools,"name: ""Build SharpSQLTools ""

on:
  push:
    branches:
      - master
      - releases/*

jobs:
  build:
    runs-on: windows-2019
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Build DotNET40
        run: |
           cd ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\""
           .\MSBuild.exe -p:Configuration=Release $Env:GITHUB_WORKSPACE\
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with: 
          # Artifact name
          name: SharpSQLTools.exe
          path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe
      - name: zip_exe
        shell: powershell
        run: Compress-Archive -Path D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.exe -DestinationPath D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: D:\a\SharpSQLTools\SharpSQLTools\SharpSQLTools\bin\Release\SharpSQLTools.zip
          asset_name: SharpSQLTools.zip
          asset_content_type: application/zip
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release

    - name: Test
      run: |
        dotnet test",0.11934156378600823,0.19983663754947234,Valid,0.4479124849458049,C#
1051,https://github.com/richardszalay/mockhttp,"name: MockHttp Build
on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: ""Build""
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_NOLOGO: true
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore ./RichardSzalay.MockHttp.sln
    - name: Build
      run: dotnet build -c Release --no-restore ./RichardSzalay.MockHttp.sln
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal ./RichardSzalay.MockHttp.sln
    - name: Package
      run: dotnet pack -c Release --no-build ./RichardSzalay.MockHttp/RichardSzalay.MockHttp.csproj
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'

    - name: ""Upload artifact: RichardSzalay.MockHttp.nupkg""
      uses: actions/upload-artifact@v3.1.1
      with:
        name: RichardSzalay.MockHttp.nupkg
        path: RichardSzalay.MockHttp/bin/Release/*.nupkg
      if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test",0.06965761511216056,0.33548288378792535,Valid,0.30800614529292003,C#
1052,https://github.com/gmershad/fooddelivery,"name: .NET Core

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.108
    - name: Build with dotnet
      run: dotnet build --configuration Release
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release

    - name: Test
      run: |
        dotnet test",0.21601941747572814,0.43525352534274514,Valid,0.9863013698630136,C#
1053,https://github.com/apetrovskiy/stups,"# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the ""env"" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it ""Base64_Encoded_Pfx.""
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it ""Pfx_Key"".
# See ""Build the Windows Application Packaging project"" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: STUPS.sln                                  # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      if: always()
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      if: always()
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String(""${{ secrets.Base64_Encoded_Pfx }}"")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes(""$certificatePath"", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test",0.0811728946897908,0.08342015413735686,Valid,0.42638077753050574,C#
1054,https://github.com/cwensley/pablodraw,"# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build

on:
  push:
    branches: [main]
    tags: [""*""]
  pull_request:
    branches: [main]

env:
  DotNetVersion: ""7.0.x""
  BuildConfiguration: ""Release""
  BuildParameters: ""/clp:NoSummary /p:Configuration=Release /p:BuildVersion=${{ github.run_id }} /p:BuildBranch=${{ github.ref }}""

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-windows.binlog

      - name: Build PabloDraw.Console
        run: dotnet publish Source/PabloDraw.Console/PabloDraw.Console.cxproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw.console-windows.binlog
        
      - name: Build msi
        run: dotnet build ${{ env.BuildParameters }} Source/PabloDraw.WindowsInstaller/PabloDraw.WindowsInstaller.wixproj

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-binaries-x64
          path: artifacts/publish/${{ env.BuildConfiguration }}/Windows/*

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-windows-installer-x64
          path: artifacts/installer/${{ env.BuildConfiguration }}/Windows/*.msi

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - name: Build PabloDraw
        run: dotnet publish Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-linux.binlog
        
      - name: Create gzip
        run: tar -czvf pablodraw-linux-x64.tar.gz -C artifacts/publish/${{ env.BuildConfiguration }}/Linux .

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-linux-binaries-x64
          path: pablodraw-linux-x64.tar.gz

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  build-mac:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DotNetVersion }}

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 13.1

      - name: Import code signing certificate
        if: github.event_name != 'pull_request'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.DEVID_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.DEVID_CERTIFICATE_P12_PASSWORD }}

      - name: Enable code signing
        if: github.event_name != 'pull_request'
        run: echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableCodeSigning=True"" >> $GITHUB_ENV

      - name: Set notarization credentials
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          xcrun altool --store-password-in-keychain-item ""AC_PASSWORD"" -u ""${{ secrets.AC_USERNAME }}"" -p ""${{ secrets.AC_PASSWORD }}""
          echo ""BuildParameters=${{ env.BuildParameters }} /p:EnableNotarization=True"" >> $GITHUB_ENV

      - name: Build PabloDraw
        run: sudo dotnet build Source/PabloDraw/PabloDraw.csproj ${{ env.BuildParameters }} /bl:artifacts/log/pablodraw-mac.binlog

      - uses: actions/upload-artifact@v2
        with:
          name: pablodraw-mac
          path: artifacts/publish/${{ env.BuildConfiguration }}/Mac/*.dmg

      - name: Upload log files
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: log
          path: artifacts/log/**/*

  update-release:
    needs: [build-windows, build-mac, build-linux]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - id: get_release
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2

      - uses: softprops/action-gh-release@v1
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          files: |
            **/*.msi
            **/*.dmg
            **/*.tar.gz
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0
      - name: Restore dependencies
        run: dotnet restore
      - name: Build the application
        run: dotnet build
      - name: Test the application
        run: dotnet test",0.0744721689059501,0.09514703881869059,Valid,0.18280121041748948,C#
1055,https://github.com/rbmkio/radish,"name: Publish

on:
  push:
    branches: master

jobs:

  build-win:
    runs-on: windows-2016
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      shell: pwsh
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish x64 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: publish x86 exe
      shell: pwsh
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r win-x86 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: download nsis
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri https://github.com/rbmkio/nsis/raw/master/nsis.zip -OutFile $env:GITHUB_WORKSPACE\build\nsis\nsis.zip
        Expand-Archive -Path $env:GITHUB_WORKSPACE\build\nsis\nsis.zip -DestinationPath $env:GITHUB_WORKSPACE\build\nsis
    - name: build nsis
      shell: pwsh
      run: |
        copy $env:GITHUB_WORKSPACE\build\nsis\64bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish
        copy $env:GITHUB_WORKSPACE\build\nsis\32bit\installer.nsi $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\installer.nsi
        & $env:GITHUB_WORKSPACE\build\nsis\makensis.exe $env:GITHUB_WORKSPACE\src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\installer.nsi
    - name: upload x64 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x64
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x64\publish\radish-setup.exe
    - name: upload x86 artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: exe-x86
        path: src\Rbmk.Radish\bin\Release\netcoreapp3.0\win-x86\publish\radish-setup.exe

  build-mac:
    runs-on: macOS-10.14
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: bundle app
      run: dotnet msbuild src/Rbmk.Radish/Rbmk.Radish.csproj -t:BundleApp -p:Configuration=Release -p:RuntimeIdentifier=osx-x64 -p:VersionSuffix=""$(git rev-list --count HEAD)""
    - name: build dmg
      run: |
        cd build/dmg-builder
        ./build-dmg $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/osx-x64/publish/Radish.app
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: dmg
        path: build/dmg-builder/Radish.dmg

  build-linux:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v1
    - name: checkout submodules
      run: git submodule update --init --recursive
    - name: setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: build project
      run: dotnet build src/Rbmk.Radish -c Release --version-suffix ""$(git rev-list --count HEAD)""
    - name: publish app
      run: dotnet publish src/Rbmk.Radish/Rbmk.Radish.csproj -c Release -r linux-x64 --version-suffix ""$(git rev-list --count HEAD)""
    - name: tar gz
      run: |
        tar -cvzf radish.tar.gz -C $GITHUB_WORKSPACE/src/Rbmk.Radish/bin/Release/netcoreapp3.0/linux-x64/publish radish
    - name: upload artifacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: targz-x64
        path: radish.tar.gz
",name: Build and Test,,,Invalid,,C#
495,https://github.com/returntocorp/semgrep-rules,"name: validate-r2c-registry-metadata

# Test this workflow using github.com/nektos/act
# > brew install act
# > echo '{""pull_request"":{""head"":{""ref"":develop""}},{""base"":{""ref"":""release""}}}' > act-env.json
# > act pull_request --verbose --eventpath act-env.json -j validate-metadata

on:
  pull_request:
    branches: [develop, release]
  push:
    branches: [develop, release]

jobs:
  validate-metadata:
    if: github.repository == 'semgrep/semgrep-rules'
    name: Validate r2c registry metadata
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: changed-files
        name: get changed files
        env:
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          echo ""CHANGED_FILES=$(git diff --name-only origin/${BASE_REF} origin/${HEAD_REF} | xargs )"" >> $GITHUB_OUTPUT
      - id: print-changed-files
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        name: debugging step - print changed files
        run: echo $CHANGED_FILES
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9.2
      - name: install deps
        run: pip install jsonschema pyyaml
      - name: validate metadata
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        run: |
          python .github/scripts/validate-metadata.py -s ./metadata-schema.yaml.schm -f $CHANGED_FILES
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r Pipfile
      - name: Build and Test
        run: |
          make
          pytest",0.012060301507537688,0.2761756423035222,Valid,0.5,Python
540,https://github.com/cesena/ghidra2dwarf,"name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  test-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""
      
      - name: install 32bit libs
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libc6:i386

      - name: install gdb
        run: sudo apt install gdb

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: install python requirements
        run: |
          cd test
          sudo python3 -m pip install -r requirements.txt

      - name: test
        run: |
          cd test
          #./generate_dbg.py $GHIDRA_INSTALL_DIR
          #cd binaries
          #chmod +x ./passcode_dbg
          #gdb --batch -ex 'start < passcode_input.txt' -ex list -ex continue ./passcode_dbg
          ./run_tests.sh $GHIDRA_INSTALL_DIR

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        shell: cmd
        run: |
          cd lib
          bash fetch_libs_and_build.sh
          move target\libdwarf.jar ..\src

      - name: test
        shell: cmd
        run: |
          cd test
          copy %pythonLocation%\python.exe python3.exe
          call run_tests %GHIDRA_INSTALL_DIR%

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: NextLight/setup-ghidra@octokit-auth
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: test
        run: |
          cd test
          ./generate_dbg.py $GHIDRA_INSTALL_DIR
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install pygdbmi==0.10.0.0
        pip install pytest==6.1.2

    - name: Run tests
      run: pytest",0.2080616478956728,0.2432485675239811,Valid,0.22657850781121183,Python
815,https://github.com/arcadelab/deepdrr,"name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Build and Test
      run: |
        python setup.py build
        python setup.py test",0.4292237442922374,0.642070536131269,Valid,0.4103060471976401,Python
977,https://github.com/docopt/docopt.c,"name: PyPi publish

on:
  push:
    branches:
    - 'master'
  pull_request:
    types:
    - opened
    - reopened

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.9]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
            -   name: PyPi release
                run: |
                    pip install twine
                    python setup.py sdist bdist_wheel
                    python -m twine upload --repository pypi dist/*
                env:
                    TWINE_USERNAME: __token__
                    TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
                    TWINE_NON_INTERACTIVE: 1
                if: matrix.python-version == '3.9' && matrix.os.name == 'Linux' && github.ref == 'refs/heads/master'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install docopt

    - name: Build
      run: |
        # Add build commands here

    - name: Test
      run: |
        # Add test commands here",0.14516129032258066,0.2755306153737571,Valid,0.2811085972850679,Python
1886,https://github.com/electronstudio/raylib-python-cffi,"name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-mac:
    runs-on: macos-11
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install

      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name macosx_10_15_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

#  build-mac12-arm64:
#    runs-on: macos-12
#    strategy:
#      matrix:
#        python-version: ['3.10', '3.11.0-alpha - 3.11.0' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      # Only build raylib for arm64 (although we could make a fat universal2 binary by asking for x86_64 as well)
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64""  -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#      # Name defaults to universal2 and it technically is, but we override name to arm64.  Why don't we make a working universal2 wheel?  Because
#      # I'd rather have a separate x86_64 that I can test, and I want it to work on 10_15 but I'm not sure a 'macosx_10_15_universal2' is valid
#      # given that there is no SDK for universal until macosx_11_0
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_12_0_arm64
#
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#
#
#  build-mac11-arm64:
#    runs-on: macos-11
#    strategy:
#      matrix:
#        python-version: [ '3.10.5' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    env:
#      MACOSX_DEPLOYMENT_TARGET: 11.6
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      #  build raylib for arm64 and x86_64 as well
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64"" -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_11_0_arm64
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#


  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/
      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name manylinux2014_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*


#  build-rpi:
#    runs-on: rpi
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
#          make -j2
#          make install
#      - name: Copy extras
#        run: |
#          cp physac/src/physac.h /usr/local/include/
#          cp raygui/src/raygui.h /usr/local/include/
#
#      - name: Build raylib-python-cffi
#        run: |
#          python3 setup.py bdist_wheel
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version:  [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          msbuild raylib.sln /target:raylib /property:Configuration=Release
          copy raylib\Release\raylib.lib ..\..
          cd ..\..
        shell: cmd

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          del raylib\dynamic\*.so* >nul 2>&1
          del raylib\dynamic\*.dll >nul 2>&1
          del raylib\dynamic\*.dylib >nul 2>&1
          del raylib\dynamic\32bit\* >nul 2>&1
          python setup.py bdist_wheel
        shell: cmd
          
      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/* 
          
  source-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

  dynamic-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib-python-cffi-dynamic
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          cd dynamic
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dynamic/dist/*
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        pip install myst-parser
        pip install pyglm
        pip install cffi
        pip install inflection
        pip install electronstudio/raylib-python-cffi

    - name: Build and Test
      run: |
        python setup.py build
        python setup.py test",0.040036396724294813,0.04641967238194473,Valid,0.4168028000678391,Python
1955,https://github.com/pydata/bottleneck,"name: Github Actions

on: [""push"", ""pull_request""]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        os:
          [
            ubuntu-latest,
            macos-latest,
            windows-latest,
            windows-2022,
            macos-10.15,
          ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          pip install .

      - name: Test with pytest
        run: |
          pip install pytest
          pytest --pyargs bottleneck

  check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder for CI checks in PRs
        run: echo ""Done""

  build_wheels:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_SKIP: pp*

      - name: Store wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN}}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Build
      run: |
        python setup.py build

    - name: Test
      run: |
        python -m unittest discover -s tests -p '*_test.py'",0.12283136710617627,0.1983593992264466,Valid,0.4365561974257627,Python
813,https://github.com/k0kubun/xremap,"name: cargo
on:
  push:
    branches:
      - master
      - feature*
    tags:
      - v*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  schedule:
    - cron: '00 15 * * *' # 7:00 PST (-8), 8:00 PDT (-7)
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
        feature: [x11, gnome, kde, sway, hypr, wlroots]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.arch }}-unknown-linux-musl
      - uses: Swatinem/rust-cache@v2
        with:
          key: ubuntu-latest-${{ matrix.arch }}-${{ matrix.feature }}

      - run: cargo install cross
      - name: cross build
        run: cross build --release --features ${{ matrix.feature }} --target=${{ matrix.arch }}-unknown-linux-musl

      - name: package
        run: zip ""xremap-linux-${{ matrix.arch }}-${{ matrix.feature }}.zip"" xremap
        working-directory: target/${{ matrix.arch }}-unknown-linux-musl/release
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: xremap-${{ matrix.arch }}-${{ matrix.feature }}
          path: target/${{ matrix.arch }}-unknown-linux-musl/release/xremap-linux-${{ matrix.arch }}-${{ matrix.feature }}.zip

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo fmt
        run: cargo fmt -- --check

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest
      - run: cargo test

  publish:
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
        with:
          key: ubuntu-latest

      # Release crate
      - name: cargo login
        run: cargo login ""$CARGO_TOKEN""
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - run: cargo publish

      # Fetch x86_64 binary
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-x11,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-gnome,   path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-kde,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-sway,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-hypr,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-x86_64-wlroots, path: package/ } }

      # Fetch aarch64 binary
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-x11,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-gnome,   path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-kde,     path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-sway,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-hypr,    path: package/ } }
      - { uses: actions/download-artifact@v3, with: { name: xremap-aarch64-wlroots, path: package/ } }

      # Release binary
      - name: Release
        run: |
          export VERSION=$(echo ""$GITHUB_REF"" | sed -e 's!refs/tags/!!')
          curl -L ""https://github.com/tcnksm/ghr/releases/download/${GHR_VERSION}/ghr_${GHR_VERSION}_linux_amd64.tar.gz"" | tar xvz
          ""ghr_${GHR_VERSION}_linux_amd64/ghr"" -u k0kubun -r xremap -replace -n ""$VERSION"" ""$VERSION"" package/
        env:
          GHR_VERSION: v0.14.0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Build
      run: |
        cargo build --verbose

    - name: Test
      run: |
        cargo test --verbose",0.04925902734293467,0.08605539404592039,Valid,0.45528455284552843,Rust
861,https://github.com/lobaro/freertos-rust,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  freertos-rust:
    name: Build freertos-rust
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt, clippy
    #- name: Format
    # run: cargo fmt -- --check
    - name: Build
      run: cargo build --verbose
    #- name: Test
    #  run: cargo test
    #- name: Clippy
    #  run: cargo clippy -- -Dwarnings
  freertos-rust-stable:
    name: Build freertos-rust using stable
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}-stable
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build
      run: cargo build --verbose --no-default-features --features=sync,time,hooks,interrupt --package freertos-rust # Don't build the whole workspace because the examples use nightly features which will fail the build
  freertos-rust-examples:
    name: Build examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          #- example: win
          #  target: x86_64-pc-windows-gnu
          #- example: linux
          #  target: x86_64-unknown-linux-gnu
          #- example: stm32-cortex-m3
          #  target: thumbv7m-none-eabi
          - example: stm32-cortex-m4-blackpill
            target: thumbv7em-none-eabihf
          #- example: nrf9160
          #  target: thumbv8m.main-none-eabihf
    #env:
    #  RUSTFLAGS: -D warnings # Warnings disabled only in CI
    steps:
    - name: Clone
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.rustup
          target
        key: ${{ runner.os }}-${{ runner.arch }}
    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}
    - name: Install cross deps
      run: |
        case ${{ matrix.target }} in
          ""x86_64-pc-windows-gnu"")
            sudo apt-get install -y gcc-mingw-w64
            ;;
          ""thumbv7m-none-eabi"" | ""thumbv7em-none-eabihf"" | ""thumbv8m.main-none-eabihf"")
            sudo apt-get install -y gcc-arm-none-eabi
            ;;
        esac
    - name: Build example
      run: cargo build --verbose --example ${{ matrix.example }} --target ${{ matrix.target }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Cache Cargo dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build and Test
        run: |
          cargo build --verbose
          cargo test --verbose",0.09369951534733441,0.17772738940381524,Valid,0.5115738203957382,Rust
1025,https://github.com/aflplusplus/libafl,"name: build and test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  common:
    strategy:
      matrix:
          os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install mimetype
        if: runner.os == 'Linux'
        run: sudo apt-get install libfile-mimeinfo-perl
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: install mdbook
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: mdbook
      - name: install linkcheck
        uses: baptiste0928/cargo-install@v1.3.0
        with:
          crate: mdbook-linkcheck
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - name: Check for binary blobs
        if: runner.os == 'Linux'
        run: ./scripts/check_for_blobs.sh
      - name: Build libafl debug
        run: cargo build -p libafl
      - name: Build the book
        run: cd docs && mdbook build
      - name: Test the book
        # TODO: fix books test fail with updated windows-rs
        if: runner.os != 'Windows'
        run: cd docs && mdbook test -L ../target/debug/deps
      - name: Run tests
        run: cargo test
      - name: Test libafl no_std
        run: cd libafl && cargo test --no-default-features
      - name: Test libafl_bolts no_std no_alloc
        run: cd libafl_bolts && cargo test --no-default-features
      - name: Test libafl_targets no_std
        run: cd libafl_targets && cargo test --no-default-features
     
  ubuntu:
    runs-on: ubuntu-22.04
    steps:
    - name: Remove Dotnet & Haskell
      run: rm -rf /usr/share/dotnet && rm -rf /opt/ghc
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install and cache deps
      uses: awalsh128/cache-apt-pkgs-action@v1.1.0
      with:
        packages: llvm-15 llvm-15-dev clang-15 ninja-build clang-format-13 shellcheck libgtk-3-dev gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libslirp-dev libz3-dev
    - name: get clang version
      run: command -v llvm-config-15 && clang-15 -v
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --component miri --allow-downgrade
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2

    # ---- format check ----
    # pcguard edges and pcguard hitcounts are not compatible and we need to build them seperately
    - name: Check pcguard edges
      run: cargo check --features=sancov_pcguard_edges
    - name: Format
      run: cargo fmt -- --check
    - name: Cleanup
      run: cargo clean
    - name: Run clang-format style check for C/C++ programs.
      run: clang-format-13 -n -Werror --style=file $(find . -type f \( -name '*.cpp' -o -iname '*.hpp' -o -name '*.cc' -o -name '*.cxx' -o -name '*.cc' -o -name '*.h' \) | grep -v '/target/' | grep -v 'libpng-1\.6\.37' | grep -v 'stb_image\.h' | grep -v 'dlmalloc\.c' | grep -v 'QEMU-Nyx')
    - name: run shellcheck
      run: shellcheck ./scripts/*.sh
    - name: Run clippy
      run: ./scripts/clippy.sh
      
    # ---- doc check ----
    - name: Build Docs
      run: RUSTFLAGS=""--cfg docsrs"" cargo +nightly doc --all-features
    - name: Test Docs
      run: RUSTFLAGS=""--cfg docsrs"" cargo +nightly test --doc --all-features
    # ---- build normal and examples ----
    - name: Run a normal build
      run: cargo build --verbose
    - name: Build examples
      run: cargo build --examples --verbose
    
    # --- miri undefined behavior test --
    - name: Run miri tests
      run: RUST_BACKTRACE=1 MIRIFLAGS=""-Zmiri-disable-isolation"" cargo +nightly miri test

    # Clean up files to save up disk space
    - name: Cleanup
      run: cargo clean
      
    # --- test embedding the libafl_libfuzzer_runtime library
    # Fix me plz
    # - name: Test Build libafl_libfuzzer with embed
    #  run: cargo +nightly test --features=embed-runtime --manifest-path libafl_libfuzzer/Cargo.toml

  ubuntu-check:
    runs-on: ubuntu-22.04
    steps:
    - name: Remove Dotnet & Haskell
      run: rm -rf /usr/share/dotnet && rm -rf /opt/ghc
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install and cache deps
      uses: awalsh128/cache-apt-pkgs-action@v1.1.0
      with:
        packages: llvm-15 llvm-15-dev clang-15 ninja-build clang-format-13 shellcheck libgtk-3-dev gcc-arm-linux-gnueabi g++-arm-linux-gnueabi libslirp-dev libz3-dev
    - name: get clang version
      run: command -v llvm-config-15 && clang-15 -v
    - name: Install cargo-hack
      run: curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin
    - name: Add nightly
      run: rustup toolchain install nightly --allow-downgrade
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2

    # ---- build and feature check ----
    # cargo-hack's --feature-powerset would be nice here but libafl has a too many knobs
    - name: Check each feature
      # Skipping `python` as it has to be built with the `maturin` tool
      # `agpl`, `nautilus` require nightly
      # `sancov_pcguard_edges` is tested seperately
      run: LLVM_CONFIG=llvm-config-15 cargo hack check --each-feature --clean-per-run --exclude-features=prelude,agpl,nautilus,python,sancov_pcguard_edges,arm,aarch64,i386,be,systemmode --no-dev-deps
    - name: Check nightly features
      run: cargo +nightly check --features=agpl && cargo +nightly check --features=nautilus

  ubuntu-concolic:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Install smoke test deps
      run: sudo ./libafl_concolic/test/smoke_test_ubuntu_deps.sh 
    - name: Run smoke test
      run: ./libafl_concolic/test/smoke_test.sh 

  bindings:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove existing clang and LLVM
      run: sudo apt purge llvm* clang*
    - name: Install deps
      run: sudo apt-get install -y llvm-15 llvm-15-dev clang-15 ninja-build python3-dev python3-pip python3-venv libz3-dev
    - name: Install maturin
      run: python3 -m pip install maturin
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Run a maturin build
      run: export LLVM_CONFIG=llvm-config-15 && cd ./bindings/pylibafl && python3 -m venv .env && . .env/bin/activate && pip install --upgrade --force-reinstall . && ./test.sh
    - name: Run python test
      run: . ./bindings/pylibafl/.env/bin/activate && cd ./fuzzers/baby_fuzzer && python3 baby_fuzzer.py 2>&1 | grep ""Bye""

  fuzzers:
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Remove Dotnet (macOS)
      if: runner.os == 'macOS'
      run: rm -rf /usr/local/bin/dotnet
    - name: Free Disk Space (Ubuntu)
      if: runner.os == 'Linux'
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to ""true"" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # ""false"" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: false
        docker-images: true
        swap-storage: true
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --allow-downgrade
    - name: Add no_std toolchain
      run: rustup toolchain install nightly-x86_64-unknown-linux-gnu ; rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - name: Add wasm target
      run: rustup target add wasm32-unknown-unknown
    - name: Install cxxbridge
      if: runner.os == 'macOS'
      run: cargo install cxxbridge-cmd
    - name: Install python (macOS)
      # Removing macOS things already installed in CI against failed linking
      if: runner.os == 'macOS'
      run: rm /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc3* /usr/local/bin/python3*; brew install --force-bottle --overwrite python
    - name: Remove obsolete llvm (macOS)
      if: runner.os == 'macOS'
      run: brew remove --force llvm clang
    - name: Remove obsolete llvm (Linux)
      if: runner.os == 'Linux'
      run: sudo apt purge llvm* clang*
    - uses: lyricwulf/abc@v1
      with:  
        linux: llvm-15 llvm-15-dev clang-15 nasm ninja-build gcc-arm-linux-gnueabi g++-arm-linux-gnueabi gcc-aarch64-linux-gnu g++-aarch64-linux-gnu gcc-mipsel-linux-gnu g++-mipsel-linux-gnu gcc-powerpc-linux-gnu g++-powerpc-linux-gnu libc6-dev-i386-cross libc6-dev libc6-dev-i386 lib32gcc-11-dev lib32stdc++-11-dev libgtk-3-dev pax-utils libz3-dev
        # update bash for macos to support `declare -A` command`
        macos: llvm@15 libpng nasm coreutils z3 bash wget
    - name: Set clang version
      if: runner.os == 'Linux'
      run: sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-15 100
    - name: Set clang++ version
      if: runner.os == 'Linux'
      run: sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-15 100
    - name: pip install
      run: python3 -m pip install msgpack jinja2 find_libpython
    # Note that nproc needs to have coreutils installed on macOS, so the order of CI commands matters.
    - name: enable mult-thread for `make`
      run: export MAKEFLAGS=""-j$(expr $(nproc) \+ 1)""
    - name: install cargo-make
      uses: baptiste0928/cargo-install@v1.3.0
      with:
        crate: cargo-make
    - name: install wasm-pack
      uses: baptiste0928/cargo-install@v1.3.0
      with:
        crate: wasm-pack
    - name: install chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
    - uses: actions/checkout@v3
      with:
        submodules: true # recursively checkout submodules
        fetch-depth: 0 # to diff with origin/main
    - uses: Swatinem/rust-cache@v2
    - name: Symlink Headers
      if: runner.os == 'Linux'
      # We can't install gcc-multilib which would usually do this for us due to collisions with other packages
      run: sudo ln -s /usr/include/asm-generic /usr/include/asm
    - name: Build and run example fuzzers (Linux)
      if: runner.os == 'Linux'
      run: RUN_ON_CI=1 LLVM_CONFIG=llvm-config-15 ./scripts/test_all_fuzzers.sh
    - name: Build and run example fuzzers (macOS)
      if: runner.os == 'macOS' # use bash v4
      run: /usr/local/bin/bash -c 'RUN_ON_CI=1 ./scripts/test_all_fuzzers.sh'

  executions-check:
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Fix python (macOS)
      if: runner.os == 'macOS'
      run: rm /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc3* /usr/local/bin/python3*
    - name: Remove obsolete llvm (macOS)
      if: runner.os == 'macOS'
      run: brew remove --force llvm clang
    - name: Remove obsolete llvm (Linux)
      if: runner.os == 'Linux'
      run: sudo apt purge llvm* clang*
    - uses: lyricwulf/abc@v1
      with: 
        linux: llvm-15 llvm-15-dev clang-15
        macos: python@3.11 llvm@15 bash coreutils
    - uses: actions/checkout@v3
      with:
        submodules: true # recursively checkout submodules
        fetch-depth: 0
    - uses: Swatinem/rust-cache@v2
    - name: Build and run libfuzzer_libpng (Linux)
      if: runner.os == 'Linux'
      run: ./scripts/executions-check.sh 
    - name: Build and run libfuzzer_libpng (macOS) 
      if: runner.os == 'macOS'
      run: /usr/local/bin/bash -c './scripts/executions-check.sh'

  nostd-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy, rust-src
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Add targets
      run: rustup target add arm-linux-androideabi && rustup target add thumbv6m-none-eabi
    - name: Build aarch64-unknown-none
      run: cd ./fuzzers/baby_no_std && cargo +nightly build -Zbuild-std=core,alloc --target aarch64-unknown-none -v --release && cd ../..
    - name: run x86_64 until panic!
      run: cd ./fuzzers/baby_no_std && cargo +nightly run || test $? -ne 0 || exit 1
    - name: no_std tests
      run: cd ./libafl && cargo test --no-default-features 
    - name: libafl armv6m-none-eabi (32 bit no_std) clippy
      run: cd ./libafl && cargo clippy --target thumbv6m-none-eabi --no-default-features
    - name: Build no_std no_alloc bolts
      run: cd ./libafl_bolts && cargo +nightly build -Zbuild-std=core --target aarch64-unknown-none --no-default-features -v --release && cd ../

  build-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build docker
      run: docker build -t libafl .

  windows:
    runs-on: windows-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Windows Build
      run: cargo build --verbose
    - name: Run clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
    - name: Build docs
      run: cargo doc
    - name: Set LIBCLANG_PATH
      run: echo ""LIBCLANG_PATH=$((gcm clang).source -replace ""clang.exe"")"" >> $env:GITHUB_ENV
    - name: install cargo-make
      run: cargo install --force cargo-make
    - uses: ilammy/msvc-dev-cmd@v1
    - name: install cxx bridge
      run: cargo install cxxbridge-cmd
    - name: Build fuzzers/libfuzzer_stb_image 
      run: cd fuzzers/libfuzzer_stb_image && cargo build --release
    - name: Build fuzzers/frida_libpng
      run: cd fuzzers/frida_libpng/ && cargo make test
    - name: Build fuzzers/frida_gdiplus
      run: cd fuzzers/frida_gdiplus/ && cargo make test
    - name: Build fuzzers/tinyinst_simple
      run: cd fuzzers/tinyinst_simple/ && cargo make test
      
  macos:
    runs-on: macOS-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Add nightly rustfmt and clippy
      run: rustup toolchain install nightly --component rustfmt --component clippy --allow-downgrade
    - name: Install deps
      run: brew install z3 gtk+3
    - name: Install cxxbridge
      run: cargo install cxxbridge-cmd
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: MacOS Build
      run: cargo build --verbose
    - name: Run clippy
      run: ./scripts/clippy.sh
    - name: Increase map sizes
      run: ./scripts/shmem_limits_macos.sh
    - name: Run Tests
      run: cargo test

  other_targets:
    runs-on: macOS-latest
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - uses: nttld/setup-ndk@v1
      with:
        ndk-version: r25b
    - name: install ios
      run: rustup target add aarch64-apple-ios
    - name: install android
      run: rustup target add aarch64-linux-android
    - name: install cargo ndk
      run: cargo install cargo-ndk
    - uses: actions/checkout@v3
    - uses: Swatinem/rust-cache@v2
    - name: Build iOS
      run: cargo build --target aarch64-apple-ios && cd libafl_frida && cargo build --target aarch64-apple-ios && cd ..
    - name: Build Android
      run: cargo ndk -t arm64-v8a build --release 
    #run: cargo build --target aarch64-linux-android
    # TODO: Figure out how to properly build stuff with clang
    #- name: Add clang path to $PATH env
    #  if: runner.os == 'Windows'
    #  run: echo ""C:\msys64\mingw64\bin"" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
    #- name: Try if clang works
    #  run: clang -v
    #- name: Windows Test
    #  run: C:\Rust\.cargo\bin\cargo.exe test --verbose

  freebsd:
    runs-on: ubuntu-22.04
    name: Simple build in FreeBSD
    steps:
    - uses: actions/checkout@v3
    - name: Test in FreeBSD
      id: test
      uses: vmactions/freebsd-vm@v1
      with:
        usesh: true
        sync: rsync
        copyback: false
        mem: 2048
        release: 13.2
        prepare: |
          pkg install -y curl bash sudo llvm16
          curl https://sh.rustup.rs -sSf | sh -s -- -y

        run: |
          freebsd-version
          . ""$HOME/.cargo/env""
          rustup toolchain install nightly
          export LLVM_CONFIG=/usr/local/bin/llvm-config16
          pwd
          ls -lah
          echo ""local/bin""
          ls -lah /usr/local/bin/
          which llvm-config
          chmod +x ./scripts/clippy.sh
          bash ./scripts/shmem_limits_fbsd.sh
          bash ./scripts/clippy.sh
          cargo test
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cargo
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install AFLplusplus
      uses: baptiste0928/cargo-install@v1.3.0
      with:
        command: 'afl++'

    - name: Build and Test
      run: |
        cargo build --verbose
        cargo test --verbose",0.017917622637386648,0.03993687542391886,Valid,0.35717281047653454,Rust
1236,https://github.com/dyc3/steamguard-cli,"name: Lint, Build, Test

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - run: rustup component add clippy rustfmt
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.5.0
      - name: Check format
        run: cargo fmt --all -- --check
      - name: Check
        run: cargo check --verbose --all-targets --all-features
      - name: Clippy
        run: cargo clippy --workspace --no-deps --all-features --all-targets -- -D warnings
      - name: Validate documentation
        run: cargo doc --workspace --no-deps --all-features
      - name: Run tests
        run: cargo test --verbose --all-features --all-targets --workspace
  check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, x86_64-pc-windows-gnu]
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.5.0
        with:
          prefix-key: v0-rust-${{ matrix.target }}
      - name: Install Cross
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cross
      - name: Check
        run: cross check --verbose --all-targets --all-features --target ${{ matrix.target }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Rust
      uses: actions/setup-rust@v1
      with:
        profile: minimal

    - name: Build the application
      run: |
        cargo build --verbose

    - name: Run tests
      run: |
        cargo test --verbose",0.05351170568561873,0.28555729596567325,Valid,0.3240029928918818,Rust
1815,https://github.com/rust-lang/flate2-rs,"name: CI
on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # I don't really understand the build matrix here...
        build: [stable, beta, nightly, macos, windows, mingw]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: macos
            os: macos-latest
            rust: stable
          - build: windows
            os: windows-2022
            rust: stable
          - build: mingw
            os: windows-2022
            rust: stable-x86_64-gnu
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust (rustup)
      run: rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
      shell: bash
    - run: cargo build
    - run: rustdoc --test README.md -L target/debug/deps --extern flate2=target/debug/libflate2.rlib --edition=2018
    - run: cargo test
    - run: cargo test --features zlib
    - run: cargo test --features zlib --no-default-features
    - run: cargo test --features zlib-default --no-default-features
    - run: cargo test --features zlib-ng-compat --no-default-features
      if: matrix.build != 'mingw'
    - run: cargo test --features zlib-ng --no-default-features
      if: matrix.build != 'mingw'
    - run: cargo test --features cloudflare_zlib --no-default-features
      if: matrix.build != 'mingw'
    - run: |
        if ! cargo check --no-default-features 2>&1 | grep ""You need to choose""; then 
          echo ""expected message stating a zlib backend must be chosen""
          exit 1
        fi
      if: matrix.build == 'stable' 

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - run: cargo fmt -- --check

  wasm:
    name: WebAssembly
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [wasm32-unknown-unknown, wasm32-wasi]
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup target add ${{ matrix.target }}
    - run: cargo build --target ${{ matrix.target }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Rust
      uses: actions/setup-rust@v1
      with:
        profile: minimal

    - name: Build
      run: |
        cargo build --verbose

    - name: Test
      run: |
        cargo test --verbose",0.037934668071654375,0.13907136048573515,Valid,0.49526741565068705,Rust
829,https://github.com/mdlayher/wifi,"name: Test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        go-version:
        - ""1.20""
        - ""1.21""
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    # Run basic tests, we just want to make sure there is parity on Linux and
    # macOS, and back to the oldest version of Go this library supports.
    - name: Run tests
      run: go test ./...
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.16

    - name: Build
      run: go build

    - name: Test
      run: go test -v ./...
",0.24159854677565848,0.4667153542273453,Valid,0.896551724137931,Go
897,https://github.com/uber/h3-go,"name: Build

on: [push, pull_request]

permissions:
  contents: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [""1.18""]

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.47.3

  test:
    name: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [""1.18"", ""1.19""]

    steps:
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      - uses: actions/checkout@v3
      - name: unit-tests
        run: |
          go test -count=2 -race -covermode atomic -coverprofile=covprofile ./...
      - name: goveralls
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install github.com/mattn/goveralls@latest
          goveralls -coverprofile=covprofile -service=github
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15

    - name: Install dependencies
      run: |
        go mod download
        go get -v github.com/stretchr/testify@v1.4.0
        go get -v github.com/uber/h3-go

    - name: Build
      run: go build

    - name: Test
      run: go test -v ./...
",0.02,0.38638697296266517,Valid,0.36363636363636365,Go
2003,https://github.com/go-vgo/robotgo,"name: Go
on: [push]
jobs:
  test:
    # name: build
    strategy:
      matrix:
        # go: [1.12.x, 1.13.x]
        os: [macOS-latest, windows-latest] # ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Set up Go 1.21.0
        uses: actions/setup-go@v1
        with:
          go-version: 1.21.0
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: |
          go get -v -t -d ./...

      - name: Build
        run: go build -v .
      - name: Test
        run: go test -v robot_info_test.go
        # run: go test -v .
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.16
    - name: Build
      run: go build -v ./...
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: 1.16
    - name: Test
      run: go test -v ./...",0.12685982772122162,0.6582798536929142,Valid,0.7,Go
2099,https://github.com/cpmech/gosl,"name: Test & Coverage
on: [pull_request, push]
jobs:
  test_and_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Libraries
        run: |
          sudo apt-get install -y --no-install-recommends \
          gcc \
          gfortran \
          libfftw3-dev \
          liblapacke-dev \
          libmetis-dev \
          libmumps-seq-dev \
          libopenblas-dev \
          libsuitesparse-dev
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.20
      - name: Build all
        run: |
          bash ./all.bash
      - name: Test & Coverage
        run: |
          go test -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: true","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Build
        run: go build ./...
      - name: Test
        run: go test -v ./...",0.041379310344827586,0.3641516702828276,Valid,0.38,Go
961,https://github.com/ofalk/libdnet,"name: cmake

'on':
    pull_request:
    push:
        branches:
          - master
          - develop
          - feature/**

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
          
jobs:
    build:
        runs-on: ubuntu-${{ matrix.ubuntu_version }}
        name: Ubuntu-${{ matrix.ubuntu_version }}
        strategy:
            fail-fast: false
            matrix:
                ubuntu_version: [22.04]
                shared: [ON, OFF]

        steps:
          - name: Checkout
            uses: actions/checkout@v3
            with:
                fetch-depth: 0


          - name: Install packages
            run: |
                sudo apt-get install -y gcc g++ cmake wget git


          - name: Configure
            run: cmake -DCMAKE_BUILD_TYPE=""${{env.BUILD_TYPE}}"" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -B ""${{github.workspace}}/build"" 

          - name: Build
            run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    MSVC:
      name: windows-${{ matrix.win_version }}
      runs-on: windows-${{ matrix.win_version }}
      strategy:
        fail-fast: false
        matrix:
          win_version: [2019, 2022]
          shared: [ON, OFF]

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
              fetch-depth: 0

        - name: Configure CMake
          run: cmake -DCMAKE_BUILD_TYPE=""${{env.BUILD_TYPE}}"" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -B ""${{github.workspace}}/build""

        - name: Build
          run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up CMake
      run: |
        sudo apt-get update
        sudo apt-get install cmake

    - name: Build the application
      run: |
        mkdir build
        cd build
        cmake ..
        make

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Run tests
      run: |
        cd test
        make test",0.07014388489208633,0.268308121001681,Valid,0.24006973863788766,Shell
1804,https://github.com/pl3xgaming/purpur,"name: Build
on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - ""ver/**""

jobs:
  build:
    runs-on: ubuntu-latest
    if: ""!contains(github.event.commits[0].message, '[ci-skip]')""
    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1
      - uses: actions/setup-java@v3.6.0
        with:
          distribution: temurin
          java-version: 17
          cache: 'gradle'
      - name: Configure Git
        run: git config --global user.email ""no-reply@github.com"" && git config --global user.name ""Github Actions""
      - name: Apply Patches
        run: ./gradlew applyPatches --no-daemon --stacktrace
      - name: Build
        run: ./gradlew build --no-daemon --stacktrace
      - name: Rebuild on Failure
        if: ${{ failure() }}
        run: |
          ./gradlew clean cleanCache
          ./gradlew applyPatches --no-daemon --stacktrace 
          ./gradlew build --no-daemon --stacktrace
","name: Build and Test

on:
  push:
    branches: [ $ver/1.20.2 ]
  pull_request:
    branches: [ $ver/1.20.2 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Validate Gradle Wrapper
      run: ./gradlew --version
    - name: Build with Gradle
      run: ./gradlew build
    - name: Test with Gradle
      run: ./gradlew test",0.20123203285420946,0.4079156595768717,Valid,0.38636363636363635,Shell
2031,https://github.com/webassembly/wasi-sdk,"name: CI

on:
  create:
    tags:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Native Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.cache/ccache
          # Bump the prefix number to evict all previous caches and
          # enforce a clean build, in the unlikely case that some
          # weird build error occur and ccache becomes a potential
          # suspect.
          key: 0-cache-ubuntu-latest-${{ github.run_id }}
          restore-keys: |
            0-cache-ubuntu-latest
        if: matrix.os == 'ubuntu-latest'
      - uses: actions/cache@v3
        with:
          path: ~/Library/Caches/ccache
          key: 0-cache-macos-latest-${{ github.run_id }}
          restore-keys: |
            0-cache-macos-latest
        if: matrix.os == 'macos-latest'
      - name: Install wasmtime for tests
        run: curl -f -L --retry 5 https://wasmtime.dev/install.sh | bash -s -- --version v8.0.1
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # We can't use `--depth 1` here sadly because the GNU config
      # submodule is not pinned to a particular tag/branch. Please
      # bump depth (or even better, the submodule), in case of ""error:
      # Server does not allow request for unadvertised object"" in the
      # future.
      - run: git submodule update --init --depth 32 --jobs 3
      - name: Install ccache, ninja (macOS)
        run: brew install ccache ninja
        if: matrix.os == 'macos-latest'
      - name: Install ccache, ninja (Linux)
        run: sudo apt install ccache ninja-build
        if: matrix.os == 'ubuntu-latest'
      - name: Build
        run: NINJA_FLAGS=-v make package LLVM_CMAKE_FLAGS=-DLLVM_CCACHE_BUILD=ON
        shell: bash
      - name: Run the testsuite
        run: NINJA_FLAGS=-v make check RUNTIME=~/.wasmtime/bin/wasmtime
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: ${{ format( 'dist-{0}', matrix.os) }}
          path: dist

  winbuild:
    name: Windows Build
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            sys: clang64
            env: clang-x86_64
          - arch: x86
            sys: clang32
            env: clang-i686
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/AppData/Local/ccache
          key: 0-${{ format( 'cache-windows-latest-{0}', matrix.arch) }}-${{ github.run_id }}
          restore-keys: |
            0-${{ format( 'cache-windows-latest-{0}', matrix.arch) }}
      - uses: msys2/setup-msys2@v2
        with:
          install: >-
            base-devel
            git
            mingw-w64-${{ matrix.env }}-ccache
            mingw-w64-${{ matrix.env }}-cmake
            mingw-w64-${{ matrix.env }}-ninja
            mingw-w64-${{ matrix.env }}-toolchain
          msystem: ${{ matrix.sys }}
          update: true
          release: false
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git submodule update --init --depth 32 --jobs 3
      - name: Build
        shell: msys2 {0}
        run: |
          make package LLVM_CMAKE_FLAGS=-DLLVM_CCACHE_BUILD=ON
          make check
      - name: Does it work sans msys2?
        run: |
          C:\wasi-sdk\bin\clang.exe --version
          C:\wasi-sdk\bin\llvm-ar.exe --version
          C:\wasi-sdk\bin\wasm-ld.exe --version
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: ${{ format( 'dist-windows-latest-{0}', matrix.arch) }}
          path: dist

  dockerbuild:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: 0-cache-ubuntu-bionic-${{ github.run_id }}
          restore-keys: |
            0-cache-ubuntu-bionic

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: git submodule update --init --depth 32 --jobs 3

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha

      - name: Run docker_build script
        run: ./docker_build.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          # Upload the dist folder. Give it a name according to the OS it was built for.
          name: dist-ubuntu-bionic
          path: dist

      - name: Build and push wasi-sdk docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: Setup WASI SDK
      run: |
        wget -O wasi-sdk.tar.gz https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-linux.tar.gz
        tar -xzvf wasi-sdk.tar.gz
        export PATH=$PATH:$PWD/wasi-sdk-12.0/bin

    - name: Build and Test
      run: |
        make
        if [ -d ""tests"" ]; then
          cd tests
          make test
        fi",0.038220455587830604,0.11318024535953643,Valid,0.25733786266645614,Shell
