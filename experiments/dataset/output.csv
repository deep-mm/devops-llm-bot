Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score
1.0,https://github.com/DapperLib/Dapper,"name: Main Build

on:
  pull_request:
  push:
    branches:
    - main
    paths:
    - '*'
    - '!/docs/*' # Don't run workflow when files are only in the /docs directory

jobs:
  vm-job:
    name: Ubuntu
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        ports:
        - 5432/tcp
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
        - 1433/tcp
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ""Password.""
      mysql:
        image: mysql
        ports:
        - 3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: .NET Build
      run: dotnet build Build.csproj -c Release /p:CI=true
    - name: Dapper Tests
      run: dotnet test tests/Dapper.Tests/Dapper.Tests.csproj -c Release --logger GitHubActions /p:CI=true
      env:
        MySqlConnectionString: Server=localhost;Port=${{ job.services.mysql.ports[3306] }};Uid=root;Pwd=root;Database=test;Allow User Variables=true
        OLEDBConnectionString: Provider=SQLOLEDB;Server=tcp:localhost,${{ job.services.sqlserver.ports[1433] }};Database=tempdb;User Id=sa;Password=Password.;
        PostgesConnectionString: Server=localhost;Port=${{ job.services.postgres.ports[5432] }};Database=test;User Id=postgres;Password=postgres;
        SqlServerConnectionString: Server=tcp:localhost,${{ job.services.sqlserver.ports[1433] }};Database=tempdb;User Id=sa;Password=Password.;
    - name: .NET Lib Pack
      run: dotnet pack Build.csproj --no-build -c Release /p:PackageOutputPath=%CD%\.nupkgs /p:CI=true
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Test
      run: |
        if [ -f ""./tests"" ]; then
          dotnet test
        else
          echo ""No tests found""
        fi",0.057304277643260695,0.23474996398957093,Valid,
2.0,https://github.com/huiyadanli/RevokeMsgPatcher,"name: .Net Build

on:
  workflow_dispatch:
    inputs:
      Reason:
        description: 'Reasons for temporary build'     
        required: true
        default: 'No reason.Just do it.'
  push:
        branches:
          - master
        paths-ignore:
          - '**/*.md'
          - .gitignore
          - .editorconfig
          - appveyor.yml

  pull_request:
          branches:
            - master
          paths-ignore:
            - '**/*.md'
            - .gitignore
            - .editorconfig
            - appveyor.yml

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  #BUILD_CONFIGURATION: [Debug , Release]

jobs:
  build:
    name: ${{matrix.BUILD_CONFIGURATION}}
    runs-on: windows-2019
    strategy:
        matrix:
          BUILD_CONFIGURATION: ['Debug', 'Release']
    steps:
    - uses: actions/checkout@v2

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build ${{matrix.BUILD_CONFIGURATION}}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: RevokeMsgPatcher-${{matrix.BUILD_CONFIGURATION}}
        path: |
          .\RevokeMsgPatcher\bin
          !.\RevokeMsgPatcher\bin\**\RevokeMsgPatcher.exe.config
          !.\RevokeMsgPatcher\bin\**\RevokeMsgPatcher.pdb
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: actions/setup-msbuild@v1.0.2

    - name: Build with MSBuild
      run: msbuild RevokeMsgPatcher.sln

  test:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: actions/setup-msbuild@v1.0.2

    - name: Run Tests
      run: |
        # Add commands to run tests here",0.09358490566037736,0.23465557300387557,Valid,
3.0,https://github.com/jasontaylordev/CleanArchitecture,"name: Package

on:
  push:
    branches:
      - main
    paths:
      - 'CleanArchitecture.nuspec'

jobs:
  publish:
    name: Publish to NuGet.org

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Checkout code

      - uses: nuget/setup-nuget@v1
        name: Setup NuGet
        with:
          nuget-version: '6.x'

      - name: Create the package
        run: nuget pack CleanArchitecture.nuspec -NoDefaultExcludes
        
      - name: Publish the package
        run: nuget push *.nupkg -Source 'https://api.nuget.org/v3/index.json' -ApiKey ${{secrets.NUGET_API_KEY}} -SkipDuplicate","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        npm install

    - name: Build
      run: |
        npm run build

    - name: Test
      run: |
        npm test",0.20287253141831238,0.5143476158874506,Valid,
4.0,https://github.com/nilaoda/N_m3u8DL-CLI,"name: Build_Latest
 
on: [push]
 
jobs:
  build:
 
    runs-on: windows-latest
 
    steps:
    - uses: actions/checkout@v1
      name: Checkout Code
     
    - name: Setup MSBuild Path
      uses: warrenbuckley/Setup-MSBuild@v1
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
       
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.2
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
     
    - name: Restore NuGet Packages
      run: nuget restore N_m3u8DL-CLI.sln
 
    - name: Build 
      run: msbuild N_m3u8DL-CLI.sln /p:Configuration=Release /p:DebugSymbols=false /p:DebugType=None
 
    - name: Upload Artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: N_m3u8DL-CLI_latest
        path: N_m3u8DL-CLI\bin\Release\N_m3u8DL-CLI.exe
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Test
      run: dotnet test",0.07710100231303008,0.43799951736464104,Valid,
5.0,https://github.com/shadowsocks/shadowsocks-windows,"name: Build

on:
  push:
    branches-ignore:
      - 'v4'
      - 'rm'
    paths-ignore:
      - 'README.md'
      - 'LICENSE.txt'
  pull_request:
    branches-ignore:
      - 'v4'
      - 'rm'
    paths-ignore:
      - 'README.md'
      - 'LICENSE.txt'

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2
      - name: Restore dependencies
        if: matrix.os == 'windows-latest'
        run: dotnet restore
      - name: Build
        if: matrix.os == 'windows-latest'
        run: dotnet build --no-restore
      - name: Test
        if: matrix.os == 'windows-latest'
        run: dotnet test --no-build --verbosity normal
      # Publish CLI
      - name: Define MSBuild properties
        run: echo ""MSBUILD_PROPS=-p:PublishSingleFile=true -p:PublishTrimmed=true -p:TrimMode=link -p:DebuggerSupport=false -p:EnableUnsafeBinaryFormatterSerialization=false -p:EnableUnsafeUTF7Encoding=false -p:InvariantGlobalization=true"" >> $GITHUB_ENV
      - name: Publish CLI framework-dependent
        run: |
          dotnet publish Shadowsocks.CLI -c Release
      - name: Publish CLI self-contained for Linux ARM64
        if: matrix.os == 'ubuntu-20.04'
        run: |
          dotnet publish Shadowsocks.CLI -c Release $MSBUILD_PROPS -r linux-arm64 --self-contained
      - name: Publish CLI self-contained for Linux x64
        if: matrix.os == 'ubuntu-20.04'
        run: |
          dotnet publish Shadowsocks.CLI -c Release $MSBUILD_PROPS -r linux-x64 --self-contained
      - name: Publish CLI self-contained for Windows ARM64
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish Shadowsocks.CLI -c Release $MSBUILD_PROPS -r win-arm64 --self-contained
      - name: Publish CLI self-contained for Windows x64
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish Shadowsocks.CLI -c Release $MSBUILD_PROPS -r win-x64 --self-contained
      # Publish WPF
      - name: Publish WPF framework-dependent
        if: matrix.os == 'windows-latest'
        run: dotnet publish Shadowsocks.WPF -c Release --no-restore
      # - name: Publish WPF self-contained for Windows ARM64
      #   if: matrix.os == 'windows-latest'
      #   run: dotnet publish Shadowsocks.WPF -c Release -r win-arm64 --self-contained
      - name: Publish WPF self-contained for Windows x64
        if: matrix.os == 'windows-latest'
        run: dotnet publish Shadowsocks.WPF -c Release -r win-x64 --self-contained
      # Upload CLI
      - name: Upload CLI artifacts for Linux ARM64
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-linux-arm64
          path: Shadowsocks.CLI/bin/Release/net5.0/linux-arm64/publish/
      - name: Upload CLI artifacts for Linux x64
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-linux-x64
          path: Shadowsocks.CLI/bin/Release/net5.0/linux-x64/publish/
      - name: Upload CLI artifacts for Linux framework-dependent
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-linux
          path: Shadowsocks.CLI/bin/Release/net5.0/publish/
      - name: Upload CLI artifacts for Windows ARM64
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-windows-arm64
          path: Shadowsocks.CLI/bin/Release/net5.0/win-arm64/publish/
      - name: Upload CLI artifacts for Windows x64
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-windows-x64
          path: Shadowsocks.CLI/bin/Release/net5.0/win-x64/publish/
      - name: Upload CLI artifacts for Windows framework-dependent
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-cli-${{ github.sha }}-windows
          path: Shadowsocks.CLI/bin/Release/net5.0/publish/
      # Upload WPF
      # - name: Upload WPF artifacts for Windows ARM64
      #   if: matrix.os == 'windows-latest'
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: shadowsocks-wpf-${{ github.sha }}-windows-arm64
      #     path: Shadowsocks.WPF/bin/Release/net5.0-windows10.0.19041.0/win-arm64/publish/
      - name: Upload WPF artifacts for Windows x64
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-wpf-${{ github.sha }}-windows-x64
          path: Shadowsocks.WPF/bin/Release/net5.0-windows10.0.19041.0/win-x64/publish/
      - name: Upload WPF artifacts for Windows framework-dependent
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: shadowsocks-wpf-${{ github.sha }}-windows
          path: Shadowsocks.WPF/bin/Release/net5.0-windows10.0.19041.0/publish/
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0

    - name: Restore dependencies
      run: |
        dotnet restore

    - name: Build
      run: |
        dotnet build --configuration Release

    - name: Test
      run: |
        dotnet test --configuration Release
",0.02063983488132095,0.08845075953647374,Valid,
