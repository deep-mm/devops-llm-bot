Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language
1,https://github.com/sparklemotion/nokogiri,"name: upstream
concurrency:
  group: ""${{github.workflow}}-${{github.ref}}""
  cancel-in-progress: true
on:
  workflow_dispatch:
  schedule:
    - cron: ""0 8 * * 1,3,5"" # At 08:00 on Monday, Wednesday, and Friday # https://crontab.guru/#0_8_*_*_1,3,5
  pull_request:
    types: [opened, synchronize]
    branches:
      - '*'
    paths:
      - .github/workflows/upstream.yml # this file

jobs:
  xmlsoft-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""3.2""
          apt-get: ""autogen libtool shtool""
          brew: ""automake autogen libtool shtool""
          mingw: ""autotools""
          bundler-cache: true
          bundler: latest
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        shell: bash
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Compile against libxml2 and libxslt source directories""
        shell: bash
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test""

  xmlsoft-head-valgrind:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.1
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup libxml2
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxml2
          cd libxml2
          git log -n1
          ./autogen.sh
      - name: Setup libxslt
        env:
          NOCONFIGURE: t
        run: |
          git clone --depth=1 https://gitlab.gnome.org/GNOME/libxslt
          cd libxslt
          git log -n1
          ./autogen.sh
      - name: ""Run bundle install""
        run: ""bundle install --local || bundle install""
      - name: ""Compile against libxml2 and libxslt source directories""
        run: ""bundle exec rake compile -- --with-xml2-source-dir=${GITHUB_WORKSPACE}/libxml2 --with-xslt-source-dir=${GITHUB_WORKSPACE}/libxslt""
      - run: ""bundle exec rake test:valgrind""
      - run: ""bundle exec rake test:memcheck""

  ruby-head:
    strategy:
      fail-fast: false
      matrix:
        plat: [""ubuntu"", ""windows"", ""macos""]
        sys: [""enable"", ""disable""]
    runs-on: ${{matrix.plat}}-latest
    steps:
      - name: configure git crlf
        if: matrix.plat == 'windows'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config""
          mingw: ""_upgrade_ libxml2 libxslt pkgconf""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-${{matrix.plat}}-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test

  ruby-head-valgrind:
    strategy:
      fail-fast: false
      matrix:
        sys: [""enable"", ""disable""]
    runs-on: ubuntu-20.04 # warning that 22.04 binary has dwarf5 debug info that valgrind can't read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ""head""
          apt-get: ""libxml2-dev libxslt1-dev pkg-config valgrind""
          bundler-cache: true
          bundler: latest
      - uses: actions/cache@v3
        if: matrix.sys == 'disable'
        with:
          path: ports
          key: ports-ubuntu-head-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - run: bundle exec rake compile -- --${{matrix.sys}}-system-libraries
      - run: bundle exec rake test:valgrind
      - run: bundle exec rake test:memcheck

  jruby-head:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ""jruby-head""
          bundler-cache: true
          bundler: latest
      - run: bundle exec rake compile
      - run: bundle exec rake test

  html5lib-tests:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/sparklemotion/nokogiri-test:mri-3.2
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: actions/cache@v3
        with:
          path: ports
          key: ports-ubuntu-3.2-${{hashFiles('dependencies.yml', 'patches/**/*.patch', 'ext/nokogiri/extconf.rb')}}
      - name: Update html5lib-tests
        run: |
          cd test/html5lib-tests
          git remote update origin
          git checkout origin/master
          git log --pretty=oneline -n1
      - run: bundle install --local || bundle install
      - run: bundle exec rake compile -- --disable-system-libraries
      - run: bundle exec rake test
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Ruby
      uses: actions/setup-ruby@v1
      with:
        ruby-version: 2.7

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3

    - name: Build and Test
      run: |
        rake build
        rake test",0.041349954393432656,0.10295881607435135,Valid,0.2911392405063291,C
2,https://github.com/connectbot/connectbot,"name: Continuous Integration

on:
  push:
    branches: [ main ]
    tags:
      - ""v*.*.*""
  pull_request:
    branches: [ main ]
  schedule:
    - cron: ""0 7 */3 * *""
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-latest

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Home files
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          GITHUB_TAG=""git-$(git describe)""
          GITHUB_TITLE=""$(git log -1 --pretty=%B | head -1)""
          echo ""${GITHUB_TAG}"" > tag.txt
          echo ""${GITHUB_TAG}: ${GITHUB_TITLE}"" > release-title.txt
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab

      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  upload:
    name: Upload to GitHub releases
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""RELEASE_TITLE=$(cat release-title.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          body: ""Untested build""
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  signing:
    name: Trigger remote signing
    needs: upload
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Call remote signer
        uses: joelwmale/webhook-action@814998dae0915eaf4faec992291eb956ad37d902
        with:
          url: ${{ secrets.SIGNER_WEBHOOK_URL }}
          body: '{""TAG_ID"": ""${{ steps.name.outputs.GITHUB_TAG }}""}'
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.04873054873054873,0.14719130472924125,Valid,0.4715370018975332,Java
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.2840989399293286,0.4120071259648482,Valid,0.8088709677419355,Java
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
5,https://github.com/rzwitserloot/lombok,"name: Tests

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Build with Ant
        run: ant -noinput dist
        
      - uses: actions/upload-artifact@v3
        with:
          name: lombok.jar
          path: dist/lombok.jar
    
  
  test-javac:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
        goal: [javacCurrent]
        include:
          - jdk: 11
            goal: javac6
          - jdk: 11
            goal: javac8
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ matrix.jdk }}
        if: ${{ matrix.jdk != 21 }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'zulu'
      
      - name: Set up JDK 21-ea
        if: ${{ matrix.jdk == 21 }}
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 21
          version: latest
          
      - name: Install Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.zip
          unzip apache-ant-1.10.13-bin.zip -d ""${HOME}""
          echo ""ANT_HOME=${HOME}/apache-ant-1.10.13"" >> $GITHUB_ENV
          echo ""${HOME}/apache-ant-1.10.13/bin"" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Run tests
        run: ant -noinput test.${{ matrix.goal }}
  
  test-eclipse:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        version:
        - eclipse-oxygen
        - eclipse-202006
        - eclipse-202006-jdk8
        - eclipse-202212
        - eclipse-oxygen-full
        - eclipse-2022-03-full
        - ecj11
        - ecj14
        - ecj16
        - ecj19
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
          
      - name: Build with Ant
        run: xvfb-run ant -noinput dist test.${{ matrix.version }}
        
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [8, 11, 17, 21]
        tool: 
          - {name: ""maven"",  cmd: ""mvn compile""}
          - {name: ""gradle"", cmd: ""gradle assemble""}
          - {name: ""ant"",    cmd: ""ant dist""}
          - {name: ""bazel"",  cmd: ""bazel build //:ProjectRunner""}
      fail-fast: false
    env:
      IMAGE_NAME: lombok-${{ matrix.tool.name }}-jdk${{ matrix.jdk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/download-artifact@v3
        with:
          name: lombok.jar
        
      - name: Build container
        working-directory: ./docker
        run: docker build --build-arg jdk=${{ matrix.jdk }} -t $IMAGE_NAME -f ${{ matrix.tool.name }}/Dockerfile .
        
      - name: Compile in container
        run: docker run --entrypoint="""" -v $(pwd)/lombok.jar:/workspace/lombok.jar $IMAGE_NAME /bin/bash -c ""cd classpath; ${{ matrix.tool.cmd }}""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test",,,Invalid,,Java
6,https://github.com/apache/hive,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  macos-jdk8:
    name: 'macOS (JDK 8)'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build project'
        run: |
          mvn clean install -DskipTests -Pitests
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn clean install

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
7,https://github.com/apache/directory-studio,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '42 18 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        mvn -f pom-first.xml clean install
        mvn clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B clean install
      - name: Run Tests
        run: mvn test",0.11134163208852006,0.1502118576725317,Valid,0.5205479452054794,Java
8,https://github.com/flori/json,"name: CI

on:
- push
- pull_request
- workflow_dispatch

jobs:
  ruby-versions:
    uses: ruby/actions/.github/workflows/ruby_versions.yml@master
    with:
      min_version: 2.3

  host:
    needs: ruby-versions
    name: ${{ matrix.os }} ${{ matrix.ruby }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-20.04
        - ubuntu-22.04
        - macos-11
        - macos-12
        - windows-latest
        ruby: ${{ fromJson(needs.ruby-versions.outputs.versions) }}
        include:
        - { os: windows-latest , ruby: mswin     } # ruby/ruby windows CI
        - { os: ubuntu-latest  , ruby: jruby-9.1 } # Ruby 2.3
        - { os: ubuntu-latest  , ruby: jruby-9.2 } # Ruby 2.5
        - { os: ubuntu-latest  , ruby: jruby-9.3 } # Ruby 2.7
        exclude:
        - { os: windows-latest, ruby: truffleruby }
        - { os: windows-latest, ruby: truffleruby-head }
        - { os: windows-latest, ruby: jruby }
        - { os: windows-latest, ruby: jruby-head }

    steps:
      - uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby-pkgs@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          apt-get: ragel
          brew: ragel
          # only needed for Ruby 2.3
          mingw: ragel

      - run: bundle install

      - run: rake compile

      - run: rake test

      - run: rake build

      - run: gem install pkg/*.gem
        if: ${{ matrix.ruby != '3.2' }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
      - name: Build
        run: |
          rake build
      - name: Test
        run: |
          rake test",0.17687747035573123,0.29610619069414373,Valid,0.7193581780538303,Ruby
9,https://github.com/github-api/github-api,"name: CI

on: 
  push:
    branches:
      - main
      - '!/refs/heads/dependabot/*'
  pull_request:
    branches:
      - '*'
      - '!/refs/heads/patch*'

# this is required by spotless for JDK 16+
env:
  JAVA_11_PLUS_MAVEN_OPTS: ""--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED""

permissions:
  contents: read

jobs:
  build:
    name: build-only (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Install (skipTests)
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -DskipTests --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
        name: maven-target-directory
        path: target/
        retention-days: 3
  site:
    name: site (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Site
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean site -D enable-ci --file pom.xml
  test:
    name: test (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows ]
        java: [ 11, 17 ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    # JDK 11+
    - name: Maven Install without Code Coverage
      if: matrix.os == 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D japicmp.skip=true --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Maven Install with Code Coverage
      if: matrix.os != 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D enable-ci --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Codecov Report 
      if: matrix.os == 'ubuntu' && matrix.java == '17'
      uses: codecov/codecov-action@v3.1.4

  test-java-8:
    name: test Java 8 (no-build)
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: maven-target-directory
        path: target
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: 'maven'   
    - name: Maven Test (no build) Java 8
      run: mvn -B surefire:test -DfailIfNoTests -Dsurefire.excludesFile=src/test/resources/slow-or-flaky-tests.txt
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file ./app/depict/pom.xml

    - name: Run tests
      run: mvn test --file ./app/depict/pom.xml",0.15499378367177788,0.32229712203664085,Valid,0.2676056338028169,Java
11,https://github.com/bigbluebutton/bigbluebutton,"name: Build and Deploy Docs

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
    paths:
      - 'docs/**'

# Do not build the docs concurrently
concurrency:
  group: docs
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./docs/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build static docs
      - name: Build all versions
        run: ./build.sh
      - name: Build website
        run: yarn build
      - name: upload build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./docs/build

  deploy:
    name: Deploy docs to gh-pages
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: Documentation
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
","name: Build and Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
          npm install
      - name: Build and Test
        run: |
          bundle exec rake build
          npm test",0.19385593220338984,0.40841579213363033,Valid,0.4115034690794153,JavaScript
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.01739850869925435,0.15305034364997508,Valid,0.5405405405405406,Java
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.018382794665385078,0.0240540932386775,Valid,0.1941265781398631,Java
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",0.03232323232323232,0.11221392584793793,Valid,0.21453051368929393,Java
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build with Gradle
        uses: actions/gradle/gradle-build-action@v2
      - name: Run Tests
        run: |
          # Add command to run tests here
",0.0380952380952381,0.18776088795826623,Valid,0.6593484393390809,Java
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.1440501043841336,0.6797573215882219,Valid,0.967741935483871,Java
17,https://github.com/enginehub/worldedit,"name: Gradle Build
on: [push, pull_request]

jobs:
  build:
    name: Build WorldEdit on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        cache: 'gradle'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build -s
    - uses: actions/upload-artifact@v3
      name: Archive Reports
      if: always()
      with:
        name: reports for ${{ matrix.os }}
        path: '**/build/reports/**'
    - uses: actions/upload-artifact@v3
      name: Archive Logs
      if: always()
      with:
        name: logs for ${{ matrix.os }}
        path: '**/*.log'

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",,,Invalid,,Java
18,https://github.com/bartdag/py4j,"name: test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        java-version: [ 8 ]
        python-version: [ '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10' ]
        include:
          - os: windows-2019
            java-version: 17
            python-version: '3.10'
          - os: ubuntu-18.04
            java-version: 11
            python-version: '2.7'
          - os: ubuntu-18.04
            java-version: 17
            python-version: '3.8'
    name: Py ${{ matrix.python-version }}, Java ${{ matrix.java-version }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # pin@v2.3.5

      - name: Setup Java 8 JDK for build
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6 # pin @v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Install dependencies
        run: |
          pip install pytest
          cd py4j-java
          # Useful in case the build stops working because of version issues.
          ./gradlew --version
          echo `java -version` && echo `javac -version` && echo `python --version`
          echo $PATH
          echo $JAVA_HOME
          ./gradlew clean
        shell: bash

      - name: Enable IPV6
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

      - name: Run gradle tests
        run: |
          cd py4j-java
          ./gradlew check
          ./gradlew assemble

      - name: Setup Java ${{ matrix.java-version }} JDK for PyTest
        if: ${{ matrix.java-version != '8' }}
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Run PyTest
        run: |
          cd py4j-python
          echo `java -version`
          echo $JAVA_HOME
          # Java TLS tests are disabled until they can be fixed (refs #441)
          pytest -k ""not java_tls_test.""

  test-doc:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: |
          python3 -m pip install -r py4j-web/requirements-doc.txt
          python3 -m pip list

      - name: Setup Java 8 JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Javadoc build
        run: |
          cd py4j-java && ./gradlew javadoc && cd ..
          mv py4j-java/build/docs/javadoc py4j-web/_static/

      - name: Sphinx build
        run: |
          cd py4j-web && make clean html && cd ..
          mv py4j-web/_build/html ../ # Move out of the current repo for GitHub Pages.

      # Publishing documentation only for commits in the master branch.
      - name: Checkout GitHub Pages branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Copy the generated site
        if: github.event_name != 'pull_request'
        run: |
          # Include Javadoc if the commit is tagged (for releases only).
          if [ -z ""`git describe --tags --exact-match 2>/dev/null`"" ]; then
            rm -fr ../html/_static/javadoc
            [ -d _static/javadoc ]  && mv _static/javadoc ../html/_static
          fi

          rm -fr * # Remove existing site
          touch .nojekyll # See https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages
          echo ""www.py4j.org"" > CNAME # Custom domain for GitHub Actions
          cp -r ../html/* . # Move generated site to the current repo.

      - name: Push new site
        uses: EndBug/add-and-commit@v8
        if: github.event_name != 'pull_request'
        with:
          default_author: github_actions
          message: Push new site by ${{ github.sha }}
          add: ""*""
          push: ""--force"" # In case it conflicts with the same step in another workflow.
","name: Build and Test\non:
  push:
    branches: [ master ]\n  pull_request:
    branches: [ master ]\njobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          mvn install
      - name: Build
        run: |
          mvn compile
          python setup.py build
      - name: Test
        run: |
          mvn test
          python -m pytest",,,Invalid,,Java
19,https://github.com/plantuml/plantuml,"name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
      do_javadoc: ${{ steps.config.outputs.do_javadoc }}
      do_test_linux: ${{ steps.config.outputs.do_test_linux }}
      do_test_windows: ${{ steps.config.outputs.do_test_windows }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          if [[ ""${GITHUB_EVENT_NAME}"" == ""create"" && ""${REF_TYPE}"" == ""tag"" && ""${REF}"" == v* && \
                ( ""${ACTOR}"" == ""arnaudroques"" || ""${ACTOR}"" == ""${GITHUB_REPOSITORY_OWNER}"" ) \
             ]]; then
            echo ""::notice title=::This run will release '${REF}'""
            echo ""do_release=true"" >> $GITHUB_OUTPUT
            echo ""pom_version=${REF#v}""
            echo ""pom_version=${REF#v}"" >> $GITHUB_OUTPUT # pom_version is the tag without the 'v' prefix
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          elif [[ ""${GITHUB_EVENT_NAME}"" =~ push|workflow_dispatch && ""${REF}"" == ""refs/heads/master"" && ""${ACTOR}"" == ""arnaudroques"" ]]; then
            echo ""::notice title=::This run will release a snapshot""
            echo ""do_snapshot_release=true"" >> $GITHUB_OUTPUT
            V=$(perl -ne 'if (/return (\d{6,7});/) {$v=$1} if (/final int beta = (\d+);/) {$b=$1} END{print(substr($v, 0, 1),""."", substr($v, 1, 4),"".""); if ($b) {print(int(substr($v+1, 5)), ""beta"", $b);} else {print(int(substr($v, 5)))}}' src/net/sourceforge/plantuml/version/Version.java)
            echo ""pom_version=$V-SNAPSHOT""
            echo ""pom_version=$V-SNAPSHOT"" >> $GITHUB_OUTPUT # pom_version is taken from Version.java
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          else
            echo ""This run will NOT make a release""
            echo ""do_javadoc=false"" >> $GITHUB_OUTPUT
            echo ""This run will NOT update the Javadoc""
          fi
          echo ""do_test_linux=true"" >> $GITHUB_OUTPUT
          echo ""do_test_windows=false"" >> $GITHUB_OUTPUT

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  # We split windows and ubuntu because windows is so slow...
  test_linux:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        java_version: [ 8, 17 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/checkout@v4

      - name: Set up java
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: gradle

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle -q compileJava --no-daemon

      - name: Test
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle test --no-daemon -i

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing from several builds
          name: ${{ github.run_number }}-${{ matrix.os }}-java-${{ matrix.java_version }}-test-reports
          path: build/reports/tests/


  build_artifacts:
    needs: [ workflow_config ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
#      - name: Set version in gradle.properties
#        if: env.POM_VERSION
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
#        run: |
#          sed -i ""s/version = .*/version = $POM_VERSION/"" gradle.properties
#          cat gradle.properties
      - name: Generate artifacts
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          gradle clean build \
            pdfJar \
            generateMetadataFileForMavenPublication generatePomFileForMavenPublication \
            -x test
          find . -name ""*.jar""
      - name: Sign artifacts
        if: env.ORG_GRADLE_PROJECT_signingKey
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          gradle -i signMavenPublication signPdfJar
          ls -l build/libs
          ls -l plantuml-asl/build/libs
          ls -l plantuml-bsd/build/libs
          ls -l plantuml-epl/build/libs
          ls -l plantuml-lgpl/build/libs
          ls -l plantuml-mit/build/libs
          ls -l plantuml-gplv2/build/libs
      - name: Get release version
        id: version
        run: |
          echo ""release_version=$(gradle properties -q | grep ""version:"" | awk '{print $2}')"" >> $GITHUB_OUTPUT
      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          enableCrossOsArchive: true

  deploy_javadoc:
    needs: [ build_artifacts, test_linux ]
    if: needs.workflow_config.outputs.do_javadoc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build Javadoc
        run: gradle javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/javadoc


  upload:
    if: |
      needs.workflow_config.outputs.do_release == 'true' ||
      needs.workflow_config.outputs.do_snapshot_release == 'true'
    needs: [ workflow_config, build_artifacts, test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds
          name: ${{ github.run_number }}-artifacts
          path: |
            build/libs/*
            build/publications/maven/*
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs

      - name: Create snapshot
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release-snapshot.sh

      - name: Create release in GitHub and OSSRH
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.ref }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release.sh
          gradle --debug publish

  push_to_docker_registry:
    needs: [ workflow_config, upload, test_linux ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PLANTUML_VERSION=${{ github.event.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",,,Invalid,,Java
20,https://github.com/kordamp/json-lib,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2006-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on:
  pull_request:

env:
  JAVA_VERSION: '8'
  JAVA_DISTRO: 'zulu'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build -S
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.287215411558669,0.3558269918634162,Valid,0.8823529411764706,Java
21,https://github.com/json-path/jsonpath,"---
name: Java CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 18]
      fail-fast: false
      max-parallel: 4
    name: JDK ${{ matrix.java }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run Tests
        run: ./gradlew check

      - name: Maven Install
        run: ./gradlew clean publishToMavenLocal

...
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.2008888888888889,0.5329353209147457,Valid,0.6793103448275861,Java
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run Tests
        run: mvn test",0.024193548387096774,0.06384307163735667,Valid,0.28963437580841395,Java
24,https://github.com/hibernate/hibernate-tools,"name: Build and Test

on:
  pull_request

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        java-package: jdk
        architecture: x64

    - name: Build and Test
      uses: GabrielBB/xvfb-action@v1
      with: 
        run: mvn clean install 

","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.21574973031283712,0.6439509817094805,Valid,0.4,Java
25,https://github.com/pexplugins/permissionsex,"# Making changes? https://github.com/nektos/act may help you test locally

name: Build And Test

on: [push, pull_request]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.repository.full_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            build/test-results/test/
            */build/test-results/test/
            platform/*/build/test-results/test
      - name: Archive distributable plugins
        uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }} # Only upload one set of artifacts
        with:
          name: PermissionsEx (all platforms)
          path: build/libs/
      - name: Publish to Maven
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_pexUsername: ${{ secrets.REPO_USERNAME }}
          ORG_GRADLE_PROJECT_pexPassword: ${{ secrets.REPO_PASSWORD }}
          ORG_GRADLE_PROJECT_stellardriftUsername: ${{ secrets.STELLARDRIFT_REPO_USER }}
          ORG_GRADLE_PROJECT_stellardriftPassword: ${{ secrets.STELLARDRIFT_REPO_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew build

    - name: Test with Gradle
      run: ./gradlew test
",0.3470426948687818,0.30806866052749604,Valid,0.8095238095238095,Java
26,https://github.com/mcmics/jenkins-control-plugin,"name: IntelliJ Platform Plugin Compatibility

on:
  push:

jobs:
  compatibility:
    name: Ensure plugin compatibility for IDEA Community, IDEA Ultimate, PyCharm Community, GoLand, CLion, and the latest EAP snapshot of IDEA Community.
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          cache: gradle

      - name: Build the plugin using Gradle
        run: ./gradlew buildPlugin

      - name: Verify Plugin on IntelliJ Platforms
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v2.0.0
        with:
          ide-versions: .github/workflows/ide_versions_file.txt

      - name: Get log file path and print contents
        run: |
          echo ""The verifier log file [${{steps.verify.outputs.verification-output-log-filename}}] contents : "" ;
          cat ${{steps.verify.outputs.verification-output-log-filename}}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.02795698924731183,0.4032694144111697,Valid,0.8108108108108109,Java
27,https://github.com/griffon/griffon,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2008-2021 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    name: Build
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cancel previous runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: 'jdk+fx'

      - name: Gradle caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      - name: Build
        run: ./gradlew build -S
","name: Build and Test

on:
  push:
    branches:
      - development_3_X
  pull_request:
    branches:
      - development_3_X

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Test with Gradle
        run: |
          ./gradlew test",,,Invalid,,Java
28,https://github.com/liquibase/liquibase,"name: Build and Test



concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      archive_test_results:
        description: 'If set to true, the unit and integration test results will be archived to the build artifacts page.'
        required: false
        default: 'false'
  # DAT branches can get triggered from this logic
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

  push:
    branches:
      - master
      - main
      - github-action-**
    paths-ignore:
      - '**.md'

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  check_build_safety:
    permissions:
      contents: none
    name: Check if Build should be done
    runs-on: ubuntu-22.04
    steps:
      - name: Emit failure code for unsafe fork PRs
        if: github.event.pull_request && github.event.pull_request.head.repo.full_name != 'liquibase/liquibase' && github.event.label.name != 'SafeToBuild'
        run: |
          echo ""PR from Fork is NOT safe to build""
          echo ""A member of Liquibase team needs to apply label 'SafeToBuild'! ""
          exit 1

  setup:
    name: Setup
    needs: check_build_safety
    runs-on: ubuntu-22.04
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepoName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepoName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
      timestamp: ${{ steps.get-date.outputs.date }}
      setupSuccessful: ""true""
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed(""Fail every 5 run attempts to catch accidental infinite loops"");
            }
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Get current date
        id: get-date
        run: echo ""::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S %Z')""

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput(""thisSha"", helper.getCurrentSha());
            core.setOutput(""thisBranchName"", helper.getCurrentBranch());
            core.setOutput(""thisBranchFileName"", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_\.]/g, ""_""));
            core.setOutput(""thisRepoName"", helper.getRepositoryName());
            core.setOutput(""thisRepoOwner"", helper.getRepositoryOwner());

            let proStatusMessage = ""success"";
            let proFailed = false;

            let branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput(""standAlonePR"", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput(""standAlonePR"", true);
            }

            if (!branch.lastSuccessfulRunNumber) {
              proFailed = true;
              proStatusMessage = ""Matching pro branch has never passed. Falling back to master""
              branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"", [""main"", ""master""])
            }
            core.setOutput(""proBranchName"", branch.name);
            core.setOutput(""proBranchSha"", branch.sha);

            if (!proFailed) {
              if (!branch.workflowId) {
                proStatusMessage = ""does not have a ran workflow"";
                proFailed = true
              } else if ( branch.runStatus != ""completed"") {
                proStatusMessage = ""build is ""+ branch.runStatus;
                proFailed = true
              } else if ( branch.runConclusion != ""success"") {
                proStatusMessage = ""build conclusion was ""+branch.runConclusion;
                proFailed = true
              }
            }

            statusMessage = ""liquibase/liquibase-pro:""+branch.name+""@"" + branch.sha.substring(0, 7) + "" "" + proStatusMessage;
            console.log(""Pro failed?"" + proFailed + "": ""+statusMessage);

            github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": (proFailed ? ""failure"" : ""success""),
              ""target_url"": branch.runHtmlUrl,
              ""context"": ""Stable Liquibase Pro"",
              ""description"": statusMessage
            });

            core.setOutput(""stablePro"", !proFailed);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build:
    name: Build & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 20 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 20
          - os: windows-2019
            java: 20
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 11}}
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Build & Test Java 8
        if: ${{ matrix.java == 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" -pl '!liquibase-cdi-jakarta' clean verify -DskipITs
      - name: Build & Test Java non-jdk-8
        if: ${{ matrix.java != 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" clean verify -DskipITs

      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Save Jacoco Report for Sonar
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-jacoco-test-results
          path: |
            ./liquibase-standard/target/jacoco.exec

      - name: Archive Modules
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        testSystem:
           - db2
           - h2
           #- h2:1.4
           - hsqldb
           - mariadb
           - mssql
           - mysql
           - oracle
           - postgresql
           - sqlite
           - firebird
    needs: setup
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Prepare
        id: prepare
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput(""testResultsArtifact"", ""liquibase-test-results-integration-${{ matrix.testSystem }}"".replace(/[^a-zA-Z0-9\-_]/g, ""_""));

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Restore Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v2
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Run Tests
        run: mvn -B clean verify -DtrimStackTrace=false -Dliquibase.sdk.testSystem.test=${{ matrix.testSystem }} -Dliquibase.sdk.testSystem.acceptLicenses=${{ matrix.testSystem }} -Dtest='*IntegrationTest,*ExecutorTest' -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.testResultsArtifact }}
          path: |
            ./**/target/surefire-reports

      - name: Save Jacoco Report for Sonar
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-integration-jacoco-test-results-${{ matrix.testSystem }}
          path: |
            ./liquibase-integration-tests/target/jacoco.exec

  sonar:
    needs: [ build, integration-test ]
    uses: liquibase/build-logic/.github/workflows/sonar-test-scan.yml@v0.4.7
    with:
      thisBranchName: ${{ needs.setup.outputs.thisBranchName }}
      thisSha: ${{ needs.setup.outputs.thisSha }}
      liquibaseBranchName: ${{ needs.setup.outputs.liquibaseBranchName }}
      pullRequestNumber: ${{ github.event.pull_request.number }}
      pullRequestBranchName: ${{ github.event.pull_request.head.ref }}
      pullRequestBaseBranchName: ${{ github.event.pull_request.base.ref }}
      testedClassesModuleName: liquibase-standard
      dbPlatforms: h2,hsqldb,mariadb,mssql,mysql,oracle,postgresql,sqlite,firebird
    secrets: inherit

  package:
    name: Package Artifacts
    runs-on: macos-latest
    needs: [ setup, build ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      # this includes all the tar files included in the previous runs. So in the next step we deploy what was previously build
      - name: Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      ##Cache based on install4j file, since changes to JVM is seen in there. If install4j version changes without changing the file, change the prefix letter before hashFiles to force a new cache
      - name: Install4j Cache
        uses: actions/cache@v3.3.1
        with:
          key: install4j-A${{ hashFiles('liquibase-dist/src/main/install4j/liquibase.install4j') }}
          path: ~/.install4j8/**

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'
          overwrite-settings: false
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: |
            [
              {
                ""id"": ""liquibase"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              },
              {
                ""id"": ""liquibase-pro"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase-pro"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              }
            ]
          servers: |
            [
              {
                ""id"": ""liquibase-pro"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              },
              {
                ""id"": ""liquibase"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              }
            ]

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Version artifact based off of branch
      - name: Version Artifact
        run: |
          version=${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          # Replace / with - in branch name
          version=$(echo ""$version"" | sed 's/\//-/g')
          mvn versions:set -DnewVersion=""$version""

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo ""Saving apple key""
          echo ""$INSTALL4J_APPLE_KEY"" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo ""Saving windows key""
          echo ""$INSTALL4J_WINDOWS_KEY"" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx
          # we are packaging and deploying liquibase tar which includes liquibase-commercial
          mvn -B -pl liquibase-dist -P liquibase-commercial source:jar package -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}""

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && tar -xzf ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz)

          ## verify that the contents of the tar matches the expectation
          echo ""Comparing the contents of the tar.gz with the expected contents (using baseline file in liquibase-dist directory) to ensure that no new files were accidentally added. A failure here indicates that a new file was added to the tar.gz, and it should either be rectififed or added to the baseline.""
          brew install tree --quiet
          tree liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT -o actual-distribution-contents.txt --noreport
          # remove first line of actual, because it contains the folder name, which the expected will not have
          echo ""$(tail -n +2 actual-distribution-contents.txt)"" > actual-distribution-contents.txt
          diff actual-distribution-contents.txt liquibase-dist/expected-distribution-contents.txt
          rm -rf actual-distribution-contents.txt
          
          ##create zip file from tar content
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && zip -r ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip *)
          ls liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          
          ##create installer - disabled here but run as nightly job and as part of release workflow
          # (cd liquibase-dist && ${{ github.workspace }}/.github/util/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;
          
          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts/liquibase-core-0-SNAPSHOT.jar
          cp liquibase-core/target/liquibase-core-0-SNAPSHOT-sources.jar artifacts/liquibase-core-0-SNAPSHOT-sources.jar
          cp target/liquibase-0-SNAPSHOT-javadoc.jar artifacts/liquibase-core-0-SNAPSHOT-javadoc.jar

          ##create installer - disabled here but run as nightly job and as part of release workflow
          #cp liquibase-dist/target/liquibase-*-installer-* artifacts

          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-javadoc.jar artifacts

          echo ""Source code not available for liquibase-commercial"" > /tmp/readme.source.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar readme.source.txt)

          echo ""Javadocs not available for liquibase-commercial"" > /tmp/readme.javadocs.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar readme.javadocs.txt)

          commercialJarM2Location=/Users/runner/.m2/repository/org/liquibase/liquibase-commercial/${{ needs.setup.outputs.proBranchName }}-SNAPSHOT/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT.jar
          cp $commercialJarM2Location artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar artifacts

          .github/util/sign-artifacts.sh artifacts

          ##prepare branch-named convenience artifacts directories
          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.tar.gz
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          #cp liquibase-core/target/liquibase-core-0-SNAPSHOT.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts-named/liquibase-maven-plugin-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-jakarta-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT-deps.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}-deps.jar
          cp $commercialJarM2Location artifacts-named/liquibase-commercial-${{ needs.setup.outputs.thisBranchFileName }}.jar

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchFileName }}
          path: liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchFileName }}
          path: artifacts-named/*


      # Publish to GitHub Packages. We are building a tar file which includes liquibase-commercial hence we need ""-Dliquibase-pro.version""
      - name: Publish tar.gz package to GPM
        run: |
          mvn -B -pl liquibase-dist -P liquibase-commercial clean deploy -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # this triggers the pro-tests and test-harness to run
  finish:
    name: Finish Build
    runs-on: ubuntu-22.04
    needs: [ setup, build, package, sonar]
    if: ${{ needs.setup.outputs.setupSuccessful }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Coordinate Liquibase-Pro
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            let currentBranchInfo = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");

            let thisStatus = ""${{ needs.package.result }}"" == ""success"" ? ""success"" : ""failure"";
            let stablePro = (""${{ needs.setup.outputs.stablePro }}"" == ""true"");
            let standalonePR = ""${{ needs.setup.outputs.standAlonePR }}"" == ""true"";

            console.log(""Stand alone PR: ""+standalonePR);

            let runFunctionalTests = false;
            let markFunctionalTestsStatus = ""failure"";
            let markFunctionalTestsDescription = ""Unexpected setup"";

            if (stablePro) {
              console.log(""Pro is stable"");

              runFunctionalTests = true;
              markFunctionalTestsStatus = ""pending"";
              markFunctionalTestsDescription = ""Trigger internal functional tests"";
            } else {
              console.log(""Last pro was unstable"");

              runFunctionalTests = false;
              markFunctionalTestsStatus = ""failure"";
              markFunctionalTestsDescription = ""Liquibase Pro is unstable"";

              let checks = await github.rest.repos.listCommitStatusesForRef({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""ref"": currentBranchInfo.sha
              });

              let failedCheckingUs = false;
              if (standalonePR) {
                for (let status of checks.data) {
                  if (status.context == ""Stable Liquibase Core"") {
                    console.log(""Stable Liquibase Core is ""+ status.state);
                    failedCheckingUs = (status.state == ""failure"");
                  }
                }
              }

              if (failedCheckingUs) {
                console.log(""Rerun liquibase-commercial that was waiting on us"");

                //octokit removed the retryWorkflow function
                github.request(""POST ""+currentBranchInfo.runRerunUrl);

                //await github.rest.actions.retryWorkflow({
                //    ""owner"": ""liquibase"",
                //    ""repo"": ""liquibase-pro"",
                //    ""run_id"": currentBranchInfo.workflowId
                //});
              }
            }

            if (standalonePR) {
              console.log(""Do not mark base pro branch as included in this"");
            } else {
              console.log(""Mark 'Included in Liquibase Core' status as ""+thisStatus);
              github.rest.repos.createCommitStatus({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""sha"": currentBranchInfo.sha,
                ""state"": thisStatus,
                ""context"": ""Stable Liquibase Core"",
                ""target_url"": currentBranchInfo.runHtmlUrl,
                ""description"": ""Latest Liquibase Core build""
              });
            }

            if (runFunctionalTests) {
              let testsBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro-tests"");

              let notices = [];
              if (context.payload.pull_request) {
                console.log(""Sending pull request information"");
                notices = [""Triggered by PR "" + context.payload.pull_request.html_url];
              }
              console.log(""Trigger functional tests"");
              let workflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro-tests"",
                ""workflow_id"": ""test.yml"",
                ""ref"": testsBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });

              let testHarnessBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-test-harness"");
              if (testHarnessBranch.name == ""main"" || testHarnessBranch.name == ""master"") {
                testHarnessBranch.name = ""develop"";
              }
            
              console.log(""Trigger Test Harness tests"");
              let testHarnessWorkflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-test-harness"",
                ""workflow_id"": ""main.yml"",
                ""ref"": testHarnessBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""liquibaseRepo"": ""liquibase/liquibase"",
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });
            }

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Functional Tests"",
              ""description"": markFunctionalTestsDescription
            });

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Test Harness"",
              ""description"": markFunctionalTestsDescription
            });
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v1
        with:
          maven-version: '3.8.3'

      - name: Build with Maven
        run: mvn clean install

      - name: Run Tests
        run: mvn test",0.015421717331979438,0.017370630556469778,Valid,0.23741912386193767,Java
29,https://github.com/eclipse/jetty.project,"name: ""CodeQL""

on:
  push:
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  schedule:
    - cron: '22 1 * * 2'

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        languages:
          - java
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install and setup JDK 11
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-10.') ||
          startsWith(github.ref, 'refs/heads/jetty-11.') ||
          startsWith(github.base_ref, 'jetty-10.') ||
          startsWith(github.base_ref, 'jetty-11.')
          }}
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      # Install and setup JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-12.') ||
          startsWith(github.base_ref, 'jetty-12.')
          }}
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.languages }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
          
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6   

      - name: Clean install dependencies and build
        run: mvn clean install -DskipTests -B

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
","name: Build and Test

on:
  push:
    branches:
      - jetty-10.0.x
  pull_request:
    branches:
      - jetty-10.0.x

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test",,,Invalid,,Java
30,https://github.com/netflix/astyanax,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.3639475185396463,0.48572936657394783,Valid,0.75,Java
31,https://github.com/netflix/priam,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - '3.x'
  pull_request:
    branches:
      - '3.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.427515633882888,0.4933446546908548,Valid,0.75,Java
32,https://github.com/apereo/cas,"name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_BUILD_OPTIONS: ""--no-daemon -x check -x test -x javadoc --configure-on-demand --max-workers=8 --no-configuration-cache""
  TERM: xterm-256color
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_BUILDCACHE_USER: ci
  GRADLE_BUILDCACHE_PSW: ${{ secrets.GRADLE_BUILDCACHE_PSW }}
  GH_PACKAGE_REGISTRY_USER: ${{ secrets.GH_PACKAGE_REGISTRY_USER }}
  GH_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GH_PACKAGE_REGISTRY_TOKEN }}
  JDK_CURRENT: 21
  JDK_LATEST: 21
  JDK_DISTRIBUTION: ""corretto""

##########################################################################

on:
  schedule:
    - cron: '0 23 * * *'
#  push:
#    branches: [ master ]
#  pull_request:
#    types: [ labeled ]
#    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: macos-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}

  ##########################################################################

  initialize:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: ls ./ci && find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh

  ##########################################################################

  build:
    needs: [initialize]
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
        shell: bash
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build ${{ env.GRADLE_BUILD_OPTIONS }}
      - uses: actions/upload-artifact@v3
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*

  ##########################################################################

  build-latest-jdk:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_LATEST }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build -DskipAot=true ${{ env.GRADLE_BUILD_OPTIONS }}

  ##########################################################################

  build-graalvm:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: ${{ env.JDK_CURRENT }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'
          set-java-home: 'true'
      - name: GraalVM Versions
        run: |
          echo ""GRAALVM_HOME: $GRAALVM_HOME""
          echo ""JAVA_HOME: $JAVA_HOME""
          java --version
          native-image --version
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        timeout-minutes: 90
        run: chmod +x ./ci/tests/native/build.sh && ./ci/tests/native/build.sh
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11

      - name: Build with Gradle
        run: |
          cd api
          ./gradlew build

      - name: Run Tests
        run: |
          cd api
          ./gradlew test",,,Invalid,,Java
33,https://github.com/bwaldvogel/mongo-java-server,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11', '17', '20' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Publish coverage
      run: ./gradlew build
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.335186656076251,0.49112974892576017,Valid,0.967741935483871,Java
34,https://github.com/openstreetmap/osmosis,"name: Continuous Integration
on: [push, pull_request]
jobs:
  Continous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: ./docker.sh ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.2522255192878338,0.35077595734969397,Valid,0.6976744186046512,Java
35,https://github.com/geotools/geotools,"name: Assembly bundle and test

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3 -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

jobs:
  build:
    runs-on: [ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Maven repository caching
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: gt-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          gt-maven-
    - name: Setup python for docs
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip' # caching pip dependencies from requirements.txt below
    - name: Setup python pip requirements for building docs
      working-directory: docs
      run: |
        pip install -r requirements.txt
    - name: Disable checksum offloading
      # See: https://github.com/actions/virtual-environments/issues/1187#issuecomment-686735760
      run: sudo ethtool -K eth0 tx off rx off
    - name: Build with Maven
      run: |
        mvn -B clean install -DskipTests -Dall -T2 --file pom.xml
    - name: Assemble downloads
      run: |
        mvn -B -DskipTests assembly:single -file release/pom.xml
    - name: Test bin download run and compile
      shell: bash
      working-directory: release/target
      run: |
        echo ""List assemblies:""
        ls geotools-*.zip
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*bin.zip` -d bin-download
        cd bin-download
        cd `ls -d geotools-*/`
        echo ""Running GeoTools.main()...""
        java -cp ""lib/*"" org.geotools.util.factory.GeoTools
        echo ""Compiling Quickstart.java""
        mkdir bin
        javac -cp ""lib/*"" -d bin src/org/geotools/tutorial/quickstart/Quickstart.java
        ls -R bin | grep Quickstart
    - name: Test user guide download
      shell: bash
      working-directory: release/target
      run: |
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*userguide.zip` -d userguide-download
        cd userguide-download
        cd `ls -d geotools-*/`
        
        
    - name: Remove SNAPSHOT jars from repository
      run: |
        find ~/.m2/repository -name ""*SNAPSHOT*"" -type d | xargs rm -rf {}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
36,https://github.com/sonyxperiadev/chkbugreport,"name: Java CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build core and unit test with gradle
      run: cd core && ./gradlew build
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ChkBugReport
        path: core/build/distributions/ChkBugReport.tar
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.4148471615720524,0.7083900988812706,Valid,0.7142857142857143,Java
37,https://github.com/marytts/marytts,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 12 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew build

      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.26322751322751325,0.37110390174840885,Valid,0.967741935483871,Java
38,https://github.com/kaljurand/k6nele,"name: Android CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.6328293736501079,0.7650092990864483,Valid,0.967741935483871,Java
39,https://github.com/spring-projects/spring-security-kerberos,"name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'spring-projects/spring-security-kerberos' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - nickname: linux adopt 17
            version: 17
            distribution: adopt
          - nickname: linux liberica 17
            version: 17
            distribution: liberica
    name: CI Build ${{ matrix.nickname }}
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.version }}
      - name: Build
        env:
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: ./gradlew build
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: buildreports
          retention-days: 1
          path: |
            */build/reports
            spring-security-kerberos-samples/*/build/reports
  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: adopt
          java-version: 17
      - name: Build
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_TOKEN_USERNAME: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          OSSRH_TOKEN_PASSWORD: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: |
          ./gradlew build publishArtifacts \
            -PossrhUsername=""$OSSRH_TOKEN_USERNAME"" \
            -PossrhPassword=""$OSSRH_TOKEN_PASSWORD"" \
            -PartifactoryUsername=""$ARTIFACTORY_USERNAME"" \
            -PartifactoryPassword=""$ARTIFACTORY_PASSWORD""
  docs:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - uses: actions/checkout@v3
      - name: Dispatch (partial build)
        if: github.ref_type == 'branch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.ref_name }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
40,https://github.com/gentlecat/counter,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.5782608695652174,0.7624086205164647,Valid,0.967741935483871,Java
41,https://github.com/apereo/java-cas-client,"#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the ""License""); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  TERM: xterm-256color
  SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
  SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
  GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  JDK_CURRENT: 17

##########################################################################

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: cancel-previous-runs
    steps:
      - uses: actions/checkout@v4
      #      - name: Setup tmate session
      #        uses: mxschmitt/action-tmate@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Build with Gradle
        run: mvn clean install

  ##########################################################################

  publish-snapshots:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Publish SNAPSHOTs
        if: ${{ env.SONATYPE_USER != null && env.SONATYPE_PWD != null }}
        run:  mvn deploy --settings ./.github/workflows/settings.xml

","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test --file pom.xml",0.12421185372005045,0.15031039554629003,Valid,0.4,Java
42,https://github.com/dotcms/core,"name: Sonar Qube Scan Gradle
on:
  push:
    branches:
      - master 
      - testing-sonarqube
    paths: ['dotCMS/**']
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - master
      - release-*
    paths: ['dotCMS/**']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_SCANNER_OPTS: ""-Xmx3g""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd dotCMS && ./gradlew generateDependenciesFromMaven && ./gradlew build sonarqube --info
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run Tests
        run: mvn test",,,Invalid,,Java
43,https://github.com/kshoji/usb-midi-driver,"name: Android CI

on:
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.09915611814345991,0.739012289160218,Valid,0.967741935483871,Java
44,https://github.com/romraider/romraider,"name: RomRaider build

on: [push,pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
      - name: set JRE_DIR environment variable
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo ::set-env name=JRE_DIR::$(echo $JAVA_HOME)/jre

      - name: Test Compiler
        run: javac -version

      - name: All
        run: |
          echo JRE_DIR=$JRE_DIR
          ant all
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Ant
      run: |
        ant build

    - name: Run Tests
      run: |
        ant test",0.02355072463768116,0.4709149335810597,Valid,0.36363636363636365,Java
45,https://github.com/netflix/archaius,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - 2.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8' # For publishing build with 8 for compatibility
          distribution: 'zulu'
      - uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v3
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - '2.x'
  pull_request:
    branches:
      - '2.x'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Test with Gradle
        run: |
          ./gradlew test",0.2028100183262065,0.3300034439201586,Valid,0.75,Java
46,https://github.com/find-sec-bugs/find-sec-bugs,"# CI Task using https://github.com/jwgmeligmeyling/spotbugs-github-action

name: Java CI with SpotBugs

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run: mvn clean install -DskipTests com.github.spotbugs:spotbugs-maven-plugin:3.1.12:spotbugs
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",0.1404109589041096,0.4396724678626183,Valid,0.2545454545454545,Java
47,https://github.com/jknack/handlebars.java,"name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [1.8, 11, 15, 17]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Mustache Specs
        run: |
          git submodule update --init --recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}
      - name: Install
        run: mvn clean install -DskipTests --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
      - name: Build
        run: mvn clean package --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.10304449648711944,0.3862548966138536,Valid,0.3365334717176959,Java
48,https://github.com/wolpi/prim-ftpd,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Output event
      env:
        EVENT: ${{ github.event_name }}
      run: echo github.event_name $EVENT.
    - name: Publish package
      if: ${{ github.event_name == 'push' }}
      uses: gradle/gradle-build-action@v2
      with:
        arguments: publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
49,https://github.com/netflix/governator,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run tests
        run: |
          ./gradlew test",0.38228699551569506,0.5175273784196898,Valid,0.75,Java
50,https://github.com/lemire/javafastpfor,"name: Java CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 11, 16 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build and test with Maven
        run: mvn package
      - name: Build example
        run: javac -cp target/classes/:. example.java
      - name: Run example
        run: java -cp target/classes/:. example","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
51,https://github.com/greenrobot/eventbus,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle Info
        run: ./gradlew -version
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.30742049469964666,0.5182341949169138,Valid,0.967741935483871,Java
52,https://github.com/ron190/jsql-injection,"on:
  push:
    branches: [ master ]
    
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  MAVEN_NASHORN: """"
  DOCKER_RESOURCES: ./model/src/test/resources/docker

jobs:

  build-jdk11:
    name: Test view on Docker (jdk-11)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      JSQL_DOCKERFILE: 3.8.1-jdk-11-slim
      MAVEN_NASHORN: -Dnashorn.args=--no-deprecation-warning
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Disable shallow clone to prevent Sonar warning
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Set Maven dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests dependency:tree

      - name: Build project container
        run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

      - name: Unit tests
        run: $DOCKER_RESOURCES/scripts/run-on-docker-no-network.sh 'cd view/ && mvn clean install -P tests'

  build:
    name: Tests on Docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - jdk: 3.8.6-eclipse-temurin-18
          nashorn: """"
        - jdk: 3.9.3-eclipse-temurin-20
          nashorn: """"
    env:
      JSQL_DOCKERFILE: ${{ matrix.jdk }}
      MAVEN_NASHORN: ${{ matrix.nashorn }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Disable shallow clone to prevent Sonar warning
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    
    - name: Set Maven dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
              
    - name: Install Maven dependencies
      run: mvn clean install -DskipTests dependency:tree
        
    - name: Run databases and LAMP
      run: |
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml build --parallel
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml up -d

    - name: List images and containers
      run: docker images && docker container ls

    - name: Database health checks and configuration
      run: |
        $DOCKER_RESOURCES/scripts/healthcheck/healthcheck.sh
        $DOCKER_RESOURCES/scripts/buff.sh
        $DOCKER_RESOURCES/scripts/verify.sh

    - name: Build project container
      run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

    - name: Unit and integration tests with Sonar scan
      # Profile usage for skipITs/skipTests (env var MAVEN_OPS not working)
      # Note: 'mvn sonar:sonar' not working, modules reports not found, use 'mvn verify sonar:sonar' for reliability
      # Note: gh actions sonarsource/sonarqube-scan-action not working properly => analysis not reliable
      run: $DOCKER_RESOURCES/scripts/run-on-docker.sh 'mvn clean install sonar:sonar -P tests org.pitest:pitest-maven:mutationCoverage'

    - name: Databases statistics
      run: $DOCKER_RESOURCES/scripts/verify.sh

    - name: Copy files and coverage reports from container
      # Sonar scans unmerged reports, Codacy/Codecov requires scanning each files (or reports merged)
      run: |
        mkdir -p shared-resources/model shared-resources/view
        docker cp docker_jsql-container:view/. shared-resources/view
        docker cp docker_jsql-container:model/. shared-resources/model
        docker cp docker_jsql-container:pom.xml shared-resources

    - name: Codecov scan
      run: cd shared-resources && bash <(curl -s https://codecov.io/bash) || true

    - name: Codacy scan
      run: cd shared-resources && bash <(curl -Ls https://coverage.codacy.com/get.sh) || true

    - name: Publish coverage
      run: |
        git checkout docs
        rm -r view/target/site/ view/target/pit-reports/ model/target/site/ model/target/pit-reports/ || echo 'Folder(s) not found'
        FOLDER=view/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=view/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        git config user.name ""Github Actions""
        git config user.email no-response@github.com    
        git pull -s ours  # ignore remote changes when updated by parallel jobs
        # folders view/target model/target contain other build files from 'Install Maven dependencies'
        git add -f view/target/site/jacoco model/target/site/jacoco view/target/pit-reports model/target/pit-reports
        git commit -m ""Publish jacoco and pitest reports""
        git push

  codeql:
    name: CodeQL
    uses: ./.github/workflows/run-codeql.yml

  release:
    needs: [build-jdk11, build, codeql]
    name: Publish
    uses: ./.github/workflows/release.yml
    secrets: inherit",name: Build and Test,,,Invalid,,Java
53,https://github.com/square/pollexor,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1.1.0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build javadoc

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'square/pollexor' }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [$trunk]
  pull_request:
    branches: [$trunk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1.1.0

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
54,https://github.com/netflix/eureka,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.36695156695156694,0.48791233259909683,Valid,0.75,Java
55,https://github.com/qiniu/android-sdk,"on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
name: Run Test Cases
jobs:
  test-on-mac:
    runs-on: macos-12
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Setup Java Version
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: Run Cases
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 22
          profile: Nexus 6
          arch: x86_64
          script: |
            ./gradlew connectedCheck
            ./gradlew build
            ./gradlew :library:createDebugAndroidTestCoverageReport --info --stacktrace
            ./gradlew connectedAndroidTest  --info --stacktrace
      - name: Upload coverage.txt
        run: |
          bash <(curl -s https://codecov.io/bash)
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",,,Invalid,,Java
56,https://github.com/libgdx/libgdx,"name: Build and Publish

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    branches: [ master ]
  release:
    types: [ published ]

jobs:

  natives-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build macOS natives
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo mv /Applications/Xcode.app /Applications/Xcode.app.bak
          sudo mv /Applications/Xcode_13.2.app /Applications/Xcode.app
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version
          ./gradlew jniGen jnigenBuildIOS
          ./backends/gdx-backend-robovm/build-objectal.sh

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" -o -name ""*.xcframework""  | grep ""libs"" > native-files-list
          zip -r natives-ios -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-ios.zip
          path: natives-ios.zip

  natives-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build macOS natives
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo mv /Applications/Xcode.app /Applications/Xcode.app.bak
          sudo mv /Applications/Xcode_13.2.app /Applications/Xcode.app
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version
          ./gradlew jniGen jnigenBuildMacOsX64 jnigenBuildMacOsXARM64

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-macos -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-macos.zip
          path: natives-macos.zip

  natives-linux:
    runs-on: ubuntu-20.04
    container:
      image: ubuntu:18.04
    steps:
      - name: Install dependencies into minimal dockerfile
        run: |
          # ubuntu dockerfile is very minimal (only 122 packages are installed)
          # need to install updated git (from official git ppa)
          apt update
          apt install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          # install dependencies expected by other steps
          apt update
          apt install -y git \
          curl \
          ca-certificates \
          wget \
          bzip2 \
          zip \
          unzip \
          xz-utils \
          maven \
          ant sudo locales

          # set Locale to en_US.UTF-8 (avoids hang during compilation)
          locale-gen en_US.UTF-8
          echo ""LANG=en_US.UTF-8"" >> $GITHUB_ENV
          echo ""LANGUAGE=en_US.UTF-8"" >> $GITHUB_ENV
          echo ""LC_ALL=en_US.UTF-8"" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes gcc g++
          sudo apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          sudo apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross

      - name: Build Linux natives
        run: |
          ./gradlew jniGen jnigenBuildLinux64 jnigenBuildLinuxARM jnigenBuildLinuxARM64

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-linux -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-linux.zip
          path: natives-linux.zip

  natives-windows:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes mingw-w64 lib32z1

      - name: Build Windows natives
        run: |
          ./gradlew jniGen jnigenBuildWindows64 jnigenBuildWindows

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-windows -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-windows.zip
          path: natives-windows.zip

  natives-android:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Android natives
        run: |
          export NDK_HOME=$ANDROID_NDK_HOME
          ./gradlew jniGen jnigenBuildAndroid

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-android -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-android.zip
          path: natives-android.zip

  pack-natives:
    runs-on: ubuntu-20.04
    needs: [natives-macos, natives-linux, natives-windows, natives-ios, natives-android]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Download natives-ios artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-ios.zip

      - name: Download natives-macos artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-macos.zip

      - name: Download natives-linux artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-linux.zip

      - name: Download natives-windows artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-windows.zip

      - name: Download natives-android artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-android.zip

      - name: Unpack natives
        run: |
          unzip -o natives-ios.zip
          unzip -o natives-macos.zip
          unzip -o natives-linux.zip
          unzip -o natives-windows.zip
          unzip -o natives-android.zip

      - name: Pack desktop natives
        run: |
          ./gradlew jniGen
          ant -f gdx/jni/build.xml pack-natives
          ant -f extensions/gdx-box2d/gdx-box2d/jni/build.xml pack-natives
          ant -f extensions/gdx-freetype/jni/build.xml pack-natives
          ant -f extensions/gdx-bullet/jni/build.xml pack-natives

      - name: Pack natives
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" -o -name ""*-natives.jar"" -o -name ""*.xcframework"" | grep ""libs"" > native-files-list
          zip -r natives -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives.zip
          path: natives.zip

      - name: Upload artifacts to S3
        if: env.AWS_ACCESS_KEY_ID != null
        run: |
          aws s3 cp natives.zip s3://libgdx-nightlies/libgdx-nightlies/natives.zip

  publish:
    runs-on: ubuntu-20.04
    needs: pack-natives
    env:
      ORG_GRADLE_PROJECT_MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      ORG_GRADLE_PROJECT_MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Download natives artifact
        uses: actions/download-artifact@v2
        with:
          name: natives.zip

      - name: Unpack natives
        run: |
          unzip -o natives.zip

      - name: Fetch external natives
        run: |
          ./gradlew fetchExternalNatives

      - name: Snapshot build deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'libgdx'
        run: |
          ./gradlew build publish

      - name: Import GPG key
        if: github.event_name == 'release' && github.repository_owner == 'libgdx'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@1c6a9e9d3594f2d743f1b1dd7669ab0dfdffa922
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Release build deploy
        if: github.event_name == 'release' && github.repository_owner == 'libgdx'
        run: ./gradlew build publish -PRELEASE -Psigning.gnupg.keyId=${{ secrets.GPG_KEYID }} -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }} -Psigning.gnupg.keyName=${{ secrets.GPG_KEYID }}

  build-and-upload-runnables:
    runs-on: ubuntu-20.04
    needs: pack-natives
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Runnables
        run: |
          ./gradlew clean fetchNatives
          ./gradlew buildRunnables build
          
      - name: Upload artifacts to S3
        if: env.AWS_ACCESS_KEY_ID != null
        run: |
          aws s3 cp ./extensions/gdx-tools/build/libs/ s3://libgdx-nightlies/libgdx-runnables/ --recursive
          aws s3 cp ./extensions/gdx-setup/build/libs/ s3://libgdx-nightlies/libgdx-runnables/ --recursive
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",,,Invalid,,Java
57,https://github.com/robo-code/robocode,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: ./gradlew build

    - name: robocode.core test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.core-test-result
        path: robocode.core/build/reports/tests/test

    - name: robocode.host test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.host-test-result
        path: robocode.host/build/reports/tests/test

    - name: robocode.tests test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.tests-result
        path: robocode.tests/build/reports/tests/test

    - name: setup binary artifact
      uses: actions/upload-artifact@v2
      with:
        path: build/robocode-*-setup.jar
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.06891798759476224,0.3414558832078399,Valid,0.6887439945092656,Java
58,https://github.com/flansmods/flansmod,"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build-artifacts
        path: build/output/
","name: Build and Test

on:
  push:
    branches:
      - $1.12.2
  pull_request:
    branches:
      - $1.12.2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.17148760330578514,0.6768058906998833,Valid,0.8030199039121483,Java
59,https://github.com/drallgood/jpasskit,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '29 15 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release
    - run: |
        mvn clean install
        

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B clean package

      - name: Run Tests
        run: mvn test",0.1231711466485199,0.15874124092086955,Valid,0.5789473684210527,Java
60,https://github.com/lmax-exchange/disruptor,"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 17 ]
    name: Java ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: libs-and-reports
          path: |
            build/libs
            build/reports
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
61,https://github.com/openrocket/openrocket,"name: Build

on: 
  push:
    branches:
      - unstable
  pull_request:
    branches:
      - unstable

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Ant build
        run: ant -noinput -buildfile build.xml clean check jar unittest
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: openrocket_build_${{ github.run_number }}
          path: ${{github.workspace}}/swing/build/jar/OpenRocket.jar

","name: Build and Test

on:
  push:
    branches: [ $unstable ]
  pull_request:
    branches: [ $unstable ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Build with Apache Ant
      run: |
        cd core
        ant
    - name: Run Tests
      run: |
        cd core
        ant test",0.39429530201342283,0.5143426501597557,Valid,0.23525071499498754,Java
62,https://github.com/renanse/ardor3d,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: ardor3d-*/build/libs
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.22857142857142856,0.5298205116136043,Valid,0.967741935483871,Java
63,https://github.com/dreamhead/moco,"name: Build

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: [""8"", ""11"", ""17"", ""21""]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '${{ matrix.java-version }}'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Build
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.2887700534759358,0.550479624637014,Valid,0.6713709677419355,Java
64,https://github.com/junkdog/artemis-odb,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install -Pgwttest","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Maven
        run: mvn -B clean install
      - name: Run Tests
        run: mvn test",0.4908616187989556,0.5885254026267596,Valid,0.723404255319149,Java
65,https://github.com/apache/druid,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Cron Job ITs""
on:
  schedule: # Runs by default on master branch
    - cron: '0 3 * * *' # Runs every day at 3:00 AM UTC
  pull_request:
    paths:
      - 'owasp-dependency-check-suppressions.xml'
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches

jobs:
  build:
    if: (github.event_name == 'schedule' && github.repository == 'apache/druid')
    name: build (jdk8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'

      - name: Cache Maven m2 repository
        id: maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-8-${{ github.sha }}

      - name: Maven build
        id: maven_build
        run: |
          ./it.sh ci

  integration-index-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [batch-index, input-format, input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-index-slow, kafka-transactional-index, kafka-transactional-index-slow, kafka-data-format, ldap-security, realtime-index, append-ingestion, compaction]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      group: ${{ matrix.testing_group }}

  integration-index-tests-indexer:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-transactional-index, kafka-index-slow, kafka-transactional-index-slow, kafka-data-format, append-ingestion, compaction ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: indexer
      group: ${{ matrix.testing_group }}

  integration-query-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ query, query-retry, query-error, security, high-availability ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      override_config_path: ./environment-configs/test-groups/prepopulated-data
      group: ${{ matrix.testing_group }}

  integration-other-tests:
    strategy:
      fail-fast: false
      matrix:
        indexer: [ middleManager, indexer ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -DexcludedGroups=batch-index,input-format,input-source,perfect-rollup-parallel-batch-index,kafka-index,query,query-retry,query-error,realtime-index,security,ldap-security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage,append-ingestion,compaction,high-availability,upgrade,shuffle-deep-store,custom-coordinator-duties
      use_indexer: ${{ matrix.indexer }}
      group: other

  security_vulnerabilities:
    if: github.repository == 'apache/druid'
    name: security vulnerabilities
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: maven

      - name: maven build # needed to rebuild incase of maven snapshot resolution fails
        run: mvn clean install dependency:go-offline -P dist -P skip-static-checks,skip-tests -Dmaven.javadoc.skip=true -Dcyclonedx.skip=true -Dweb.console.skip=true

      - name: security vulnerabilities check
        run: |
          mvn dependency-check:purge dependency-check:check || { echo ""
          The OWASP dependency check has found security vulnerabilities. Please use a newer version
          of the dependency that does not have vulnerabilities. To see a report run
          `mvn dependency-check:check`
          If the analysis has false positives,
          they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
          information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
          "" && false; }
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Maven dependencies
      run: mvn -B install -DskipTests

    - name: Install Node.js dependencies
      run: npm install

    - name: Build and Test
      run: |
        mvn -B verify
        npm test",,,Invalid,,Java
66,https://github.com/forgeessentials/forgeessentials,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request: {}
  release:
    types: released
env:
  BUILD_NUMBER: 'UNOFFICIAL-${{ github.sha }}'
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: PR
    outputs:
      canContinue: ${{ github.event_name != 'push' || steps.PR.outputs.pr_found != 'true' || steps.PR.outputs.pr_merged_at != null }}
  build:
    needs: check
    runs-on: ubuntu-latest
    if: needs.check.outputs.canContinue == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle
      - name: Build with Gradle
        run: |
         chmod +x gradlew
         ./gradlew build
      - uses: actions/upload-artifact@v2
        with:
          name: binaries-${{ env.BUILD_NUMBER }}
          path: ./build/libs/
      - uses: actions/upload-artifact@v2
        with:
          name: ts-files-${{ github.sha }}
          path: jscripting/*.d.ts","name: Build and Test

on:
  push:
    branches:
      - 1.16.5/develop
  pull_request:
    branches:
      - 1.16.5/develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run tests
        run: |
          ./gradlew test",,,Invalid,,Java
67,https://github.com/ukanth/afwall,"name: Android CI

on:
  push:
    branches: [ beta ]
  pull_request:
    branches: [ beta ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - beta
  pull_request:
    branches:
      - beta

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.12734082397003746,0.6518609883279317,Valid,0.967741935483871,Java
68,https://github.com/chainfire/libsuperuser,"name: ci
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Validate Gradle wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.06419753086419754,0.37014892663572646,Valid,0.967741935483871,Java
69,https://github.com/banmanagement/banmanager,"name: Java CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0' # weekly

jobs:
  build:
    runs-on: ubuntu-latest
    name: Java ${{ matrix.java }} - ${{ matrix.storageType }}
    strategy:
      matrix:
        include:
          - storageType: mariadb
            java: 8
          - storageType: h2
            java: 8
          - storageType: mariadb
            java: 11
          - storageType: h2
            java: 11

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        env:
          STORAGE_TYPE: ${{ matrix.storageType }}
        run: ./gradlew build

      - name: Publish to Maven Central
        # only publish once
        if: github.ref == 'refs/heads/master' && matrix.java == '8' && matrix.storageType == 'h2'
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEUSERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEPASSWORD }}
          ORG_GRADLE_PROJECT_signingKey : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
          ORG_GRADLE_PROJECT_signingPassword : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
        run: |
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.26749760306807285,0.25793993864210946,Valid,0.7616487455197133,Java
70,https://github.com/llbit/chunky,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Upload documentation
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Docs
        path: build/docs/
    - name: Build release jar
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        case ""${GITHUB_EVENT_NAME}"" in
          ""pull_request"")
            ./gradlew buildReleaseJar -PprereleaseTag=""PR.${PR_NUMBER}""
            ;;
          ""push"")
            ./gradlew buildReleaseJar -PprereleaseTag=""SNAPSHOT""
            ;;
          *)
            ./gradlew buildReleaseJar
            ;;
        esac
    - name: Upload build
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Build
        path: build/installer
    - name: Upload build
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Core
        path: build/chunky-core-*.jar
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Test with Gradle
        run: |
          ./gradlew test",,,Invalid,,Java
71,https://github.com/netflix/blitz4j,"name: Snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.350997150997151,0.5224121855419283,Valid,0.75,Java
72,https://github.com/netflix/hystrix,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.3628066172276098,0.48572936657394783,Valid,0.75,Java
73,https://github.com/journeyapps/zxing-android-embedded,"name: Build Android

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build and Lint with Gradle
        run: ./gradlew build
      - name: Archive lint results
        uses: actions/upload-artifact@v2
        with:
          name: lint-results
          path: ""**/build/reports/lint-results*""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",,,Invalid,,Java
74,https://github.com/calimero-project/calimero-core,"name: CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [17, 19]
    name: Java ${{ matrix.java }} sample

    steps:
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-core
        path: calimero-core
    - name: Checkout calimero-device
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-device
        path: calimero-device
    - name: Checkout calimero-rxtx
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-rxtx
        path: calimero-rxtx
    - name: Checkout calimero-server
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-server
        path: calimero-server
    - name: Checkout calimero-testnetwork
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-testnetwork
        path: calimero-testnetwork
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        path: calimero-core
    - name: setup
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
    - name: Grant execute permission for gradlew
      run: |
        chmod +x calimero-testnetwork/gradlew
        chmod +x calimero-core/gradlew
    - name: Start testnetwork
      run: |
        cd calimero-testnetwork
        ./gradlew build
        ./gradlew run --args ""../calimero-core/test/testnetwork-launcher/server-config.xml"" &
    - name: Build with Gradle
      run: |
        cd calimero-core
        ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.01282638570774164,0.22804768496361527,Valid,0.6085939194061613,Java
75,https://github.com/tada/pljava,"# This workflow will build and test PL/Java against the version of PostgreSQL
# preinstalled in the GitHub Actions runner environment. Naturally, this one
# does not have a PostgreSQL version in the build matrix. The version that's
# preinstalled is the version you get.

name: PL/Java CI with PostgreSQL version supplied by the runner

on:
  push:
    branches: [ master, REL1_6_STABLE ]
  pull_request:
    branches: [ master, REL1_6_STABLE ]

jobs:
  build:
    if: true

    runs-on: ${{ matrix.oscc.os }}
    continue-on-error: true
    strategy:
      matrix:
        oscc:
          - os: ubuntu-latest
            cc: gcc
          - os: macos-latest
            cc: clang
#         - os: windows-latest
#           cc: msvc
#         - os: windows-latest
#           cc: mingw
        java: [9, 11, 12, 17, 18, 19]

    steps:

    - name: Check out PL/Java
      uses: actions/checkout@v2
      with:
        path: pljava

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Report Java, Maven, and PostgreSQL versions (Linux, macOS)
      if: ${{ 'Windows' != runner.os }}
      run: |
        java -version
        mvn --version
        pg_config

    - name: Report Java, Maven, and PostgreSQL versions (Windows)
      if: ${{ 'Windows' == runner.os }}
      run: |
        java -version
        mvn --version
        & ""$Env:PGBIN\pg_config""

    - name: Obtain PG development files (Ubuntu, PGDG)
      if: ${{ 'Linux' == runner.os }}
      run: |
        curl -s -S https://www.postgresql.org/media/keys/ACCC4CF8.asc |
        gpg --dearmor |
        sudo dd of=/etc/apt/trusted.gpg.d/apt.postgresql.org.gpg
        echo  \
          deb \
          http://apt.postgresql.org/pub/repos/apt \
          ""$(lsb_release -cs)-pgdg"" \
          main |
        sudo tee /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update
        sudo apt-get install postgresql-server-dev-14 libkrb5-dev

    - name: Build PL/Java (Linux, macOS)
      if: ${{ 'Windows' != runner.os }}
      working-directory: pljava
      run: |
        mvn clean install --batch-mode \
          -Psaxon-examples -Ppgjdbc-ng \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: Build PL/Java (Windows MinGW-w64)
      if: ${{ 'Windows' == runner.os && 'mingw' == matrix.oscc.cc }}
      working-directory: pljava
      #
      # GitHub Actions will allow 'bash' as a shell choice, even on a Windows
      # runner, in which case it's the bash from Git for Windows. That isn't the
      # same as the msys64\usr\bin\bash that we want; what's more, while both
      # rely on a cygwin DLL, they don't rely on the same one, and an attempt
      # to exec one from the other leads to a ""fatal error - cygheap base
      # mismatch"". So, the bash we want has to be started by something other
      # than the bash we've got. In this case, set shell: to a command that
      # will use cmd to start the right bash.
      #
      # Some of the MinGW magic is set up by the bash profile run at ""login"", so
      # bash must be started with -l. That profile ends with a cd $HOME, so to
      # avoid changing the current directory, set HOME=. first (credit for that:
      # https://superuser.com/a/806371). As set above, . is really the pljava
      # working-directory, so the bash script should start by resetting HOME to
      # the path of its parent.
      #
      # The runner is provisioned with a very long PATH that includes separate
      # bin directories for pre-provisioned packages. The MinGW profile replaces
      # that with a much shorter path, so mvn and pg_config below must be given
      # as absolute paths (using M2 and PGBIN supplied in the environment) or
      # they won't be found. As long as mvn itself can be found, it is able
      # to find java without difficulty, using the JAVA_HOME that is also in
      # the environment.
      #
      # Those existing variables in the environment are all spelled in Windows
      # style with drive letters, colons, and backslashes, rather than the MinGW
      # unixy style, but the mingw bash doesn't seem to object.
      #
      # If you use the runner-supplied bash to examine the environment, you will
      # see MSYSTEM=MINGW64 already in it, but that apparently is something the
      # runner-supplied bash does. It must be set here before invoking the MinGW
      # bash directly.
      #
      env:
        HOME: .
        MSYSTEM: MINGW64
      shell: 'cmd /C ""c:\msys64\usr\bin\bash -l ""{0}""""'
      run: |
        HOME=$( (cd .. && pwd) )
        ""$M2""/mvn clean install --batch-mode \
          -Dpgsql.pgconfig=""$PGBIN""'\pg_config' \
          -Psaxon-examples -Ppgjdbc-ng \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: Install and test PL/Java
      if: ${{ '9' != matrix.java  ||  'Windows' != runner.os }}
      working-directory: pljava
      shell: bash
      run: |
        pgConfig=pg_config # runner-supplied, just get it from the PATH

        packageJar=$(find pljava-packaging -name pljava-pg*.jar -print)

        mavenRepo=""$HOME/.m2/repository""

        saxonVer=$(
          find ""$mavenRepo/net/sf/saxon/Saxon-HE"" \
            -name 'Saxon-HE-*.jar' -print |
          sort |
          tail -n 1
        )
        saxonVer=${saxonVer%/*}
        saxonVer=${saxonVer##*/}

        jdbcJar=$(
          find ""$mavenRepo/com/impossibl/pgjdbc-ng/pgjdbc-ng-all"" \
            -name 'pgjdbc-ng-all-*.jar' -print |
          sort |
          tail -n 1
        )

        #
        # The runner on a Unix-like OS is running as a non-privileged user, but
        # has passwordless sudo available (needed to install the PL/Java files
        # into the system directories where the supplied PostgreSQL lives). By
        # contrast, on Windows the runner has admin privilege, and can install
        # the files without any fuss (but later below, pg_ctl will have to be
        # used when starting PostgreSQL; pg_ctl has a Windows-specific ability
        # to drop admin privs so postgres will not refuse to start).
        #
        # The Windows runner seems to have an extra pg_config somewhere on the
        # path, that reports it was built with MinGW and installed in paths
        # containing Strawberry that don't really exist. $PGBIN\pg_config refers
        # to a different build made with MSVC, and those directories really
        # exist, so specify that one explicitly when running on Windows.
        #
        # The Git for Windows bash environment includes a find command, and the
        # things found have unixy paths returned. Make them Windowsy here, with
        # a hardcoded assumption they start with /c which should become c: (as
        # appears to be the case in the Windows runner currently).
        #
        if [[ $RUNNER_OS == Windows ]]
        then
          pathSep=';'
          pgConfig=""$PGBIN""'\pg_config'
          java -Dpgconfig=""$pgConfig"" -jar ""$packageJar""
          function toWindowsPath() {
            local p
            p=""c:${1#/c}""
            printf ""%s"" ""${p//\//\\}""
          }
          jdbcJar=""$(toWindowsPath ""$jdbcJar"")""
          mavenRepo=""$(toWindowsPath ""$mavenRepo"")""
        else
          pathSep=':'
          sudo ""$JAVA_HOME""/bin/java -Dpgconfig=""$pgConfig"" -jar ""$packageJar""
        fi

        jshell \
          -execution local \
          ""-J--class-path=$packageJar$pathSep$jdbcJar"" \
          ""--class-path=$packageJar"" \
          ""-J--add-modules=java.sql.rowset,jdk.httpserver"" \
          ""-J-Dpgconfig=$pgConfig"" \
          ""-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true"" \
          ""-J-DmavenRepo=$mavenRepo"" \
          ""-J-DsaxonVer=$saxonVer"" - <<\ENDJSHELL

        boolean succeeding = false; // begin pessimistic

        import static java.nio.file.Files.createTempFile;
        import static java.nio.file.Files.write;
        import java.nio.file.Path;
        import static java.nio.file.Paths.get;
        import java.sql.Connection;
        import java.sql.PreparedStatement;
        import java.sql.ResultSet;
        import org.postgresql.pljava.packaging.Node;
        import static org.postgresql.pljava.packaging.Node.q;
        import static org.postgresql.pljava.packaging.Node.stateMachine;
        import static org.postgresql.pljava.packaging.Node.isVoidResultSet;
        import static org.postgresql.pljava.packaging.Node.s_isWindows;
        import static
            org.postgresql.pljava.packaging.Node.NOTHING_OR_PGJDBC_ZERO_COUNT;
        /*
         * Imports that will be needed to serve a jar file over http
         * when the time comes for testing that.
         */
        import static java.nio.charset.StandardCharsets.UTF_8;
        import java.util.jar.Attributes;
        import java.util.jar.Manifest;
        import java.util.jar.JarOutputStream;
        import java.util.zip.ZipEntry;
        import com.sun.net.httpserver.BasicAuthenticator;
        import com.sun.net.httpserver.HttpContext;
        import com.sun.net.httpserver.HttpExchange;
        import com.sun.net.httpserver.HttpHandler;
        import com.sun.net.httpserver.HttpServer;

        String javaHome = System.getProperty(""java.home"");

        Path javaLibDir = get(javaHome, s_isWindows ? ""bin"" : ""lib"");

        Path libjvm = (
          ""Mac OS X"".equals(System.getProperty(""os.name""))
          ? Stream.of(""libjli.dylib"", ""jli/libjli.dylib"")
            .map(s -> javaLibDir.resolve(s))
            .filter(Files::exists).findFirst().get()
          : javaLibDir.resolve(s_isWindows ? ""jvm.dll"" : ""server/libjvm.so"")
        );

        String vmopts =
          ""-enableassertions:org.postgresql.pljava... -Xcheck:jni"";

        if ( 17 < Runtime.version().feature() )
          vmopts += "" -Djava.security.manager=allow"";

        Node n1 = Node.get_new_node(""TestNode1"");

        if ( s_isWindows )
          n1.use_pg_ctl(true);

        /*
         * Keep a tally of the three types of diagnostic notices that may be
         * received, and, independently, how many represent no-good test results
         * (error always, but also warning if seen from the tests in the
         * examples.jar deployment descriptor).
         */
        Map<String,Integer> results =
          Stream.of(""info"", ""warning"", ""error"", ""ng"").collect(
            LinkedHashMap<String,Integer>::new,
            (m,k) -> m.put(k, 0), (r,s) -> {});

        boolean isDiagnostic(Object o, Set<String> whatIsNG)
        {
          if ( ! ( o instanceof Throwable ) )
            return false;
          String[] parts = Node.classify((Throwable)o);
          String type = parts[0];
          String message = parts[2];
          results.compute(type, (k,v) -> 1 + v);
          if ( whatIsNG.contains(type) )
            if ( ! ""warning"".equals(type)
              ||  ! message.startsWith(""[JEP 411]"") )
              results.compute(""ng"", (k,v) -> 1 + v);
          return true;
        }

        /*
         * Write a trial policy into a temporary file in n's data_dir,
         * and set pljava.vmoptions accordingly over connection c.
         * Returns the 'succeeding' flag from the state machine looking
         * at the command results.
         */
        boolean useTrialPolicy(Node n, Connection c, List<String> contents)
        throws Exception
        {
          Path trialPolicy =
            createTempFile(n.data_dir().getParent(), ""trial"", ""policy"");

          write(trialPolicy, contents);

          PreparedStatement setVmOpts = c.prepareStatement(
            ""SELECT null::pg_catalog.void"" +
            "" FROM pg_catalog.set_config('pljava.vmoptions', ?, false)""
          );

          setVmOpts.setString(1, vmopts +
            "" -Dorg.postgresql.pljava.policy.trial="" + trialPolicy.toUri());

          return stateMachine(
            ""change pljava.vmoptions"",
            null,

            q(setVmOpts, setVmOpts::execute)
            .flatMap(Node::semiFlattenDiagnostics)
            .peek(Node::peek),

            (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
            (o,p,q) -> null == o
          );
        }

        try (
          AutoCloseable t1 = n1.initialized_cluster();
          AutoCloseable t2 = n1.started_server(Map.of(
            ""client_min_messages"", ""info"",
            ""pljava.vmoptions"", vmopts,
            ""pljava.libjvm_location"", libjvm.toString()
          ));
        )
        {
          try ( Connection c = n1.connect() )
          {
            succeeding = true; // become optimistic, will be using &= below

            succeeding &= stateMachine(
              ""create extension no result"",
              null,

              q(c, ""CREATE EXTENSION pljava"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              // state 1: consume any diagnostics, or to state 2 with same item
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,

              NOTHING_OR_PGJDBC_ZERO_COUNT, // state 2

              // state 3: must be end of input
              (o,p,q) -> null == o
            );
          }

          /*
           * Get a new connection; 'create extension' always sets a near-silent
           * logging level, and PL/Java only checks once at VM start time, so in
           * the same session where 'create extension' was done, logging is
           * somewhat suppressed.
           */
          try ( Connection c = n1.connect() )
          {
            succeeding &= stateMachine(
              ""saxon path examples path"",
              null,

              Node.installSaxonAndExamplesAndPath(c,
                System.getProperty(""mavenRepo""),
                System.getProperty(""saxonVer""),
                true)
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              // states 1,2: diagnostics* then a void result set (saxon install)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,

              // states 3,4: diagnostics* then a void result set (set classpath)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 3 : -4,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 5 : false,

              // states 5,6: diagnostics* then void result set (example install)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 5 : -6,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 7 : false,

              // states 7,8: diagnostics* then a void result set (set classpath)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 7 : -8,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 9 : false,

              // state 9: must be end of input
              (o,p,q) -> null == o
            );

            /*
             * Exercise TrialPolicy some. Need another connection to change
             * vmoptions. Uses some example functions, so insert here before the
             * test of undeploying the examples.
             */
            try ( Connection c2 = n1.connect() )
            {
              succeeding &= useTrialPolicy(n1, c2, List.of(
                ""grant {"",
                ""  permission"",
                ""    org.postgresql.pljava.policy.TrialPolicy$Permission;"",
                ""};""
              ));

              PreparedStatement tryForbiddenRead = c2.prepareStatement(
                ""SELECT"" +
                ""  CASE WHEN javatest.java_getsystemproperty('java.home')"" +
                ""    OPERATOR(pg_catalog.=) ?"" +
                ""  THEN javatest.logmessage('INFO', 'trial policy test ok')"" +
                ""  ELSE javatest.logmessage('WARNING', 'trial policy test ng')"" +
                ""  END""
              );

              tryForbiddenRead.setString(1, javaHome);

              succeeding &= stateMachine(
                ""try to read a forbidden property"",
                null,

                q(tryForbiddenRead, tryForbiddenRead::execute)
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );
              // done with connection c2
            }

            /*
             * Spin up an http server with a little jar file to serve, and test
             * that install_jar works with an http: url.
             *
             * First make a little jar empty but for a deployment descriptor.
             */
            String ddrName = ""foo.ddr"";
            Attributes a = new Attributes();
            a.putValue(""SQLJDeploymentDescriptor"", ""TRUE"");
            Manifest m = new Manifest();
            m.getEntries().put(ddrName, a);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JarOutputStream jos = new JarOutputStream(baos, m);
            jos.putNextEntry(new ZipEntry(ddrName));
            jos.write(
              (
                ""SQLActions[]={\n\""BEGIN INSTALL\n"" +
                ""SELECT javatest.logmessage('INFO',"" +
                "" 'jar installed from http');\n"" +
                ""END INSTALL\"",\n\""BEGIN REMOVE\n"" +
                ""BEGIN dummy\n"" +
                ""END dummy;\n"" +
                ""END REMOVE\""\n}\n""
              ).getBytes(UTF_8)
            );
            jos.closeEntry();
            jos.close();
            byte[] jar = baos.toByteArray();

            /*
             * Now an http server.
             */
            HttpServer hs =
              HttpServer.create(new InetSocketAddress(""localhost"", 0), 0);

            try (
              Connection c2 = n1.connect();
              AutoCloseable t = ((Supplier<AutoCloseable>)() ->
                {
                  hs.start();
                  return () -> hs.stop(0);
                }
              ).get()
            )
            {
              InetSocketAddress addr = hs.getAddress();

              String id = ""bar"", pw = ""baz"";

              URL u = new URI(
                ""http"", id+':'+pw, addr.getHostString(), addr.getPort(),
                ""/foo.jar"", null, null
              ).toURL();

              HttpContext hc = hs.createContext(
                u.getPath(),
                new HttpHandler()
                {
                  @Override
                  public void handle(HttpExchange t) throws IOException
                  {
                    try ( InputStream is = t.getRequestBody() ) {
                      is.readAllBytes();
                    }
                    t.getResponseHeaders().add(
                      ""Content-Type"", ""application/java-archive"");
                    t.sendResponseHeaders(200, jar.length);
                    try ( OutputStream os = t.getResponseBody() ) {
                      os.write(jar);
                    }
                  }
                }
              );

              hc.setAuthenticator(
                new BasicAuthenticator(""CI realm"")
                // (""CI realm"", UTF_8) only available in Java 14 or later
                {
                  @Override
                  public boolean checkCredentials(String c_id, String c_pw)
                  {
                      return id.equals(c_id) && pw.equals(c_pw);
                  }
                }
              );

              succeeding &= useTrialPolicy(n1, c2, List.of(
                ""grant codebase \""${org.postgresql.pljava.codesource}\"" {"",
                ""  permission"",
                ""    java.net.URLPermission \""http:*\"", \""GET:Accept\"";"",
                ""};""
              ));

              succeeding &= stateMachine(
                ""install a jar over http"",
                null,

                Node.installJar(c2, u.toString(), ""foo"", true)
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );

              // done with connection c2 again, and the http server
            }

            /*
             * Also confirm that the generated undeploy actions work.
             */
            succeeding &= stateMachine(
              ""remove jar void result"",
              null,

              q(c, ""SELECT sqlj.remove_jar('examples', true)"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
              (o,p,q) -> null == o
            );

            /*
             * Get another new connection and make sure the extension can be
             * loaded in a non-superuser session.
             */
            try ( Connection c2 = n1.connect() )
            {
              succeeding &= stateMachine(
                ""become non-superuser"",
                null,

                q(c2,
                  ""CREATE ROLE alice;"" +
                  ""GRANT USAGE ON SCHEMA sqlj TO alice;"" +
                  ""SET SESSION AUTHORIZATION alice"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                (o,p,q) -> null == o
              );

              succeeding &= stateMachine(
                ""load as non-superuser"",
                null,

                q(c2, ""SELECT null::pg_catalog.void"" +
                      ""  FROM sqlj.get_classpath('public')"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );
              // done with connection c2 again
            }

            /*
             * Make sure the extension drops cleanly and nothing
             * is left in sqlj.
             */
            succeeding &= stateMachine(
              ""drop extension and schema no result"",
              null,

              q(c, ""DROP EXTENSION pljava;DROP SCHEMA sqlj"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );
          }

          /*
           * Get another new connection and confirm that the old, pre-extension,
           * LOAD method of installing PL/Java works. It is largely obsolete in
           * the era of extensions, but still covers the use case of installing
           * PL/Java without admin access on the server filesystem to where
           * CREATE EXTENSION requires the files to be; they can still be
           * installed in some other writable location the server can read, and
           * pljava.module_path set to the right locations of the jars, and the
           * correct shared-object path given to LOAD.
           *
           * Also test the after-the-fact packaging up with CREATE EXTENSION
           * FROM unpackaged. That officially goes away in PG 13, where the
           * equivalent sequence
           *  CREATE EXTENSION pljava VERSION unpackaged
           *  \c
           *  ALTER EXTENSION pljava UPDATE
           * should be tested instead.
           */
          try ( Connection c = n1.connect() )
          {
            int majorVersion = c.getMetaData().getDatabaseMajorVersion();

            succeeding &= stateMachine(
              ""load as non-extension"",
              null,

              Node.loadPLJava(c)
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );

            if ( 13 <= majorVersion )
            {
              succeeding &= stateMachine(
                ""create unpackaged (PG >= 13)"",
                null,

                q(c, ""CREATE EXTENSION pljava VERSION unpackaged"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                (o,p,q) -> null == o
              );
            }
          }

          /*
           * CREATE EXTENSION FROM unpackaged (or the second half of the
           * PG >= 13 CREATE EXTENSION VERSION unpackaged;ALTER EXTENSION UPDATE
           * sequence) has to happen over a new connection.
           */
          try ( Connection c = n1.connect() )
          {
            int majorVersion = c.getMetaData().getDatabaseMajorVersion();

            succeeding &= stateMachine(
              ""package after loading"",
              null,

              q(c, 13 > majorVersion
                ? ""CREATE EXTENSION pljava FROM unpackaged""
                :  ""ALTER EXTENSION pljava UPDATE"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );

            /*
             * Again make sure extension drops cleanly with nothing left behind.
             */
            succeeding &= stateMachine(
              ""drop extension and schema no result"",
              null,

              q(c, ""DROP EXTENSION pljava;DROP SCHEMA sqlj"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );
          }
        } catch ( Throwable t )
        {
          succeeding = false;
          throw t;
        }

        System.out.println(results);
        succeeding &= (0 == results.get(""ng""));
        System.exit(succeeding ? 0 : 1);
        ENDJSHELL
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",0.014949004013402555,0.015203387028249473,Valid,0.09233718854819965,Java
76,https://github.com/netflix/ribbon,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.3641520136131594,0.4950629123668432,Valid,0.75,Java
77,https://github.com/square/android-times-square,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: gradle/wrapper-validation-action@v1.0.4
    - name: set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'temurin'
        cache: gradle

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Validate Gradle Wrapper
        uses: actions/gradle/wrapper-validation-action@v1.0.4

      - name: Build with Gradle
        run: |
          ./gradlew build
",,,Invalid,,Java
78,https://github.com/netflix/evcache,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot -x test
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.3685131195335277,0.4648474722290977,Valid,0.625,Java
79,https://github.com/billthefarmer/tuner,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",0.23218997361477572,0.4734116954559633,Valid,0.967741935483871,Java
80,https://github.com/tng/junit-dataprovider,"name: Java CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.3207810320781032,0.5428580819191181,Valid,0.967741935483871,Java
81,https://github.com/rameshkec85/bottomtabsfragmenttabhost,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.13093709884467267,0.6915517247248083,Valid,0.967741935483871,Java
82,https://github.com/eclipse/golo-lang,"name: Continuous integration and deployment

on:
  push:
    branches:
      - master
    tags:
      - 'milestone/*'
      - 'release/*'
  pull_request:
    branches:
      - master

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Copy build distribution
      run: cp build/distributions/*.zip golo-distribution.zip

    - name: Attach build distribution from this build
      uses: actions/upload-artifact@v2
      with:
        name: Golo distribution from this build
        path: ./golo-distribution.zip

    # Only pushes to master trigger a publication to Sonatype OSS
    - name: Deploy
      if: github.ref == 'refs/heads/master'
      run: .build/deploy.sh
      env:
        GPG_SECRET: ${{ secrets.GPG_SECRET }}

    # Only pushes of tags trigger a release creation
    - name: Create the release
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: startsWith(github.ref, 'refs/tags/milestone/')
    - name: Attach build distribution to the release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./golo-distribution.zip
        asset_name: golo-distribution.zip
        asset_content_type: application/zip

","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test",0.2737835875090777,0.25809298657586954,Valid,0.4179128193272458,Java
83,https://github.com/netflix/netflix-graph,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.36065573770491804,0.4940311654597974,Valid,0.75,Java
84,https://github.com/netflix/zuul,"name: Snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'
      - name: Build snapshot
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1.1.0

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.06379585326953748,0.4642901432853036,Valid,0.75,Java
85,https://github.com/apache/tez,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    strategy:
      matrix:
        java-version: [8, 11]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - run: mvn clean install -DskipTests -Dmaven.javadoc.skip=true
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn clean install
",0.16101694915254236,0.23699260989808116,Valid,0.4722222222222222,Java
86,https://github.com/spring-guides/gs-rest-service,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.3535741737125288,0.40545247168794823,Valid,0.3457148288964518,Java
87,https://github.com/spring-guides/gs-consuming-rest,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",0.34632683658170915,0.42687658172677234,Valid,0.32065279415699766,Java
88,https://github.com/spring-guides/gs-scheduling-tasks,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
89,https://github.com/spring-guides/gs-uploading-files,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",,,Invalid,,Java
90,https://github.com/windup/windup,"name: Windup-dependent projects' PR builder for JDK11

on:
  pull_request:
    branches:
      - master
      - 'releases/**'

jobs:
  windup-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-build-${{ github.sha }}
          restore-keys:
            ${{ runner.os }}-maven-windup-build
      - name: Build on JDK 11
        run: ./mvnw -B clean install -DskipTests

  windup-rulesets-build:
    runs-on: ubuntu-latest
    needs: [windup-build]
    strategy:
      fail-fast: false
      matrix:
        jdk-distribution: [ temurin ]
        java-version: [ 11, 17 ]
        ruleset-test: [ WindupRulesTest ]
        tests-pattern: [ 'rules-reviewed/[a-d]',
                         'rules-reviewed/e',
                         'rules-reviewed/[f-z]',
                         'rules-generated/' ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-rulesets
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.jdk-distribution }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-rulesets-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-build-${{ github.sha }}
      - name: Test
        run: mvn clean test -nsu -f rules -DrunTestsMatching=${{ matrix.tests-pattern }} -Dtest=${{ matrix.ruleset-test }}

  windup-rulesets-links-build:
    runs-on: ubuntu-latest
    needs: [windup-build]
    strategy:
      fail-fast: false
      matrix:
        jdk-distribution: [ temurin ]
        java-version: [ 11, 17 ]
        ruleset-test: [ WindupRulesLinksTest ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-rulesets
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.jdk-distribution }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-rulesets-links-${{ matrix.java-version }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-build-${{ github.sha }}
      - name: Test
        run: mvn clean test -nsu -f rules -Dtest=${{ matrix.ruleset-test }}
      - name: Build for the windup-maven-plugin-build
        run: mvn clean install -nsu -DskipTests

  windup-maven-plugin-build:
    runs-on: ubuntu-latest
    needs: [windup-rulesets-links-build]
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 11, 17 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-maven-plugin
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-maven-plugin-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-rulesets-links-${{ matrix.java-version }}-build-${{ github.sha }}
      - name: Build
        run: mvn clean install -nsu

  windup-quickstarts-build:
    runs-on: ubuntu-latest
    needs: [windup-maven-plugin-build]
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 11, 17 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-quickstarts
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-maven-plugin-build-${{ github.sha }}
      - name: Test
        run:   |
          export MAVEN_OPTS=""--add-modules=java.se  --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.stream=ALL-UNNAMED""
          mvn clean install -s settings.xml -nsu
        shell: bash
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test",,,Invalid,,Java
91,https://github.com/spring-guides/gs-messaging-rabbitmq,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn -B test --file complete/pom.xml",,,Invalid,,Java
92,https://github.com/spring-guides/gs-validating-form-input,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",,,Invalid,,Java
93,https://github.com/rackerlabs/blueflood,"name: ""Run tests on pull requests""

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        java-version: [ 8 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - name: Build and test
        run: |
          mvn clean install
          mvn jacoco:report jacoco:report-integration
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            */target/site
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
94,https://github.com/spring-guides/gs-batch-processing,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",,,Invalid,,Java
95,https://github.com/googlemaps/android-maps-utils,"# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow that runs tests on every new pull request
name: Run unit tests

on:
  repository_dispatch:
    types: [test]
  push:
    branches-ignore: ['gh-pages']
  pull_request:
    branches-ignore: ['gh-pages']
  workflow_dispatch:
  workflow_call: 

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1.1.0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build modules
      run: ./gradlew build jacocoTestReport --stacktrace
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1.1.0

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
96,https://github.com/spring-guides/gs-securing-web,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Run tests
      run: mvn test",,,Invalid,,Java
97,https://github.com/panxw/android-image-indicator,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        chmod +x gradlew
        ./gradlew build

    - name: Run Tests
      run: |
        chmod +x gradlew
        ./gradlew test",0.4371584699453552,0.6469785289030756,Valid,0.625,Java
98,https://github.com/billthefarmer/sig-gen,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.21643835616438356,0.51532774431882,Valid,0.967741935483871,Java
99,https://github.com/uwolfer/gerrit-intellij-plugin,"name: Java CI with Gradle

on:
  - push
  - pull_request

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Execute Gradle build
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [intellij2020.3]
  pull_request:
    branches: [intellij2020.3]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.18651685393258427,0.7102337260070923,Valid,0.7264823211447593,Java
100,https://github.com/apache/deltaspike,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# NOTE https://infra.apache.org/github-actions-secrets.html

name: DeltaSpike CI

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - '**.md'
      - '.travis.yml'
      - 'Jenkinsfile'
  pull_request:
    branches:
      - master
      - main
    paths-ignore:
      - '**.md'
      - '.travis.yml'
      - 'Jenkinsfile'
  workflow_dispatch:

permissions:
  contents: read
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install
        ","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.23712801133679737,0.2125627349706018,Valid,0.56,Java
101,https://github.com/aerogear/aerogear-unifiedpush-server,"name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REF: ${{ github.ref }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Set up settings.xml
      uses: whelk-io/maven-settings-xml-action@v4 
      with:
        repositories: '[{ ""id"": ""central"", ""url"": ""https://repo1.maven.org/maven2""}]'
        plugin_repositories: '[{ ""id"": ""central"", ""url"": ""https://repo1.maven.org/maven2""}]'

    - name: Build
      run: mvn clean install -DskipTests=true

    - name: Tests
      run: mvn verify

    - name: Javadocs
      run: mvn javadoc:jar

    - name: Deploy
      run: BRANCH_NAME=${REF##*/};sh ./quay_push '${{secrets.QUAY_USERNAME}}' '${{secrets.QUAY_PASSWORD}}' ""$BRANCH_NAME""
      if: github.event_name == 'push'
      
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install
          npm install com.github.aerogear/aerogear-unifiedpush-server

      - name: Build
        run: npm run build

      - name: Test
        run: npm test",0.019404019404019403,0.4617619110489688,Valid,0.3437243642329778,Java
102,https://github.com/billthefarmer/scope,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.2335958005249344,0.4681637360097791,Valid,0.967741935483871,Java
103,https://github.com/ff4j/ff4j,"name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install -ntp
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
104,https://github.com/bonitasoft/bonita-engine,"name: Build
on:
  push:
    branches:
      - master
      - dev
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew build sonarqube -Dsonar.scanner.force-deprecated-java-version=true
        run: ./gradlew build iT","name: Build and Test

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.26038437693738375,0.3167096651742746,Valid,0.8823529411764706,Java
105,https://github.com/immutables/immutables,"name: CI

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
      - topic/**

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '20'  ]
        compiler: [ 'javac', 'ecj' ]
        extra: [ 'none', 'errorprone' ]
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
        cache: maven
    - name: print Java version
      run: java -version
    - name: Run tests
      run: mvn --batch-mode --no-transfer-progress clean test -P${{ matrix.compiler }} -Dextra=${{ matrix.extra }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B clean package

    - name: Run Tests
      run: mvn test",0.1672661870503597,0.48730843304706656,Valid,0.21138211382113822,Java
106,https://github.com/mapstruct/mapstruct-examples,"name: CI

on: [push, pull_request]

env:
  MAVEN_ARGS: >-
    -V -B --no-transfer-progress
    -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  linux_maven:
    strategy:
      fail-fast: false
      matrix:
        java: [8, 11, 17, 21]
    name: 'Linux JDK ${{ matrix.java }} Maven'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Set up JDK'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: 'Test'
        run: ./mvnw ${MAVEN_ARGS} -U clean verify
  linux_gradle:
    strategy:
      fail-fast: false
      matrix:
        java: [8, 11, 17, 21]
    name: 'Linux JDK ${{ matrix.java }} Gradle'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Set up JDK'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: 'Test'
        run: ./gradlew buildAll
  windows_maven:
    name: 'Windows'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: 'Test'
        run: ./mvnw ${MAVEN_ARGS} -U clean verify
  mac_maven:
    name: 'Mac OS'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: 'Test'
        run: ./mvnw ${MAVEN_ARGS} -U clean verify
  linux_bazel:
    strategy:
      fail-fast: false
      matrix:
        java: [8, 11, 17, 21]
    name: 'Linux JDK ${{ matrix.java }} Bazel'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: Mount bazel cache
        uses: actions/cache@v1
        with:
          path: ""/home/runner/.cache/bazel""
          key: bazel
      - name: Install bazel
        run: |
          curl -LO ""https://github.com/bazelbuild/bazelisk/releases/download/v1.1.0/bazelisk-linux-amd64""
          mkdir -p ""${GITHUB_WORKSPACE}/bin/""
          mv bazelisk-linux-amd64 ""${GITHUB_WORKSPACE}/bin/bazel""
          chmod +x ""${GITHUB_WORKSPACE}/bin/bazel""          
      - name: Test
        run: |
          ""${GITHUB_WORKSPACE}/bin/bazel"" test //...
      - name: Build
        run: |
          ""${GITHUB_WORKSPACE}/bin/bazel"" build //...
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",,,Invalid,,Java
107,https://github.com/spring-guides/gs-accessing-data-jpa,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",,,Invalid,,Java
108,https://github.com/spring-guides/gs-accessing-data-mongodb,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
109,https://github.com/spring-guides/gs-serving-web-content,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn -B test --file complete/pom.xml",,,Invalid,,Java
110,https://github.com/netflix/nicobar,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.32202415181138583,0.4809032315688288,Valid,0.75,Java
111,https://github.com/spring-guides/gs-spring-boot,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn -B test --file complete/pom.xml",0.3470456245325355,0.42787673032961393,Valid,0.31913600109090884,Java
112,https://github.com/spring-guides/gs-messaging-stomp-websocket,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -f complete/pom.xml clean install

    - name: Run Tests
      run: mvn -f complete/pom.xml test",0.3431151241534989,0.42107135192678724,Valid,0.35032312382732733,Java
113,https://github.com/sleepytrousers/enderio,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - master
      - 'release/**'
  pull_request:
    branches:
      - master

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.32432432432432434,0.5287704473008957,Valid,0.967741935483871,Java
114,https://github.com/zendesk/android-db-commons,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Publish package to Maven central
on:
  push:
    tags: v*

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: zendesk/checkout@v2

      - name: Set up JDK 1.8
        uses: zendesk/setup-java@v1
        with:
          java-version: 1.8

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Prepare environment
        env:
          GPG_KEY_CONTENTS: ${{ secrets.GPG_KEY_CONTENTS }}
        run: |
          git fetch --unshallow
          echo ""$GPG_KEY_CONTENTS"" | base64 -d > $HOME/.keyring.gpg

      - name: Build
        run: ./gradlew build

      - name: Publish to MavenCentral
        run: |
          export SIGNING_SECRET_KEY_RING_FILE=$HOME/.keyring.gpg
          ./gradlew publish
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.22105263157894736,0.2755135476201813,Valid,0.967741935483871,Java
115,https://github.com/bk138/multivnc,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install gettext libwxgtk3.0-gtk3-dev libgtk-3-dev libgcrypt20-dev liblzo2-dev
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew uninstall --ignore-dependencies gnutls libgcrypt
          brew install wxwidgets
      - name: Install Windows Build Dependencies
        if: ${{ matrix.os == 'windows-latest' }}
        uses: johnwason/vcpkg-action@v4
        id: vcpkg
        with:
          pkgs: wxwidgets
          triplet: x64-windows
          token: ${{ github.token }}
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} ..
          cmake --build .
          cpack -V -C Debug
      - name: Archive Ubuntu Build Artifacts
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Debian Package
          path: build/*.deb
      - name: Archive MacOS Build Artifacts
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC MacOS Package
          path: build/*.dmg
      - name: Archive Windows Build Artifacts
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: MultiVNC Windows Package
          path: build/*.exe
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up CMake
      uses: actions/setup-cmake@v1
      with:
        cmake-version: '3.20'

    - name: Build
      run: |
        cmake -B build
        cmake --build build

    - name: Test
      run: |
        if [ -f ""build/test"" ]; then
          cd build
          ./test
        fi",0.08862377503195569,0.2208431852139732,Valid,0.404312077495575,C++
116,https://github.com/apiman/apiman,"name: Apiman Database Tests
on:
  push:
    paths-ignore:
      - '.gitignore'
      - 'LICENSE'
      - 'README*'
      - 'CODE_OF_CONDUCT*'
    branches: [master, 3.x]
  pull_request:
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - 'LICENSE'
      - 'README*'
      - 'CODE_OF_CONDUCT*'
    branches: [master, 3.x]

jobs:
  apiman-manager-db-tests:
    runs-on: ubuntu-latest
    name: Apiman Manager Database Test

    strategy:
      matrix:
        database:
          - name: Postgres Latest
            tag: ""postgres:latest""

          - name: Postgres 15
            tag: ""postgres:15""

          - name: Postgres 11
            tag: ""postgres:11""

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up `mvn`
        run: bash .github/workflows/support/set-mvn-location.sh

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      - name: Build Apiman (without tests)
        run: mvn clean install -DskipTests -Dmaven.javadoc.skip

      - name: Run Apiman Manager Tests ${{ matrix.database.name }}
        env:
          TAG: ${{ matrix.database.tag }}
        run: |
          cd manager/test/api
          mvn test -Dapiman.test.manager.database=postgres -Dapiman.test.manager.database.image=$TAG
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",,,Invalid,,Java
117,https://github.com/eirslett/frontend-maven-plugin,"name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: ""Run build""
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Use cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ""${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}""
          restore-keys: |
            ${{ runner.os }}-maven3-
      - name: Configure Java
        uses: actions/setup-java@v3
        with:
          java-version: ""8""
          distribution: temurin
      - name: ""Run Maven""
        shell: bash
        run: mvn clean install --batch-mode -PintegrationTests
      - name: ""Deploy""
        if: github.repository_owner == 'eirslett' && github.ref == 'refs/heads/master' && matrix.os == 'ubuntu-latest'
        shell: bash
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_NAME: ${{ secrets.GPG_KEY_NAME }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_JIRA_USERNAME: ${{ secrets.OSSRH_JIRA_USERNAME }}
          OSSRH_JIRA_PASSWORD: ${{ secrets.OSSRH_JIRA_PASSWORD }}
        run: |
          export GPG_TTY=$(tty)
          echo -e ""$GPG_KEY"" | gpg --import --passphrase $GPG_PASSPHRASE --batch --yes
          mvn --settings settings-github.xml -B deploy -Prelease -DskipTests
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Build with Maven
        run: mvn clean install
      - name: Test with Mocha
        run: npm test",,,Invalid,,Java
118,https://github.com/atlauncher/atlauncher,"name: Application

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: ""temurin""
          java-version: 8
          cache: ""gradle""

      - name: Check license headers
        run: ./gradlew checkLicenses

  test:
    runs-on: ${{ matrix.os }}
    needs: ci
    strategy:
      matrix:
        java-version: [""8"", ""11"", ""17"", ""20""] # LTS + Latest
        os: [""ubuntu-latest"", ""macos-latest"", ""windows-latest""]
    name: Java ${{ matrix.java-version }} (${{ matrix.os }}) Tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: ""temurin""
          java-version: ${{ matrix.java-version }}
          cache: ""gradle""

      - name: Run Unit Tests
        run: ./gradlew --no-daemon test --tests com.atlauncher.*

      - name: Run UI Tests
        uses: coactions/setup-xvfb@v1
        continue-on-error: true
        with:
          run: ./gradlew --no-daemon test --tests ui.*

  build:
    runs-on: ${{ matrix.os }}
    needs: ci
    strategy:
      matrix:
        java-version: [""8"", ""11"", ""17"", ""20""] # LTS + Latest
        os: [""ubuntu-latest"", ""macos-latest"", ""windows-latest""]
    name: Java ${{ matrix.java-version }} (${{ matrix.os }}) Build
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: ""temurin""
          java-version: ${{ matrix.java-version }}
          cache: ""gradle""

      - name: Build
        run: ./gradlew build -x test

  package:
    runs-on: ubuntu-latest
    needs: ci
    outputs:
      version: ${{ steps.version.outputs.text }}
      clean-version: ${{ steps.clean-version.outputs.replaced }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: ""temurin""
          java-version: 8
          cache: ""gradle""

      - name: Read version
        id: version
        uses: pCYSl5EDgo/cat@cde404f088c582552b0fe4e24ecb3159445fde2a
        with:
          path: ./src/main/resources/version
          trim: true

      - name: Remove stream from version
        id: clean-version
        uses: frabert/replace-string-action@v2
        with:
          string: ${{ steps.version.outputs.text }}
          pattern: '([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)\.?\w*'
          replace-with: ""$1""

      - name: Build
        run: ./gradlew build -x test

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ATLauncher
          path: dist/*

  release:
    runs-on: ubuntu-latest
    needs: [test, build, package]
    if: ${{ github.ref == 'refs/heads/master' && !endsWith(needs.package.outputs.version, '.Beta') }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v3

      - name: Read changelog
        id: changelog
        uses: pCYSl5EDgo/cat@cde404f088c582552b0fe4e24ecb3159445fde2a
        with:
          path: ./CHANGELOG.md

      - name: Remove the top part of the changelog
        id: remove-top-of-changelog
        uses: frabert/replace-string-action@v2
        with:
          string: ${{ steps.changelog.outputs.text }}
          pattern: '^.*?(### (New Features|Fixes|Misc)\n.*)$'
          replace-with: ""$1""
          flags: gs

      - name: Clean up the changelog to only have used sections
        id: clean-changelog
        run: |
          awk '/^$/ {if (i) {b=b $0 ""\n""} else {print $0 }; next} /^###/ {i=1; b=$0; next} {if (i) {print b}; i=0; print $0; next}' <<'EOF' > fixed-changelog.md
          ${{ steps.remove-top-of-changelog.outputs.replaced }}
          EOF
          echo 'cleaned-changelog<<EOF' >> $GITHUB_ENV
          cat fixed-changelog.md >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Create ATLauncher Version
        uses: ATLauncher/release-atlauncher-action@master
        timeout-minutes: 30
        with:
          api-key: ${{ secrets.ATLAUNCHER_API_KEY }}
          version: ${{ needs.package.outputs.clean-version }}
          changelog: ${{ env.cleaned-changelog }}
          files: |
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.exe
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.zip
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.jar

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.package.outputs.clean-version }}
          target_commitish: master
          name: ${{ needs.package.outputs.clean-version }}
          body: ${{ env.cleaned-changelog }}
          prerelease: false
          draft: false
          files: |
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.exe
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.zip
            ./ATLauncher/ATLauncher-${{ needs.package.outputs.clean-version }}.jar

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ""${{ needs.package.outputs.clean-version }}""

      - name: Update version
        run: |
          NEW_VERSION=`echo ${{ needs.package.outputs.clean-version }} | perl -pe 's/^((\d+\.)*)(\d+)(.*)$/$1.($3+1).$4/e'`
          cat <<EOF > CHANGELOG.md
          # Changelog

          This changelog only contains the changes that are unreleased. For changes for individual releases, please visit the
          [releases](https://github.com/ATLauncher/ATLauncher/releases) page on GitHub.

          ## $NEW_VERSION

          ### New Features

          ### Fixes

          ### Misc
          EOF
          echo ""${NEW_VERSION}.Beta"" > src/main/resources/version

      - name: Commit new version/CHANGELOG file
        uses: EndBug/add-and-commit@v9
        with:
          add: ""CHANGELOG.md src/main/resources/version""
          message: ""chore: bump version""

      - name: Add comment, remove label and then close issues labeled with 'awaiting-release'
        uses: ./.github/actions/label-cleanup
        with:
          label: ""awaiting-release""
          comment: ""This has been fixed with version ${{ needs.package.outputs.clean-version }}""
          token: ${{ secrets.BOT_GITHUB_TOKEN }}

      - name: Package up AUR versions
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          event-type: aur-publish
          client-payload: '{""version"": ""${{ needs.package.outputs.clean-version }}""}'
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.026462576209625114,0.06083212213477052,Valid,0.6968531468531468,Java
119,https://github.com/ical4j/ical4j,"name: Publish snapshots

on: [push]

permissions: read-all

jobs:
  gradle:
    name: Test with Java ${{ matrix.jdk }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        jdk: [ '8', '11', '17', '19' ] # Gradle cannot support JDK 20 yet

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ matrix.jdk }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.jdk }}
        cache: 'gradle'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Execute Gradle build
      run: ./gradlew check --console=plain --warning-mode all

  publish:
    name: Publish Artifact
    needs: gradle
    if: ${{ needs.gradle.result == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build -x test publish
        env:
          GPR_USERNAME: benfortuna
          GPR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",0.0673289183222958,0.2918488372286442,Valid,0.4959358214879302,Java
120,https://github.com/senzhk/adbkeyboard,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ref: master
  
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
121,https://github.com/splitwise/tokenautocomplete,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-split: [
          {model: ""NexusLowRes"", version: 23},
          {model: ""NexusLowRes"", version: 24},
          {model: ""NexusLowRes"", version: 25},
          {model: ""NexusLowRes"", version: 26},
          {model: ""NexusLowRes"", version: 27},
          {model: ""NexusLowRes"", version: 28},
          {model: ""NexusLowRes"", version: 29},
          {model: ""NexusLowRes"", version: 30},

          {model: ""oriole"", version: 31},
          {model: ""oriole"", version: 32},
          {model: ""oriole"", version: 33}
        ]

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
    - name: Build integration test target
      run: ./gradlew assembleAndroidTest
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_CLOUD_SERVICE_KEY: ${{secrets.GOOGLE_CLOUD_SERVICE_KEY}}
        GOOGLE_PROJECT_ID: ${{secrets.GOOGLE_PROJECT_ID}}
      run: |
        echo $GOOGLE_CLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - name: Run Instrumented Tests with Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app example/build/outputs/apk/debug/example-debug.apk --test example/build/outputs/apk/androidTest/debug/example-debug-androidTest.apk --device model=$DEVICE,version=$API_VERSION,locale=en,orientation=portrait --timeout 30m
      env:
        API_VERSION: ${{ matrix.device-split.version }}
        DEVICE: ${{ matrix.device-split.model }}
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.1985574883326262,0.20959457500712253,Valid,0.6582497897201574,Kotlin
122,https://github.com/konsoletyper/teavm,"name: Build
on:
  pull_request:
  push:
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        platform:
        - c
        - js
        - wasm
        - wasi
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: adopt
    - uses: gradle/gradle-build-action@v2
    - if: ${{ matrix.platform == 'wasi' }}
      uses: bytecodealliance/actions/wasmtime/setup@v1
    - if: ${{ matrix.platform == 'wasi' }}
      run: |
        mkdir -p ""$HOME/.wasmtime/bin/""
        echo 'wasmtime ""$@""'> ""$HOME/.wasmtime/bin/wasmtime""
        chmod +x ""$HOME/.wasmtime/bin/wasmtime""
    - run: |
        platforms=(""c"" ""js"" ""wasm"" ""wasi"")
        args=()
        for v in ""${platforms[@]}""
        do
          if [[ ""${{ matrix.platform }}"" != ""$v"" ]]; then
            args+=(""-Pteavm.tests.${v}=false"")
          fi
        done
        echo ""${args[@]}""
        ./gradlew ""${args[@]}"" test
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ""test-reports-${{ matrix.platform }}""
        path: ""tests/build/reports/tests/test""
  checkstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: adopt
      - uses: gradle/gradle-build-action@v2
      - run: |
          ./gradlew build -x test","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.08234688625836335,0.23073291114074534,Valid,0.5064102564102564,Java
123,https://github.com/sekwah41/advanced-portals,"name: Release

on: [push, workflow_dispatch]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Cache Node packages
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-node
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Use Node.js 12.x
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Prepare repository
        run: |
          git fetch --unshallow --tags
          yarn install --frozen-lockfile
          echo $(yarn bin) >> $GITHUB_PATH
      - name: Build with Gradle
        run: ./gradlew build
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURSE_API: ${{ secrets.CURSE_API }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          auto shipit

","name: Build and Test

on:
  push:
    branches:
      - $spigot
  pull_request:
    branches:
      - $spigot

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.270996640537514,0.3055373379988992,Valid,0.967741935483871,Java
124,https://github.com/antiqueatlasteam/antiqueatlas,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Status

on: [""push"", ""pull_request""]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build
        run: ./gradlew build
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: |
            fabric/build/libs/*
            forge/build/libs/*
","name: Build and Test

on:
  push:
    branches:
      - $1.18
  pull_request:
    branches:
      - $1.18

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Test with Gradle
        run: |
          ./gradlew test",0.05560098119378577,0.5227427570247628,Valid,0.7264823211447593,Java
125,https://github.com/b3dgs/warcraft-remake,"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        jdk: [17]
    runs-on: ${{ matrix.os }}
    env:
      JDK_VERSION: ${{ matrix.jdk }}
      AUDIODEV: ""null""

    steps:
     - name: Checkout Repo
       uses: actions/checkout@v2
     
     - name: Set up JDK
       uses: actions/setup-java@v2
       with:
         java-version: ${{ matrix.jdk }}
         distribution: 'temurin'
         
     - name: Cache Maven packages
       uses: actions/cache@v2
       with:
         path: ~/.m2
         key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
         restore-keys: ${{ runner.os }}-m2
         
     - name: Run build
       uses: GabrielBB/xvfb-action@v1
       with:
         run: mvn clean install --file warcraft-parent/pom.xml -U -Ppc
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B clean install
",,,Invalid,,Java
126,https://github.com/3dcitydb/importer-exporter,"name: impexp-build

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.4.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2.4.0

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.5093896713615024,0.7330725628420963,Valid,0.967741935483871,Java
127,https://github.com/kaklakariada/portmapper,"name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17]
    env:
      DEFAULT_JAVA: 17

    steps:

    - uses: actions/checkout@v4

    - name: Cache Gradle packages and wrapper
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-java-${{ matrix.java }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-java-${{ matrix.java }}-gradle

    - name: Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-java-${{ matrix.java }}-sonar
        restore-keys: ${{ runner.os }}-java-${{ matrix.java }}-sonar

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}

    - uses: gradle/wrapper-validation-action@v1
    
    - name: Build with Gradle
      run: ./gradlew build --warning-mode summary
    
    - name: Publish Test Report for Java ${{ matrix.java }}
      uses: scacap/action-surefire-report@v1
      if: ${{ always() && github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]' }}
      with:
        report_paths: '**/build/test-results/*/TEST-*.xml'
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Sonar analysis
      if: ${{ env.DEFAULT_JAVA == matrix.java && env.SONAR_TOKEN != null }}
      run: ./gradlew sonarqube -Dsonar.token=$SONAR_TOKEN --info --warning-mode=summary
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - name: Archive portmapper binary
      uses: actions/upload-artifact@v3
      if: ${{ env.DEFAULT_JAVA == matrix.java }}
      with:
        name: portmapper
        path: build/libs/portmapper-*-all.jar
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test
",,,Invalid,,Java
128,https://github.com/jetty-project/embedded-jetty-websocket-examples,"name: GitHub CI

on: [push, pull_request]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [11]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean install -e -B -V -fae ""-Dmaven.test.failure.ignore=true""

","name: Build and Test

on:
  push:
    branches:
      - '10.0.x'
  pull_request:
    branches:
      - '10.0.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run Tests
        run: mvn test",,,Invalid,,Java
129,https://github.com/jetty-project/embedded-jetty-jsp,"name: GitHub CI

on: [push, pull_request]

jobs:
  build:

    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [11]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'maven'

      - name: Build with Maven
        run: mvn clean install -e -B -V -fae ""-Dmaven.test.failure.ignore=true""

","name: Build and Test

on:
  push:
    branches: [ jetty-10.0.x ]
  pull_request:
    branches: [ jetty-10.0.x ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",0.08408408408408409,0.5795121531614126,Valid,0.3368421052631579,Java
130,https://github.com/clementine-player/android-remote,"name: ci
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        cd app
        ./gradlew build
",0.06779661016949153,0.4316329828848335,Valid,0.7894736842105263,Java
131,https://github.com/jenetics/jenetics,"name: Jenetics Build

on:
  push:
    branches:
      - master
      - releases/*
      - issues/*
  pull_request:
    branches:
      - master
      - releases/*

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        java-version: [ 17, 20 ]
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK ${{ matrix.java-version }} on ${{ matrix.os }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'zulu'
        cache: 'gradle'
    - name: Build with Gradle
      run: ./gradlew build --stacktrace --info
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
132,https://github.com/dlew/joda-time-android,"name: Android CI

on: [push, pull_request]

jobs:
  build:

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
133,https://github.com/akarnokd/ixjava,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ 1.x ]
  pull_request:
    branches: [ 1.x ]

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      CI_PULL_REQUEST: ${{ github.event.number }}
      JAVADOCS_TOKEN: ${{ secrets.JAVADOCS_TOKEN }} 
      CI_BUILD_NUMBER: ${{ github.run_number }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Grant execute permission for push
      run: chmod +x push.sh
    - name: Build with Gradle
      run: ./gradlew build javadoc --stacktrace
    - name: Upload to Codecov  
      uses: codecov/codecov-action@v1
    - name: Push Javadocs
      run: ./push.sh
","name: Build and Test

on:
  push:
    branches:
      - '1.x'
  pull_request:
    branches:
      - '1.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.21716101694915255,0.5118661094953499,Valid,0.5769230769230769,Java
134,https://github.com/abrensch/brouter,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    environment: BRouter
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    - name: Create local.properties
      run: touch local.properties
    - name: Setup keystore
      env:
        BROUTER_KEYSTORE_BASE64: ${{ secrets.BROUTER_KEYSTORE_BASE64 }}
      run: |
        echo $BROUTER_KEYSTORE_BASE64 | base64 -di > ${{ github.workspace }}/brouter.jks
    - name: Build with Gradle
      env:
        ORG_GRADLE_PROJECT_RELEASE_STORE_FILE: ${{ secrets.BROUTER_KEYSTORE_FILE }}
        ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS: ${{ secrets.BROUTER_KEY_ALIAS }}
        ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.BROUTER_KEY_PASSWORD }}
        ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.BROUTER_STORE_PASSWORD }}
      run: ./gradlew build
    - name: Upload ZIP
      uses: actions/upload-artifact@v3
      with:
        name: ZIP
        path: brouter-server/build/distributions/brouter-*.zip
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.16789087093389296,0.27046590880189036,Valid,0.967741935483871,Java
135,https://github.com/martinpaljak/globalplatformpro,"on:
  push:
    branches:
    - master
    - next
    tags:
    - 'v*'
  pull_request:
    branches:
    - master
name: Build robot
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 17, 20 ]
    name: Java ${{ matrix.java }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4.0.0
      - name: Setup java
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java }}
          distribution: temurin
          cache: maven
      - run: ./mvnw -B -U -T1C verify
      - name: Release
        if: startsWith(github.ref, 'refs/tags/v') && matrix.java == '11'
        id: create_release
        uses: softprops/action-gh-release@v0.1.15
        with:
          files: |
            tool/target/gp.jar
            tool/target/gp.exe
          fail_on_unmatched_files: true
          body: Release ${{ github.ref_name }}
          prerelease: true # manually promoted
      - name: Set SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}
      - name: Add known host key
        run: ssh-keyscan javacard.pro >> ~/.ssh/known_hosts
      - name: Deploy package
        if: (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/next' || github.ref == 'refs/heads/master') && matrix.java == '11'
        run: ./mvnw -B deploy
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.03419746276889134,0.25737089422811693,Valid,0.24384219972012966,Java
136,https://github.com/neuronrobotics/nrjavaserial,"name: Build
on:
  - push
  - pull_request

jobs:
  natives-linux-windows:
    name: Linux (x86/ARM/PPC) and Windows native library compilation
    runs-on: ubuntu-18.04

    defaults:
      run:
        working-directory: src/main/c

    steps:
      - name: Checkout the target branch
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Install build prerequisites
        run: |
          sudo apt update
          sudo make crosstools

      - name: Build the Linux and Windows native libraries
        run: |
          make clean-linux clean-windows
          make linux windows

      # The names of the artifacts containing native libraries correspond
      # exactly to the directories inside `src/main/c/resources/native`. That
      # way, the Java build job can pull down all artifacts and unpack them
      # into that directory to overwrite the versions in-repo. This is sadly
      # necessary because the actions/download-artifact@v2 action flattens
      # paths inside artifacts. If it retained full relative paths, we could
      # put Linux and Windows natives inside the same artifact, and we could be
      # flexible with the artifact names. But it doesn't, so we can't, and we
      # can't.
      - name: Upload Linux native libraries
        uses: actions/upload-artifact@v2
        with:
          name: linux
          path: src/main/c/resources/native/linux
      - name: Upload Windows native libraries
        uses: actions/upload-artifact@v2
        with:
          name: windows
          path: src/main/c/resources/native/windows

  natives-macos:
    name: macOS native library compilation
    runs-on: macos-10.15

    defaults:
      run:
        working-directory: src/main/c

    steps:
      - name: Checkout the target branch
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Build the macOS native libraries
        run: |
          make clean-osx
          make osx

      - name: Upload macOS native libraries
        uses: actions/upload-artifact@v2
        with:
          name: osx
          path: src/main/c/resources/native/osx/libNRJavaSerial.jnilib

  natives-freebsd:
    name: FreeBSD native library compilation
    runs-on: ubuntu-18.04
    container:
      image: empterdose/freebsd-cross-build:9.3
      env:
        JAVA_HOME: /usr/lib/jvm/default-jvm

    defaults:
      run:
        working-directory: src/main/c

    steps:
      - name: Checkout the target branch
        uses: actions/checkout@v2
      - name: Setup Java
        # This feels extremely dirty, but the only native header we care about
        # is `jni_md.h`, and it is exactly identical between Linux and FreeBSD
        # (at least in OpenJDK 8).
        run: |
          apk add openjdk8
          ln -s $JAVA_HOME/include/linux $JAVA_HOME/include/freebsd

      - name: Build the FreeBSD native libraries
        run: |
          make clean-freebsd
          settarget i386-freebsd9 make freebsd32
          settarget x86_64-freebsd9 make freebsd64

      - name: Upload FreeBSD native libraries
        uses: actions/upload-artifact@v2
        with:
          name: freebsd
          path: src/main/c/resources/native/freebsd

  java:
    name: Java compilation
    runs-on: ubuntu-18.04

    needs:
      - natives-linux-windows
      - natives-macos
      - natives-freebsd

    steps:
      # We use Spotless in “ratchet mode” to incrementally enforce code
      # formatting throughout the project. In order to ensure feature branches
      # don't regress formatting when compared with the master branch, we need
      # to have a local copy of the master branch for comparison.
      - name: Checkout the master branch
        uses: actions/checkout@v2
        with:
          ref: master
      - name: Checkout the target branch
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Download native libraries
        uses: actions/download-artifact@v2
        with:
          path: src/main/c/resources/native

      - name: Build the Java library
        run: ./gradlew build

      - name: Determine commit hash for artifact filename
        id: vars
        run: echo ""::set-output name=short-rev::$(git rev-parse --short HEAD)""
      - name: Upload build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: nrjavaserial-${{steps.vars.outputs.short-rev}}
          path: build/libs/*.jar
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.049843014128728415,0.08347168122958996,Valid,0.39372441096161287,Java
137,https://github.com/square/phrase,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: gradle/wrapper-validation-action@v1.0.4
    - name: set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'zulu'
        cache: gradle

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1.0.4

    - name: Build with Gradle
      run: |
        ./gradlew build
",,,Invalid,,Java
138,https://github.com/tomroush/pdfbox-android,"name: ""Android CI""

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build:
    name: Build & Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Source
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3.11.0
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Build & Test
        run: ./gradlew build test

  instrumentation-tests:
    name: Instrumentation Tests
    runs-on: macos-latest
    timeout-minutes: 30
    strategy:
      # Allow tests to continue on other devices if they fail on one device.
      fail-fast: false
      matrix:
        api-level:
          - 33

    steps:
      - name: Fetch Source
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3.11.0
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          script: adb logcat *:S TestRunner:V & ./gradlew connectedCheck --no-build-cache --no-daemon --stacktrace

  instrumentation-test-summary:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Instrumentation Test Matrix Summary
    needs: instrumentation-tests

    steps:
      - name: Check build matrix status
        if: ${{ needs.instrumentation-tests.result != 'success' }}
        run: exit 1

  publish-snapshot:
    name: Publish OSS Sonatype Snapshot
    runs-on: ubuntu-latest
    if: ""github.event_name == 'push'""
    needs:
      - build
      - instrumentation-test-summary

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure JDK
        uses: actions/setup-java@v3.11.0
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Upload Snapshot
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.07615658362989323,0.17235566797831361,Valid,0.4893382625677732,Java
139,https://github.com/wso2/carbon-kernel,"# This workflow will build the project on pull requests with tests
# Uses:
#   OS: ubuntu-latest
#   JDK: Adopt JDK 11

name: PR Builder

on:
  pull_request:
    branches:
      - 4.6.x
      - 4.7.x
      - 4.8.x
      - 4.9.x
  workflow_dispatch:

env:
  MAVEN_OPTS: -Xmx4g -Xms1g

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Adopt JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: ""11""
          distribution: ""adopt""
      - name: Cache local Maven repository
        id: cache-maven-m2
        uses: actions/cache@v2
        env:
          cache-name: cache-m2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.cache-name }}-
            ${{ runner.os }}-maven-
            ${{ runner.os }}-
      - name: Build with Maven
        run: mvn clean install -U -B
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B clean install

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
140,https://github.com/glowroot/glowroot,"name: Release
on:
  workflow_dispatch:

jobs:
  build:
    uses: ./.github/workflows/reusable-build.yml

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11 for build
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 11

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
            ~/.cache/bower
          key: release-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            release-

      - name: Check that no javascript snapshot dependencies are used
        run: |
          bower_snapshot_dependencies=$(grep -e ""trask.*#[0-9a-f]\{40\}"" ui/bower.json || true)
          
          if [[ $bower_snapshot_dependencies ]]; then
            echo
            echo you need to update bower.json with tagged revisions of forked javascript repos:
            echo
            echo ""$bower_snapshot_dependencies""
            echo
            echo ""note: when tagging forked javascript repos, first commit -m \""Update generated files\"" if necessary (e.g. needed for flot.tooltip)""
            exit 1
          fi

      - name: Set versions
        id: set-version
        run: |
          version=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec \
            | sed 's/-SNAPSHOT//')
          echo ""release-version=$version"" >> $GITHUB_OUTPUT

      - name: Set git user
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Update version and push to main
        env:
          VERSION: ${{ steps.set-version.outputs.release-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sed -ri ""s/glowroot-[0-9]+.[0-9]+.[0-9]+(-beta(\.[0-9]+)?)?-dist.zip/glowroot-$VERSION-dist.zip/g"" README.md
          sed -ri ""s#https://github.com/glowroot/glowroot/releases/download/v[0-9]+.[0-9]+.[0-9]+(-beta(\.[0-9]+)?)?/#https://github.com/glowroot/glowroot/releases/download/v$VERSION/#"" README.md

          mvn versions:set -DgenerateBackupPoms=false -DnewVersion=$VERSION

          git commit -a -m ""Release version $VERSION""
          git push origin

      - name: Install gpg secret key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo ""$GPG_PRIVATE_KEY"" | gpg --import --batch

      - name: Release
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        run: |
          # javadoc is needed here since deploy :glowroot-agent attaches the javadoc from :glowroot-agent-core
          mvn clean install -pl :glowroot-agent,:glowroot-central -am \
                            -Pjavadoc \
                            -DskipTests

          # gpg_key_id is needed for signing the rpm for the yum repository (see glowroot-central/pom.xml)
          gpg_key_id=$(gpg --list-keys --with-colons | grep ^pub | cut -d':' -f5 | tail -c 8)
          mvn clean deploy -pl :glowroot-parent,:glowroot-agent-api,:glowroot-agent-plugin-api,:glowroot-agent-it-harness,:glowroot-agent,:glowroot-central \
                           -Pjavadoc \
                           -Prelease \
                           -Dglowroot.build.commit=$(git rev-parse HEAD) \
                           -DskipTests \
                           -Dgpg.key.id=$gpg_key_id \
                           --settings .github/scripts/settings.xml

      - name: Create GitHub release
        env:
          VERSION: ${{ steps.set-version.outputs.release-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cp agent/dist/target/glowroot-agent-$VERSION-dist.zip glowroot-$VERSION-dist.zip
          cp central/target/glowroot-central-$VERSION-dist.zip glowroot-central-$VERSION-dist.zip
          cp central/target/glowroot-central-$VERSION-dist.war glowroot-central-$VERSION-dist.war
          if [[ $VERSION == *-beta* ]]; then
            prerelease_option=--prerelease
          fi
          gh release create --target $GITHUB_REF_NAME \
                            --title ""Version $VERSION"" \
                            --generate-notes \
                            $prerelease_option \
                            --draft \
                            v$VERSION \
                            glowroot-$VERSION-dist.zip \
                            glowroot-central-$VERSION-dist.zip \
                            glowroot-central-$VERSION-dist.war

      - name: Update glowroot-central Docker Hub image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ steps.set-version.outputs.release-version }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker build -t glowroot/glowroot-central:$VERSION .
          docker push glowroot/glowroot-central:$VERSION
          if [[ $VERSION != *-beta* ]]; then
            docker tag glowroot/glowroot-central:$VERSION glowroot/glowroot-central:latest
            docker push glowroot/glowroot-central:latest
          fi
        working-directory: central

      - name: Update glowroot-central yum repository
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws s3 sync central/target/yum s3://glowroot.org/yum

      - uses: actions/checkout@v3
        with:
          repository: ${{github.repository}}.wiki

      - name: Set git user
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - name: Update wiki links to downloads
        env:
          VERSION: ${{ steps.set-version.outputs.release-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ $VERSION != *-beta* ]]; then
            sed -ri ""s/glowroot-[0-9]+.[0-9]+.[0-9]+-dist/glowroot-$VERSION-dist/g"" ""Agent-Installation-(with-Embedded-Collector).md""
            sed -ri ""s#https://github.com/glowroot/glowroot/releases/download/v[0-9]+.[0-9]+.[0-9]+/#https://github.com/glowroot/glowroot/releases/download/v$VERSION/#"" ""Agent-Installation-(with-Embedded-Collector).md""

            sed -ri ""s/glowroot-[0-9]+.[0-9]+.[0-9]+-dist/glowroot-$VERSION-dist/g"" ""Agent-Installation-(for-Central-Collector).md""
            sed -ri ""s#https://github.com/glowroot/glowroot/releases/download/v[0-9]+.[0-9]+.[0-9]+/#https://github.com/glowroot/glowroot/releases/download/v$VERSION/#"" ""Agent-Installation-(for-Central-Collector).md""

            sed -ri ""s/glowroot-central-[0-9]+.[0-9]+.[0-9]+-dist/glowroot-central-$VERSION-dist/g"" Central-Collector-Installation.md
            sed -ri ""s#https://github.com/glowroot/glowroot/releases/download/v[0-9]+.[0-9]+.[0-9]+/#https://github.com/glowroot/glowroot/releases/download/v$VERSION/#"" Central-Collector-Installation.md
            sed -ri ""s#glowroot/glowroot-central:[0-9]+.[0-9]+.[0-9]+#glowroot/glowroot-central:$VERSION#g"" Central-Collector-Installation.md

            sed -ri ""s#https://github.com/glowroot/glowroot/blob/v[0-9]+.[0-9]+.[0-9]+/central/src/main/resources/jgroups-#https://github.com/glowroot/glowroot/blob/v$VERSION/central/src/main/resources/jgroups-#g"" Central-Collector-Cluster.md

            git commit -a -m ""Release version $VERSION""
            git push origin
          fi
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn clean install

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
141,https://github.com/dice-group/palmetto,"# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Maven Build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test-lib:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Compile project
      run: mvn clean compile -DskipTests=true -Dmaven.javadoc.skip=true -B -V
      working-directory: palmetto
    - name: Run tests
      run: mvn jacoco:prepare-agent package -Dmaven.javadoc.skip=true -B jacoco:report
      working-directory: palmetto 
    - name: Upload test results to Codacy
      run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r palmetto/target/site/jacoco/jacoco.xml
      env: 
        CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  build-demo:
    needs: test-lib
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: install library
      run: mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
      working-directory: palmetto
    - name: Compile project
      run: mvn clean compile -DskipTests=true -Dmaven.javadoc.skip=true -B -V
      working-directory: webApp
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file ./palmetto/pom.xml

    - name: Run tests
      run: mvn test --file ./palmetto/pom.xml",,,Invalid,,Java
142,https://github.com/wallabag/android-app,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12'

    - name: Cache Gradle
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.5924242424242424,0.8439786019256665,Valid,0.967741935483871,Java
143,https://github.com/ferstl/depgraph-maven-plugin,"name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]
    steps:
      - uses: actions/checkout@v2
      - name: Install graphviz
        run: sudo apt-get install graphviz
      - name: Set up JDK ${{ matrix.Java }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.Java }}
          distribution: 'zulu'
          cache: maven
      - name: Maven Build
        run: mvn clean install javadoc:javadoc

  post-build:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install graphviz
        run: sudo apt-get install graphviz
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'
          cache: maven
      - name: Coveralls Report
        run: mvn org.jacoco:jacoco-maven-plugin:prepare-agent test org.jacoco:jacoco-maven-plugin:report org.eluder.coveralls:coveralls-maven-plugin:report -DrepoToken=${{ secrets.COVERALLS_TOKEN }}
","name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run tests
      run: mvn test --file pom.xml",,,Invalid,,Java
144,https://github.com/p3pp3rf1y/ancientwarfare2,"name: Mod Build

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
    - name: Build with Gradle
      run: |
        ./gradlew clean
        ./gradlew setupCIWorkspace
        ./gradlew build
    - name: Publish to Github Packages
      env:
        GPR_USER: ${{ secrets.GPR_USER }}
        GPR_API_KEY: ${{ secrets.GPR_TOKEN }}
      run: ./gradlew build publish --stacktrace
    - name: Code Quality
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: ./gradlew -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=p3pp3rf1y-github sonarqube
      
","name: Build and Test

on:
  push:
    branches:
      - '1.12.x'
  pull_request:
    branches:
      - '1.12.x'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Test with Gradle
        run: |
          ./gradlew test",0.36989591673338673,0.5003071443377154,Valid,0.5017948717948718,Java
145,https://github.com/spring-guides/gs-consuming-web-service,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
146,https://github.com/lessthanoptimal/ejml,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI

on:
  push:
    branches: [ SNAPSHOT ]
  pull_request:
    branches: [ SNAPSHOT ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: 17
        java-package: jdk
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Spotless Check
      run: ./gradlew spotlessJavaCheck
    - name: Auto Generate Code
      run: ./gradlew autogenerate
    - name: Gradle Assemble
      run: ./gradlew assemble
    - name: Unit Tests
      run: ./gradlew test
","name: Build and Test

on:
  push:
    branches: [$SNAPSHOT]
  pull_request:
    branches: [$SNAPSHOT]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Run Tests
        run: |
          ./gradlew test",,,Invalid,,Java
147,https://github.com/osmdroid/osmdroid,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  BuildAndTest:
    name: Build and Test on JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java_version: [11]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}
      - name: Install Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      - name: Build project
        run: ./gradlew build
      - name: Archive UnitTest report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: UnitTest-report
          path: ${{ github.workspace }}/**/build/reports/tests/testDebugUnitTest
  Espresso:
    runs-on: macOS-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Install Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.1.2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
      - name: Run instrumentation tests
        uses: malinskiy/action-android/emulator-run-cmd@release/0.1.2
        with:
          cmd: ./gradlew clean build connectedCheck
          api: 28
          tag: default
          abi: x86
      - name: Archive Espresso results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Espresso-report
          path: ./**/build/reports/androidTests/connected","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Build with Gradle
      run: |
        ./gradlew build
    - name: Run Tests
      run: |
        ./gradlew test",0.10474485228290063,0.2173810917491802,Valid,0.6202613045440774,Java
148,https://github.com/cucumber/cucumber-java-skeleton,"name: Cucumber CI

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: build-${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            build-${{ runner.os }}-maven-
      - uses:
          AdoptOpenJDK/install-jdk@v1
        with:
          version: '11'
      - name: test maven
        run: |
          cd maven
          ./mvnw test -Dmaven.test.failure.ignore
      - run: grep -q ""The step 'I wait 1 hour' and 1 other step(s) are undefined."" maven/target/surefire-reports/io.cucumber.skeleton.RunCucumberTest.txt || ( echo ""mvn test didn't fail as expected"" && false )
      - name: test gradle
        run: |
          cd gradle
          ./gradlew test || true
      - run: grep -q ""The step 'I wait 1 hour' and 1 other step(s) are undefined."" gradle/build/reports/tests/test/classes/io.cucumber.skeleton.RunCucumberTest.html  || ( echo ""gradle test didn't fail as expected"" && false )
      - name: compare gradle and maven sources
        run: diff gradle/src maven/src
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Cache Maven dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file ./maven/pom.xml

    - name: Test with Maven
      run: mvn test --file ./maven/pom.xml",0.0649746192893401,0.4444963746217113,Valid,0.26094248884018245,Java
149,https://github.com/touk/sputnik,"name: Build pull request
on:
  pull_request:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8
      - name: Build project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          ./gradlew build jacocoTestReport
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test
",0.08,0.5644339555465323,Valid,0.6530612244897959,Java
150,https://github.com/libgdx/box2dlights,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build
        run: ./gradlew build
      - name: Upload debug apk
        uses: actions/upload-artifact@v2
        with:
          name: snapshots-jars
          path: '**/build/libs/'","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.43010752688172044,0.5128117536808704,Valid,0.967741935483871,Java
151,https://github.com/fabric8io/docker-maven-plugin,"name: E2E Tests

env:
  MAVEN_ARGS: -B -C -V -ntp -Dhttp.keepAlive=false -e

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 1 * * *' # Every day at 1

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ci-e2e-docker-maven-plugin-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Linux Java ${{ matrix.java }} Maven
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install Docker Maven Plugin
        run: mvn ${MAVEN_ARGS} clean install -DskipTests -Djacoco.skip=true
      - name: Run Integration tests
        run: |
          cd it/
          mvn clean install
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",0.055517002081887576,0.385582422198413,Valid,0.38666666666666666,Java
152,https://github.com/netflix/dyno,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.360022714366837,0.49288127401862264,Valid,0.75,Java
153,https://github.com/glazedlists/glazedlists,"name: Java CI

on: [push]

jobs:
  build:
    env:
      DISPLAY: :1
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        java: [1.8, 11]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
        java-package: jdk+fx
    - name: Install and start window manager (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install xvfb
        sudo apt-get install metacity
        Xvfb :1 &
        sleep 5
        metacity --sm-disable --replace 2> metacity.err &
      if: matrix.os == 'ubuntu-latest'
    - name: Build with Gradle (Linux)
      run: ./gradlew build
      if: matrix.os == 'ubuntu-latest'
    - name: Build with Gradle (Windows)
      run: ./gradlew build -PexcludeTests=**/CTPConnectionTest*
      shell: bash
      if: matrix.os == 'windows-latest'
    - name: Build with Gradle (MacOS)
      run: ./gradlew build -x :extensions:swt:test
      if: matrix.os == 'macos-latest'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.06229720960415315,0.3258426871498176,Valid,0.6514576505088839,Java
154,https://github.com/bytedeco/javacv,"name: javacv
on: [push, pull_request, workflow_dispatch]
env:
  CI_DEPLOY_MODULE: .
  CI_DEPLOY_PLATFORM: ${{ github.job }}
  CI_DEPLOY_SETTINGS: ${{ secrets.CI_DEPLOY_SETTINGS }}
  CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
  CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
  STAGING_REPOSITORY: ${{ secrets.STAGING_REPOSITORY }}
jobs:
  linux-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
      - uses: mxschmitt/action-tmate@v3.5
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          sudo: false
  macosx-x86_64:
    runs-on: macos-11
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-macosx@actions
      - uses: mxschmitt/action-tmate@v3.5
        if: ${{ github.event_name == 'workflow_dispatch' }}
  windows-x86_64:
    runs-on: windows-2019
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-windows@actions
      - uses: mxschmitt/action-tmate@v3.5
        if: ${{ github.event_name == 'workflow_dispatch' }}
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run Tests
        run: mvn test",,,Invalid,,Java
155,https://github.com/bytedeco/javacpp,"name: javacpp
on: [push, pull_request, workflow_dispatch]
env:
  CI_DEPLOY_MODULE: .
  CI_DEPLOY_OPTIONS: -Dmaven.javadoc.skip -Dmaven.test.skip -Dinvoker.skip
  CI_DEPLOY_PLATFORM: ${{ github.job }}
  CI_DEPLOY_SETTINGS: ${{ secrets.CI_DEPLOY_SETTINGS }}
  CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
  CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
  STAGING_REPOSITORY: ${{ secrets.STAGING_REPOSITORY }}
jobs:
#  android-arm:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  android-arm64:
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
#  android-x86:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  android-x86_64:
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  ios-arm64:
    runs-on: macos-11
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-macosx@actions
  ios-x86_64:
    runs-on: macos-11
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-macosx@actions
#  linux-armhf:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  linux-arm64:
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  linux-ppc64le:
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
#  linux-x86:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  linux-x86_64:
    runs-on: ubuntu-20.04
    env:
      CI_DEPLOY_OPTIONS: """" # to not skip tests
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu@actions
  macosx-arm64:
    runs-on: macos-11
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-macosx@actions
  macosx-x86_64:
    runs-on: macos-11
    env:
      CI_DEPLOY_OPTIONS: """" # to not skip tests
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-macosx@actions
#  windows-x86:
#    runs-on: windows-2019
#    steps:
#      - uses: bytedeco/javacpp-presets/.github/actions/deploy-windows@actions
  windows-x86_64:
    runs-on: windows-2019
    env:
      CI_DEPLOY_OPTIONS: """" # to not skip tests
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/deploy-windows@actions
  redeploy:
#    needs: [android-arm, android-arm64, android-x86, android-x86_64, ios-arm64, ios-x86_64, linux-armhf, linux-arm64, linux-ppc64le, linux-x86, linux-x86_64, macosx-arm64, macosx-x86_64, windows-x86, windows-x86_64]
    needs: [android-arm64, android-x86_64, ios-arm64, ios-x86_64, linux-arm64, linux-ppc64le, linux-x86_64, macosx-arm64, macosx-x86_64, windows-x86_64]
    runs-on: ubuntu-20.04
    steps:
      - uses: bytedeco/javacpp-presets/.github/actions/redeploy@actions
","name: JavaCPP Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Valid,,Java
156,https://github.com/bladecoder/bladecoder-adventure-engine,"name: Run Gradle build on push

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-          
      - name: Build with Gradle
        run: ./gradlew build
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties        ","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.46854403834631514,0.5589425736223638,Valid,0.967741935483871,Java
157,https://github.com/wso2/charon,"# This workflow will build the project on pull requests with tests
# Uses:
#   OS: ubuntu-latest
#   JDK: Adopt JDK 8

name: PR Builder

on:
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  MAVEN_OPTS: -Xmx4g -Xms1g

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Adopt JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: ""8""
          distribution: ""adopt""
      - name: Cache local Maven repository
        id: cache-maven-m2
        uses: actions/cache@v2
        env:
          cache-name: cache-m2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ env.cache-name }}-
            ${{ runner.os }}-maven-
            ${{ runner.os }}-
      - name: Build with Maven
        run: mvn clean install -U -B
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",,,Invalid,,Java
158,https://github.com/open-keychain/openpgp-api,"name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Publish release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build project
        run: ./gradlew build
        env:
          VERSION: ${{ github.ref }}
      - run: |
          assetsAAR=$(find . -name *release.aar | while read -r asset ; do echo ""-a $asset"" ; done)
          VERSION=$(echo $VERSION | cut -d'/' -f3)
          assetsJAR=$(find . -name *${VERSION}*.jar | while read -r asset ; do echo ""-a $asset"" ; done)
          tag_name=""${GITHUB_REF##*/}""
          hub release create ${assetsAAR} ${assetsJAR} -m ""$tag_name"" ""$tag_name""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ github.ref }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.24111498257839722,0.35144042786606194,Valid,0.967741935483871,Java
159,https://github.com/spring-guides/gs-producing-web-service,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Maven
      run: mvn -B package --file complete/pom.xml

    - name: Run Tests
      run: mvn test --file complete/pom.xml",,,Invalid,,Java
160,https://github.com/tectonicus/tectonicus,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.34935304990757854,0.58739621319082,Valid,0.967741935483871,Java
161,https://github.com/wso2/product-apim,"name: APIM builder

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    branches:
      - master
concurrency:
  group: ${{ github.event.number }}
  cancel-in-progress: true
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - id: 1
            segment: group1
          - id: 2
            segment: group2
      fail-fast: false
    steps:
    - name: Run hostname
      run: hostname
    - name: Fix host entry
      run: sudo echo ""127.0.0.1 $(hostname)"" | sudo tee -a /etc/hosts
    - name: Show hosts
      run: cat /etc/hosts
    - name: Checkout master
      uses: actions/checkout@v3
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2
        restore-keys: ${{ runner.os }}-m2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11.0.16+8
        distribution: 'temurin'
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Build product-apim with Test.
      run: mvn clean install --file pom.xml -DskipBenchMarkTest=true
      env:
        PRODUCT_APIM_TEST_GROUPS: ${{ matrix.segment }}
    - name: Prepare upload testng report
      if: always()
      run: mv modules/integration/tests-integration/tests-backend/target/surefire-reports/TEST-TestSuite.xml TEST-TestSuite_${{ matrix.id }}.xml
    - name: Archive testng report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: TEST-TestSuite_${{ matrix.id }}
        path: |
          TEST-TestSuite_${{ matrix.id }}.xml
        if-no-files-found: warn
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        flags: integration_tests
  run-benchmark-test:
    runs-on: ubuntu-latest
    steps:
      - name: Run hostname
        run: hostname
      - name: Fix host entry
        run: sudo echo ""127.0.0.1 $(hostname)"" | sudo tee -a /etc/hosts
      - name: Show hosts
        run: cat /etc/hosts
      - name: Checkout master
        uses: actions/checkout@v3
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
          restore-keys: ${{ runner.os }}-m2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11.0.16+8
          distribution: 'temurin'
      - uses: actions/setup-node@v3
        with:
          node-version: '10.x'
      - name: Build product-apim with Test.
        run: mvn clean install --file pom.xml -DskipIntegrationTests=true
  show-report:
    if: ${{ always() && !cancelled() }}
    needs: build
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: reports
      - name: Publish Test Report
        if: always()
        uses: malinthaprasan/action-surefire-report@v1
        with:
          report_paths: 'reports/**/TEST-*.xml'
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test",0.11376896149358226,0.12772462553501562,Valid,0.4326952286801283,Java
162,https://github.com/jetbrains/idea-gitignore,"# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.03535297387437465,0.07290181753114197,Valid,0.464125283534196,Kotlin
163,https://github.com/osiegmar/fastcsv,"name: build

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - '**/*.md'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '20'
    - uses: gradle/wrapper-validation-action@v1
    - uses: gradle/gradle-build-action@v2
    - name: Build with Gradle
      run: ./gradlew build --warning-mode all
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: ${{ !cancelled() }}
      with:
        report_paths: 'build/test-results/**/TEST-*.xml'
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./build/reports/jacoco/test/jacocoTestReport.xml
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      uses: actions/gradle/gradle-build-action@v2
      with:
        arguments: build

    - name: Run Tests
      run: |
        ./gradlew test
",0.03508771929824561,0.4996015998537625,Valid,0.5759224902082045,Java
164,https://github.com/jamesagnew/hapi-fhir,"name: mvn spotless:check (Formatting)


on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  format-check:
    runs-on: ubuntu-latest
    permissions:
       pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: spotless:check
        run: mvn spotless:check
      -  uses: mshick/add-pr-comment@v2
         if: always()
         with:
            message-success: |
               Formatting check succeeded!
            message-failure: |
               **This Pull Request has failed the formatting check**
               
               Please run `mvn spotless:apply` or `mvn clean install -DskipTests` to fix the formatting issues. 
               
               You can automate this auto-formatting process to execute on the git pre-push hook, by installing [pre-commit](https://pre-commit.com/) and then calling `pre-commit install --hook-type pre-push`. This will cause formatting to run automatically whenever you push. 
               
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Run Tests
      run: mvn test --file pom.xml",,,Invalid,,Java
165,https://github.com/alfresco/alfresco-sdk,"name: Alfresco SDK CI

on:
  pull_request:
    branches:
      - master
      - fix/**
      - feature/**
      - sdk-4.5
  push:
    branches:
      - master
      - fix/**
      - feature/**
      - sdk-4.5
  workflow_dispatch:

env:
  MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
  MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
  MAVEN_CENTRAL_USERNAME: ${{ secrets.OSS_SONATYPE_USERNAME }}
  MAVEN_CENTRAL_PASSWORD: ${{ secrets.OSS_SONATYPE_PASSWORD }}
  MAVEN_CLI_OPTS: ""-B -q -e -fae -V -DinstallAtEnd=true -U""

jobs:
  pre_commit:
    runs-on: ubuntu-latest
    steps:
      - uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@v1.35.0

  build:
    name: ""Build application""
    runs-on: ubuntu-latest
    needs: [pre_commit]
    if: ""!contains(github.event.head_commit.message, '[skip tests]')""
    steps:
      - uses: actions/checkout@v3
      - uses: Alfresco/alfresco-build-tools/.github/actions/setup-java-build@v1.35.0
      - name: ""Build""
        run: mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
      - name: ""Verify""
        run: mvn $MAVEN_CLI_OPTS verify -Dlogging.root.level=off -Dspring.main.banner-mode=off

  tests:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: [build]
    if: >
      !(failure() || cancelled()) &&
      !contains(github.event.head_commit.message, '[skip tests]')
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ""current version Java 17""
            java-version: 17
          - name: ""23.1 Enterprise Java 17""
            java-version: 17
            suite: -Penterprise-231-tests
          - name: ""23.1 Community Java 17""
            java-version: 17
            suite: -Pcommunity-231-tests
          - name: ""7.4 Enterprise Java 17""
            java-version: 17
            suite: -Penterprise-74-tests
          - name: ""7.4 Community Java 17""
            java-version: 17
            suite: -Pcommunity-74-tests
          - name: ""7.4 Enterprise Java 11""
            java-version: 11
            suite: -Penterprise-74-tests
          - name: ""7.4 Community Java 11""
            java-version: 11
            suite: -Pcommunity-74-tests
          - name: ""7.3 Enterprise Java 17""
            java-version: 17
            suite: -Penterprise-73-tests
          - name: ""7.3 Community Java 17""
            java-version: 17
            suite: -Pcommunity-73-tests
          - name: ""7.3 Enterprise Java 11""
            java-version: 11
            suite: -Penterprise-73-tests
          - name: ""7.3 Community Java 11""
            java-version: 11
            suite: -Pcommunity-73-tests
          - name: ""7.2 Enterprise""
            java-version: 11
            suite: -Penterprise-72-tests
          - name: ""7.2 Community""
            java-version: 11
            suite: -Pcommunity-72-tests
          - name: ""7.1 Enterprise""
            java-version: 11
            suite: -Penterprise-71-tests
          - name: ""7.1 Community""
            java-version: 11
            suite: -Pcommunity-71-tests
          - name: ""7.0 Enterprise""
            java-version: 11
            suite: -Penterprise-70-tests
          - name: ""7.0 Community""
            java-version: 11
            suite: -Pcommunity-70-tests
    steps:
      - uses: actions/checkout@v3
      - uses: Alfresco/alfresco-build-tools/.github/actions/get-build-info@v1.35.0
      - uses: Alfresco/alfresco-build-tools/.github/actions/setup-java-build@v1.35.0
        with:
          java-version: ${{ matrix.java-version }}
      - name: ""Login to Docker Hub""
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: ""Login to Quay.io""
        uses: docker/login-action@v2.1.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: ""Build""
        run: mvn clean install -B ${{ matrix.suite }}

  publish:
    name: ""Publish artifacts""
    runs-on: ubuntu-latest
    needs: [tests]
    if: >
      !(failure() || cancelled()) &&
      github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: Alfresco/alfresco-build-tools/.github/actions/setup-java-build@v1.35.0
      - name: ""Build""
        run: mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
      - name: ""Publish""
        run: mvn $MAVEN_CLI_OPTS deploy -DskipTests","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn clean install

    - name: Run Tests
      run: mvn test",0.01837484687627603,0.08074085129902667,Valid,0.40056141540969087,Java
166,https://github.com/jakewharton/byteunits,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test
",0.05977907732293697,0.3165403687310729,Valid,0.967741935483871,Kotlin
167,https://github.com/openmrs/openmrs-contrib-android-client,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
    types:
      - opened
      - synchronize

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew buildDebug
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.41967871485943775,0.7118174086338395,Valid,0.8333333333333334,Kotlin
168,https://github.com/alfio-event/alf.io,"name: ""Code scanning - action""

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

jobs:
  CodeQL-Build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
      
    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      # Override language selection by uncommenting this and choosing your languages
      # with:
      #   languages: go, javascript, csharp, python, cpp, java

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
          java-version: 17
          distribution: temurin
    
    - name: Build with Gradle
      run: ./gradlew build -x test

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install dependencies
      run: |
        npm install
        npm install -g @angular/cli
        npm install -g @babel/core
        npm install -g @babel/preset-env
        npm install -g @istanbuljs/load-nyc-config

    - name: Build the application
      run: |
        npm run build
        ng build

    - name: Test the application
      run: |
        npm test
        ng test",,,Invalid,,Java
169,https://github.com/apache/ranger,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 8
      uses: actions/setup-java@v3
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install --no-transfer-progress -B -V 
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Run Tests
        run: mvn test --file pom.xml",,,Invalid,,Java
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.0343015214384509,0.12090744727687362,Valid,0.6330497946351605,Kotlin
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: |
          npm install

      - name: Build
        run: |
          npm run build

      - name: Test
        run: |
          npm test",0.2847754654983571,0.342137491971615,Valid,0.2247191011235955,TypeScript
172,https://github.com/melix/japicmp-gradle-plugin,"name: Gradle Build

on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  gradle:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        jdk: [ 8, 11, 17, 20 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.jdk }}
      - uses: gradle/gradle-build-action@v2
      - name: Build
        run: ./gradlew build ""-Pme.champeau.japicmp.javaToolchain.test=${{ matrix.jdk }}""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      uses: actions/gradle/gradle-build-action@v2
      with:
        arguments: 'build'

    - name: Run Tests
      run: |
        ./gradlew test",0.13006597549481622,0.6325000001686538,Valid,0.6039405571293166,Java
173,https://github.com/fornwall/jelf,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [8, 11, 17]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download actionlint
        id: get_actionlint
        run: bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
      - name: Check workflow files
        run: ${{ steps.get_actionlint.outputs.executable }} -color
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
174,https://github.com/tonihele/openkeeper,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build
    - uses: actions/upload-artifact@v3
      with:
        name: distribution
        path: build/distributions/OpenKeeper.zip
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.4575971731448763,0.5661935141127171,Valid,0.967741935483871,Java
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.17239225484072454,0.3078282298591698,Valid,0.30612244897959184,Kotlin
176,https://github.com/teamlapen/vampirism,"name: Gradle Build

on:
  push:
    branches:
      - 'dev'
      - '1.20*'
      - 'feature/*'
  pull_request:
    branches:
      - 'dev'
      - '1.20*'
      - 'feature/*'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup Java JDK
        uses: actions/setup-java@v3.1.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: 'gradle'
      - name: Setup Gradle
        run: ./gradlew
      - name: Build
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ $1.20 ]
  pull_request:
    branches: [ $1.20 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'
    - name: Build with Gradle
      run: |
        ./gradlew build
    - name: Run Tests
      run: |
        ./gradlew test",0.35403726708074534,0.6547824112822314,Valid,0.967741935483871,Java
177,https://github.com/kshoji/ble-midi-for-android,"name: Android CI

on:
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
178,https://github.com/haehnchen/idea-php-laravel-plugin,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action
#
## JBIJPPTPL

name: Build
on: [push, pull_request]
jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.3

  # Run verifyPlugin and test Gradle tasks
  test:
    name: Test
    needs: gradleValidation
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - platform: '2019.1.3'
            phpPlugin: '191.7141.52'
            bladePlugin: '191.7141.5'
            experimental: true
          - platform: '2018.3.5'
            phpPlugin: '183.4886.46'
            bladePlugin: '183.3795.24'
            experimental: false
    env:
      ORG_GRADLE_PROJECT_platformVersion: ${{ matrix.platform }}
      ORG_GRADLE_PROJECT_phpPluginVersion: ${{ matrix.phpPlugin }}
      ORG_GRADLE_PROJECT_bladePluginVersion: ${{ matrix.bladePlugin }}
    steps:

      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Cache Gradle dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle', 'gradle.properties') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Run detekt, ktlint and tests
      - name: Run Linters and Test
        run: ./gradlew check

      # Run verifyPlugin Gradle task
      - name: Verify Plugin
        run: ./gradlew verifyPlugin

  # Build plugin with buildPlugin Gradle task and provide the artifact for the next workflow jobs
  # Requires test job to be passed
  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      matrix:
        include:
          - platform: '2018.3.5'
            phpPlugin: '183.4886.46'
            bladePlugin: '183.3795.24'
            experimental: false
    env:
      ORG_GRADLE_PROJECT_platformVersion: ${{ matrix.platform }}
      ORG_GRADLE_PROJECT_phpPluginVersion: ${{ matrix.phpPlugin }}
      ORG_GRADLE_PROJECT_bladePluginVersion: ${{ matrix.bladePlugin }}
    outputs:
      name: ${{ steps.properties.outputs.name }}
      version: ${{ steps.properties.outputs.version }}
      artifact: ${{ steps.properties.outputs.artifact }}
    steps:

      # Setup Java 1.8 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2

      # Cache Gradle Dependencies
      - name: Setup Gradle Dependencies Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle', '**/*.gradle', 'gradle.properties') }}

      # Cache Gradle Wrapper
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      # Build artifact using buildPlugin Gradle task
      - name: Build Plugin
        run: ./gradlew buildPlugin

      # Upload plugin artifact to make it available in the next jobs
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: plugin-artifact
          path: ./build/distributions/${{ steps.properties.outputs.artifact }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Test with Gradle
      run: |
        ./gradlew test",0.09596713965646005,0.12786255296876434,Valid,0.7847157502329916,Java
179,https://github.com/netflix/raigad,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",0.3628066172276098,0.48572936657394783,Valid,0.75,Java
180,https://github.com/reactivex/rxandroid,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1.1.0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - run: ./gradlew build

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/3.x' && github.repository == 'ReactiveX/RxAndroid' }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_USER }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_PASSWORD }}
","name: Build and Test

on:
  push:
    branches:
      - '3.x'
  pull_request:
    branches:
      - '3.x'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Validate Gradle Wrapper
      uses: actions/gradle/wrapper-validation-action@v1.1.0

    - name: Build with Gradle
      run: |
        ./gradlew build
",0.032534246575342464,0.5307878485837288,Valid,0.967741935483871,Java
181,https://github.com/don/cordova-plugin-ble-central,"name: Capacitor

on:
  workflow_dispatch:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

jobs:
  capacitor-android:
    name: android@${{ matrix.capacitor }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - jdk: 17
            capacitor: latest
            node: 18.x
          - jdk: 11
            capacitor: 4
            node: 14.x

    steps:
      - uses: actions/checkout@v3
      - name: set up JDK ${{ matrix.jdk }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Build test app
        run: |
          mkdir temp
          cd temp
          mkdir www
          touch www/index.html
          npm init -y
          npm install ..
          npm install @capacitor/cli@${{ matrix.capacitor }} @capacitor/core@${{ matrix.capacitor }} @capacitor/android@${{ matrix.capacitor }}
          npx cap init test io.test.app
          npx cap add android
          npx cap sync android
          cd android
          chmod +x gradlew
          ./gradlew build

  capacitor-ios:
    name: ios@${{ matrix.capacitor }}
    runs-on: macos-latest

    strategy:
      matrix:
        include:
          - capacitor: latest
            node: 18.x

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Build test app
        run: |
          mkdir temp
          cd temp
          mkdir www
          touch www/index.html
          npm init -y
          npm install ..
          npm install @capacitor/cli@${{ matrix.capacitor }} @capacitor/core@${{ matrix.capacitor }} @capacitor/ios@${{ matrix.capacitor }}
          npx cap init test io.test.app
          npx cap add ios
          npx cap sync ios
          cd ios
          xcodebuild -workspace App/App.xcworkspace -scheme CapacitorCordova -configuration Debug -sdk iphonesimulator -destination ""platform=iOS Simulator,name=iPhone 14 Pro Max""
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Test
      run: npm test",0.08205893323386795,0.17876709565981067,Valid,0.05665841680380444,Java
182,https://github.com/instantwebp2p/node-android,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.14386459802538787,0.47335207706208293,Valid,0.967741935483871,Java
183,https://github.com/apache/hadoop,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: website

# Controls when the action will run.
on:
  push:
    branches: [ trunk ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Hadoop trunk
        uses: actions/checkout@v3
        with:
          repository: apache/hadoop
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build Hadoop maven plugins
        run: cd hadoop-maven-plugins && mvn --batch-mode install
      - name: Build Hadoop
        run: mvn clean install -DskipTests -DskipShade
      - name: Build document
        run: mvn clean site
      - name: Stage document
        run: mvn site:stage -DstagingDirectory=${GITHUB_WORKSPACE}/staging/
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./staging/hadoop-project
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

","name: Build and Test

on:
  push:
    branches: [$trunk]
  pull_request:
    branches: [$trunk]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Set up Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '14'

    - name: Install Maven dependencies
      run: mvn -B dependency:go-offline

    - name: Install npm dependencies
      run: npm install

    - name: Build the application
      run: mvn -B package -DskipTests

    - name: Run tests
      run: mvn test",0.15228426395939088,0.24982267865510466,Valid,0.4684495411505522,Java
184,https://github.com/btraceio/btrace,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: BTrace CI/CD

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Checkout
        uses: actions/checkout@v4
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build
        run: ./gradlew build
      - name: Upload build data
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: |
            btrace-dist/build
      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            **/reports/**/*

  test:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        java: [ 8, 11, 17, 20 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Set up Java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Download build data
        uses: actions/download-artifact@v3
        with:
          name: build
          path: btrace-dist/build
      - name: Run tests
        run: |
          ./gradlew -Pintegration :integration-tests:test
      - name: Integration test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-reports
          path: |
            integration-tests/build/reports/**/*
      - name: Archive binary artifacts
        uses: actions/upload-artifact@v3
        with:
          if: success()
          name: btrace-dist
          path: |
            btrace-dist/build/distributions/**/btrace-*-bin*.tar.gz

  publish:
    if: github.ref ==  'refs/heads/develop' || github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Download build data
      uses: actions/download-artifact@v3
      with:
        name: build
    - name: Deploy Maven
      run: ./gradlew -x test :btrace-dist:publish
      env:
        GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
        GPG_SIGNING_PWD: ${{ secrets.GPG_SIGNING_PWD }}
        BTRACE_SONATYPE_USER: ${{ secrets.BTRACE_SONATYPE_USER }}
        BTRACE_SONATYPE_PWD: ${{ secrets.BTRACE_SONATYPE_PWD }}

  cleanup:
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Cleanup temporary artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: build
","name: Build and Test

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Run Tests
        run: |
          ./gradlew test",0.0994332818134982,0.12928306328442732,Valid,0.5683533597424492,Java
185,https://github.com/xvik/dropwizard-guicey,"name: Examples CI

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: examples
    name: Java ${{ matrix.java }}
    strategy:
      matrix:
        java: [11, 17]

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Build and Check
        run: |
          chmod +x gradlew
          ./gradlew build --no-daemon
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.09710743801652892,0.6415297217295826,Valid,0.5245901639344263,Java
186,https://github.com/spongepowered/spongevanilla,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ stable-7 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ${{ github.workspace }}/.gradle/minecraft
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Setup decompiled workspace
        run: ./gradlew setupDecompWorkspace
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive artifacts for build
        uses: actions/upload-artifact@v2
        with:
          name: Sponge Jars
          path: |
            ${{ github.workspace }}/SpongeCommon/SpongeAPI/build/libs/*.jar
            ${{ github.workspace }}/SpongeCommon/build/libs/*.jar
            ${{ github.workspace }}/build/libs/*.jar

","name: Build and Test

on:
  push:
    branches:
      - $stable-7
  pull_request:
    branches:
      - $stable-7

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          ./gradlew build

      - name: Test with Gradle
        run: |
          ./gradlew test",0.3320500481231954,0.495533743183437,Valid,0.793394777265745,Java
187,https://github.com/spongepowered/spongeforge,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ stable-7 ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ${{ github.workspace }}/.gradle/minecraft
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Setup decompiled workspace
        run: ./gradlew setupDecompWorkspace
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive artifacts for build
        uses: actions/upload-artifact@v2
        with:
          name: Sponge Jars
          path: |
            ${{ github.workspace }}/SpongeAPI/build/libs/*.jar
            ${{ github.workspace }}/build/libs/*.jar

","name: Build and Test

on:
  push:
    branches:
      - $stable-7
  pull_request:
    branches:
      - $stable-7

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: |
          ./gradlew build
      - name: Test with Gradle
        run: |
          ./gradlew test",0.3565656565656566,0.5117528717135181,Valid,0.793394777265745,Java
188,https://github.com/reds-heig/logisim-evolution,"# This workflow will build a Java project with Gradle
# For more information see:
#  https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: ""Build""
on:
  push:
    # main is left just for emergency cases.
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  JDK_VERSION: 16
  JDK_DISTRO: 'temurin'
jobs:
  analyze_sources:
    name: ""Do we need to build the application?""
    runs-on: ubuntu-latest
    outputs:
      # Export 'filter' step check result so next step can use it.
      run_build: ${{ steps.filter.outputs.src }}

    steps:
    - name: ""Install packages...""
      run: sudo apt-get install sysvbanner

      # https://github.com/marketplace/actions/checkout
    - name: ""Checkout sources""
      uses: actions/checkout@v4

      # https://github.com/marketplace/actions/paths-changes-filter
    - name: ""Look for changes in monitored locations""
      uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          src:
            - 'src/**/*.flex'
            - 'src/**/*.java'
            - 'src/**/*.properties'
            - '*.gradle*'
            - 'gradle.properties'

    - name: ""WILL BUILD STEP BE RUN?""
      run: |
        found=""NO""
        [[ ${{ steps.filter.outputs.src }} == 'true' ]] && found=""YES""
        echo ""run_build=${found}"" >> $GITHUB_OUTPUT
        echo -e ""\n****************************************\n""
        banner ""${found}""
        echo -e ""****************************************""

  # Build step.
  build:
    name: ""Gradle builder""
    runs-on: ubuntu-latest
    # Will run only if analyze_sources determined it is needed.
    needs: analyze_sources
    if: needs.analyze_sources.outputs.run_build == 'true'

    steps:
    - name: ""Checkout sources""
      uses: actions/checkout@v4
    - name: Set up JDK ${{ env.JDK_VERSION }} ${{ env.JDK_DISTRO }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JDK_VERSION }}
        distribution: ${{ env.JDK_DISTRO }}
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    - name: ""Build with Gradle""
      run: |
       chmod +x gradlew
       ./gradlew build -x checkstyleMain -x checkstyleTest
    - name: ""Run SonarQube""
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ([ -z $SONAR_TOKEN ] || ./gradlew sonar)
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.1065496709495456,0.1462854652971882,Valid,0.21924304605563155,Java
189,https://github.com/coolerfall/android-httpdownloadmanager,"name: Android CI

on:
  pull_request:
    branches: [ develop]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Kotlin
190,https://github.com/libgdx/gdx-video,"name: Java CI with Gradle

on:
  pull_request:
    branches: [ master ]

jobs:
  natives-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Install additional build dependencies
      run: brew install nasm

    - name: Build with Gradle
      run: ./gradlew :gdx-video-desktop:buildFFmpegMacosAll :gdx-video-desktop:jnigenBuildMacosAll

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-natives
        path: gdx-video-desktop/libs/**/*.dylib
        if-no-files-found: error

  natives-linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Install build dependencies and cross-compilation toolchains
      run: |
        sudo apt update
        sudo apt install -y --force-yes gcc g++
        sudo apt install -y --force-yes nasm
        sudo apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
        sudo apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross

    - name: Build natives with Gradle
      run: ./gradlew :gdx-video-desktop:buildFFmpegLinuxAll :gdx-video-desktop:jnigenBuildLinuxAll

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-natives
        path: gdx-video-desktop/libs/**/*.so
        if-no-files-found: error

  natives-windows:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Install build dependencies and cross-compilation toolchains
      run: |
        sudo apt update
        sudo apt install -y --force-yes nasm
        sudo apt install -y --force-yes mingw-w64 lib32z1

    - name: Build natives with Gradle
      run: ./gradlew :gdx-video-desktop:buildFFmpegWindowsAll :gdx-video-desktop:jnigenBuildWindowsAll

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-natives
        path: gdx-video-desktop/libs/**/*.dll
        if-no-files-found: error

  gradle-build:
    needs:
    - natives-macos
    - natives-linux
    - natives-windows
    runs-on: ubuntu-20.04
    env:
      ORG_GRADLE_PROJECT_GITHUB_USERNAME: """"
      ORG_GRADLE_PROJECT_GITHUB_API_TOKEN: """"
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2

    - name: Download desktop-natives artifact
      uses: actions/download-artifact@v3
      with:
        name: desktop-natives
        path: gdx-video-desktop/libs

    - name: Create JAR with natives for desktop
      run: ./gradlew jnigenJarNativesDesktop --info

    - name: Create debug keystore for android
      run: keytool -genkey -v -keystore $HOME/.android/debug.keystore -storetype PKCS12 -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -noprompt -dname ""CN=GdxVideo, OU=libGDX, O=libGDX, L=Unknown, ST=Unknown, C=US""

    - name: Build library and test programs with gradle
      run: ./gradlew build

    - name: Upload all output libs
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: output-libs
        path: '**/build/libs/'","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.07009952401557767,0.09447395071221491,Valid,0.3909345173606554,Java
191,https://github.com/chromium/dom-distiller,"# This workflow will build a Java project with Ant
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '30 5 * * 2'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       include:
         - chrome-min-version: 49
         - chrome-min-version: 999
    env:
      CHROME_MIN_VERSION: ${{ matrix.chrome-min-version }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Show history
      run: git log --oneline -n 5
    - name: Install deps
      run: |
        google-chrome --version
        sudo -E ./install-build-deps.sh
    - name: Check environment
      run: |
        which java
        java -Xmx32m -version
        javac -J-Xmx32m -version
        google-chrome --version
    - name: Run pre-commit tests
      run: hooks/pre-commit
    - name: Run tests
      run: ant test -Dtest.shuffle=1 -Dtest.repeat=10
    - name: Package
      run: ant package
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Ant
      run: |
        ant build

    - name: Run Tests
      run: |
        ant test",,,Invalid,,Java
192,https://github.com/apache/tinkerpop,"name: build-test
on: [push, pull_request]
jobs:
  smoke:
    name: smoke
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -DskipTests -Dci --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
  java-jdk17:
    name: mvn clean install - jdk17
    timeout-minutes: 45
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -pl -:gremlin-javascript,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlin-go,-:gremlin-python -Dci --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
  java-jdk11:
    name: mvn clean install - jdk11
    timeout-minutes: 45
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -pl -:gremlin-javascript,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlin-go,-:gremlin-python -Dci --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn -Dcoverage
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
         directory: ./gremlin-tools/gremlin-coverage/target/site
  java-jdk8:
    name: mvn clean install - jdk8
    timeout-minutes: 45
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean install -pl -:gremlin-javascript -Dci --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
  gremlin-server-default:
    name: gremlin-server default
    timeout-minutes: 45
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :gremlin-server -DskipTests -DskipIntegrationTests=false -DincludeNeo4j
  gremlin-server-unified:
    name: gremlin-server unified
    timeout-minutes: 45
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :gremlin-server -DskipTests -DskipIntegrationTests=false -DincludeNeo4j -DtestUnified=true
  cache-gremlin-server-docker-image:
      name: cache gremlin-server docker image
      timeout-minutes: 10
      needs: smoke
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Set up JDK 11
          uses: actions/setup-java@v3
          with:
            java-version: '11'
            distribution: 'temurin'
        - name: Generate Gremlin Server Base
          working-directory: .
          run: |
            mvn clean install -pl gremlin-server -DskipTests -DskipIntegrationTests=true -Dci -am
        - name: Save Docker image
          working-directory: ./gremlin-server
          run: docker save --output gremlin-server.tar tinkerpop/gremlin-server
        - uses: actions/cache@v3
          id: gremlin-server-test-docker-image
          with:
            path: |
              ./gremlin-server/*
              ~/.m2/repository/org/apache/tinkerpop/*
            key: ${{ github.sha }}
         # Disabled until Linux containers are supported on Windows runners: https://github.com/actions/virtual-environments/issues/252
#        - name: Upload Docker image for Windows
#          uses: actions/upload-artifact@v3
#          with:
#            name: ${{ github.sha }}
#            path: ./gremlin-server/gremlin-server.tar
#            retention-days: 1
  spark-core:
    name: spark core
    timeout-minutes: 45
    needs: smoke
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven Windows
        if: runner.os == 'Windows'
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -DskipImageBuild -Dci
      - name: Build with Maven Ubuntu
        if: runner.os == 'Linux'
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :spark-gremlin -DskipTests -DskipIntegrationTests=false '-Dit.test=*IntegrateTest,!SparkGryoSerializerGraphComputerProcessIntegrateTest'
  spark-gryo:
    name: spark gryo
    timeout-minutes: 45
    needs: smoke
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven Windows
        if: runner.os == 'Windows'
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -DskipImageBuild -Dci
      - name: Build with Maven Ubuntu
        if: runner.os == 'Linux'
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :spark-gremlin -DskipTests -DskipIntegrationTests=false -Dit.test=SparkGryoSerializerGraphComputerProcessIntegrateTest
  gremlin-console:
    name: gremlin-console
    timeout-minutes: 20
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          touch gremlin-python/.glv
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :gremlin-console -DskipTests -DskipIntegrationTests=false
  gremlin-driver:
    name: gremlin-driver
    timeout-minutes: 20
    needs: cache-gremlin-server-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          mvn clean install -pl -:gremlin-javascript,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl gremlin-driver -DskipIntegrationTests=false
  javascript:
    name: javascript
    timeout-minutes: 15
    needs: cache-gremlin-server-docker-image
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Windows Disabled until Linux containers are supported on Windows runners: https://github.com/actions/virtual-environments/issues/252
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Get Cached Server Base Image
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v3
        id: gremlin-server-test-docker-image
        with:
          path: |
            ./gremlin-server/*
            ~/.m2/repository/org/apache/tinkerpop/*
          key: ${{ github.sha }}
#      - name: Download Server Base Image
#        if: matrix.os == 'windows-latest'
#        uses: actions/download-artifact@v3
#        with:
#          name: ${{ github.sha }}
#          path: ./gremlin-server
      - name: Load Docker Image
        working-directory: ./gremlin-server
        run: docker load --input gremlin-server.tar
      - name: Build with Maven
        run: |
          mvn clean install -pl -:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests -q -DskipTests -Dci
          mvn verify -pl :gremlin-javascript,:gremlint
  python:
    name: python
    timeout-minutes: 20
    needs: cache-gremlin-server-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Build with Maven
        run: |
          touch gremlin-python/.glv
          mvn clean install -pl -:gremlin-javascript,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests,-:gremlint -q -DskipTests -Dci
          mvn verify -pl gremlin-python
  dotnet:
    name: .NET
    timeout-minutes: 20
    needs: cache-gremlin-server-docker-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Set up .NET 6.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - name: Get Cached Server Base Image
        uses: actions/cache@v3
        id: gremlin-server-test-docker-image
        with:
          path: |
            ./gremlin-server/*
            ~/.m2/repository/org/apache/tinkerpop/*
          key: ${{ github.sha }}
      - name: Load Docker Image
        working-directory: ./gremlin-server
        run: docker load --input gremlin-server.tar
      - name: Build with Maven
        run: |
          touch gremlin-dotnet/src/.glv
          touch gremlin-dotnet/test/.glv
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-:gremlint -q -DskipTests -Dci
          mvn verify -pl :gremlin-dotnet,:gremlin-dotnet-tests -P gremlin-dotnet
  neo4j-gremlin:
    name: neo4j-gremlin
    timeout-minutes: 20
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          mvn clean install -pl -:gremlin-javascript,-:gremlin-python,-gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests -q -DskipTests -Dci
          mvn verify -pl :neo4j-gremlin -DincludeNeo4j
  go:
    name: go
    timeout-minutes: 20
    needs: cache-gremlin-server-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Get Cached Server Base Image
        uses: actions/cache@v3
        id: gremlin-server-test-docker-image
        with:
          path: |
            ./gremlin-server/*
            ~/.m2/repository/org/apache/tinkerpop/*
          key: ${{ github.sha }}
      - name: Load Docker Image
        working-directory: ./gremlin-server
        run: docker load --input gremlin-server.tar
      - name: Build with Maven
        working-directory: .
        run: |
          touch gremlin-go/.glv
          mvn clean install -pl -:gremlin-python,-:gremlin-javascript,-:gremlin-dotnet,-:gremlin-dotnet-source,-:gremlin-dotnet-tests -q -DskipTests -Dci
          mvn verify -pl :gremlin-go
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          working-directory: ./gremlin-go
      - name: Go-Vet
        working-directory: ./gremlin-go
        run: go vet ./...
",,,,,,Java
193,https://github.com/jakob-grabner/circle-progress-view,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.5486338797814208,0.7610915032510327,Valid,0.967741935483871,Java
194,https://github.com/google/re2j,"name: Java CI

on: [pull_request, push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Run Gradle Tests
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: check 
          distributions-cache-enabled: true
          dependencies-cache-enabled: true
          configuration-cache-enabled: true
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
195,https://github.com/irufus/gdax-java,"name: build
on: [push]

jobs:
  byz-build:
    name: Coinbase Pro Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build (non-master branch)
        if: github.ref != 'refs/heads/master'
        run: ./gradlew build","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.060225846925972396,0.6410268123215865,Valid,0.967741935483871,Java
196,https://github.com/lzyzsd/jsbridge,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - name: Build with Gradle
      run: |
        ./gradlew build
    - name: Run Tests
      run: |
        ./gradlew test",0.1440677966101695,0.4912666917911643,Valid,0.967741935483871,Java
197,https://github.com/relozid/android-anuto,"name: Build project

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",0.7313915857605178,0.771022962150037,Valid,0.967741935483871,Java
198,https://github.com/apache/samza,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: CI

on: [pull_request,push]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        java-version: [ 8.0.232 ]
    env:
      GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
    steps:
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          key: samza-ci-gradle-cache
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper

      - uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'zulu'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle
        run: ./gradlew build
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run tests
      run: |
        ./gradlew test",,,Invalid,,Java
199,https://github.com/eclipse/buildship,"name: CI
on: [pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'gradle'
      - name: Build with Gradle
        run: ./gradlew build  -x eclipseTest -Pbuild.invoker=ci


","name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'

      - name: Build with Gradle
        run: |
          ./gradlew build
",,,Invalid,,Java
200,https://github.com/ooni/probe-android,"# build checks whether the project builds
name: build
on: [push]
jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        version:
            - ""StableFullRelease""
            - ""StableFdroidRelease""
    steps:
    - uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: checkout
      uses: actions/checkout@v2
    - run: ./gradlew build${{ matrix.version }} && ./gradlew clean
","name: Build and Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        java-version: '11'

    - name: Build with Gradle
      run: |
        ./gradlew build

    - name: Run Tests
      run: |
        ./gradlew test",,,Invalid,,Java
