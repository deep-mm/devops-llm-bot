Index,GitHub_Repo_Link,GitHub_Build_Pipeline_File_Content,Generated_Build_Pipeline_File_Content,Exact_Match_Score,BLEU_Score,Syntax_Check,DevOps_Aware_Score,Language
2,https://github.com/connectbot/connectbot,"name: Continuous Integration

on:
  push:
    branches: [ main ]
    tags:
      - ""v*.*.*""
  pull_request:
    branches: [ main ]
  schedule:
    - cron: ""0 7 */3 * *""
  merge_group:
    types: [ checks_requested ]

jobs:
  build:
    name: Build and test
    runs-on: macos-latest

    steps:
      - name: Checkout (with history)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout (without history)
        if: ${{ github.event_name != 'push' }}
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle Home files
        uses: actions/cache@v3
        continue-on-error: true
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-home-examples-${{ hashFiles('**/*.gradle') }}

      - name: Build ConnectBot
        run: ./gradlew build bundleGoogleRelease

      - name: Run instrument tests
        uses: reactivecircus/android-emulator-runner@v2.28.0
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 4
          script: ./gradlew connectedCheck --continue

      - name: Prepare release
        if: ${{ github.event_name == 'push' }}
        run: |
          GITHUB_TAG=""git-$(git describe)""
          GITHUB_TITLE=""$(git log -1 --pretty=%B | head -1)""
          echo ""${GITHUB_TAG}"" > tag.txt
          echo ""${GITHUB_TAG}: ${GITHUB_TITLE}"" > release-title.txt
          cp ./app/build/outputs/apk/oss/release/app-oss-release-unsigned.apk ConnectBot-${GITHUB_TAG}-oss-unsigned.apk
          cp ./app/build/outputs/apk/google/release/app-google-release-unsigned.apk ConnectBot-${GITHUB_TAG}-google-unsigned.apk
          cp ./app/build/outputs/bundle/googleRelease/app-google-release.aab ConnectBot-${GITHUB_TAG}-google-unsigned.aab

      - name: Store artifacts for upload
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: |
            release-title.txt
            tag.txt
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  upload:
    name: Upload to GitHub releases
    needs: build
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""RELEASE_TITLE=$(cat release-title.txt)"" >> ""$GITHUB_OUTPUT""
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Upload release
        uses: softprops/action-gh-release@v1
        with:
          body: ""Untested build""
          draft: true
          tag_name: ${{ steps.name.outputs.GITHUB_TAG }}
          name: ${{ steps.name.outputs.RELEASE_TITLE }}
          generate_release_notes: true
          files: |
            ConnectBot-git-*-unsigned.apk
            ConnectBot-git-*-unsigned.aab

  signing:
    name: Trigger remote signing
    needs: upload
    if: ${{ (github.event_name == 'push') && (github.repository == 'connectbot/connectbot') && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')) }}
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          name: apk

      - name: Set release name
        id: name
        run: |
          echo ""GITHUB_TAG=$(cat tag.txt)"" >> ""$GITHUB_OUTPUT""

      - name: Call remote signer
        uses: joelwmale/webhook-action@814998dae0915eaf4faec992291eb956ad37d902
        with:
          url: ${{ secrets.SIGNER_WEBHOOK_URL }}
          body: '{""TAG_ID"": ""${{ steps.name.outputs.GITHUB_TAG }}""}'
",,,,,,Java
3,https://github.com/bwaldvogel/liblinear-java,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17', '18' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  validateGradleWrapper:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: gradle/wrapper-validation-action@v1.0.4

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Build with Gradle
      run: ./gradlew jacocoTestReport
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/test/jacocoTestReport.xml
        name: codecov
",,,,,,Java
4,https://github.com/twitter4j/twitter4j,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request:
    branches: [ main ]

jobs:
  build:
    env:
      ORG_GRADLE_PROJECT_SONATYPE_USERNAME: ""dummy""
      ORG_GRADLE_PROJECT_SONATYPE_PASSWORD: ""dummy""

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Update .env file
        run: |
          echo ""${{secrets.T4J_TEST_PROPS}}"" | base64 --decode > test.properties
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Java
5,https://github.com/rzwitserloot/lombok,"name: Tests

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Build with Ant
        run: ant -noinput dist
        
      - uses: actions/upload-artifact@v3
        with:
          name: lombok.jar
          path: dist/lombok.jar
    
  
  test-javac:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
        goal: [javacCurrent]
        include:
          - jdk: 11
            goal: javac6
          - jdk: 11
            goal: javac8
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Set up JDK ${{ matrix.jdk }}
        if: ${{ matrix.jdk != 21 }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'zulu'
      
      - name: Set up JDK 21-ea
        if: ${{ matrix.jdk == 21 }}
        uses: oracle-actions/setup-java@v1
        with:
          website: jdk.java.net
          release: 21
          version: latest
          
      - name: Install Ant
        run: |
          wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.13-bin.zip
          unzip apache-ant-1.10.13-bin.zip -d ""${HOME}""
          echo ""ANT_HOME=${HOME}/apache-ant-1.10.13"" >> $GITHUB_ENV
          echo ""${HOME}/apache-ant-1.10.13/bin"" >> $GITHUB_PATH
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
        
      - name: Run tests
        run: ant -noinput test.${{ matrix.goal }}
  
  test-eclipse:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        version:
        - eclipse-oxygen
        - eclipse-202006
        - eclipse-202006-jdk8
        - eclipse-202212
        - eclipse-oxygen-full
        - eclipse-2022-03-full
        - ecj11
        - ecj14
        - ecj16
        - ecj19
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ivyCache
            lib
          key: ${{ runner.os }}-${{ hashFiles('**/ivy.xml') }}
          restore-keys: |
            ${{ runner.os }}-
          
      - name: Build with Ant
        run: xvfb-run ant -noinput dist test.${{ matrix.version }}
        
  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    strategy: 
      matrix: 
        jdk: [8, 11, 17, 21]
        tool: 
          - {name: ""maven"",  cmd: ""mvn compile""}
          - {name: ""gradle"", cmd: ""gradle assemble""}
          - {name: ""ant"",    cmd: ""ant dist""}
          - {name: ""bazel"",  cmd: ""bazel build //:ProjectRunner""}
      fail-fast: false
    env:
      IMAGE_NAME: lombok-${{ matrix.tool.name }}-jdk${{ matrix.jdk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - uses: actions/download-artifact@v3
        with:
          name: lombok.jar
        
      - name: Build container
        working-directory: ./docker
        run: docker build --build-arg jdk=${{ matrix.jdk }} -t $IMAGE_NAME -f ${{ matrix.tool.name }}/Dockerfile .
        
      - name: Compile in container
        run: docker run --entrypoint="""" -v $(pwd)/lombok.jar:/workspace/lombok.jar $IMAGE_NAME /bin/bash -c ""cd classpath; ${{ matrix.tool.cmd }}""
",,,,,,Java
6,https://github.com/apache/hive,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  macos-jdk8:
    name: 'macOS (JDK 8)'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up JDK 8'
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: 'Build project'
        run: |
          mvn clean install -DskipTests -Pitests
",,,,,,Java
7,https://github.com/apache/directory-studio,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '42 18 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - run: |
        mvn -f pom-first.xml clean install
        mvn clean install

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
",,,,,,Java
9,https://github.com/github-api/github-api,"name: CI

on: 
  push:
    branches:
      - main
      - '!/refs/heads/dependabot/*'
  pull_request:
    branches:
      - '*'
      - '!/refs/heads/patch*'

# this is required by spotless for JDK 16+
env:
  JAVA_11_PLUS_MAVEN_OPTS: ""--add-opens jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED --add-opens jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED""

permissions:
  contents: read

jobs:
  build:
    name: build-only (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Install (skipTests)
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -DskipTests --file pom.xml
    - uses: actions/upload-artifact@v3
      with:
        name: maven-target-directory
        path: target/
        retention-days: 3
  site:
    name: site (Java 17)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'temurin'
        cache: 'maven'
    - name: Maven Site
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean site -D enable-ci --file pom.xml
  test:
    name: test (${{ matrix.os }}, Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu, windows ]
        java: [ 11, 17 ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: 'maven'
    # JDK 11+
    - name: Maven Install without Code Coverage
      if: matrix.os == 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D japicmp.skip=true --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Maven Install with Code Coverage
      if: matrix.os != 'windows'
      env:
        MAVEN_OPTS: ${{ env.JAVA_11_PLUS_MAVEN_OPTS }}
      run: mvn -B clean install -D enable-ci --file pom.xml ""-Dsurefire.argLine=--add-opens java.base/java.net=ALL-UNNAMED""
    - name: Codecov Report 
      if: matrix.os == 'ubuntu' && matrix.java == '17'
      uses: codecov/codecov-action@v3.1.4

  test-java-8:
    name: test Java 8 (no-build)
    needs: build
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: maven-target-directory
        path: target
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
        cache: 'maven'   
    - name: Maven Test (no build) Java 8
      run: mvn -B surefire:test -DfailIfNoTests -Dsurefire.excludesFile=src/test/resources/slow-or-flaky-tests.txt
",,,,,,Java
10,https://github.com/cdk/cdk,"name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17, 21]
    name: Java ${{ matrix.java }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: ${{ matrix.java }}
        cache: maven
    - name: Build with Maven
      run: mvn clean install -q -Pjacoco
    - name: push JaCoCo stats to codecov.io
      uses: codecov/codecov-action@v3
      env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-sonarcloud:
    name: Build sonarcloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: maven
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_OPTS: -Xss16m  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard -Dmaven.wagon.http.retryHandler.count=3
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=cdk -Pjacoco
",,,,,,Java
12,https://github.com/apache/jmeter,"name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/software-installed-on-github-hosted-runners

concurrency:
  # On master/release, we don't want any jobs cancelled so the sha is used to name the group
  # On PR branches, we cancel the job if new commits are pushed
  # More info: https://stackoverflow.com/a/68422069/253468
  group: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/release' ) && format('ci-main-{0}', github.sha) || format('ci-main-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    name: Matrix Preparation
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    env:
      # Number of jobs to generate in matrix.js
      MATRIX_JOBS: 4
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          node .github/workflows/matrix.js

  test:
    needs: matrix_prep
    name: '${{ matrix.name }}'
    runs-on: ${{ matrix.os }}
    env:
      TZ: ${{ matrix.tz }}
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      fail-fast: false
      # max-parallel: 4
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 50
    - name: Set up Java ${{ matrix.java_version }}, oracle
      if: ${{ matrix.oracle_java_website != '' }}
      uses: oracle-actions/setup-java@1611a647972adb8b04779be3529a044d650fd510 # v1
      with:
        website: ${{ matrix.oracle_java_website }}
        release: ${{ matrix.java_version }}
    - name: Set up Java 17 and ${{ matrix.non_ea_java_version }}, ${{ matrix.java_distribution }}
      uses: actions/setup-java@v3
      with:
        # The latest one will be the default, so we use Java 17 for launching Gradle
        java-version: |
          ${{ matrix.non_ea_java_version }}
          17
        distribution: ${{ matrix.java_distribution }}
        architecture: x64
    - name: Steps to reproduce
      uses: actions/github-script@v6
      with:
        script: |
          console.log('The following command might help reproducing CI results, use Java ${{ matrix.java_version }}')
          console.log('TZ=""${{ matrix.tz }}"" _JAVA_OPTIONS=""${{ matrix.extraJvmArgs }}"" ./gradlew build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }} -PtestExtraJvmArgs=""${{ matrix.testExtraJvmArgs }}"" -PtestDisableCaching=""${{ matrix.testDisableCaching }}""')
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: jdk${{ matrix.java_version }}
        multi-cache-enabled: false
        # An explicit skip for Sha512 tasks is required due to https://github.com/gradle/gradle/issues/16789
        arguments: --scan --no-parallel build -x distTar -x distTarSource -x distTarSha512 -x distTarSourceSha512 ${{ matrix.extraGradleArgs }}
        properties: |
          testExtraJvmArgs=${{ matrix.testExtraJvmArgs }}
          testDisableCaching=${{ matrix.testDisableCaching }}
          jdkBuildVersion=17
          jdkTestVersion=${{ matrix.java_version }}
          jdkTestVendor=${{ matrix.java_vendor }}
          # We provision JDKs with GitHub Actions for caching purposes, so Gradle should rather fail in case JDK is not found
          org.gradle.java.installations.auto-download=false
      env:
        _JAVA_OPTIONS: ${{ matrix.extraJvmArgs }}
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}

  errorprone:
    name: 'Error Prone (JDK 11)'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: 'Set up JDK 11'
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'zulu'
    - uses: burrunan/gradle-cache-action@v1
      name: Test
      with:
        job-id: errprone
        multi-cache-enabled: false
        arguments: --scan --no-parallel --no-daemon -PenableErrorprone classes
      env:
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GE_ACCESS_TOKEN }}
",,,,,,Java
13,https://github.com/weld/core,"name: Weld CI

on:
  pull_request:
    branches: [ master ]
    # Do not run for non-code changes
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '*.adoc'
      - '*.txt'

jobs:
  # builds Weld snapshot, downloads WFLY and upgrades it, prepares ENV variable
  build-jdk11:
    name: ""Initial JDK 11 Weld Build + WildFly patch""
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download WildFly
        run: |
          # wget https://ci.wildfly.org/guestAuth/repository/download/WF_WildflyPreviewNightly/latest.lastSuccessful/wildfly-preview-latest-SNAPSHOT.zip
          # unzip wildfly-preview-latest-SNAPSHOT.zip
          wget https://ci.wildfly.org/guestAuth/repository/download/WF_Nightly/latest.lastSuccessful/wildfly-latest-SNAPSHOT.zip
          unzip wildfly-latest-SNAPSHOT.zip
          # ZIP contains two more ZIPs, sources and actual WFLY
          rm wildfly-*-src.zip
          rm wildfly-latest-SNAPSHOT.zip
          unzip wildfly-*.zip -d container
          cd container
          mv ./* wildfly/
      - name: Get Date
        id: get-date
        run: |
          echo ""::set-output name=date::$(/bin/date -u ""+%Y-%m"")""
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          # Caching is an automated pre/post action that installs the cache if the key exists and exports the cache
          # after the job is done. In this case we refresh the cache monthly (by changing key) to avoid unlimited growth.
          key: q2maven-master-${{ steps.get-date.outputs.date }}
      - name: Build Weld SNAPSHOT
        run: mvn clean install -DskipTests -Dno-format -B -V -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Patch WildFly
        run: |
          JBOSS_HOME=`pwd`'/container/*'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean package -Pupdate-jboss-as -Pupdate-jakarta-apis -Dtck -f jboss-as/pom.xml
      - name: Zip Patched WildFly
        run: |
          cd container/
          zip -r wildfly.zip wildfly
          cd ..
      - name: Persist WildFly
        uses: actions/upload-artifact@v3
        with:
          name: wildfly-patched-zip
          path: container/wildfly.zip
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/org/jboss/weld*

  # Weld in-container tests, does NOT include TCKs which are run as a separate job
  incontainer-tests:
    name: ""Weld In-container Tests - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -pl '!jboss-tck-runner'
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-incontainer-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-incontainer-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # CDI TCKs in WildFly
  CDI-TCK:
    name: ""CDI TCK - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'

  # relaxed mode, w/ and w/o Wildfly, single JDK version
  relaxed-mode-test:
    name: ""Relaxed mode testing - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v1
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven w/ WildFly
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dincontainer -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests-web.xml -Dadditional.vm.args=""-Dorg.jboss.weld.construction.relaxed=true"" -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-incontainer-relaxed
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-cdi-tck-jdk${{matrix.java.name}}
          path: 'server-log.tgz'
      - name: Build with Maven, no WildFly
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dcdi.tck.suite.xml.file=src/test/tck/tck-tests.xml -Dorg.jboss.weld.construction.relaxed=true
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-jdk${{matrix.java.name}}-relaxed
          path: 'test-reports.tgz'

  # Weld no-container tests, includes junit, Weld SE tests plus CDI TCKs and integration tests that don't require EE container
  no-container-tests:
    name: ""Weld Tests w/o Container - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-no-container-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld Examples build and test, only JDK 11
  examples-tests:
    name: ""Weld Examples build and test - JDK 11}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Download Patched WildFly
        uses: actions/download-artifact@v3
        with:
          name: wildfly-patched-zip
          path: .
      - name: Extract WildFly
        run: unzip wildfly.zip
      - name: Build with Maven
        run: |
          JBOSS_HOME=`pwd`'/wildfly'
          export JBOSS_HOME=`echo $JBOSS_HOME`
          mvn clean verify -Dno-format -Darquillian=wildfly-managed -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f examples/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: |
          find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
          find . -name 'server.log' -type f | tar -czf server-log.tgz -T -
      - name: Upload failed tests artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-examples
          path: 'test-reports.tgz'
      - name: Upload server log artifact (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-log-examples
          path: 'test-reports.tgz'

  # CDI TCK for SE environment
  CDI-TCK-SE:
    name: ""CDI TCK SE - JDK ${{matrix.java.name}}""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        java:
          - { name: ""11"",
              java-version: 11,
          }
          - {
            name: ""17"",
            java-version: 17,
          }
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{ matrix.java.name }}
        uses: actions/setup-java@v3.12.0
        with:
          java-version: ${{ matrix.java.java-version }}
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=se -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f jboss-tck-runner/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-cdi-tck-se-jdk${{matrix.java.name}}
          path: 'test-reports.tgz'

  # Weld SE/Servlet cooperation
  weld-se-servlet-coop:
    name: ""Weld SE-Servlet Cooperation""
    runs-on: ubuntu-latest
    needs: build-jdk11
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v3.12.0
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Download Maven Repo
        uses: actions/download-artifact@v3
        with:
          name: maven-repo
          path: .
      - name: Extract Maven Repo
        shell: bash
        run: tar -xzf maven-repo.tgz -C ~
      - name: Build with Maven
        run: |
          mvn clean verify -Dincontainer=weld-se-coop -Dno-format -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -f environments/servlet/tests/tomcat/pom.xml
      - name: Prepare failure archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -
      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-se-servlet-coop
          path: 'test-reports.tgz'
",,,,,,Java
14,https://github.com/wildfly/jandex,"name: Jandex

on:
  push:
    branches:
    - main
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'
  pull_request:
    paths-ignore:
    - '.gitattributes'
    - '.gitignore'
    - 'LICENSE.txt'
    - 'README.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        java:
        # we want: all LTS versions (that we care about), latest GA, upcoming
        - 8
        - 11
        - 17
        - 20
        - 21-ea
        compiler:
        - javac
        - ecj
        parameters:
        - true
        - false
        os:
        - ubuntu-latest
        - windows-latest
        exclude:
        - java: 8
          compiler: ecj
    runs-on: ${{ matrix.os }}
    name: ""JDK ${{ matrix.java }}, ${{ matrix.compiler}}, params: ${{ matrix.parameters }}, ${{ matrix.os }}""
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      shell: bash
      run: mvn -s .github/maven-ci-settings.xml -B verify --file pom.xml -Dcompiler=${{ matrix.compiler }} -Dparameters=${{ matrix.parameters }}

  calcite-regression:
    strategy:
      matrix:
        # javac 8 and 11 might produce slightly different bytecode
        java:
        - 8
        - 11
        - 17
    runs-on: ubuntu-latest
    name: 'Calcite regression test (JDK ${{ matrix.java }})'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 50

    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}

    - name: Set up Maven
      uses: stCarolas/setup-maven@v4.5
      with:
        maven-version: 3.8.7

    - name: Build with Maven
      run: |
        # Set 1.0.0-dev version to ensure it will be used when building Calcite later
        mvn -s .github/maven-ci-settings.xml -B versions:set -DnewVersion=1.0.0-dev-SNAPSHOT
        mvn -s .github/maven-ci-settings.xml -B versions:commit
        mvn -s .github/maven-ci-settings.xml -B install -DskipTests --file pom.xml

    - name: Clone Calcite
      run: |
        git clone --branch main --depth 100 https://github.com/apache/calcite.git ../calcite
        echo 'allprojects { plugins.withType<JavaPlugin> { dependencies { ""jandexClasspath""(""io.smallrye:jandex:1.0.0-dev-SNAPSHOT"") } } }' >> ../calcite/build.gradle.kts

    - name: Verify Calcite bytecode
      uses: burrunan/gradle-cache-action@feb985ecf49f57f54f31920821a50d0394faf122
      with:
        job-id: calcite-jdk${{ matrix.java-version }}
        build-root-directory: ../calcite
        arguments: --scan --no-parallel --no-daemon --continue jandex
        properties: |
          enableMavenLocal=true
          jandex.version=1.0.0-dev-SNAPSHOT
          skipJandex=false
        maven-local-ignore-paths: |
          org/jboss/jandex/
          io/smallrye/jandex/

    - name: Prepare failure archive (if run failed)
      if: failure()
      shell: bash
      run: |
       pwd 
       tar -czf calcite-work.tgz ../calcite 

    - name: Upload failure archive (if run failed)
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: calcite-work
        path: calcite-work.tgz
",,,,,,Java
15,https://github.com/square/retrofit,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  robovm:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - uses: gradle/gradle-build-action@v2

      - name: Run Tests
        run: ./gradlew retrofit:robovm-test:robovmTest

  publish:
    runs-on: ubuntu-latest
    if: github.repository == 'square/retrofit' && github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android
      - robovm

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 19

      - uses: gradle/gradle-build-action@v2

      - name: Upload Artifacts
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Java
16,https://github.com/michel-kraemer/bson4jackson,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '8', '11', '17' ]

    name: JDK ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          architecture: x64
          distribution: zulu
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
17,https://github.com/enginehub/worldedit,"name: Gradle Build
on: [push, pull_request]

jobs:
  build:
    name: Build WorldEdit on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: 17
        cache: 'gradle'
        distribution: 'temurin'
    - name: Build with Gradle
      run: ./gradlew build -s
    - uses: actions/upload-artifact@v3
      name: Archive Reports
      if: always()
      with:
        name: reports for ${{ matrix.os }}
        path: '**/build/reports/**'
    - uses: actions/upload-artifact@v3
      name: Archive Logs
      if: always()
      with:
        name: logs for ${{ matrix.os }}
        path: '**/*.log'

",,,,,,Java
18,https://github.com/bartdag/py4j,"name: test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
        java-version: [ 8 ]
        python-version: [ '2.7', '3.5', '3.6', '3.7', '3.8', '3.9', '3.10' ]
        include:
          - os: windows-2019
            java-version: 17
            python-version: '3.10'
          - os: ubuntu-18.04
            java-version: 11
            python-version: '2.7'
          - os: ubuntu-18.04
            java-version: 17
            python-version: '3.8'
    name: Py ${{ matrix.python-version }}, Java ${{ matrix.java-version }}, ${{ matrix.os }}
    steps:
      - uses: actions/checkout@1e204e9a9253d643386038d443f96446fa156a97 # pin@v2.3.5

      - name: Setup Java 8 JDK for build
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@dc73133d4da04e56a135ae2246682783cc7c7cb6 # pin @v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Install dependencies
        run: |
          pip install pytest
          cd py4j-java
          # Useful in case the build stops working because of version issues.
          ./gradlew --version
          echo `java -version` && echo `javac -version` && echo `python --version`
          echo $PATH
          echo $JAVA_HOME
          ./gradlew clean
        shell: bash

      - name: Enable IPV6
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo 0 | sudo tee /proc/sys/net/ipv6/conf/all/disable_ipv6

      - name: Run gradle tests
        run: |
          cd py4j-java
          ./gradlew check
          ./gradlew assemble

      - name: Setup Java ${{ matrix.java-version }} JDK for PyTest
        if: ${{ matrix.java-version != '8' }}
        uses: actions/setup-java@8db439b6b47e5e12312bf036760bbaa6893481ac #pin@v2.3.1
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'adopt'
          cache: 'gradle'

      - name: Run PyTest
        run: |
          cd py4j-python
          echo `java -version`
          echo $JAVA_HOME
          # Java TLS tests are disabled until they can be fixed (refs #441)
          pytest -k ""not java_tls_test.""

  test-doc:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v2

      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Python packages
        run: |
          python3 -m pip install -r py4j-web/requirements-doc.txt
          python3 -m pip list

      - name: Setup Java 8 JDK
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'adopt'
          cache: 'gradle'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Javadoc build
        run: |
          cd py4j-java && ./gradlew javadoc && cd ..
          mv py4j-java/build/docs/javadoc py4j-web/_static/

      - name: Sphinx build
        run: |
          cd py4j-web && make clean html && cd ..
          mv py4j-web/_build/html ../ # Move out of the current repo for GitHub Pages.

      # Publishing documentation only for commits in the master branch.
      - name: Checkout GitHub Pages branch
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Copy the generated site
        if: github.event_name != 'pull_request'
        run: |
          # Include Javadoc if the commit is tagged (for releases only).
          if [ -z ""`git describe --tags --exact-match 2>/dev/null`"" ]; then
            rm -fr ../html/_static/javadoc
            [ -d _static/javadoc ]  && mv _static/javadoc ../html/_static
          fi

          rm -fr * # Remove existing site
          touch .nojekyll # See https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages
          echo ""www.py4j.org"" > CNAME # Custom domain for GitHub Actions
          cp -r ../html/* . # Move generated site to the current repo.

      - name: Push new site
        uses: EndBug/add-and-commit@v8
        if: github.event_name != 'pull_request'
        with:
          default_author: github_actions
          message: Push new site by ${{ github.sha }}
          add: ""*""
          push: ""--force"" # In case it conflicts with the same step in another workflow.
",,,,,,Java
19,https://github.com/plantuml/plantuml,"name: CI

on:
  create:
  pull_request:
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  push:
    branches:
      - master
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  workflow_config:
    runs-on: ubuntu-latest
    outputs:
      do_release: ${{ steps.config.outputs.do_release }}
      do_snapshot_release: ${{ steps.config.outputs.do_snapshot_release }}
      pom_version: ${{ steps.config.outputs.pom_version }}
      do_javadoc: ${{ steps.config.outputs.do_javadoc }}
      do_test_linux: ${{ steps.config.outputs.do_test_linux }}
      do_test_windows: ${{ steps.config.outputs.do_test_windows }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Configure workflow
        id: config
        env:
          ACTOR: ${{ github.actor }}
          EVENT_ACTION: ${{ github.event.action }}
          REF_TYPE: ${{ github.event.ref_type }}
          REF: ${{ github.event.ref }}
        run: |
          cat <<-EOF
            ::group::Debug Info
            GITHUB_EVENT_NAME       : '${GITHUB_EVENT_NAME}'
            EVENT_ACTION            : '${EVENT_ACTION}'
            REF_TYPE                : '${REF_TYPE}'
            REF                     : '${REF}'
            ACTOR                   : '${ACTOR}'
            GITHUB_REPOSITORY_OWNER : '${GITHUB_REPOSITORY_OWNER}'
            ::endgroup::
          EOF

          # Do a release when a git tag starting with 'v' has been created by a suitable user.
          # (We match against github.repository_owner as a kludge so that forked repos can release themselves when testing the workflow)
          if [[ ""${GITHUB_EVENT_NAME}"" == ""create"" && ""${REF_TYPE}"" == ""tag"" && ""${REF}"" == v* && \
                ( ""${ACTOR}"" == ""arnaudroques"" || ""${ACTOR}"" == ""${GITHUB_REPOSITORY_OWNER}"" ) \
             ]]; then
            echo ""::notice title=::This run will release '${REF}'""
            echo ""do_release=true"" >> $GITHUB_OUTPUT
            echo ""pom_version=${REF#v}""
            echo ""pom_version=${REF#v}"" >> $GITHUB_OUTPUT # pom_version is the tag without the 'v' prefix
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          elif [[ ""${GITHUB_EVENT_NAME}"" =~ push|workflow_dispatch && ""${REF}"" == ""refs/heads/master"" && ""${ACTOR}"" == ""arnaudroques"" ]]; then
            echo ""::notice title=::This run will release a snapshot""
            echo ""do_snapshot_release=true"" >> $GITHUB_OUTPUT
            V=$(perl -ne 'if (/return (\d{6,7});/) {$v=$1} if (/final int beta = (\d+);/) {$b=$1} END{print(substr($v, 0, 1),""."", substr($v, 1, 4),"".""); if ($b) {print(int(substr($v+1, 5)), ""beta"", $b);} else {print(int(substr($v, 5)))}}' src/net/sourceforge/plantuml/version/Version.java)
            echo ""pom_version=$V-SNAPSHOT""
            echo ""pom_version=$V-SNAPSHOT"" >> $GITHUB_OUTPUT # pom_version is taken from Version.java
            echo ""do_javadoc=true"" >> $GITHUB_OUTPUT
            echo ""This run will update the Javadoc""

          else
            echo ""This run will NOT make a release""
            echo ""do_javadoc=false"" >> $GITHUB_OUTPUT
            echo ""This run will NOT update the Javadoc""
          fi
          echo ""do_test_linux=true"" >> $GITHUB_OUTPUT
          echo ""do_test_windows=false"" >> $GITHUB_OUTPUT

  # We run the tests on many OS / Java combinations but also the Compile step because some users build
  # their own jars from source, so it is good for CI to check that is working on all combinations.
  # We split windows and ubuntu because windows is so slow...
  test_linux:
    needs: workflow_config
    strategy:
      fail-fast: false
      matrix:
        java_version: [ 8, 17 ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/checkout@v4

      - name: Set up java
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: temurin
          cache: gradle

      # Compile / Test / Package are separate steps so the reason for any failure is more obvious in GitHub UI
      - name: Compile
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle -q compileJava --no-daemon

      - name: Test
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        run: gradle test --no-daemon -i

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: needs.workflow_config.outputs.do_test_linux == 'true'
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing from several builds
          name: ${{ github.run_number }}-${{ matrix.os }}-java-${{ matrix.java_version }}-test-reports
          path: build/reports/tests/


  build_artifacts:
    needs: [ workflow_config ]
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.release_version }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle
#      - name: Set version in gradle.properties
#        if: env.POM_VERSION
#        env:
#          POM_VERSION: ${{ needs.workflow_config.outputs.pom_version }}
#        run: |
#          sed -i ""s/version = .*/version = $POM_VERSION/"" gradle.properties
#          cat gradle.properties
      - name: Generate artifacts
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          gradle clean build \
            pdfJar \
            generateMetadataFileForMavenPublication generatePomFileForMavenPublication \
            -x test
          find . -name ""*.jar""
      - name: Sign artifacts
        if: env.ORG_GRADLE_PROJECT_signingKey
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          gradle -i signMavenPublication signPdfJar
          ls -l build/libs
          ls -l plantuml-asl/build/libs
          ls -l plantuml-bsd/build/libs
          ls -l plantuml-epl/build/libs
          ls -l plantuml-lgpl/build/libs
          ls -l plantuml-mit/build/libs
          ls -l plantuml-gplv2/build/libs
      - name: Get release version
        id: version
        run: |
          echo ""release_version=$(gradle properties -q | grep ""version:"" | awk '{print $2}')"" >> $GITHUB_OUTPUT
      - name: Cache libs
        uses: actions/cache/save@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          enableCrossOsArchive: true

  deploy_javadoc:
    needs: [ build_artifacts, test_linux ]
    if: needs.workflow_config.outputs.do_javadoc == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build Javadoc
        run: gradle javadoc

      - name: Deploy Javadoc to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/docs/javadoc


  upload:
    if: |
      needs.workflow_config.outputs.do_release == 'true' ||
      needs.workflow_config.outputs.do_snapshot_release == 'true'
    needs: [ workflow_config, build_artifacts, test_linux ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: gradle

      - name: Restore Libs cache
        uses: actions/cache/restore@v3
        with:
          path: |
            build/libs
            build/publications
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs
          key: ""libs-${{ github.run_id }}""
          fail-on-cache-miss: true
          enableCrossOsArchive: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # Using github.run_number here to reduce confusion when downloading & comparing artifacts from several builds
          name: ${{ github.run_number }}-artifacts
          path: |
            build/libs/*
            build/publications/maven/*
            plantuml-asl/build/libs
            plantuml-bsd/build/libs
            plantuml-epl/build/libs
            plantuml-lgpl/build/libs
            plantuml-mit/build/libs
            plantuml-gplv2/build/libs

      - name: Create snapshot
        if: needs.workflow_config.outputs.do_snapshot_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release-snapshot.sh

      - name: Create release in GitHub and OSSRH
        if: needs.workflow_config.outputs.do_release == 'true'
        env:
          RELEASE_VERSION: ${{ needs.build_artifacts.outputs.RELEASE_VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ github.event.ref }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          #do not remove signing key and password or signatures will not be published
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ARTIFACT_SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ARTIFACT_SIGNING_PASSPHRASE }}
        run: |
          echo ""print gradle.properties""
          cat gradle.properties
          echo ""RELEASE_VERSION=$RELEASE_VERSION""
          .github/scripts/release.sh
          gradle --debug publish

  push_to_docker_registry:
    needs: [ workflow_config, upload, test_linux ]
    if: needs.workflow_config.outputs.do_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            PLANTUML_VERSION=${{ github.event.ref }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
",,,,,,Java
20,https://github.com/kordamp/json-lib,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2006-2022 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on:
  pull_request:

env:
  JAVA_VERSION: '8'
  JAVA_DISTRO: 'zulu'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Build
        run: ./gradlew build -S
",,,,,,Java
21,https://github.com/json-path/jsonpath,"---
name: Java CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11, 17, 18]
      fail-fast: false
      max-parallel: 4
    name: JDK ${{ matrix.java }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --warning-mode all

      - name: Run Tests
        run: ./gradlew check

      - name: Maven Install
        run: ./gradlew clean publishToMavenLocal

...
",,,,,,Java
22,https://github.com/structr/structr,"name: Structr CI Pipeline
on:
  push

jobs:
  run-tests:
    if: ${{ !startsWith( github.actor, 'dependabot' ) }}
    runs-on: self-hosted
    environment: build-and-test
    strategy:
      matrix:
        include:
          - module: structr-base
            variableName: Base
          - module: structr-ui
            variableName: UI
          - module: structr-core
            variableName: CORE
          - module: structr-rest
            variableName: REST
          - module: structr-db-driver-api
            variableName: DB_DRIVER_API
          - module: structr-memgraph-driver
            variableName: MEMGRAPH_DRIVER
          - module: structr-memory-driver
            variableName: MEMORY_DRIVER
          - module: structr-modules
            variableName: MODULES
          - module: structr-neo4j-bolt-driver
            variableName: NEO4J_BOLT_DRIVER

    steps:
      - uses: actions/checkout@v3

      - name: Start Test Database
        run: >-
          docker run -d --name ${{ matrix.module }}-test-${{ github.run_id }} 
          -p 7687 
          -e NEO4J_AUTH=neo4j/admin123 
          -e NEO4J_ACCEPT_LICENSE_AGREEMENT=yes 
          -e NEO4J_dbms_memory_heap_maxSize=4G 
          -e NEO4J_dbms_memory_pagecache_size=4G neo4j:4.4 && 
          echo ""ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}=$(docker inspect --format='{{(index (index .NetworkSettings.Ports ""7687/tcp"") 0).HostPort}}' ${{ matrix.module }}-test-${{ github.run_id }})"" >> $GITHUB_ENV

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Compile and run Tests
        run:  >-
          mvn clean install -DskipTests -DskipDist -DskipDocker -DskipDeb -DskipDockerTestDB && 
          cd ${{ matrix.module }} && 
          mvn install -DskipDockerTestDB -Denv.testDatabaseConnection=""bolt://localhost:${ASSIGNED_PORT_${{ matrix.variableName }}_${{ github.run_id }}}""

      - name: Stop Test Database
        if: always()
        run:  docker stop ${{ matrix.module }}-test-${{ github.run_id }}

  build-and-deploy:
    runs-on: self-hosted
    environment: build-and-test
    if: ${{ success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release') }}
    needs: run-tests

    steps:
      - uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: structr
          password: ${{ secrets.STRUCTR_DOCKER_PASSWORD }}

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.2'
          java-version: '17'
          #components: 'js,python'
          components: 'js'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - run: mvn -U clean install -Pwith-sources -DskipTests -DskipDockerTestDB
      - name: Upload binaries
        run: >-
          scp -v structr-binaries/target/structr-*.deb structr.com:/files/repositories/upload > /dev/null 2>&1 &&
          scp -v structr-binaries/target/structr-*-dist.zip structr.com:/files/repositories/upload >/dev/null 2>&1

  cleanup-system:
    runs-on: self-hosted
    if: always()
    needs: [run-tests, build-and-deploy]
    steps:
      - name: Cleanup docker
        run: docker container prune -f && docker image prune -f && docker volume prune -f
      - name: Cleanup runner home
        run: cd ~/actions-runner/_work/structr/ && rm -rf structr
",,,,,,Java
23,https://github.com/git-commit-id/git-commit-id-maven-plugin,"name: Java CI

on: [push, pull_request]

jobs:
  checkstyle:
    name: Run checkstyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run checkstyle with Maven
        run: mvn clean verify -B -Pcheckstyle -Dmaven.test.skip=true

  test:
    name: Run basic test with Java ${{ matrix.java_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify javadoc:javadoc -B

  integration-test:
    name: Run integration test with Java ${{ matrix.java_version }} and Maven ${{ matrix.maven_version }}
    runs-on: ubuntu-latest
    needs: checkstyle
    strategy:
      matrix:
        java_version: ['11']
        maven_version: ['3.2.5', '3.3.9', '3.5.4', '3.6.3', '3.8.8', '3.9.1', '3.9.2', '4.0.0-alpha-7']

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}
          java-package: jdk
      - name: Setup Maven ${{ matrix.maven_version }}
        run: /bin/bash -c 'if [[ -n ""${{ matrix.maven_version }}"" ]]; then \
            echo ""Downloading Maven ${{ matrix.maven_version }}...."";
            if [[ ""${{ matrix.maven_version }}"" == ""3.0"" ]]; then
              wget https://archive.apache.org/dist/maven/binaries/apache-maven-3.0-bin.zip || terminate 1;
            else
              wget https://archive.apache.org/dist/maven/maven-3/${{ matrix.maven_version }}/binaries/apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            fi;
            unzip -qq apache-maven-${{ matrix.maven_version }}-bin.zip || terminate 1;
            export M2_HOME=$PWD/apache-maven-${{ matrix.maven_version }};
            export PATH=$M2_HOME/bin:$PATH;
            mvn -version;
          fi'
      - name: Setup M2_HOME Environment variable
        run: echo ""M2_HOME=${PWD}/apache-maven-${{ matrix.maven_version }}"" >> $GITHUB_ENV
      - name: Setup System Path to use the custom Maven
        run: echo ""${M2_HOME}/bin"" >> $GITHUB_PATH
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          # Include Maven version in key to not use cache from other Maven versions
          # in case they corrupt the local repository
          # Include it before `-m2-` to prevent other cache actions' restore-keys matching it
          key: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-${{ matrix.maven_version }}-m2
      - name: Verify Setup of Maven ${{ matrix.maven_version }}
        run: bash -c ""echo ${M2_HOME}; echo ${PATH}; mvn -version""
      - name: Install a test version with Maven
        run: mvn clean install -B --settings=./.buildscript/settings.xml
      - name: Run the local testversion with Maven
        run: mvn clean initialize -B -Pdemo -Dmaven.test.skip=true --settings=./.buildscript/settings.xml
      - name: Validate if the testversion has produced the desired output
        run: /bin/bash -c '[[ -f target/testing.properties ]] && cat target/testing.properties || exit 1;'

  coveralls:
    name: Run coveralls
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: git checkout ""${GITHUB_REF:11}""
      - run: git submodule sync
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Coveralls with Maven
        run: mvn clean test jacoco:report coveralls:report -B -Pcoveralls -DrepoToken=${{ secrets.CoverallsRepoTokenSecret }}

  deploy-snapshot:
    name: Deploy snapshot
    runs-on: ubuntu-latest
    needs: integration-test
    if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && github.ref == 'refs/heads/master' }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Deploy snapshot with Maven
        run: mvn clean deploy -B --settings=./.buildscript/settings.xml
        env:
          CI_DEPLOY_USERNAME: ${{ secrets.CI_DEPLOY_USERNAME }}
          CI_DEPLOY_PASSWORD: ${{ secrets.CI_DEPLOY_PASSWORD }}
",,,,,,Java
24,https://github.com/hibernate/hibernate-tools,"name: Build and Test

on:
  pull_request

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout PR Branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
        java-package: jdk
        architecture: x64

    - name: Build and Test
      uses: GabrielBB/xvfb-action@v1
      with: 
        run: mvn clean install 

",,,,,,Java
25,https://github.com/pexplugins/permissionsex,"# Making changes? https://github.com/nektos/act may help you test locally

name: Build And Test

on: [push, pull_request]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.repository.full_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Check out
        uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: |
            build/test-results/test/
            */build/test-results/test/
            platform/*/build/test-results/test
      - name: Archive distributable plugins
        uses: actions/upload-artifact@v2
        if: ${{ runner.os == 'Linux' }} # Only upload one set of artifacts
        with:
          name: PermissionsEx (all platforms)
          path: build/libs/
      - name: Publish to Maven
        if: ${{ runner.os == 'Linux' && github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_pexUsername: ${{ secrets.REPO_USERNAME }}
          ORG_GRADLE_PROJECT_pexPassword: ${{ secrets.REPO_PASSWORD }}
          ORG_GRADLE_PROJECT_stellardriftUsername: ${{ secrets.STELLARDRIFT_REPO_USER }}
          ORG_GRADLE_PROJECT_stellardriftPassword: ${{ secrets.STELLARDRIFT_REPO_PASSWORD }}
",,,,,,Java
26,https://github.com/mcmics/jenkins-control-plugin,"name: IntelliJ Platform Plugin Compatibility

on:
  push:

jobs:
  compatibility:
    name: Ensure plugin compatibility for IDEA Community, IDEA Ultimate, PyCharm Community, GoLand, CLion, and the latest EAP snapshot of IDEA Community.
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          cache: gradle

      - name: Build the plugin using Gradle
        run: ./gradlew buildPlugin

      - name: Verify Plugin on IntelliJ Platforms
        id: verify
        uses: ChrisCarini/intellij-platform-plugin-verifier-action@v2.0.0
        with:
          ide-versions: .github/workflows/ide_versions_file.txt

      - name: Get log file path and print contents
        run: |
          echo ""The verifier log file [${{steps.verify.outputs.verification-output-log-filename}}] contents : "" ;
          cat ${{steps.verify.outputs.verification-output-log-filename}}
",,,,,,Java
27,https://github.com/griffon/griffon,"#
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2008-2021 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    name: Build
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cancel previous runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: 'jdk+fx'

      - name: Gradle caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-cache-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache gradle wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradlew') }}
          restore-keys: |
            ${{ runner.os }}-gradlew-

      - name: Setup xvfb (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      - name: Build
        run: ./gradlew build -S
",,,,,,Java
28,https://github.com/liquibase/liquibase,"name: Build and Test



concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      archive_test_results:
        description: 'If set to true, the unit and integration test results will be archived to the build artifacts page.'
        required: false
        default: 'false'
  # DAT branches can get triggered from this logic
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - labeled

  push:
    branches:
      - master
      - main
      - github-action-**
    paths-ignore:
      - '**.md'

env:
  MAVEN_VERSION: '3.9.2'

jobs:
  check_build_safety:
    permissions:
      contents: none
    name: Check if Build should be done
    runs-on: ubuntu-22.04
    steps:
      - name: Emit failure code for unsafe fork PRs
        if: github.event.pull_request && github.event.pull_request.head.repo.full_name != 'liquibase/liquibase' && github.event.label.name != 'SafeToBuild'
        run: |
          echo ""PR from Fork is NOT safe to build""
          echo ""A member of Liquibase team needs to apply label 'SafeToBuild'! ""
          exit 1

  setup:
    name: Setup
    needs: check_build_safety
    runs-on: ubuntu-22.04
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepoName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepoName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
      stablePro: ${{ steps.find-branches.outputs.stablePro }}
      timestamp: ${{ steps.get-date.outputs.date }}
      setupSuccessful: ""true""
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed(""Fail every 5 run attempts to catch accidental infinite loops"");
            }
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Get current date
        id: get-date
        run: echo ""::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S %Z')""

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput(""thisSha"", helper.getCurrentSha());
            core.setOutput(""thisBranchName"", helper.getCurrentBranch());
            core.setOutput(""thisBranchFileName"", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_\.]/g, ""_""));
            core.setOutput(""thisRepoName"", helper.getRepositoryName());
            core.setOutput(""thisRepoOwner"", helper.getRepositoryOwner());

            let proStatusMessage = ""success"";
            let proFailed = false;

            let branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput(""standAlonePR"", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput(""standAlonePR"", true);
            }

            if (!branch.lastSuccessfulRunNumber) {
              proFailed = true;
              proStatusMessage = ""Matching pro branch has never passed. Falling back to master""
              branch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"", [""main"", ""master""])
            }
            core.setOutput(""proBranchName"", branch.name);
            core.setOutput(""proBranchSha"", branch.sha);

            if (!proFailed) {
              if (!branch.workflowId) {
                proStatusMessage = ""does not have a ran workflow"";
                proFailed = true
              } else if ( branch.runStatus != ""completed"") {
                proStatusMessage = ""build is ""+ branch.runStatus;
                proFailed = true
              } else if ( branch.runConclusion != ""success"") {
                proStatusMessage = ""build conclusion was ""+branch.runConclusion;
                proFailed = true
              }
            }

            statusMessage = ""liquibase/liquibase-pro:""+branch.name+""@"" + branch.sha.substring(0, 7) + "" "" + proStatusMessage;
            console.log(""Pro failed?"" + proFailed + "": ""+statusMessage);

            github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": (proFailed ? ""failure"" : ""success""),
              ""target_url"": branch.runHtmlUrl,
              ""context"": ""Stable Liquibase Pro"",
              ""description"": statusMessage
            });

            core.setOutput(""stablePro"", !proFailed);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build:
    name: Build & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 20 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 20
          - os: windows-2019
            java: 20
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 11}}
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Build & Test Java 8
        if: ${{ matrix.java == 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" -pl '!liquibase-cdi-jakarta' clean verify -DskipITs
      - name: Build & Test Java non-jdk-8
        if: ${{ matrix.java != 8}}
        run: |
          mvn -B ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-DtrimStackTrace=false"" clean verify -DskipITs

      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Save Jacoco Report for Sonar
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-jacoco-test-results
          path: |
            ./liquibase-standard/target/jacoco.exec

      - name: Archive Modules
        if: ${{ matrix.java == 11 && matrix.os == 'ubuntu-22.04'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        testSystem:
           - db2
           - h2
           #- h2:1.4
           - hsqldb
           - mariadb
           - mssql
           - mysql
           - oracle
           - postgresql
           - sqlite
           - firebird
    needs: setup
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Prepare
        id: prepare
        uses: actions/github-script@v6
        with:
          script: |
            core.setOutput(""testResultsArtifact"", ""liquibase-test-results-integration-${{ matrix.testSystem }}"".replace(/[^a-zA-Z0-9\-_]/g, ""_""));

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'

      # getting from build results page. If we remove 0-snapshot then we will need settings.xml

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}
      - name: Restore Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      - name: Login to Artifactory
        uses: docker/login-action@v2
        with:
          registry: docker-dev.artifactory.datical.net
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: Run Tests
        run: mvn -B clean verify -DtrimStackTrace=false -Dliquibase.sdk.testSystem.test=${{ matrix.testSystem }} -Dliquibase.sdk.testSystem.acceptLicenses=${{ matrix.testSystem }} -Dtest='*IntegrationTest,*ExecutorTest' -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false

      - name: Archive Test Results
        if: ${{ inputs.archive_test_results == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.testResultsArtifact }}
          path: |
            ./**/target/surefire-reports

      - name: Save Jacoco Report for Sonar
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-integration-jacoco-test-results-${{ matrix.testSystem }}
          path: |
            ./liquibase-integration-tests/target/jacoco.exec

  sonar:
    needs: [ build, integration-test ]
    uses: liquibase/build-logic/.github/workflows/sonar-test-scan.yml@v0.4.7
    with:
      thisBranchName: ${{ needs.setup.outputs.thisBranchName }}
      thisSha: ${{ needs.setup.outputs.thisSha }}
      liquibaseBranchName: ${{ needs.setup.outputs.liquibaseBranchName }}
      pullRequestNumber: ${{ github.event.pull_request.number }}
      pullRequestBranchName: ${{ github.event.pull_request.head.ref }}
      pullRequestBaseBranchName: ${{ github.event.pull_request.base.ref }}
      testedClassesModuleName: liquibase-standard
      dbPlatforms: h2,hsqldb,mariadb,mssql,mysql,oracle,postgresql,sqlite,firebird
    secrets: inherit

  package:
    name: Package Artifacts
    runs-on: macos-latest
    needs: [ setup, build ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      # this includes all the tar files included in the previous runs. So in the next step we deploy what was previously build
      - name: Built Code Cache
        uses: actions/cache@v3.3.1
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      ##Cache based on install4j file, since changes to JVM is seen in there. If install4j version changes without changing the file, change the prefix letter before hashFiles to force a new cache
      - name: Install4j Cache
        uses: actions/cache@v3.3.1
        with:
          key: install4j-A${{ hashFiles('liquibase-dist/src/main/install4j/liquibase.install4j') }}
          path: ~/.install4j8/**

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'
          overwrite-settings: false
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      # look for dependencies in maven
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v21
        with:
          repositories: |
            [
              {
                ""id"": ""liquibase"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              },
              {
                ""id"": ""liquibase-pro"",
                ""url"": ""https://maven.pkg.github.com/liquibase/liquibase-pro"",
                ""releases"": {
                  ""enabled"": ""false""
                },
                ""snapshots"": {
                  ""enabled"": ""true"",
                  ""updatePolicy"": ""always""
                }
              }
            ]
          servers: |
            [
              {
                ""id"": ""liquibase-pro"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              },
              {
                ""id"": ""liquibase"",
                ""username"": ""liquibot"",
                ""password"": ""${{ secrets.LIQUIBOT_PAT }}""
              }
            ]

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: ${{ env.MAVEN_VERSION }}

      # Version artifact based off of branch
      - name: Version Artifact
        run: |
          version=${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          # Replace / with - in branch name
          version=$(echo ""$version"" | sed 's/\//-/g')
          mvn versions:set -DnewVersion=""$version""

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo ""Saving apple key""
          echo ""$INSTALL4J_APPLE_KEY"" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo ""Saving windows key""
          echo ""$INSTALL4J_WINDOWS_KEY"" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx
          # we are packaging and deploying liquibase tar which includes liquibase-commercial
          mvn -B -pl liquibase-dist -P liquibase-commercial source:jar package -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}""

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && tar -xzf ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz)

          ## verify that the contents of the tar matches the expectation
          echo ""Comparing the contents of the tar.gz with the expected contents (using baseline file in liquibase-dist directory) to ensure that no new files were accidentally added. A failure here indicates that a new file was added to the tar.gz, and it should either be rectififed or added to the baseline.""
          brew install tree --quiet
          tree liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT -o actual-distribution-contents.txt --noreport
          # remove first line of actual, because it contains the folder name, which the expected will not have
          echo ""$(tail -n +2 actual-distribution-contents.txt)"" > actual-distribution-contents.txt
          diff actual-distribution-contents.txt liquibase-dist/expected-distribution-contents.txt
          rm -rf actual-distribution-contents.txt
          
          ##create zip file from tar content
          (cd liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT && zip -r ../liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip *)
          ls liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT
          
          ##create installer - disabled here but run as nightly job and as part of release workflow
          # (cd liquibase-dist && ${{ github.workspace }}/.github/util/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;
          
          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.zip artifacts
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts/liquibase-core-0-SNAPSHOT.jar
          cp liquibase-core/target/liquibase-core-0-SNAPSHOT-sources.jar artifacts/liquibase-core-0-SNAPSHOT-sources.jar
          cp target/liquibase-0-SNAPSHOT-javadoc.jar artifacts/liquibase-core-0-SNAPSHOT-javadoc.jar

          ##create installer - disabled here but run as nightly job and as part of release workflow
          #cp liquibase-dist/target/liquibase-*-installer-* artifacts

          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT-javadoc.jar artifacts

          echo ""Source code not available for liquibase-commercial"" > /tmp/readme.source.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar readme.source.txt)

          echo ""Javadocs not available for liquibase-commercial"" > /tmp/readme.javadocs.txt
          (cd /tmp && jar cf liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar readme.javadocs.txt)

          commercialJarM2Location=/Users/runner/.m2/repository/org/liquibase/liquibase-commercial/${{ needs.setup.outputs.proBranchName }}-SNAPSHOT/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT.jar
          cp $commercialJarM2Location artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-sources.jar artifacts
          cp /tmp/liquibase-commercial-${{ needs.setup.outputs.proBranchName }}-SNAPSHOT-javadoc.jar artifacts

          .github/util/sign-artifacts.sh artifacts

          ##prepare branch-named convenience artifacts directories
          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.tar.gz
          cp liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/internal/lib/liquibase-core.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          #cp liquibase-core/target/liquibase-core-0-SNAPSHOT.jar artifacts-named/liquibase-core-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts-named/liquibase-maven-plugin-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi-jakarta/target/liquibase-cdi-jakarta-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-jakarta-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT-deps.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}-deps.jar
          cp $commercialJarM2Location artifacts-named/liquibase-commercial-${{ needs.setup.outputs.thisBranchFileName }}.jar

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchFileName }}
          path: liquibase-dist/target/liquibase-${{ needs.setup.outputs.thisBranchFileName }}-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchFileName }}
          path: artifacts-named/*


      # Publish to GitHub Packages. We are building a tar file which includes liquibase-commercial hence we need ""-Dliquibase-pro.version""
      - name: Publish tar.gz package to GPM
        run: |
          mvn -B -pl liquibase-dist -P liquibase-commercial clean deploy -DskipTests ""-Dliquibase-pro.version=${{ needs.setup.outputs.proBranchName }}-SNAPSHOT"" ""-Dbuild.timestamp=${{ needs.setup.outputs.timestamp }}"" ""-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}"" ""-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}"" ""-Dbuild.branch=${{ needs.setup.outputs.thisBranchFileName }}"" ""-Dbuild.number=${{ github.run_number }}"" ""-Dbuild.commit=${{ needs.setup.outputs.thisSha }}""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # this triggers the pro-tests and test-harness to run
  finish:
    name: Finish Build
    runs-on: ubuntu-22.04
    needs: [ setup, build, package, sonar]
    if: ${{ needs.setup.outputs.setupSuccessful }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Coordinate Liquibase-Pro
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            let currentBranchInfo = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro"");

            let thisStatus = ""${{ needs.package.result }}"" == ""success"" ? ""success"" : ""failure"";
            let stablePro = (""${{ needs.setup.outputs.stablePro }}"" == ""true"");
            let standalonePR = ""${{ needs.setup.outputs.standAlonePR }}"" == ""true"";

            console.log(""Stand alone PR: ""+standalonePR);

            let runFunctionalTests = false;
            let markFunctionalTestsStatus = ""failure"";
            let markFunctionalTestsDescription = ""Unexpected setup"";

            if (stablePro) {
              console.log(""Pro is stable"");

              runFunctionalTests = true;
              markFunctionalTestsStatus = ""pending"";
              markFunctionalTestsDescription = ""Trigger internal functional tests"";
            } else {
              console.log(""Last pro was unstable"");

              runFunctionalTests = false;
              markFunctionalTestsStatus = ""failure"";
              markFunctionalTestsDescription = ""Liquibase Pro is unstable"";

              let checks = await github.rest.repos.listCommitStatusesForRef({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""ref"": currentBranchInfo.sha
              });

              let failedCheckingUs = false;
              if (standalonePR) {
                for (let status of checks.data) {
                  if (status.context == ""Stable Liquibase Core"") {
                    console.log(""Stable Liquibase Core is ""+ status.state);
                    failedCheckingUs = (status.state == ""failure"");
                  }
                }
              }

              if (failedCheckingUs) {
                console.log(""Rerun liquibase-commercial that was waiting on us"");

                //octokit removed the retryWorkflow function
                github.request(""POST ""+currentBranchInfo.runRerunUrl);

                //await github.rest.actions.retryWorkflow({
                //    ""owner"": ""liquibase"",
                //    ""repo"": ""liquibase-pro"",
                //    ""run_id"": currentBranchInfo.workflowId
                //});
              }
            }

            if (standalonePR) {
              console.log(""Do not mark base pro branch as included in this"");
            } else {
              console.log(""Mark 'Included in Liquibase Core' status as ""+thisStatus);
              github.rest.repos.createCommitStatus({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro"",
                ""sha"": currentBranchInfo.sha,
                ""state"": thisStatus,
                ""context"": ""Stable Liquibase Core"",
                ""target_url"": currentBranchInfo.runHtmlUrl,
                ""description"": ""Latest Liquibase Core build""
              });
            }

            if (runFunctionalTests) {
              let testsBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-pro-tests"");

              let notices = [];
              if (context.payload.pull_request) {
                console.log(""Sending pull request information"");
                notices = [""Triggered by PR "" + context.payload.pull_request.html_url];
              }
              console.log(""Trigger functional tests"");
              let workflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-pro-tests"",
                ""workflow_id"": ""test.yml"",
                ""ref"": testsBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });

              let testHarnessBranch = await helper.findMatchingBranch(""liquibase"", ""liquibase-test-harness"");
              if (testHarnessBranch.name == ""main"" || testHarnessBranch.name == ""master"") {
                testHarnessBranch.name = ""develop"";
              }
            
              console.log(""Trigger Test Harness tests"");
              let testHarnessWorkflowDispatch = await github.rest.actions.createWorkflowDispatch({
                ""owner"": ""liquibase"",
                ""repo"": ""liquibase-test-harness"",
                ""workflow_id"": ""main.yml"",
                ""ref"": testHarnessBranch.name,
                ""inputs"": {
                  ""liquibaseCommit"": helper.getCurrentSha(),
                  ""runDescription"": ""Triggered by https://github.com/liquibase/liquibase/actions/runs/""+context.runId,
                  ""liquibaseBranch"": helper.getCurrentBranch(),
                  ""liquibaseRepo"": ""liquibase/liquibase"",
                  ""runDetails"": JSON.stringify({
                    ""liquibaseBranch"": helper.getCurrentBranch(),
                    ""notices"": notices
                  })
                }
              });
            }

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Functional Tests"",
              ""description"": markFunctionalTestsDescription
            });

            await github.rest.repos.createCommitStatus({
              ""owner"": ""liquibase"",
              ""repo"": ""liquibase"",
              ""sha"": helper.getCurrentSha(),
              ""state"": markFunctionalTestsStatus,
              ""context"": ""Run Test Harness"",
              ""description"": markFunctionalTestsDescription
            });
",,,,,,Java
29,https://github.com/eclipse/jetty.project,"name: ""CodeQL""

on:
  push:
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ 'jetty-10.[1-9]?[0-9].x', 'jetty-11.[1-9]?[0-9].x', 'jetty-12.[1-9]?[0-9].x' ]
  schedule:
    - cron: '22 1 * * 2'

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        languages:
          - java
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install and setup JDK 11
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-10.') ||
          startsWith(github.ref, 'refs/heads/jetty-11.') ||
          startsWith(github.base_ref, 'jetty-10.') ||
          startsWith(github.base_ref, 'jetty-11.')
          }}
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      # Install and setup JDK 17
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        if: ${{
          startsWith(github.ref, 'refs/heads/jetty-12.') ||
          startsWith(github.base_ref, 'jetty-12.')
          }}
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.languages }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with ""+"" to use these queries and those in the config file.

          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
          
      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6   

      - name: Clean install dependencies and build
        run: mvn clean install -DskipTests -B

      # ℹ️ Command-line programs to run using the OS shell.
      # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

      #   If the Autobuild fails above, remove it and uncomment the following three lines.
      #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

      # - run: |
      #   echo ""Run, Build Application using script""
      #   ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
",,,,,,Java
30,https://github.com/netflix/astyanax,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
31,https://github.com/netflix/priam,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
32,https://github.com/apereo/cas,"name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server""
  GRADLE_BUILD_OPTIONS: ""--no-daemon -x check -x test -x javadoc --configure-on-demand --max-workers=8 --no-configuration-cache""
  TERM: xterm-256color
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_BUILDCACHE_USER: ci
  GRADLE_BUILDCACHE_PSW: ${{ secrets.GRADLE_BUILDCACHE_PSW }}
  GH_PACKAGE_REGISTRY_USER: ${{ secrets.GH_PACKAGE_REGISTRY_USER }}
  GH_PACKAGE_REGISTRY_TOKEN: ${{ secrets.GH_PACKAGE_REGISTRY_TOKEN }}
  JDK_CURRENT: 21
  JDK_LATEST: 21
  JDK_DISTRIBUTION: ""corretto""

##########################################################################

on:
  schedule:
    - cron: '0 23 * * *'
#  push:
#    branches: [ master ]
#  pull_request:
#    types: [ labeled ]
#    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: macos-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}

  ##########################################################################

  initialize:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: ls ./ci && find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh

  ##########################################################################

  build:
    needs: [initialize]
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
        shell: bash
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build ${{ env.GRADLE_BUILD_OPTIONS }}
      - uses: actions/upload-artifact@v3
        with:
          name: binary-artifacts
          path: ./**/build/libs/*.*

  ##########################################################################

  build-latest-jdk:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_LATEST }}
          distribution: ${{ env.JDK_DISTRIBUTION }}
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        run: ./gradlew build -DskipAot=true ${{ env.GRADLE_BUILD_OPTIONS }}

  ##########################################################################

  build-graalvm:
    runs-on: macos-latest
    needs: [initialize]
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      - uses: graalvm/setup-graalvm@v1
        with:
          distribution: 'graalvm'
          java-version: ${{ env.JDK_CURRENT }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'
          set-java-home: 'true'
      - name: GraalVM Versions
        run: |
          echo ""GRAALVM_HOME: $GRAALVM_HOME""
          echo ""JAVA_HOME: $JAVA_HOME""
          java --version
          native-image --version
      - name: Setup Gradle Wrapper Cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ github.sha }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
      - name: Initialize
        run: find ./ci -type f -name ""*.sh"" -exec chmod +x ""{}"" \; && ./ci/init-build.sh
      - uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Build with Gradle
        timeout-minutes: 90
        run: chmod +x ./ci/tests/native/build.sh && ./ci/tests/native/build.sh
",,,,,,Java
33,https://github.com/bwaldvogel/mongo-java-server,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '11', '17', '20' ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - name: Build with Gradle
      run: ./gradlew build

  publishCoverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Publish coverage
      run: ./gradlew build
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml
",,,,,,Java
34,https://github.com/openstreetmap/osmosis,"name: Continuous Integration
on: [push, pull_request]
jobs:
  Continous-Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: ./docker.sh ./gradlew build
",,,,,,Java
35,https://github.com/geotools/geotools,"name: Assembly bundle and test

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dmaven.wagon.httpconnectionManager.ttlSeconds=25 -Dmaven.wagon.http.retryHandler.count=3 -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN

jobs:
  build:
    runs-on: [ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 11
    - name: Maven repository caching
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: gt-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          gt-maven-
    - name: Setup python for docs
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip' # caching pip dependencies from requirements.txt below
    - name: Setup python pip requirements for building docs
      working-directory: docs
      run: |
        pip install -r requirements.txt
    - name: Disable checksum offloading
      # See: https://github.com/actions/virtual-environments/issues/1187#issuecomment-686735760
      run: sudo ethtool -K eth0 tx off rx off
    - name: Build with Maven
      run: |
        mvn -B clean install -DskipTests -Dall -T2 --file pom.xml
    - name: Assemble downloads
      run: |
        mvn -B -DskipTests assembly:single -file release/pom.xml
    - name: Test bin download run and compile
      shell: bash
      working-directory: release/target
      run: |
        echo ""List assemblies:""
        ls geotools-*.zip
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*bin.zip` -d bin-download
        cd bin-download
        cd `ls -d geotools-*/`
        echo ""Running GeoTools.main()...""
        java -cp ""lib/*"" org.geotools.util.factory.GeoTools
        echo ""Compiling Quickstart.java""
        mkdir bin
        javac -cp ""lib/*"" -d bin src/org/geotools/tutorial/quickstart/Quickstart.java
        ls -R bin | grep Quickstart
    - name: Test user guide download
      shell: bash
      working-directory: release/target
      run: |
        echo ""Unzip bin assembly for testing""
        unzip -q `ls geotools-*userguide.zip` -d userguide-download
        cd userguide-download
        cd `ls -d geotools-*/`
        
        
    - name: Remove SNAPSHOT jars from repository
      run: |
        find ~/.m2/repository -name ""*SNAPSHOT*"" -type d | xargs rm -rf {}
",,,,,,Java
36,https://github.com/sonyxperiadev/chkbugreport,"name: Java CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build core and unit test with gradle
      run: cd core && ./gradlew build
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ChkBugReport
        path: core/build/distributions/ChkBugReport.tar
",,,,,,Java
37,https://github.com/marytts/marytts,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        java-version: [ 8, 11, 12 ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        run: ./gradlew build

      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
",,,,,,Java
38,https://github.com/kaljurand/k6nele,"name: Android CI

on:

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Java 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
39,https://github.com/spring-projects/spring-security-kerberos,"name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'spring-projects/spring-security-kerberos' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - nickname: linux adopt 17
            version: 17
            distribution: adopt
          - nickname: linux liberica 17
            version: 17
            distribution: liberica
    name: CI Build ${{ matrix.nickname }}
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.version }}
      - name: Build
        env:
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: ./gradlew build
      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: buildreports
          retention-days: 1
          path: |
            */build/reports
            spring-security-kerberos-samples/*/build/reports
  publish:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v3
      - uses: spring-io/spring-gradle-build-action@v1
        with:
          distribution: adopt
          java-version: 17
      - name: Build
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_PRIVATE_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_PASSPHRASE }}
          OSSRH_TOKEN_USERNAME: ${{ secrets.OSSRH_S01_TOKEN_USERNAME }}
          OSSRH_TOKEN_PASSWORD: ${{ secrets.OSSRH_S01_TOKEN_PASSWORD }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
          GRADLE_ENTERPRISE_CACHE_USERNAME: ${{ secrets.GRADLE_ENTERPRISE_CACHE_USER }}
          GRADLE_ENTERPRISE_CACHE_PASSWORD: ${{ secrets.GRADLE_ENTERPRISE_CACHE_PASSWORD }}
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_SECRET_ACCESS_KEY }}
        run: |
          ./gradlew build publishArtifacts \
            -PossrhUsername=""$OSSRH_TOKEN_USERNAME"" \
            -PossrhPassword=""$OSSRH_TOKEN_PASSWORD"" \
            -PartifactoryUsername=""$ARTIFACTORY_USERNAME"" \
            -PartifactoryPassword=""$ARTIFACTORY_PASSWORD""
  docs:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - uses: actions/checkout@v3
      - name: Dispatch (partial build)
        if: github.ref_type == 'branch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run deploy-docs.yml -r docs-build -f build-refname=${{ github.ref_name }}
",,,,,,Java
40,https://github.com/gentlecat/counter,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
41,https://github.com/apereo/java-cas-client,"#
# Licensed to Apereo under one or more contributor license
# agreements. See the NOTICE file distributed with this work
# for additional information regarding copyright ownership.
# Apereo licenses this file to you under the Apache License,
# Version 2.0 (the ""License""); you may not use this file
# except in compliance with the License.  You may obtain a
# copy of the License at the following location:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

env:
  JAVA_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  GRADLE_OPTS: ""-Xms512m -Xmx6048m -Xss128m -XX:ReservedCodeCacheSize=512m -server -XX:+UseG1GC""
  TERM: xterm-256color
  SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
  SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
  GH_TOKEN: ${{ secrets.GH_PAGES_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  JDK_CURRENT: 17

##########################################################################

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

##########################################################################

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: cancel-previous-runs
    steps:
      - uses: actions/checkout@v4
      #      - name: Setup tmate session
      #        uses: mxschmitt/action-tmate@v3
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Build with Gradle
        run: mvn clean install

  ##########################################################################

  publish-snapshots:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JDK_CURRENT }}
          distribution: 'temurin'
      - name: Publish SNAPSHOTs
        if: ${{ env.SONATYPE_USER != null && env.SONATYPE_PWD != null }}
        run:  mvn deploy --settings ./.github/workflows/settings.xml

",,,,,,Java
42,https://github.com/dotcms/core,"name: Sonar Qube Scan Gradle
on:
  push:
    branches:
      - master 
      - testing-sonarqube
    paths: ['dotCMS/**']
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:    
      - master
      - release-*
    paths: ['dotCMS/**']

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          SONAR_SCANNER_OPTS: ""-Xmx3g""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: cd dotCMS && ./gradlew generateDependenciesFromMaven && ./gradlew build sonarqube --info
",,,,,,Java
43,https://github.com/kshoji/usb-midi-driver,"name: Android CI

on:
  push:
    branches: [ ""develop"" ]
  pull_request:
    branches: [ ""develop"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
44,https://github.com/romraider/romraider,"name: RomRaider build

on: [push,pull_request]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Java 8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
      - name: set JRE_DIR environment variable
        shell: bash
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: echo ::set-env name=JRE_DIR::$(echo $JAVA_HOME)/jre

      - name: Test Compiler
        run: javac -version

      - name: All
        run: |
          echo JRE_DIR=$JRE_DIR
          ant all
",,,,,,Java
45,https://github.com/netflix/archaius,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - 2.x

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '8' # For publishing build with 8 for compatibility
          distribution: 'zulu'
      - uses: actions/cache@v3
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v3
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
46,https://github.com/find-sec-bugs/find-sec-bugs,"# CI Task using https://github.com/jwgmeligmeyling/spotbugs-github-action

name: Java CI with SpotBugs

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run: mvn clean install -DskipTests com.github.spotbugs:spotbugs-maven-plugin:3.1.12:spotbugs
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'",,,,,,Java
47,https://github.com/jknack/handlebars.java,"name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java_version: [1.8, 11, 15, 17]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Mustache Specs
        run: |
          git submodule update --init --recursive
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java_version }}
      - name: Install
        run: mvn clean install -DskipTests --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
      - name: Build
        run: mvn clean package --batch-mode --no-transfer-progress
        env:
          BUILD_PORT: 0
          BUILD_SECURE_PORT: 0
",,,,,,Java
48,https://github.com/wolpi/prim-ftpd,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Output event
      env:
        EVENT: ${{ github.event_name }}
      run: echo github.event_name $EVENT.
    - name: Publish package
      if: ${{ github.event_name == 'push' }}
      uses: gradle/gradle-build-action@v2
      with:
        arguments: publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

",,,,,,Java
49,https://github.com/netflix/governator,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
50,https://github.com/lemire/javafastpfor,"name: Java CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java: [ 11, 16 ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2.5.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
      - name: Build and test with Maven
        run: mvn package
      - name: Build example
        run: javac -cp target/classes/:. example.java
      - name: Run example
        run: java -cp target/classes/:. example",,,,,,Java
51,https://github.com/greenrobot/eventbus,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Gradle Info
        run: ./gradlew -version
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
52,https://github.com/ron190/jsql-injection,"on:
  push:
    branches: [ master ]
    
env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  MAVEN_NASHORN: """"
  DOCKER_RESOURCES: ./model/src/test/resources/docker

jobs:

  build-jdk11:
    name: Test view on Docker (jdk-11)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      JSQL_DOCKERFILE: 3.8.1-jdk-11-slim
      MAVEN_NASHORN: -Dnashorn.args=--no-deprecation-warning
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Disable shallow clone to prevent Sonar warning
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Set Maven dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Install Maven dependencies
        run: mvn clean install -DskipTests dependency:tree

      - name: Build project container
        run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

      - name: Unit tests
        run: $DOCKER_RESOURCES/scripts/run-on-docker-no-network.sh 'cd view/ && mvn clean install -P tests'

  build:
    name: Tests on Docker
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - jdk: 3.8.6-eclipse-temurin-18
          nashorn: """"
        - jdk: 3.9.3-eclipse-temurin-20
          nashorn: """"
    env:
      JSQL_DOCKERFILE: ${{ matrix.jdk }}
      MAVEN_NASHORN: ${{ matrix.nashorn }}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Disable shallow clone to prevent Sonar warning
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    
    - name: Set Maven dependencies cache
      uses: actions/cache@v3
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-maven-
              
    - name: Install Maven dependencies
      run: mvn clean install -DskipTests dependency:tree
        
    - name: Run databases and LAMP
      run: |
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml build --parallel
        docker-compose -f $DOCKER_RESOURCES/docker-compose.yml up -d

    - name: List images and containers
      run: docker images && docker container ls

    - name: Database health checks and configuration
      run: |
        $DOCKER_RESOURCES/scripts/healthcheck/healthcheck.sh
        $DOCKER_RESOURCES/scripts/buff.sh
        $DOCKER_RESOURCES/scripts/verify.sh

    - name: Build project container
      run: docker build -t jsql:latest --build-arg JSQL_DOCKERFILE -f $DOCKER_RESOURCES/Dockerfile.jsql .

    - name: Unit and integration tests with Sonar scan
      # Profile usage for skipITs/skipTests (env var MAVEN_OPS not working)
      # Note: 'mvn sonar:sonar' not working, modules reports not found, use 'mvn verify sonar:sonar' for reliability
      # Note: gh actions sonarsource/sonarqube-scan-action not working properly => analysis not reliable
      run: $DOCKER_RESOURCES/scripts/run-on-docker.sh 'mvn clean install sonar:sonar -P tests org.pitest:pitest-maven:mutationCoverage'

    - name: Databases statistics
      run: $DOCKER_RESOURCES/scripts/verify.sh

    - name: Copy files and coverage reports from container
      # Sonar scans unmerged reports, Codacy/Codecov requires scanning each files (or reports merged)
      run: |
        mkdir -p shared-resources/model shared-resources/view
        docker cp docker_jsql-container:view/. shared-resources/view
        docker cp docker_jsql-container:model/. shared-resources/model
        docker cp docker_jsql-container:pom.xml shared-resources

    - name: Codecov scan
      run: cd shared-resources && bash <(curl -s https://codecov.io/bash) || true

    - name: Codacy scan
      run: cd shared-resources && bash <(curl -Ls https://coverage.codacy.com/get.sh) || true

    - name: Publish coverage
      run: |
        git checkout docs
        rm -r view/target/site/ view/target/pit-reports/ model/target/site/ model/target/pit-reports/ || echo 'Folder(s) not found'
        FOLDER=view/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/site/jacoco bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=view/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        FOLDER=model/target/pit-reports bash -c 'mkdir -p $FOLDER/ && cp -r shared-resources/$FOLDER/. $FOLDER/'
        git config user.name ""Github Actions""
        git config user.email no-response@github.com    
        git pull -s ours  # ignore remote changes when updated by parallel jobs
        # folders view/target model/target contain other build files from 'Install Maven dependencies'
        git add -f view/target/site/jacoco model/target/site/jacoco view/target/pit-reports model/target/pit-reports
        git commit -m ""Publish jacoco and pitest reports""
        git push

  codeql:
    name: CodeQL
    uses: ./.github/workflows/run-codeql.yml

  release:
    needs: [build-jdk11, build, codeql]
    name: Publish
    uses: ./.github/workflows/release.yml
    secrets: inherit",,,,,,Java
53,https://github.com/square/pollexor,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1.1.0

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build javadoc

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'square/pollexor' }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Java
54,https://github.com/netflix/eureka,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
55,https://github.com/qiniu/android-sdk,"on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
name: Run Test Cases
jobs:
  test-on-mac:
    runs-on: macos-12
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Setup Java Version
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: Run Cases
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 22
          profile: Nexus 6
          arch: x86_64
          script: |
            ./gradlew connectedCheck
            ./gradlew build
            ./gradlew :library:createDebugAndroidTestCoverageReport --info --stacktrace
            ./gradlew connectedAndroidTest  --info --stacktrace
      - name: Upload coverage.txt
        run: |
          bash <(curl -s https://codecov.io/bash)
",,,,,,Java
56,https://github.com/libgdx/libgdx,"name: Build and Publish

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    branches: [ master ]
  release:
    types: [ published ]

jobs:

  natives-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build macOS natives
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo mv /Applications/Xcode.app /Applications/Xcode.app.bak
          sudo mv /Applications/Xcode_13.2.app /Applications/Xcode.app
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version
          ./gradlew jniGen jnigenBuildIOS
          ./backends/gdx-backend-robovm/build-objectal.sh

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" -o -name ""*.xcframework""  | grep ""libs"" > native-files-list
          zip -r natives-ios -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-ios.zip
          path: natives-ios.zip

  natives-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build macOS natives
        run: |
          # See https://github.com/actions/virtual-environments/issues/2557
          sudo mv /Library/Developer/CommandLineTools/SDKs/* /tmp
          sudo mv /Applications/Xcode.app /Applications/Xcode.app.bak
          sudo mv /Applications/Xcode_13.2.app /Applications/Xcode.app
          sudo xcode-select -switch /Applications/Xcode.app
          /usr/bin/xcodebuild -version
          ./gradlew jniGen jnigenBuildMacOsX64 jnigenBuildMacOsXARM64

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-macos -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-macos.zip
          path: natives-macos.zip

  natives-linux:
    runs-on: ubuntu-20.04
    container:
      image: ubuntu:18.04
    steps:
      - name: Install dependencies into minimal dockerfile
        run: |
          # ubuntu dockerfile is very minimal (only 122 packages are installed)
          # need to install updated git (from official git ppa)
          apt update
          apt install -y software-properties-common
          add-apt-repository ppa:git-core/ppa -y
          # install dependencies expected by other steps
          apt update
          apt install -y git \
          curl \
          ca-certificates \
          wget \
          bzip2 \
          zip \
          unzip \
          xz-utils \
          maven \
          ant sudo locales

          # set Locale to en_US.UTF-8 (avoids hang during compilation)
          locale-gen en_US.UTF-8
          echo ""LANG=en_US.UTF-8"" >> $GITHUB_ENV
          echo ""LANGUAGE=en_US.UTF-8"" >> $GITHUB_ENV
          echo ""LC_ALL=en_US.UTF-8"" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes gcc g++
          sudo apt install -y --force-yes gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
          sudo apt install -y --force-yes gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross

      - name: Build Linux natives
        run: |
          ./gradlew jniGen jnigenBuildLinux64 jnigenBuildLinuxARM jnigenBuildLinuxARM64

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-linux -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-linux.zip
          path: natives-linux.zip

  natives-windows:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Install cross-compilation toolchains
        run: |
          sudo apt update
          sudo apt install -y --force-yes mingw-w64 lib32z1

      - name: Build Windows natives
        run: |
          ./gradlew jniGen jnigenBuildWindows64 jnigenBuildWindows

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-windows -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-windows.zip
          path: natives-windows.zip

  natives-android:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Android natives
        run: |
          export NDK_HOME=$ANDROID_NDK_HOME
          ./gradlew jniGen jnigenBuildAndroid

      - name: Pack artifacts
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" | grep ""libs"" > native-files-list
          zip natives-android -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives-android.zip
          path: natives-android.zip

  pack-natives:
    runs-on: ubuntu-20.04
    needs: [natives-macos, natives-linux, natives-windows, natives-ios, natives-android]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Download natives-ios artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-ios.zip

      - name: Download natives-macos artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-macos.zip

      - name: Download natives-linux artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-linux.zip

      - name: Download natives-windows artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-windows.zip

      - name: Download natives-android artifact
        uses: actions/download-artifact@v2
        with:
          name: natives-android.zip

      - name: Unpack natives
        run: |
          unzip -o natives-ios.zip
          unzip -o natives-macos.zip
          unzip -o natives-linux.zip
          unzip -o natives-windows.zip
          unzip -o natives-android.zip

      - name: Pack desktop natives
        run: |
          ./gradlew jniGen
          ant -f gdx/jni/build.xml pack-natives
          ant -f extensions/gdx-box2d/gdx-box2d/jni/build.xml pack-natives
          ant -f extensions/gdx-freetype/jni/build.xml pack-natives
          ant -f extensions/gdx-bullet/jni/build.xml pack-natives

      - name: Pack natives
        run: |
          find .  -name ""*.a"" -o -name ""*.dll"" -o -name ""*.dylib"" -o -name ""*.so"" -o -name ""*-natives.jar"" -o -name ""*.xcframework"" | grep ""libs"" > native-files-list
          zip -r natives -@ < native-files-list

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: natives.zip
          path: natives.zip

      - name: Upload artifacts to S3
        if: env.AWS_ACCESS_KEY_ID != null
        run: |
          aws s3 cp natives.zip s3://libgdx-nightlies/libgdx-nightlies/natives.zip

  publish:
    runs-on: ubuntu-20.04
    needs: pack-natives
    env:
      ORG_GRADLE_PROJECT_MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      ORG_GRADLE_PROJECT_MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Download natives artifact
        uses: actions/download-artifact@v2
        with:
          name: natives.zip

      - name: Unpack natives
        run: |
          unzip -o natives.zip

      - name: Fetch external natives
        run: |
          ./gradlew fetchExternalNatives

      - name: Snapshot build deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && github.repository_owner == 'libgdx'
        run: |
          ./gradlew build publish

      - name: Import GPG key
        if: github.event_name == 'release' && github.repository_owner == 'libgdx'
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@1c6a9e9d3594f2d743f1b1dd7669ab0dfdffa922
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Release build deploy
        if: github.event_name == 'release' && github.repository_owner == 'libgdx'
        run: ./gradlew build publish -PRELEASE -Psigning.gnupg.keyId=${{ secrets.GPG_KEYID }} -Psigning.gnupg.passphrase=${{ secrets.GPG_PASSPHRASE }} -Psigning.gnupg.keyName=${{ secrets.GPG_KEYID }}

  build-and-upload-runnables:
    runs-on: ubuntu-20.04
    needs: pack-natives
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_EC2_METADATA_DISABLED: true
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build Runnables
        run: |
          ./gradlew clean fetchNatives
          ./gradlew buildRunnables build
          
      - name: Upload artifacts to S3
        if: env.AWS_ACCESS_KEY_ID != null
        run: |
          aws s3 cp ./extensions/gdx-tools/build/libs/ s3://libgdx-nightlies/libgdx-runnables/ --recursive
          aws s3 cp ./extensions/gdx-setup/build/libs/ s3://libgdx-nightlies/libgdx-runnables/ --recursive
",,,,,,Java
57,https://github.com/robo-code/robocode,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Gradle
      run: ./gradlew build

    - name: robocode.core test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.core-test-result
        path: robocode.core/build/reports/tests/test

    - name: robocode.host test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.host-test-result
        path: robocode.host/build/reports/tests/test

    - name: robocode.tests test artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: robocode.tests-result
        path: robocode.tests/build/reports/tests/test

    - name: setup binary artifact
      uses: actions/upload-artifact@v2
      with:
        path: build/robocode-*-setup.jar
",,,,,,Java
58,https://github.com/flansmods/flansmod,"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: build-artifacts
        path: build/output/
",,,,,,Java
59,https://github.com/drallgood/jpasskit,"# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: ""CodeQL""

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '29 15 * * 4'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with ""+"" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 https://git.io/JvXDl

    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release
    - run: |
        mvn clean install
        

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
",,,,,,Java
60,https://github.com/lmax-exchange/disruptor,"name: Java CI with Gradle

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11, 17 ]
    name: Java ${{ matrix.java }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: libs-and-reports
          path: |
            build/libs
            build/reports
",,,,,,Java
61,https://github.com/openrocket/openrocket,"name: Build

on: 
  push:
    branches:
      - unstable
  pull_request:
    branches:
      - unstable

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Ant build
        run: ant -noinput -buildfile build.xml clean check jar unittest
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: openrocket_build_${{ github.run_number }}
          path: ${{github.workspace}}/swing/build/jar/OpenRocket.jar

",,,,,,Java
62,https://github.com/renanse/ardor3d,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: ardor3d-*/build/libs
",,,,,,Java
63,https://github.com/dreamhead/moco,"name: Build

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java-version: [""8"", ""11"", ""17"", ""21""]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Java ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '${{ matrix.java-version }}'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Build
        run: ./gradlew build
",,,,,,Java
64,https://github.com/junkdog/artemis-odb,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install -Pgwttest",,,,,,Java
65,https://github.com/apache/druid,"# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the ""License""); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: ""Cron Job ITs""
on:
  schedule: # Runs by default on master branch
    - cron: '0 3 * * *' # Runs every day at 3:00 AM UTC
  pull_request:
    paths:
      - 'owasp-dependency-check-suppressions.xml'
    branches:
      - master
      - '[0-9]+.[0-9]+.[0-9]+' # release branches
      - '[0-9]+.[0-9]+.[0-9]+-[A-Za-z0-9]+' # release branches

jobs:
  build:
    if: (github.event_name == 'schedule' && github.repository == 'apache/druid')
    name: build (jdk8)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'

      - name: Cache Maven m2 repository
        id: maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-8-${{ github.sha }}

      - name: Maven build
        id: maven_build
        run: |
          ./it.sh ci

  integration-index-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [batch-index, input-format, input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-index-slow, kafka-transactional-index, kafka-transactional-index-slow, kafka-data-format, ldap-security, realtime-index, append-ingestion, compaction]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      group: ${{ matrix.testing_group }}

  integration-index-tests-indexer:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ input-source, perfect-rollup-parallel-batch-index, kafka-index, kafka-transactional-index, kafka-index-slow, kafka-transactional-index-slow, kafka-data-format, append-ingestion, compaction ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: indexer
      group: ${{ matrix.testing_group }}

  integration-query-tests-middleManager:
    strategy:
      fail-fast: false
      matrix:
        testing_group: [ query, query-retry, query-error, security, high-availability ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -Dgroups=${{ matrix.testing_group }}
      use_indexer: middleManager
      override_config_path: ./environment-configs/test-groups/prepopulated-data
      group: ${{ matrix.testing_group }}

  integration-other-tests:
    strategy:
      fail-fast: false
      matrix:
        indexer: [ middleManager, indexer ]
    uses: ./.github/workflows/reusable-standard-its.yml
    needs: build
    with:
      build_jdk: 8
      runtime_jdk: 11
      testing_groups: -DexcludedGroups=batch-index,input-format,input-source,perfect-rollup-parallel-batch-index,kafka-index,query,query-retry,query-error,realtime-index,security,ldap-security,s3-deep-storage,gcs-deep-storage,azure-deep-storage,hdfs-deep-storage,s3-ingestion,kinesis-index,kinesis-data-format,kafka-transactional-index,kafka-index-slow,kafka-transactional-index-slow,kafka-data-format,hadoop-s3-to-s3-deep-storage,hadoop-s3-to-hdfs-deep-storage,hadoop-azure-to-azure-deep-storage,hadoop-azure-to-hdfs-deep-storage,hadoop-gcs-to-gcs-deep-storage,hadoop-gcs-to-hdfs-deep-storage,aliyun-oss-deep-storage,append-ingestion,compaction,high-availability,upgrade,shuffle-deep-store,custom-coordinator-duties
      use_indexer: ${{ matrix.indexer }}
      group: other

  security_vulnerabilities:
    if: github.repository == 'apache/druid'
    name: security vulnerabilities
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'zulu'
          cache: maven

      - name: maven build # needed to rebuild incase of maven snapshot resolution fails
        run: mvn clean install dependency:go-offline -P dist -P skip-static-checks,skip-tests -Dmaven.javadoc.skip=true -Dcyclonedx.skip=true -Dweb.console.skip=true

      - name: security vulnerabilities check
        run: |
          mvn dependency-check:purge dependency-check:check || { echo ""
          The OWASP dependency check has found security vulnerabilities. Please use a newer version
          of the dependency that does not have vulnerabilities. To see a report run
          `mvn dependency-check:check`
          If the analysis has false positives,
          they can be suppressed by adding entries to owasp-dependency-check-suppressions.xml (for more
          information, see https://jeremylong.github.io/DependencyCheck/general/suppression.html).
          "" && false; }
",,,,,,Java
66,https://github.com/forgeessentials/forgeessentials,"# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - '**'
  pull_request: {}
  release:
    types: released
env:
  BUILD_NUMBER: 'UNOFFICIAL-${{ github.sha }}'
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: PR
    outputs:
      canContinue: ${{ github.event_name != 'push' || steps.PR.outputs.pr_found != 'true' || steps.PR.outputs.pr_merged_at != null }}
  build:
    needs: check
    runs-on: ubuntu-latest
    if: needs.check.outputs.canContinue == 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle
      - name: Build with Gradle
        run: |
         chmod +x gradlew
         ./gradlew build
      - uses: actions/upload-artifact@v2
        with:
          name: binaries-${{ env.BUILD_NUMBER }}
          path: ./build/libs/
      - uses: actions/upload-artifact@v2
        with:
          name: ts-files-${{ github.sha }}
          path: jscripting/*.d.ts",,,,,,Java
67,https://github.com/ukanth/afwall,"name: Android CI

on:
  push:
    branches: [ beta ]
  pull_request:
    branches: [ beta ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
68,https://github.com/chainfire/libsuperuser,"name: ci
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build
",,,,,,Java
69,https://github.com/banmanagement/banmanager,"name: Java CI

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '0 0 * * 0' # weekly

jobs:
  build:
    runs-on: ubuntu-latest
    name: Java ${{ matrix.java }} - ${{ matrix.storageType }}
    strategy:
      matrix:
        include:
          - storageType: mariadb
            java: 8
          - storageType: h2
            java: 8
          - storageType: mariadb
            java: 11
          - storageType: h2
            java: 11

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        env:
          STORAGE_TYPE: ${{ matrix.storageType }}
        run: ./gradlew build

      - name: Publish to Maven Central
        # only publish once
        if: github.ref == 'refs/heads/master' && matrix.java == '8' && matrix.storageType == 'h2'
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEUSERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.ORG_GRADLE_PROJECT_SONATYPEPASSWORD }}
          ORG_GRADLE_PROJECT_signingKey : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEY }}
          ORG_GRADLE_PROJECT_signingPassword : ${{ secrets.ORG_GRADLE_PROJECT_SIGNINGINMEMORYKEYPASSWORD }}
        run: |
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
",,,,,,Java
70,https://github.com/llbit/chunky,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Upload documentation
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Docs
        path: build/docs/
    - name: Build release jar
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        case ""${GITHUB_EVENT_NAME}"" in
          ""pull_request"")
            ./gradlew buildReleaseJar -PprereleaseTag=""PR.${PR_NUMBER}""
            ;;
          ""push"")
            ./gradlew buildReleaseJar -PprereleaseTag=""SNAPSHOT""
            ;;
          *)
            ./gradlew buildReleaseJar
            ;;
        esac
    - name: Upload build
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Build
        path: build/installer
    - name: Upload build
      uses: actions/upload-artifact@v2.2.2
      with:
        name: Chunky Core
        path: build/chunky-core-*.jar
",,,,,,Java
71,https://github.com/netflix/blitz4j,"name: Snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
72,https://github.com/netflix/hystrix,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
73,https://github.com/journeyapps/zxing-android-embedded,"name: Build Android

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build and Lint with Gradle
        run: ./gradlew build
      - name: Archive lint results
        uses: actions/upload-artifact@v2
        with:
          name: lint-results
          path: ""**/build/reports/lint-results*""
",,,,,,Java
74,https://github.com/calimero-project/calimero-core,"name: CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        java: [17, 19]
    name: Java ${{ matrix.java }} sample

    steps:
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-core
        path: calimero-core
    - name: Checkout calimero-device
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-device
        path: calimero-device
    - name: Checkout calimero-rxtx
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-rxtx
        path: calimero-rxtx
    - name: Checkout calimero-server
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-server
        path: calimero-server
    - name: Checkout calimero-testnetwork
      uses: actions/checkout@v3
      with:
        repository: calimero-project/calimero-testnetwork
        path: calimero-testnetwork
    - name: Checkout calimero-core
      uses: actions/checkout@v3
      with:
        path: calimero-core
    - name: setup
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ matrix.java }}
    - name: Grant execute permission for gradlew
      run: |
        chmod +x calimero-testnetwork/gradlew
        chmod +x calimero-core/gradlew
    - name: Start testnetwork
      run: |
        cd calimero-testnetwork
        ./gradlew build
        ./gradlew run --args ""../calimero-core/test/testnetwork-launcher/server-config.xml"" &
    - name: Build with Gradle
      run: |
        cd calimero-core
        ./gradlew build
",,,,,,Java
75,https://github.com/tada/pljava,"# This workflow will build and test PL/Java against the version of PostgreSQL
# preinstalled in the GitHub Actions runner environment. Naturally, this one
# does not have a PostgreSQL version in the build matrix. The version that's
# preinstalled is the version you get.

name: PL/Java CI with PostgreSQL version supplied by the runner

on:
  push:
    branches: [ master, REL1_6_STABLE ]
  pull_request:
    branches: [ master, REL1_6_STABLE ]

jobs:
  build:
    if: true

    runs-on: ${{ matrix.oscc.os }}
    continue-on-error: true
    strategy:
      matrix:
        oscc:
          - os: ubuntu-latest
            cc: gcc
          - os: macos-latest
            cc: clang
#         - os: windows-latest
#           cc: msvc
#         - os: windows-latest
#           cc: mingw
        java: [9, 11, 12, 17, 18, 19]

    steps:

    - name: Check out PL/Java
      uses: actions/checkout@v2
      with:
        path: pljava

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Report Java, Maven, and PostgreSQL versions (Linux, macOS)
      if: ${{ 'Windows' != runner.os }}
      run: |
        java -version
        mvn --version
        pg_config

    - name: Report Java, Maven, and PostgreSQL versions (Windows)
      if: ${{ 'Windows' == runner.os }}
      run: |
        java -version
        mvn --version
        & ""$Env:PGBIN\pg_config""

    - name: Obtain PG development files (Ubuntu, PGDG)
      if: ${{ 'Linux' == runner.os }}
      run: |
        curl -s -S https://www.postgresql.org/media/keys/ACCC4CF8.asc |
        gpg --dearmor |
        sudo dd of=/etc/apt/trusted.gpg.d/apt.postgresql.org.gpg
        echo  \
          deb \
          http://apt.postgresql.org/pub/repos/apt \
          ""$(lsb_release -cs)-pgdg"" \
          main |
        sudo tee /etc/apt/sources.list.d/pgdg.list
        sudo apt-get update
        sudo apt-get install postgresql-server-dev-14 libkrb5-dev

    - name: Build PL/Java (Linux, macOS)
      if: ${{ 'Windows' != runner.os }}
      working-directory: pljava
      run: |
        mvn clean install --batch-mode \
          -Psaxon-examples -Ppgjdbc-ng \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: Build PL/Java (Windows MinGW-w64)
      if: ${{ 'Windows' == runner.os && 'mingw' == matrix.oscc.cc }}
      working-directory: pljava
      #
      # GitHub Actions will allow 'bash' as a shell choice, even on a Windows
      # runner, in which case it's the bash from Git for Windows. That isn't the
      # same as the msys64\usr\bin\bash that we want; what's more, while both
      # rely on a cygwin DLL, they don't rely on the same one, and an attempt
      # to exec one from the other leads to a ""fatal error - cygheap base
      # mismatch"". So, the bash we want has to be started by something other
      # than the bash we've got. In this case, set shell: to a command that
      # will use cmd to start the right bash.
      #
      # Some of the MinGW magic is set up by the bash profile run at ""login"", so
      # bash must be started with -l. That profile ends with a cd $HOME, so to
      # avoid changing the current directory, set HOME=. first (credit for that:
      # https://superuser.com/a/806371). As set above, . is really the pljava
      # working-directory, so the bash script should start by resetting HOME to
      # the path of its parent.
      #
      # The runner is provisioned with a very long PATH that includes separate
      # bin directories for pre-provisioned packages. The MinGW profile replaces
      # that with a much shorter path, so mvn and pg_config below must be given
      # as absolute paths (using M2 and PGBIN supplied in the environment) or
      # they won't be found. As long as mvn itself can be found, it is able
      # to find java without difficulty, using the JAVA_HOME that is also in
      # the environment.
      #
      # Those existing variables in the environment are all spelled in Windows
      # style with drive letters, colons, and backslashes, rather than the MinGW
      # unixy style, but the mingw bash doesn't seem to object.
      #
      # If you use the runner-supplied bash to examine the environment, you will
      # see MSYSTEM=MINGW64 already in it, but that apparently is something the
      # runner-supplied bash does. It must be set here before invoking the MinGW
      # bash directly.
      #
      env:
        HOME: .
        MSYSTEM: MINGW64
      shell: 'cmd /C ""c:\msys64\usr\bin\bash -l ""{0}""""'
      run: |
        HOME=$( (cd .. && pwd) )
        ""$M2""/mvn clean install --batch-mode \
          -Dpgsql.pgconfig=""$PGBIN""'\pg_config' \
          -Psaxon-examples -Ppgjdbc-ng \
          -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    - name: Install and test PL/Java
      if: ${{ '9' != matrix.java  ||  'Windows' != runner.os }}
      working-directory: pljava
      shell: bash
      run: |
        pgConfig=pg_config # runner-supplied, just get it from the PATH

        packageJar=$(find pljava-packaging -name pljava-pg*.jar -print)

        mavenRepo=""$HOME/.m2/repository""

        saxonVer=$(
          find ""$mavenRepo/net/sf/saxon/Saxon-HE"" \
            -name 'Saxon-HE-*.jar' -print |
          sort |
          tail -n 1
        )
        saxonVer=${saxonVer%/*}
        saxonVer=${saxonVer##*/}

        jdbcJar=$(
          find ""$mavenRepo/com/impossibl/pgjdbc-ng/pgjdbc-ng-all"" \
            -name 'pgjdbc-ng-all-*.jar' -print |
          sort |
          tail -n 1
        )

        #
        # The runner on a Unix-like OS is running as a non-privileged user, but
        # has passwordless sudo available (needed to install the PL/Java files
        # into the system directories where the supplied PostgreSQL lives). By
        # contrast, on Windows the runner has admin privilege, and can install
        # the files without any fuss (but later below, pg_ctl will have to be
        # used when starting PostgreSQL; pg_ctl has a Windows-specific ability
        # to drop admin privs so postgres will not refuse to start).
        #
        # The Windows runner seems to have an extra pg_config somewhere on the
        # path, that reports it was built with MinGW and installed in paths
        # containing Strawberry that don't really exist. $PGBIN\pg_config refers
        # to a different build made with MSVC, and those directories really
        # exist, so specify that one explicitly when running on Windows.
        #
        # The Git for Windows bash environment includes a find command, and the
        # things found have unixy paths returned. Make them Windowsy here, with
        # a hardcoded assumption they start with /c which should become c: (as
        # appears to be the case in the Windows runner currently).
        #
        if [[ $RUNNER_OS == Windows ]]
        then
          pathSep=';'
          pgConfig=""$PGBIN""'\pg_config'
          java -Dpgconfig=""$pgConfig"" -jar ""$packageJar""
          function toWindowsPath() {
            local p
            p=""c:${1#/c}""
            printf ""%s"" ""${p//\//\\}""
          }
          jdbcJar=""$(toWindowsPath ""$jdbcJar"")""
          mavenRepo=""$(toWindowsPath ""$mavenRepo"")""
        else
          pathSep=':'
          sudo ""$JAVA_HOME""/bin/java -Dpgconfig=""$pgConfig"" -jar ""$packageJar""
        fi

        jshell \
          -execution local \
          ""-J--class-path=$packageJar$pathSep$jdbcJar"" \
          ""--class-path=$packageJar"" \
          ""-J--add-modules=java.sql.rowset,jdk.httpserver"" \
          ""-J-Dpgconfig=$pgConfig"" \
          ""-J-Dcom.impossibl.shadow.io.netty.noUnsafe=true"" \
          ""-J-DmavenRepo=$mavenRepo"" \
          ""-J-DsaxonVer=$saxonVer"" - <<\ENDJSHELL

        boolean succeeding = false; // begin pessimistic

        import static java.nio.file.Files.createTempFile;
        import static java.nio.file.Files.write;
        import java.nio.file.Path;
        import static java.nio.file.Paths.get;
        import java.sql.Connection;
        import java.sql.PreparedStatement;
        import java.sql.ResultSet;
        import org.postgresql.pljava.packaging.Node;
        import static org.postgresql.pljava.packaging.Node.q;
        import static org.postgresql.pljava.packaging.Node.stateMachine;
        import static org.postgresql.pljava.packaging.Node.isVoidResultSet;
        import static org.postgresql.pljava.packaging.Node.s_isWindows;
        import static
            org.postgresql.pljava.packaging.Node.NOTHING_OR_PGJDBC_ZERO_COUNT;
        /*
         * Imports that will be needed to serve a jar file over http
         * when the time comes for testing that.
         */
        import static java.nio.charset.StandardCharsets.UTF_8;
        import java.util.jar.Attributes;
        import java.util.jar.Manifest;
        import java.util.jar.JarOutputStream;
        import java.util.zip.ZipEntry;
        import com.sun.net.httpserver.BasicAuthenticator;
        import com.sun.net.httpserver.HttpContext;
        import com.sun.net.httpserver.HttpExchange;
        import com.sun.net.httpserver.HttpHandler;
        import com.sun.net.httpserver.HttpServer;

        String javaHome = System.getProperty(""java.home"");

        Path javaLibDir = get(javaHome, s_isWindows ? ""bin"" : ""lib"");

        Path libjvm = (
          ""Mac OS X"".equals(System.getProperty(""os.name""))
          ? Stream.of(""libjli.dylib"", ""jli/libjli.dylib"")
            .map(s -> javaLibDir.resolve(s))
            .filter(Files::exists).findFirst().get()
          : javaLibDir.resolve(s_isWindows ? ""jvm.dll"" : ""server/libjvm.so"")
        );

        String vmopts =
          ""-enableassertions:org.postgresql.pljava... -Xcheck:jni"";

        if ( 17 < Runtime.version().feature() )
          vmopts += "" -Djava.security.manager=allow"";

        Node n1 = Node.get_new_node(""TestNode1"");

        if ( s_isWindows )
          n1.use_pg_ctl(true);

        /*
         * Keep a tally of the three types of diagnostic notices that may be
         * received, and, independently, how many represent no-good test results
         * (error always, but also warning if seen from the tests in the
         * examples.jar deployment descriptor).
         */
        Map<String,Integer> results =
          Stream.of(""info"", ""warning"", ""error"", ""ng"").collect(
            LinkedHashMap<String,Integer>::new,
            (m,k) -> m.put(k, 0), (r,s) -> {});

        boolean isDiagnostic(Object o, Set<String> whatIsNG)
        {
          if ( ! ( o instanceof Throwable ) )
            return false;
          String[] parts = Node.classify((Throwable)o);
          String type = parts[0];
          String message = parts[2];
          results.compute(type, (k,v) -> 1 + v);
          if ( whatIsNG.contains(type) )
            if ( ! ""warning"".equals(type)
              ||  ! message.startsWith(""[JEP 411]"") )
              results.compute(""ng"", (k,v) -> 1 + v);
          return true;
        }

        /*
         * Write a trial policy into a temporary file in n's data_dir,
         * and set pljava.vmoptions accordingly over connection c.
         * Returns the 'succeeding' flag from the state machine looking
         * at the command results.
         */
        boolean useTrialPolicy(Node n, Connection c, List<String> contents)
        throws Exception
        {
          Path trialPolicy =
            createTempFile(n.data_dir().getParent(), ""trial"", ""policy"");

          write(trialPolicy, contents);

          PreparedStatement setVmOpts = c.prepareStatement(
            ""SELECT null::pg_catalog.void"" +
            "" FROM pg_catalog.set_config('pljava.vmoptions', ?, false)""
          );

          setVmOpts.setString(1, vmopts +
            "" -Dorg.postgresql.pljava.policy.trial="" + trialPolicy.toUri());

          return stateMachine(
            ""change pljava.vmoptions"",
            null,

            q(setVmOpts, setVmOpts::execute)
            .flatMap(Node::semiFlattenDiagnostics)
            .peek(Node::peek),

            (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
            (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
            (o,p,q) -> null == o
          );
        }

        try (
          AutoCloseable t1 = n1.initialized_cluster();
          AutoCloseable t2 = n1.started_server(Map.of(
            ""client_min_messages"", ""info"",
            ""pljava.vmoptions"", vmopts,
            ""pljava.libjvm_location"", libjvm.toString()
          ));
        )
        {
          try ( Connection c = n1.connect() )
          {
            succeeding = true; // become optimistic, will be using &= below

            succeeding &= stateMachine(
              ""create extension no result"",
              null,

              q(c, ""CREATE EXTENSION pljava"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              // state 1: consume any diagnostics, or to state 2 with same item
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,

              NOTHING_OR_PGJDBC_ZERO_COUNT, // state 2

              // state 3: must be end of input
              (o,p,q) -> null == o
            );
          }

          /*
           * Get a new connection; 'create extension' always sets a near-silent
           * logging level, and PL/Java only checks once at VM start time, so in
           * the same session where 'create extension' was done, logging is
           * somewhat suppressed.
           */
          try ( Connection c = n1.connect() )
          {
            succeeding &= stateMachine(
              ""saxon path examples path"",
              null,

              Node.installSaxonAndExamplesAndPath(c,
                System.getProperty(""mavenRepo""),
                System.getProperty(""saxonVer""),
                true)
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              // states 1,2: diagnostics* then a void result set (saxon install)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,

              // states 3,4: diagnostics* then a void result set (set classpath)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 3 : -4,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 5 : false,

              // states 5,6: diagnostics* then void result set (example install)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 5 : -6,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 7 : false,

              // states 7,8: diagnostics* then a void result set (set classpath)
              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 7 : -8,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 9 : false,

              // state 9: must be end of input
              (o,p,q) -> null == o
            );

            /*
             * Exercise TrialPolicy some. Need another connection to change
             * vmoptions. Uses some example functions, so insert here before the
             * test of undeploying the examples.
             */
            try ( Connection c2 = n1.connect() )
            {
              succeeding &= useTrialPolicy(n1, c2, List.of(
                ""grant {"",
                ""  permission"",
                ""    org.postgresql.pljava.policy.TrialPolicy$Permission;"",
                ""};""
              ));

              PreparedStatement tryForbiddenRead = c2.prepareStatement(
                ""SELECT"" +
                ""  CASE WHEN javatest.java_getsystemproperty('java.home')"" +
                ""    OPERATOR(pg_catalog.=) ?"" +
                ""  THEN javatest.logmessage('INFO', 'trial policy test ok')"" +
                ""  ELSE javatest.logmessage('WARNING', 'trial policy test ng')"" +
                ""  END""
              );

              tryForbiddenRead.setString(1, javaHome);

              succeeding &= stateMachine(
                ""try to read a forbidden property"",
                null,

                q(tryForbiddenRead, tryForbiddenRead::execute)
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );
              // done with connection c2
            }

            /*
             * Spin up an http server with a little jar file to serve, and test
             * that install_jar works with an http: url.
             *
             * First make a little jar empty but for a deployment descriptor.
             */
            String ddrName = ""foo.ddr"";
            Attributes a = new Attributes();
            a.putValue(""SQLJDeploymentDescriptor"", ""TRUE"");
            Manifest m = new Manifest();
            m.getEntries().put(ddrName, a);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            JarOutputStream jos = new JarOutputStream(baos, m);
            jos.putNextEntry(new ZipEntry(ddrName));
            jos.write(
              (
                ""SQLActions[]={\n\""BEGIN INSTALL\n"" +
                ""SELECT javatest.logmessage('INFO',"" +
                "" 'jar installed from http');\n"" +
                ""END INSTALL\"",\n\""BEGIN REMOVE\n"" +
                ""BEGIN dummy\n"" +
                ""END dummy;\n"" +
                ""END REMOVE\""\n}\n""
              ).getBytes(UTF_8)
            );
            jos.closeEntry();
            jos.close();
            byte[] jar = baos.toByteArray();

            /*
             * Now an http server.
             */
            HttpServer hs =
              HttpServer.create(new InetSocketAddress(""localhost"", 0), 0);

            try (
              Connection c2 = n1.connect();
              AutoCloseable t = ((Supplier<AutoCloseable>)() ->
                {
                  hs.start();
                  return () -> hs.stop(0);
                }
              ).get()
            )
            {
              InetSocketAddress addr = hs.getAddress();

              String id = ""bar"", pw = ""baz"";

              URL u = new URI(
                ""http"", id+':'+pw, addr.getHostString(), addr.getPort(),
                ""/foo.jar"", null, null
              ).toURL();

              HttpContext hc = hs.createContext(
                u.getPath(),
                new HttpHandler()
                {
                  @Override
                  public void handle(HttpExchange t) throws IOException
                  {
                    try ( InputStream is = t.getRequestBody() ) {
                      is.readAllBytes();
                    }
                    t.getResponseHeaders().add(
                      ""Content-Type"", ""application/java-archive"");
                    t.sendResponseHeaders(200, jar.length);
                    try ( OutputStream os = t.getResponseBody() ) {
                      os.write(jar);
                    }
                  }
                }
              );

              hc.setAuthenticator(
                new BasicAuthenticator(""CI realm"")
                // (""CI realm"", UTF_8) only available in Java 14 or later
                {
                  @Override
                  public boolean checkCredentials(String c_id, String c_pw)
                  {
                      return id.equals(c_id) && pw.equals(c_pw);
                  }
                }
              );

              succeeding &= useTrialPolicy(n1, c2, List.of(
                ""grant codebase \""${org.postgresql.pljava.codesource}\"" {"",
                ""  permission"",
                ""    java.net.URLPermission \""http:*\"", \""GET:Accept\"";"",
                ""};""
              ));

              succeeding &= stateMachine(
                ""install a jar over http"",
                null,

                Node.installJar(c2, u.toString(), ""foo"", true)
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"", ""warning"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );

              // done with connection c2 again, and the http server
            }

            /*
             * Also confirm that the generated undeploy actions work.
             */
            succeeding &= stateMachine(
              ""remove jar void result"",
              null,

              q(c, ""SELECT sqlj.remove_jar('examples', true)"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
              (o,p,q) -> null == o
            );

            /*
             * Get another new connection and make sure the extension can be
             * loaded in a non-superuser session.
             */
            try ( Connection c2 = n1.connect() )
            {
              succeeding &= stateMachine(
                ""become non-superuser"",
                null,

                q(c2,
                  ""CREATE ROLE alice;"" +
                  ""GRANT USAGE ON SCHEMA sqlj TO alice;"" +
                  ""SET SESSION AUTHORIZATION alice"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                (o,p,q) -> null == o
              );

              succeeding &= stateMachine(
                ""load as non-superuser"",
                null,

                q(c2, ""SELECT null::pg_catalog.void"" +
                      ""  FROM sqlj.get_classpath('public')"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                (o,p,q) -> isVoidResultSet(o, 1, 1) ? 3 : false,
                (o,p,q) -> null == o
              );
              // done with connection c2 again
            }

            /*
             * Make sure the extension drops cleanly and nothing
             * is left in sqlj.
             */
            succeeding &= stateMachine(
              ""drop extension and schema no result"",
              null,

              q(c, ""DROP EXTENSION pljava;DROP SCHEMA sqlj"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );
          }

          /*
           * Get another new connection and confirm that the old, pre-extension,
           * LOAD method of installing PL/Java works. It is largely obsolete in
           * the era of extensions, but still covers the use case of installing
           * PL/Java without admin access on the server filesystem to where
           * CREATE EXTENSION requires the files to be; they can still be
           * installed in some other writable location the server can read, and
           * pljava.module_path set to the right locations of the jars, and the
           * correct shared-object path given to LOAD.
           *
           * Also test the after-the-fact packaging up with CREATE EXTENSION
           * FROM unpackaged. That officially goes away in PG 13, where the
           * equivalent sequence
           *  CREATE EXTENSION pljava VERSION unpackaged
           *  \c
           *  ALTER EXTENSION pljava UPDATE
           * should be tested instead.
           */
          try ( Connection c = n1.connect() )
          {
            int majorVersion = c.getMetaData().getDatabaseMajorVersion();

            succeeding &= stateMachine(
              ""load as non-extension"",
              null,

              Node.loadPLJava(c)
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );

            if ( 13 <= majorVersion )
            {
              succeeding &= stateMachine(
                ""create unpackaged (PG >= 13)"",
                null,

                q(c, ""CREATE EXTENSION pljava VERSION unpackaged"")
                .flatMap(Node::semiFlattenDiagnostics)
                .peek(Node::peek),

                (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
                NOTHING_OR_PGJDBC_ZERO_COUNT,
                (o,p,q) -> null == o
              );
            }
          }

          /*
           * CREATE EXTENSION FROM unpackaged (or the second half of the
           * PG >= 13 CREATE EXTENSION VERSION unpackaged;ALTER EXTENSION UPDATE
           * sequence) has to happen over a new connection.
           */
          try ( Connection c = n1.connect() )
          {
            int majorVersion = c.getMetaData().getDatabaseMajorVersion();

            succeeding &= stateMachine(
              ""package after loading"",
              null,

              q(c, 13 > majorVersion
                ? ""CREATE EXTENSION pljava FROM unpackaged""
                :  ""ALTER EXTENSION pljava UPDATE"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );

            /*
             * Again make sure extension drops cleanly with nothing left behind.
             */
            succeeding &= stateMachine(
              ""drop extension and schema no result"",
              null,

              q(c, ""DROP EXTENSION pljava;DROP SCHEMA sqlj"")
              .flatMap(Node::semiFlattenDiagnostics)
              .peek(Node::peek),

              (o,p,q) -> isDiagnostic(o, Set.of(""error"")) ? 1 : -2,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              NOTHING_OR_PGJDBC_ZERO_COUNT,
              (o,p,q) -> null == o
            );
          }
        } catch ( Throwable t )
        {
          succeeding = false;
          throw t;
        }

        System.out.println(results);
        succeeding &= (0 == results.get(""ng""));
        System.exit(succeeding ? 0 : 1);
        ENDJSHELL
",,,,,,Java
76,https://github.com/netflix/ribbon,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
77,https://github.com/square/android-times-square,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: gradle/wrapper-validation-action@v1.0.4
    - name: set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: 'temurin'
        cache: gradle

    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
78,https://github.com/netflix/evcache,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot -x test
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
79,https://github.com/billthefarmer/tuner,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
80,https://github.com/tng/junit-dataprovider,"name: Java CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
81,https://github.com/rameshkec85/bottomtabsfragmenttabhost,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
82,https://github.com/eclipse/golo-lang,"name: Continuous integration and deployment

on:
  push:
    branches:
      - master
    tags:
      - 'milestone/*'
      - 'release/*'
  pull_request:
    branches:
      - master

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Copy build distribution
      run: cp build/distributions/*.zip golo-distribution.zip

    - name: Attach build distribution from this build
      uses: actions/upload-artifact@v2
      with:
        name: Golo distribution from this build
        path: ./golo-distribution.zip

    # Only pushes to master trigger a publication to Sonatype OSS
    - name: Deploy
      if: github.ref == 'refs/heads/master'
      run: .build/deploy.sh
      env:
        GPG_SECRET: ${{ secrets.GPG_SECRET }}

    # Only pushes of tags trigger a release creation
    - name: Create the release
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: startsWith(github.ref, 'refs/tags/milestone/')
    - name: Attach build distribution to the release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./golo-distribution.zip
        asset_name: golo-distribution.zip
        asset_content_type: application/zip

",,,,,,Java
83,https://github.com/netflix/netflix-graph,"name: ""Publish snapshot to NetflixOSS and Maven Central""

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - uses: actions/cache@v2
        id: gradle-cache
        with:
          path: |
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - uses: actions/cache@v2
        id: gradle-wrapper-cache
        with:
          path: |
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlewrapper-${{ hashFiles('gradle/wrapper/*') }}
      - name: Build
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
84,https://github.com/netflix/zuul,"name: Snapshot

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'
      - name: Build snapshot
        run: ./gradlew build snapshot
        env:
          NETFLIX_OSS_SIGNING_KEY: ${{ secrets.ORG_SIGNING_KEY }}
          NETFLIX_OSS_SIGNING_PASSWORD: ${{ secrets.ORG_SIGNING_PASSWORD }}
          NETFLIX_OSS_REPO_USERNAME: ${{ secrets.ORG_NETFLIXOSS_USERNAME }}
          NETFLIX_OSS_REPO_PASSWORD: ${{ secrets.ORG_NETFLIXOSS_PASSWORD }}
",,,,,,Java
85,https://github.com/apache/tez,"# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Build CI with different platforms/configs

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    strategy:
      matrix:
        java-version: [8, 11]
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - run: mvn clean install -DskipTests -Dmaven.javadoc.skip=true
",,,,,,Java
86,https://github.com/spring-guides/gs-rest-service,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
87,https://github.com/spring-guides/gs-consuming-rest,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
88,https://github.com/spring-guides/gs-scheduling-tasks,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
89,https://github.com/spring-guides/gs-uploading-files,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
90,https://github.com/windup/windup,"name: Windup-dependent projects' PR builder for JDK11

on:
  pull_request:
    branches:
      - master
      - 'releases/**'

jobs:
  windup-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-build-${{ github.sha }}
          restore-keys:
            ${{ runner.os }}-maven-windup-build
      - name: Build on JDK 11
        run: ./mvnw -B clean install -DskipTests

  windup-rulesets-build:
    runs-on: ubuntu-latest
    needs: [windup-build]
    strategy:
      fail-fast: false
      matrix:
        jdk-distribution: [ temurin ]
        java-version: [ 11, 17 ]
        ruleset-test: [ WindupRulesTest ]
        tests-pattern: [ 'rules-reviewed/[a-d]',
                         'rules-reviewed/e',
                         'rules-reviewed/[f-z]',
                         'rules-generated/' ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-rulesets
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.jdk-distribution }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-rulesets-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-build-${{ github.sha }}
      - name: Test
        run: mvn clean test -nsu -f rules -DrunTestsMatching=${{ matrix.tests-pattern }} -Dtest=${{ matrix.ruleset-test }}

  windup-rulesets-links-build:
    runs-on: ubuntu-latest
    needs: [windup-build]
    strategy:
      fail-fast: false
      matrix:
        jdk-distribution: [ temurin ]
        java-version: [ 11, 17 ]
        ruleset-test: [ WindupRulesLinksTest ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-rulesets
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: ${{ matrix.jdk-distribution }}
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-rulesets-links-${{ matrix.java-version }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-build-${{ github.sha }}
      - name: Test
        run: mvn clean test -nsu -f rules -Dtest=${{ matrix.ruleset-test }}
      - name: Build for the windup-maven-plugin-build
        run: mvn clean install -nsu -DskipTests

  windup-maven-plugin-build:
    runs-on: ubuntu-latest
    needs: [windup-rulesets-links-build]
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 11, 17 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-maven-plugin
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-maven-plugin-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-maven-windup-rulesets-links-${{ matrix.java-version }}-build-${{ github.sha }}
      - name: Build
        run: mvn clean install -nsu

  windup-quickstarts-build:
    runs-on: ubuntu-latest
    needs: [windup-maven-plugin-build]
    strategy:
      fail-fast: false
      matrix:
        java-version: [ 11, 17 ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: windup/windup-quickstarts
          ref: ${{ github.base_ref }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'temurin'
          java-package: jdk
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-windup-maven-plugin-build-${{ github.sha }}
      - name: Test
        run:   |
          export MAVEN_OPTS=""--add-modules=java.se  --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.stream=ALL-UNNAMED""
          mvn clean install -s settings.xml -nsu
        shell: bash
",,,,,,Java
91,https://github.com/spring-guides/gs-messaging-rabbitmq,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
92,https://github.com/spring-guides/gs-validating-form-input,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
93,https://github.com/rackerlabs/blueflood,"name: ""Run tests on pull requests""

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        java-version: [ 8 ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          cache: 'maven'
      - name: Build and test
        run: |
          mvn clean install
          mvn jacoco:report jacoco:report-integration
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: |
            */target/site
",,,,,,Java
94,https://github.com/spring-guides/gs-batch-processing,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
95,https://github.com/googlemaps/android-maps-utils,"# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the ""License"");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an ""AS IS"" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A workflow that runs tests on every new pull request
name: Run unit tests

on:
  repository_dispatch:
    types: [test]
  push:
    branches-ignore: ['gh-pages']
  pull_request:
    branches-ignore: ['gh-pages']
  workflow_dispatch:
  workflow_call: 

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1.1.0

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build modules
      run: ./gradlew build jacocoTestReport --stacktrace
",,,,,,Java
96,https://github.com/spring-guides/gs-securing-web,"name: CI Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Main Branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Initial with Maven
        working-directory: ./initial
        run: ./mvnw --batch-mode clean package

      - name: Build Initial with Gradle
        working-directory: ./initial
        run: ./gradlew build

      - name: Build Complete with Maven
        working-directory: ./complete
        run: ./mvnw --batch-mode clean package

      - name: Build Complete with Gradle
        working-directory: ./complete
        run: ./gradlew build
",,,,,,Java
97,https://github.com/panxw/android-image-indicator,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Java
98,https://github.com/billthefarmer/sig-gen,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
99,https://github.com/uwolfer/gerrit-intellij-plugin,"name: Java CI with Gradle

on:
  - push
  - pull_request

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Execute Gradle build
      run: ./gradlew build
",,,,,,Java
100,https://github.com/apache/deltaspike,"#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# ""License""); you may not use this file except in compliance
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# NOTE https://infra.apache.org/github-actions-secrets.html

name: DeltaSpike CI

on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - '**.md'
      - '.travis.yml'
      - 'Jenkinsfile'
  pull_request:
    branches:
      - master
      - main
    paths-ignore:
      - '**.md'
      - '.travis.yml'
      - 'Jenkinsfile'
  workflow_dispatch:

permissions:
  contents: read
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install
        ",,,,,,Java
101,https://github.com/aerogear/aerogear-unifiedpush-server,"name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REF: ${{ github.ref }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Set up settings.xml
      uses: whelk-io/maven-settings-xml-action@v4 
      with:
        repositories: '[{ ""id"": ""central"", ""url"": ""https://repo1.maven.org/maven2""}]'
        plugin_repositories: '[{ ""id"": ""central"", ""url"": ""https://repo1.maven.org/maven2""}]'

    - name: Build
      run: mvn clean install -DskipTests=true

    - name: Tests
      run: mvn verify

    - name: Javadocs
      run: mvn javadoc:jar

    - name: Deploy
      run: BRANCH_NAME=${REF##*/};sh ./quay_push '${{secrets.QUAY_USERNAME}}' '${{secrets.QUAY_PASSWORD}}' ""$BRANCH_NAME""
      if: github.event_name == 'push'
      
",,,,,,Java
102,https://github.com/billthefarmer/scope,"# Build on push and PR events
on:
  push:
    branches:
      - master
    tags-ignore:
      - '*'
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: ""actions/checkout@v3""

      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Java
103,https://github.com/ff4j/ff4j,"name: CI
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install -ntp
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
",,,,,,Java
11,https://github.com/bigbluebutton/bigbluebutton,"name: Build and Deploy Docs

on:
  workflow_dispatch:
  push:
    branches:
      - 'develop'
    paths:
      - 'docs/**'

# Do not build the docs concurrently
concurrency:
  group: docs
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./docs
    steps:
      # Setup
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: ./docs/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Build static docs
      - name: Build all versions
        run: ./build.sh
      - name: Build website
        run: yarn build
      - name: upload build artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./docs/build

  deploy:
    name: Deploy docs to gh-pages
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: Documentation
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
",,,,,,JavaScript
941,https://github.com/harfbuzz/harfbuzzjs,"name: Build

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

env:
  EM_VERSION: 3.1.16
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v3
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{runner.os}}
      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Build hb.wasm
        run: ./build.sh
      - name: Build hb-subset.wasm
        run: ./build-subset.sh

      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: NPM install
        run: npm install
      - name: Run tests
        run: npm test
      - name: Test hb.wasm
        run: node examples/hbjs.example.node.js
      - name: Test hb-subset.wasm
        run: node examples/hb-subset.example.node.js
",,,,,,JavaScript
1727,https://github.com/microsoft/botbuilder-samples,"name: ci-javascript-samples

env:
  ROOT_FOLDER: BotBuilder-Samples/samples/

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - ""samples/**/*.js""
      - ""samples/**/*.ts""

jobs:
  generate:
    name: detect and generate bot matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: git diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: samples/**/*.+(ts|js)
          ABSOLUTE: true

      - name: generate matrix
        id: set-matrix
        shell: pwsh
        if: env.GIT_DIFF
        run: |
          function UpSearchFolder {
            param ([String] $path, [String] $file)

            while ($path -and !(Test-Path (Join-Path $path $file))) {
              $path = Split-Path $path -Parent
            }

            return $path
          }

          $paths = @(""${{ env.GIT_DIFF_FILTERED }}"" -replace ""'"", """" -split "" "")
          $rootFolder = ""${{ env.ROOT_FOLDER }}""
          $pkg = ""package.json""

          $result = $paths | ForEach-Object { UpSearchFolder -path $_ -file $pkg } | Get-Unique | ForEach-Object {
            $folder = $_
            $json = Get-Content -Raw -Path (Join-Path $folder $pkg) | ConvertFrom-Json
            $files = @($paths | Where-Object { $_.StartsWith($folder) })
            return @{ 
              name = $folder.Substring($folder.IndexOf($rootFolder) + $rootFolder.Length);
              scripts = @($json.scripts | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name);
              folder = $folder;
              files = $files
            } 
          }

          ""Generated matrix:""
          ConvertTo-Json @($result)

          $matrix = ConvertTo-Json -Compress @($result)

          echo ""::set-output name=matrix::$($matrix)""

  build:
    needs: generate
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        include: ${{fromJSON(needs.generate.outputs.matrix)}}
      fail-fast: false

    name: bot - ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v3

      - name: use node 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: yarn install
        run: yarn install
        working-directory: ${{ matrix.folder }}

      - name: yarn build
        if: ${{ contains(matrix.scripts, 'build') }}
        run: yarn build
        working-directory: ${{ matrix.folder }}

      - name: yarn lint
        run: |
          if ${{ endsWith(matrix.files[0], '.js') }}; then
            yarn eslint ${{ join(matrix.files, ' ') }}
          else
            yarn tslint ${{ join(matrix.files, ' ') }}
          fi
        working-directory: ${{ matrix.folder }}
",,,,,,JavaScript
1818,https://github.com/sodium-friends/sodium-native,"name: Build Status
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    strategy:
      matrix:
        node-version: [lts/*]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm test
",,,,,,JavaScript
2079,https://github.com/dfinity/examples,"name: hosting-photo-storage
on:
  push:
    branches:
      - master
  pull_request:
    paths:
      - hosting/photo-storage/**
      - .github/workflows/provision-darwin.sh
      - .github/workflows/provision-linux.sh
      - .github/workflows/hosting-photo-storage-example.yml
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  hosting-photo-storage-darwin:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - name: Provision Darwin
        run: bash .github/workflows/provision-darwin.sh
      - name: Hosting Photo Storage Darwin
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
  hosting-photo-storage-linux:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Provision Linux
        run: bash .github/workflows/provision-linux.sh
      - name: Hosting Photo Storage Linux
        run: |
          pushd hosting/photo-storage
          # verify frontend deps install and build
          npm install
          npm run build
          # verify that frontend asset canister deploys
          dfx start --background
          dfx deploy
          popd
",,,,,,JavaScript
602,https://github.com/wq/django-rest-pandas,"name: Tests

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.variant }} py=${{ matrix.python-version }} dj=${{ matrix.django-version }} drf=${{ matrix.drf-version }} pandas=${{ matrix.pandas-version }}
    runs-on: ubuntu-22.04
    env:
      TEST_VARIANT: ${{ matrix.variant }}
    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"", ""3.8""]
        django-version: [4.1.7]
        drf-version: [3.14.0]
        pandas-version: [1.5.3]
        variant: ['']
        include:
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: matplotlib
        - python-version: ""3.11""
          django-version: 4.1.7
          drf-version: 3.14.0
          pandas-version: 1.5.3
          variant: django-pandas
        - python-version: ""3.11""
          django-version: 3.2.14
          drf-version: 3.13.1
          pandas-version: 1.5.3
          variant: ''
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build
        python -m pip install flake8 wheel
        python -m pip install django==${{ matrix.django-version }}
        python -m pip install djangorestframework==${{ matrix.drf-version }}
        python -m pip install pandas==${{ matrix.pandas-version }}
        python -m pip install itertable[oldexcel]
    - name: Install matplotlib
      if: ${{ matrix.variant == 'matplotlib' }}
      run: python -m pip install matplotlib
    - name: Install django-pandas
      if: ${{ matrix.variant == 'django-pandas' }}
      run: python -m pip install django-pandas
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      run: python -m unittest discover -s tests -t . -v
    - name: Test build
      run: python -m build
  npm:
    name: ""@wq/${{ matrix.package }}""
    runs-on: ubuntu-22.04
    env:
      PACKAGE: ${{ matrix.package }}
    strategy:
      matrix:
        python-version: [""3.11""]
        node-version: [18]
        package:
          - pandas
          - chart
          - analyst
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Set up Node ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        npm ci
        npm run build
    - name: Lint with ESLint
      run: npm run lint
    - name: Test with Jest
      run: |
         cd packages/$PACKAGE
         npm run test
    - uses: smartsquaregmbh/delete-old-packages@v0.4.0
      if: github.event_name == 'push'
      with:
         keep: 5
         names: ${{ matrix.package }}
    - name: Publish to Github Packages
      if: github.event_name == 'push'
      run: |
         python -m pip install setuptools-scm
         ./set_dev_version.sh
         echo ""registry=https://npm.pkg.github.com/wq"" > .npmrc
         echo ""//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}"" >> .npmrc
         cd packages/$PACKAGE
         npm publish
",,,,,,JavaScript
763,https://github.com/archtaurus/retropiebios,"name: ALL BIOS FILES MD5SUM CHECK

on: push

jobs:
    all-bios-files-md5sum-check:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - uses: actions/setup-node@v1
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org/
            - run: npm ci
            - run: npm test
",,,,,,JavaScript
79,https://github.com/react-native-masked-view/masked-view,"name: Build
on: push

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: ESLint Checks
        run: yarn test:lint
  tsc:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: TypeScript type check
        run: yarn test:typescript
  flow:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache
        id: yarn-cache
        run: echo ""dir=$(yarn cache dir)"" >> $GITHUB_OUTPUT
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Flow type check
        run: yarn test:flow
",,,,,,JavaScript
257,https://github.com/robloach/node-raylib,"name: Test

on: [push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x]
        os: [ubuntu, macos, windows]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: Install System Dependencies
        if: matrix.os == 'ubuntu'
        run: sudo apt-get update && sudo apt-get install -y xorg-dev libglu1-mesa-dev
      - name: Build Node Addon
        run: npm run compile
      - name: Test
        run: npm test
  build-linux-arm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild.sh
  build-linux-arm-drm:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Cache Node Dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: Build for arm
        run: docker run --platform linux/arm --rm -v ""${PWD}:/work"" -w /work node ./tools/crossbuild-drm.sh",,,,,,JavaScript
681,https://github.com/rive-app/rive-wasm,"name: Build JS
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/setup-node@v3
        with:
          node-version: ""20.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Setup emsdk
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: 3.1.43
          actions-cache-folder: ""emsdk-cache""
      - name: Install premake
        run: |
          wget https://github.com/premake/premake-core/releases/download/v5.0.0-alpha16/premake-5.0.0-alpha16-linux.tar.gz
          tar -xvf premake-5.0.0-alpha16-linux.tar.gz
          sudo chmod a+x premake5
          sudo mv premake5 /usr/local/bin
      - name: Install modules
        run: cd js && npm install
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Build
        env:
          PAT_GITHUB: ${{ secrets.PAT_GITHUB }}
        run: cd js && ./build.sh
      - name: Run tests
        run: cd js && npm test
",,,,,,JavaScript
3303,https://github.com/cloudera/hue,"name: Frontend CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
    paths:
      - '**.js'
      - '**.jsx'
      - '**.ts'
      - '**.tsx'
      - '**.less'
      - '**.scss'
      - '**.vue'
      - 'package*.json'
      - '**commitflow-frontend.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Caching npm with setup node
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: run commit title format check
      run: ./tools/ci/check_for_commit_message.sh 

    - name: run npm version checker
      run: npm run check-pinned-versions

    - name: run npm license checker
      run: npm run check-license

    - name: run npm absolute path detection
      run: npm run check-absolute-paths

    - name: run js lint
      run: npm run lint

    - name: run style lint
      run: npm run style-lint

    - name: run js tests
      run: |
        # https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-andor-continuous-integration-ci-server
        sed -i 's/""test"": ""jest""/""test"": ""jest --runInBand""/g' package.json

        npm run test",,,,,,JavaScript
3359,https://github.com/rich-harris/devalue,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript
3454,https://github.com/charlesstover/use-force-update,"name: use-force-update

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable

  eslint:
    name: ESLint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Lint
        run: yarn run eslint

  jest:
    name: Jest
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Unit test
        run: yarn run jest
      - name: Upload coverage
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: jest--coverage
          path: jest/coverage

  rollup:
    name: Rollup
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn install --immutable
      - name: Build
        run: yarn run rollup
      - name: Upload build
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  github-packages:
    name: GitHub Packages
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn config set npmScopes.${{ github.repository_owner }}.npmPublishRegistry 'https://npm.pkg.github.com';
          yarn npm publish --tolerate-republish;

  npm:
    name: NPM
    if: ${{ github.event_name == 'push' }}
    needs: [eslint, jest, rollup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: yarn
          check-latest: true
          node-version: 'lts/*'
      - name: Publish
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        run: >
          yarn config set npmAuthToken $NPM_AUTH_TOKEN;
          yarn npm publish --tolerate-republish;

on:
  pull_request:
  push:
    branches: [main]
",,,,,,JavaScript
3477,https://github.com/thanhtunguet/grapesjs-react,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
        yarn install
        yarn test grapesjs-react
",,,,,,JavaScript
3560,https://github.com/padloc/padloc,"name: Run Tests

on:
    push:
        branches:
            - main
    pull_request:

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-node@v3
              with:
                  node-version-file: "".nvmrc""
            - uses: actions/cache@v3
              with:
                  path: |
                      ~/.npm
                      ~/.nvm
                      node_modules
                      packages/app/node_modules
                      packages/cordova/node_modules
                      packages/core/node_modules
                      packages/electron/node_modules
                      packages/extension/node_modules
                      packages/locale/node_modules
                      packages/manage/node_modules
                      packages/pwa/node_modules
                      packages/server/node_modules
                      packages/tauri/node_modules
                  key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
            - name: Install dependencies
              run: |
                  npm i -g npm@8.2.0
                  npm ci
            - name: Run prettier check
              run: npm run prettier:check
            - name: Run translation checks
              run: |
                  npm run locale:extract
                  if [ $(git status --porcelain | wc -l) -ne ""0"" ]; then
                    echo ""Missing translations detected.""
                    exit 1
                  fi
            - name: Run pwa test build
              run: npm run pwa:build
            - name: Run web extention test build
              run: npm run web-extension:build
            - name: Test starting zero-config server
              run: npm run server:start-dry
            - name: Run tests
              run: npm test
            # - name: Run e2e tests
            #   run: npm run test:e2e
",,,,,,JavaScript
3660,https://github.com/rich-harris/code-red,"name: CI

on:
  push:
    branches:
      - master
  pull_request:

# cancel in-progress runs on new commits to same PR (github.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        node-version: [16]
        os: [ubuntu-latest]
    steps:
      - run: git config --global core.autocrlf false
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.2
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm test
",,,,,,JavaScript
3662,https://github.com/sindresorhus/callsites,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
3781,https://github.com/kyranet/canvas-constructor,"name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  Linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/eslint.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Run ESLint
        run: yarn lint --fix=false

  Building:
    name: Compile source code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v3
      - name: Add problem matcher
        run: echo ""::add-matcher::.github/problemMatchers/tsc.json""
      - name: Use Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          registry-url: https://registry.yarnpkg.com/
      - name: Install Dependencies
        run: yarn --immutable
      - name: Build Code
        run: yarn build
",,,,,,JavaScript
3945,https://github.com/react-component/upload,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: cache package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: create package-lock.json
        run: npm i --package-lock-only

      - name: hack for singe file
        run: |
          if [ ! -d ""package-temp-dir"" ]; then
            mkdir package-temp-dir
          fi
          cp package-lock.json package-temp-dir

      - name: cache node_modules
        id: node_modules_cache_id
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: install
        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
        run: npm ci
  
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: lint
        run: npm run lint

    needs: setup
  
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: compile
        run: npm run compile

    needs: setup
  
  coverage:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: restore cache from package-lock.json
        uses: actions/cache@v2
        with:
          path: package-temp-dir
          key: lock-${{ github.sha }}

      - name: restore cache from node_modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: node_modules-${{ hashFiles('**/package-temp-dir/package-lock.json') }}

      - name: coverage
        run: npm test -- --coverage && bash <(curl -s https://codecov.io/bash)

    needs: setup
",,,,,,JavaScript
3956,https://github.com/alitajs/alita,"name: CI
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
jobs:
  test-e2e:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Build Packages
        run: pnpm build
      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
      - name: Run Playwright test:e2e
        run: pnpm test:e2e
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
",,,,,,JavaScript
3986,https://github.com/ai/nanodelay,"name: Test
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  contents: read
jobs:
  full:
    name: Node.js Latest Full
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run tests
        run: pnpm test
  short:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 18
          - 16
          - 14
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
  old:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v1
        with:
          version: 3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
",,,,,,JavaScript
4000,https://github.com/helmetjs/nocache,"name: Node.js CI

on: [push]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm test
        env:
          CI: true
",,,,,,JavaScript
4036,https://github.com/lucaong/minisearch,"# This is a basic workflow to help you get started with Actions

name: CI Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  coverage:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: Install dependencies
        run: yarn install

      - name: Report coverage
        env:
          COVERALLS_REPO_TOKEN: ""${{ secrets.COVERALLS_REPO_TOKEN }}""
          COVERALLS_GIT_BRANCH: ""${{ github.ref }}""
          COVERALLS_SERVICE_NAME: GitHub Actions
        run: yarn run jest --coverage && yarn run coveralls --verbose < coverage/lcov.info
",,,,,,JavaScript
4143,https://github.com/sindresorhus/html-tags,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
          - 8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
4151,https://github.com/dimitrydushkin/sliding-pane,"# This is a basic workflow to help you get started with Actions

name: Jest Tests on PR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
      - name: Make build
        run: yarn run build && yarn run lint && tsc
",,,,,,JavaScript
4242,https://github.com/jermbo/sampleapis,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: cd client
    - run: npm run build --if-present
",,,,,,JavaScript
4427,https://github.com/modulz/stitches,"name: CI
on: push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install modules
        run: yarn
      - name: Run tests
        run: yarn test
",,,,,,JavaScript
4736,https://github.com/shd101wyy/mume,"name: ""Test""
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: ""Test""
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: 'Install nodejs 18'
        uses: actions/setup-node@v2
        with:
          node-version: '18'
      - name: 'Build and test'
        run: |
          corepack enable
          yarn install
          yarn check:all
          yarn test
",,,,,,JavaScript
4768,https://github.com/wkich/creevey,"name: Build and Test
on: push

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: install
        run: yarn
      - name: lint
        run: yarn lint
      - name: build
        run: yarn build
      - name: pack
        run: yarn pack
      - uses: actions/upload-artifact@v2
        with:
          name: creevey
          path: creevey-*.tgz
  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: checkout lfs
        run: git lfs checkout
      - name: install
        run: yarn
      - name: unit tests
        run: yarn test:unit
      - name: storybook
        run: yarn start:storybook &
      - name: creevey
        run: yarn creevey:github
      - uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/
",,,,,,JavaScript
4860,https://github.com/browserslist/browserslist,"name: Test
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  contents: read
jobs:
  full:
    name: Node.js Latest Full
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run tests
        run: pnpm test
  short:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 18
          - 16
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
  old:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 14
          - 12
          - 10
          - 8
    name: Node.js ${{ matrix.node-version }} Quick
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v1
        with:
          version: 3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile --ignore-scripts
      - name: Run unit tests
        run: pnpm unit
",,,,,,JavaScript
4876,https://github.com/garrylachman/electrocrud,"name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - master

jobs:
  prepare:
    name: Prepare
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]

    outputs:
      next_version: ${{ steps.semantic_step.outputs.next_version }}

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false

      - name: Install dependencies
        run: corepack yarn install

      - name: Building Packages
        run: corepack yarn build

      - name: Testing
        run: corepack yarn run test

      - name: Semantic Release
        id: semantic_step
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: corepack yarn run semantic-release
  release:
    needs: prepare
    name: Release v${{ needs.prepare.outputs.next_version }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-2019]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
          ref: v${{ needs.prepare.outputs.next_version }}

      - name: apt-get install
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt update -y && sudo apt-get install -y snapd rpm snapcraft fakeroot dpkg

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false |
          corepack yarn cache clean

      - name: Install dependencies
        run: corepack yarn install

      - name: Building Packages
        run: corepack yarn run build

      - name: Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=8192
          DEBUG: '*'
        run: corepack yarn electron-forge publish
  post:
    runs-on: ubuntu-latest
    needs: [prepare, release]
    name: Post

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE }}
          ref: v${{ needs.prepare.outputs.next_version }}

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: 18.11.0

      - name: Install Yarn
        run: corepack enable |
          corepack prepare yarn@3.5.1 --activate |
          corepack yarn config set enableImmutableInstalls false

      - name: Install dependencies
        run: corepack yarn install

      - name: Normalize Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: v${{ needs.prepare.outputs.next_version }}
        run: corepack yarn dlx ts-node --skipProject scripts/normalize-release-assets.mjs
",,,,,,JavaScript
4930,https://github.com/httptoolkit/httptoolkit-server,"name: CI
on: [push, pull_request]
env:
  HTTPTOOLKIT_SERVER_DISABLE_AUTOUPDATE: 1 # Don't try to autoupdate during tests etc
jobs:
  build:
    name: Build & test
    runs-on: ubuntu-22.04
    container:
      image: httptoolkit/act-build-base:v3.0.0
      options: ""--privileged"" # Required for DIND tests
    env:
      DIND_HOST: unix:///tmp/docker.sock
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 20.8.0

      - run: npm install -g npm@^8

      - name: Set up JDK 11 for Java testing
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: adopt-hotspot

      - run: npm ci
        env:
          NPM_CONFIG_UNSAFE_PERM: true

      - run: npm run build:src

      - name: Prepare test environment
        run: |
          # Fix annoying Yarn issue: https://github.com/yarnpkg/yarn/issues/7866
          curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -

          sudo apt-get update
          sudo apt-get install -y p7zip-full xterm

          wget https://downloads.slack-edge.com/linux_releases/slack-desktop-4.12.2-amd64.deb
          sudo apt install -y ./slack-desktop-4.12.2-amd64.deb

          sudo cp test/no-sandbox-docker-wrapper.sh /usr/local/bin/google-chrome
          sudo cp test/no-sandbox-docker-wrapper.sh /usr/local/bin/slack

          # Fix $HOME perms to make Firefox happy
          sudo chown $(whoami) $HOME

          # Start a DIND docker host, running in the background
          sudo dockerd -H $DIND_HOST &
          sleep 5

          # Pre-pull lots of the Docker images we'll want to use later
          echo node:14 golang:1.16 openjdk:16-alpine3.13 python:3.9-slim ruby:alpine3.13 php:8.0-apache |
            DOCKER_HOST=$DIND_HOST xargs -P10 -n1 docker pull

      - run: DOCKER_HOST=$DIND_HOST xvfb-run npm run test

      - run: npm run build:release
        env:
          SENTRY_AUTH_TOKEN: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && secrets.SENTRY_AUTH_TOKEN) || '' }}
          SENTRY_ORG: http-toolkit
          SENTRY_PROJECT: httptoolkit-server
          NPM_CONFIG_UNSAFE_PERM: true

      - run: DOCKER_HOST=$DIND_HOST xvfb-run npm run test:integration:release

      - uses: actions/upload-artifact@v3
        with:
          name: distributables
          path: build/dist/*
          if-no-files-found: error

      - uses: actions/upload-artifact@v3
        with:
          name: test-scripts
          path: test/distributables-test
          if-no-files-found: error

  test-distributables:
    needs: build
    strategy:
      matrix:
        include:
          - platform: Ubuntu 22.04
            os: ""ubuntu-22.04""
            test-script: ""./unix.sh linux""
          - platform: Ubuntu 20.04
            os: ""ubuntu-20.04""
            test-script: ""./unix.sh linux""
          - platform: MacOS 13
            os: ""macos-13""
            test-script: ""./unix.sh darwin""
          - platform: MacOS 12
            os: ""macos-12""
            test-script: ""./unix.sh darwin""
          - platform: MacOS 11
            os: ""macos-11""
            test-script: ""./unix.sh darwin""
          - platform: Windows 2022
            os: ""windows-2022""
            test-script: "".\\windows.bat""
          - platform: Windows 2019
            os: ""windows-2019""
            test-script: "".\\windows.bat""
      fail-fast: false
    name: Test on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get our distributables
        uses: actions/download-artifact@v3
        with:
          name: distributables
          path: distributables

      - name: Get the test scripts
        uses: actions/download-artifact@v3
        with:
          name: test-scripts
          path: .

      - name: Make the test script executable
        if: matrix.platform != 'Windows'
        run: chmod +x unix.sh

      - name: Test the server build
        run: ${{ matrix.test-script }}

  publish:
    name: Publish a release
    runs-on: ""ubuntu-22.04""
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - test-distributables
    steps:
      - name: Get our distributables
        uses: actions/download-artifact@v3
        with:
          name: distributables
          path: distributables

      - name: Upload server release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./distributables/*/*
          file_glob: true
          tag: ${{ github.ref }}

      - name: Upload latest manifest
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./distributables/latest-manifest/*
          file_glob: true
          tag: latest-manifest
          overwrite: true",,,,,,JavaScript
5052,https://github.com/sveltejs/svelte,"name: CI
on:
  push:
    branches: [main]
  pull_request:
permissions:
  contents: read # to fetch code (actions/checkout)

env:
  # We only install Chromium manually
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        include:
          - node-version: 18
            os: windows-latest
          - node-version: 18
            os: macOS-latest
          - node-version: 18
            os: ubuntu-latest
          - node-version: 20
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - run: pnpm playwright install chromium
      - run: pnpm test
        env:
          CI: true
  Lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: 'pnpm i && pnpm check && pnpm lint'
",,,,,,JavaScript
5107,https://github.com/aws/aws-cdk,"# https://octokit.github.io/rest.js
# https://github.com/actions/toolkit/blob/master/packages/github/src/context.ts

name: PR Linter
on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - edited
      - opened
      - synchronize
      - reopened
  workflow_run:
    workflows: [PR Linter Trigger]
    types:
      - completed
  status:

jobs:
  download-if-workflow-run:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.pr_output.outputs.pr_number }}
      pr_sha: ${{ steps.pr_output.outputs.pr_sha }}
    # if conditions on all individual steps because subsequent jobs depend on this job
    # and we cannot skip it entirely
    steps:
      - name: 'Download artifact'
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == ""pr_info""
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr_info.zip`, Buffer.from(download.data));
      - name: 'Unzip artifact'
        if: github.event_name == 'workflow_run'
        run: unzip pr_info.zip

      - name: 'Make GitHub output'
        if: github.event_name == 'workflow_run'
        id: 'pr_output'
        run: |
          echo ""cat pr_number""
          echo ""pr_number=$(cat pr_number)"" >> ""$GITHUB_OUTPUT""
          echo ""cat pr_sha""
          echo ""pr_sha=$(cat pr_sha)"" >> ""$GITHUB_OUTPUT""

  validate-pr:
    # Necessary to have sufficient permissions to write to the PR
    permissions:
      contents: read
      pull-requests: write
      statuses: read
      issues: read
    runs-on: ubuntu-latest
    needs: download-if-workflow-run
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install & Build prlint
        run: yarn install --frozen-lockfile && cd tools/@aws-cdk/prlint && yarn build+test

      - name: Validate
        uses: ./tools/@aws-cdk/prlint
        env:
          GITHUB_TOKEN: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          # PR_NUMBER and PR_SHA is empty if triggered by pull_request_target, since we already have that info
          PR_NUMBER: ${{ needs.download-if-workflow-run.outputs.pr_number }}
          PR_SHA: ${{ needs.download-if-workflow-run.outputs.pr_sha }}
          REPO_ROOT: ${{ github.workspace }}
",,,,,,JavaScript
5112,https://github.com/tw-in-js/twind,"name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

# cancel in-progress runs on new commits to same PR (gitub.event.number)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  build:
    name: 🏗️  Build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    permissions:
      contents: write # to create release (changesets/action)
      pull-requests: write # to create pull request (changesets/action)
      deployments: write # to create deployments (cloudflare/pages)

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: 🔧  Setup
        uses: ./.github/actions/setup

      - name: 🩺  Check
        run: pnpm check

      - name: 🤘  Test
        run: pnpm test:coverage

      - name: 📖  Coveralls
        continue-on-error: true
        # prevents this step from running on forks
        if: ${{ github.repository == 'tw-in-js/twind' }}
        # until https://github.com/coverallsapp/github-action/issues/135 is closed
        uses: chenrui333/github-action@a1a1a8a300a7e89df3630639df8fb23de5cc6368
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      - name: 🚚  Create Release PR or Publish to npm
        id: changesets
        if: ${{ github.repository == 'tw-in-js/twind' && github.event_name == 'push' }}
        uses: changesets/action@v1
        with:
          version: pnpm changeset:version
          publish: pnpm changeset:publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # wait a bit and then set latest for twind back to v0.16
      # because some are using CDNs without specifing a version
      - name: 📝  Keep latest tag on twind@v0.16.19
        if: steps.changesets.outputs.published == 'true'
        run: |
          sleep 20
          cat << EOF > ""$HOME/.npmrc""
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
          npm dist-tag add twind@0.16.19 latest || true
          npm deprecate twind@1.x ""use @twind/core instead"" || true
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 🌎  Deploy twind.style
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: main

      - name: 🌎  Deploy twind.run
        if: ${{ steps.changesets.outputs.published == 'true' && github.repository == 'tw-in-js/twind' }}
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: main

  publish-pre-releases:
    name: 🚚  Publish pre-releases
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: ${{ needs.build.outputs.published != 'true' }}
    permissions:
      contents: read
      pull-requests: write
      deployments: write

    steps:
      - name: 📥  Checkout
        uses: actions/checkout@v3

      - name: 🔧  Setup
        uses: ./.github/actions/setup
        with:
          # only install dependencies for packages that are published and for the sites
          installArgs: --filter=""."" --filter=""./packages/*"" --filter=""./sites/*""

      - name: 🚚  Publish pre-release to npm
        id: publish
        uses: ./.github/actions/publish-prerelease
        with:
          tag: ${{ (github.event_name == 'push' && 'next') || 'canary'}}
          template: ${{ (github.event_name == 'push' && '{tag}-{datetime}') || '{tag}-{commit}'}}
          hasChangesets: ${{ needs.build.outputs.hasChangesets }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # deploy sites using the published package versions
      - name: 🌎  Deploy twind.style
        id: deploy_twind_style
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.style
          directory: build
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.style
          projectName: twind-style
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 🌎  Deploy twind.run
        id: deploy_twind_run
        uses: ./.github/actions/publish-pages
        with:
          workingDirectory: sites/twind.run
          directory: .svelte-kit/cloudflare
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDLFARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          # no github deployment for canary
          GITHUB_TOKEN: ${{ (github.event.number && '') || secrets.GITHUB_TOKEN }}
          deploymentName: twind.run
          projectName: twind-run
          branch: ${{ (github.event.number && format('pr-{0}', github.event.number)) || (github.event_name == 'push' && 'next') || 'canary' }}

      - name: 📝  Comment PR
        if: ${{ github.event.number }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          comment_tag: '## Deployed site previews with [![Cloudflare Pages]'
          message: |
            > **Latest commit**: ${{ github.sha }}

            ## Deployed site previews with [![Cloudflare Pages](https://img.shields.io/badge/Cloudflare%20Pages-F38020?style=for-the-badge&logo=Cloudflare&logoColor=white)](https://pages.dev)

            ### twind.style

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.url }}'>${{ steps.deploy_twind_style.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.branch }}'>${{ steps.deploy_twind_style.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_style.outputs.version }}'>${{ steps.deploy_twind_style.outputs.version }}</a></td></tr>
            </table>

            ### twind.run

            <table>
            <tr><td><strong>Deployment URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.url }}'>${{ steps.deploy_twind_run.outputs.url }}</a></td></tr>
            <tr><td><strong>Branch URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.branch }}'>${{ steps.deploy_twind_run.outputs.branch }}</a></td></tr>
            <tr><td><strong>Version URL:</strong></td><td><a href='${{ steps.deploy_twind_run.outputs.version }}'>${{ steps.deploy_twind_run.outputs.version }}</a></td></tr>
            </table>

            ## Published to [npm](https://www.npmjs.com)

            **Dist Tag**: ${{ steps.publish.output.tag }}

            **Packages**:

            ${{ steps.publish.output.packages }}
",,,,,,JavaScript
5141,https://github.com/microsoft/typescript-website-localizations,"name: CI
on: pull_request

jobs:
  local-validate:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      - run: yarn
      - run: yarn docs-sync validate-against-en

  site-builds:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: ""13.x""

      # Clone this PR, and setup the deps
      - uses: actions/checkout@v1
      - run: yarn

      # Clone the TS website, basically:
      # git clone https://github.com/microsoft/TypeScript-Website website
      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: microsoft/TypeScript-Website
          path: website

      # Both the microsoft/TypeScript-Website & 1 - don't really need to be there, but 
      # this migrates the translated docs into the website
      - run: yarn docs-sync pull microsoft/TypeScript-Website 1 --from-cwd . --to-cwd website

      # Get dependencies for building the ebooks
      - run: sudo apt-get update
      - run: sudo apt install calibre

      - run: yarn install
        env:
          YARN_CHECKSUM_BEHAVIOR: ignore
        working-directory: ./website


      # Verify the website build
      - run: yarn bootstrap
        working-directory: ./website

      - run: yarn workspace typescriptlang-org build
        working-directory: ./website

      # Verify the website build
      - run: yarn test
        working-directory: ./website
",,,,,,JavaScript
5172,https://github.com/jdataview/jbinary,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: browser-actions/setup-chrome@latest
    - run: npm ci
    - run: npm test
",,,,,,JavaScript
5173,https://github.com/zenozeng/p5.js-svg,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5174,https://github.com/isaacs/async-cache,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
",,,,,,JavaScript
5175,https://github.com/outatime/grunt-replace,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 14
          - 12
          - 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5177,https://github.com/drudge/node-keychain,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        node: [ 14, 16, 18 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5178,https://github.com/sunhuawei/sourcedetector,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - run: npm i
      - run: npm run build
",,,,,,JavaScript
5179,https://github.com/gloriajs/gloria,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: yarn install
      - run: npm test

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
      - run: yarn install
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
",,,,,,JavaScript
5180,https://github.com/okturtles/group-income,"name: NodeJS with Grunt

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'
    - run: npm ci
    - run: npm test
",,,,,,JavaScript
5206,https://github.com/isaacs/once,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
",,,,,,JavaScript
5207,https://github.com/gottox/terminal.js,"name: CI

on: [push]

jobs:
  lib-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version:
        - ""15""
        - ""16""
        - ""17""
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node_version }}
    - run: npm install
    - run: npm test
    - name: IRC Message Action
      uses: Gottox/irc-message-action@main
      if: failure()
      with:
        channel: ""Gottox""
        nickname: gh-gottox
        message: |-
          [${{ github.workflow }} failed] ${{ github.ref }} https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
",,,,,,JavaScript
5229,https://github.com/bahmutov/npm-quick-run,"name: ci
on: push
jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout 🛎
        uses: actions/checkout@v2

      - name: Install NPM dependencies 📦
        uses: bahmutov/npm-install@v1

      - name: Run tests 🧪
        run: npm test

      - name: Run examples 📊
        env:
          DEBUG: quick
        run: |
          npm run example
          node bin/npm-quick-run.js test-foo 'foo bar'
          node bin/npm-quick-run.js echo
          # use prefix search by word
          node bin/npm-quick-run.js t-f 'foo bar'
          node bin/npm-quick-run.js t:f 'foo bar'
          # with stopper . at the end
          # https://github.com/bahmutov/npm-quick-run/issues/35
          node bin/npm-quick-run.js t-f. 'foo bar'
          # should find single ""size"" script
          node bin/npm-quick-run.js s.

      - name: Semantic Release 🚀
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5231,https://github.com/sunesimonsen/ukkonen,"name: Checks

on: [push]

jobs:
  ci:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12, 14, 16, 18, 20]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: yarn lint
        if: ${{ matrix.node-version == 18 }}
      - run: npm test
        env:
          CI: true
",,,,,,JavaScript
5232,https://github.com/sigoden/netease-music-crx,"name: release

on: 
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v2
      with:
        node-version: '16'
    - run: yarn 
    - run: yarn build
    - uses: ""marvinpinto/action-automatic-releases@latest""
      with:
        repo_token: ""${{ secrets.GITHUB_TOKEN }}""
        prerelease: true
        files: |
          netease-music-crx-*.zip",,,,,,JavaScript
5233,https://github.com/levelgraph/levelgraph-jsonld,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
",,,,,,JavaScript
5234,https://github.com/rexxars/react-lowlight,"name: Github Pages

on:
  push:
    branches: main

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

      - run: node --version
      - run: npm --version
      - run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./demo/build
          user_name: ""github-actions[bot]""
          user_email: ""github-actions[bot]@users.noreply.github.com""
",,,,,,JavaScript
5235,https://github.com/jlobos/instagram-stories,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-gpr:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
",,,,,,JavaScript
5236,https://github.com/colorjs/color-space,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5237,https://github.com/gruntjs/grunt-contrib-concat,"name: Tests

on: [push, pull_request]

env:
  FORCE_COLOR: 2

jobs:
  run:
    name: Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node: [12, 14, 16]
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Install npm dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      # We test multiple Windows shells because of prior stdout buffering issues
      # filed against Grunt. https://github.com/joyent/node/issues/3584
      - name: Run PowerShell tests
        run: ""npm test # PowerShell"" # Pass comment to PS for easier debugging
        shell: powershell
        if: startsWith(matrix.os, 'windows')
",,,,,,JavaScript
5238,https://github.com/bokub/chalk-animation,"name: CI/CD

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm run lint

  test:
    name: Test (Node v${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 12, 16 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm test
      - run: npm run coverage
      - uses: codecov/codecov-action@v3
        if: matrix.node == 16
        with:
          files: ./coverage.lcov

  publish:
    name: Publish on npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - name: Publish on npm
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5239,https://github.com/qquanwei/trackpoint-tools,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5240,https://github.com/notninja/europa,"name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        node: [ 14 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Install dependencies
        run: |
          npm install
          npm run bootstrap
      - name: Build packages
        run: |
          npm run build
          npm run bootstrap
      - name: Lint packages
        run: npm run lint
      - name: Test packages
        run: npm test
",,,,,,JavaScript
5242,https://github.com/mgalante/jquery.redirect,"name: Lint & Test

on:
  pull_request:
    branches: [ master ]

env:
  node_version: 16

jobs:
  check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - run: npm run lint
      - run: npm test",,,,,,JavaScript
5243,https://github.com/mafintosh/abstract-chunk-store,"name: ci
'on':
  - push
  - pull_request
jobs:
  test:
    name: Node ${{ matrix.node }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - '14'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm run build --if-present
      - run: npm test
",,,,,,JavaScript
5244,https://github.com/westonganger/rearmed-js,"name: Test
on:
  push:
    branches: ['master']
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          ### TEST MULTIPLE JS VERSIONS
          - js_version: ""12"" # Oldest testable version
          - js_version: ""latest""

    steps:
      - uses: actions/checkout@v2

      - name: Install Javascript
        uses: actions/setup-node@v3
        with:
          node-version: ""${{ matrix.js_version }}""

      - run: npm install

      - run: npm test
",,,,,,JavaScript
5245,https://github.com/component/domify,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5246,https://github.com/bokub/gradient-string,"name: CI/CD

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm run lint

  test:
    name: Test (Node v${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 10, 16 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm test
      - run: npm run coverage
      - uses: codecov/codecov-action@v3
        if: matrix.node == 16
        with:
          files: ./coverage.lcov

  publish:
    name: Publish on npm
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - name: Publish on npm
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5247,https://github.com/jkphl/grunt-svg-sprite,"name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  FORCE_COLOR: 2

jobs:
  test:
    name: Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [12, 14, 16, 18]

    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install npm dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Upload failed tests' screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: grunt-svg-sprite-ci-${{ matrix.node }}-${{ matrix.os }}-${{ github.sha }}
          path: tmp/
",,,,,,JavaScript
5248,https://github.com/albertorestifo/node-dijkstra,"name: Unit Tests

on:
  push:
    branches: [""master""]
  pull_request:
    branches: [""master""]

jobs:
  tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: ""npm""

      - run: npm ci

      - run: npm test

      - uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
",,,,,,JavaScript
5249,https://github.com/svgstore/svgstore,"name: CI
on:
  - push
  - pull_request
jobs:
  test:
    name: Node.js ${{ matrix.node-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - 16
          - 14
          - 12
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5250,https://github.com/errcw/gaussian,"name: tests

on: push

env:
  CI: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 10.x # maintainence ends 2021-04-30
          - 11.x # deprecated
          - 12.x # maintainence ends 2022-04-30
          - 13.x # deprecated
          - 14.x # maintainence ends 2023-04-30
          - 15.x
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - run: npm install
      - run: npm run build --if-present
      - run: npm run test:coverage
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,JavaScript
5251,https://github.com/lutangar/cities.json,"name: Release

on:
  push:
    branches: ['master']
  schedule:
    - cron: '0 0 1 * *'
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: git config
        run: |
          git config user.name ""${GITHUB_ACTOR}""
          git config user.email ""${GITHUB_ACTOR}@users.noreply.github.com""
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm install
      - run: npm run build
      - run: npm test
      - run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5253,https://github.com/tinify/tinify-nodejs,"name: Node CI/CD

on: [push, pull_request]

permissions: {}
jobs:
  Unit_tests:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        node: [14, 16, 18]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test

  Integration_tests:
    if: github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: Unit_tests
    strategy:
      fail-fast: false
      matrix:
        node: [14, 16, 18]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Install Dependencies
        run: npm install
      - name: Run test suite
        env:
          TINIFY_KEY: ${{ secrets.TINIFY_KEY }}
        run: npm run integration

  Publish:
    if: |
      github.repository == 'tinify/tinify-nodejs' &&
      startsWith(github.ref, 'refs/tags') &&
      github.event_name == 'push'
    timeout-minutes: 10
    needs: [Unit_tests, Integration_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up node
        uses: actions/setup-node@v3
        with:
            node-version: ""16.x""
            registry-url: ""https://registry.npmjs.org""
      - name: Install dependencies
        run: npm install
      - name: Check if properly tagged
        run: |
            PACKAGE_VERSION=""$(jq '.version' -r < package.json)"";
            CURRENT_TAG=""${GITHUB_REF#refs/*/}"";
            if  [[ ""${PACKAGE_VERSION}"" != ""${CURRENT_TAG}"" ]]; then
              >&2 echo ""Tag mismatch""
              >&2 echo ""Version in package.json (${PACKAGE_VERSION}) does not match the current tag=${CURRENT_TAG}""
              >&2 echo ""Skipping deploy""
              exit 1;
            fi
      - name: TS compile
        run: npx tsc
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,JavaScript
5254,https://github.com/tcr/scissors,"name: Scissor Tests
on:
  - pull_request
  - push

jobs:
  run_tests:
    name: Run Scissors tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Install node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Ubuntu package dependencies
        run: |
          sudo apt-get install -y pdftk ghostscript imagemagick poppler-utils
          npm install --no-optional
      - name: Run tests
        run: npm test
",,,,,,JavaScript
5255,https://github.com/felixge/node-graphite,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5256,https://github.com/gulpjs/fancy-log,"name: dev
on:
  pull_request:
  push:
    branches:
      - master
      - main
env:
  CI: true

jobs:
  prettier:
    name: Format code
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prettier
        uses: gulpjs/prettier_action@v3.0
        with:
          commit_message: 'chore: Run prettier'
          prettier_options: '--write .'

  test:
    name: Tests for Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node: [10, 12, 14, 16]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Set Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: node --version
      - run: npm --version

      - name: Install npm dependencies
        run: npm install

      - name: Run lint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Coveralls
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: ${{matrix.os}}-node-${{ matrix.node }}
          parallel: true

  coveralls:
    needs: test
    name: Finish up

    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
",,,,,,JavaScript
5257,https://github.com/maximelebreton/quick-javascript-switcher,"name: ""Github Release""
on:
  push:
    branches:
      - ""2.0""
jobs:
  pre-release:
    name: ""Release""
    runs-on: ""ubuntu-latest""

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm ci
      - run: npm run build --if-present
      # - run: npm run zip --if-present

      - id: packExtensionDir
        uses: cardinalby/webext-buildtools-pack-extension-dir-action@v1
        with:
          extensionDir: '.build/'
          zipFilePath: 'quick-javascript-switcher.zip'
  
      - id: buildCrx
        uses: cardinalby/webext-buildtools-chrome-crx-action@v2
        with:
          zipFilePath: 'quick-javascript-switcher.zip'
          crxFilePath: 'quick-javascript-switcher.crx'
          privateKey: ${{ secrets.CHROME_CRX_PRIVATE_KEY }}
          updateXmlPath: 'update.xml'
          updateXmlCodebaseUrl: 'https://github.com/maximelebreton/quick-javascript-switcher/releases/download/latest/quick-javascript-switcher.crx'
          
      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          files: |
            quick-javascript-switcher.zip
            quick-javascript-switcher.crx


      # - name: Chrome Extension upload & publish
      #   uses: Passiverecords/chrome-extension-upload-action@1.4.1
      #   with:
      #     client-id: ${{ secrets.CHROME_CLIENT_ID }}
      #     client-secret: ${{ secrets.CHROME_CLIENT_SECRET }}
      #     refresh-token: ${{ secrets.CHROME_REFRESH_TOKEN }}
      #     file-name: 'quick-javascript-switcher.zip'
      #     app-id: 'geddoclleiomckbhadiaipdggiiccfje'
      #     publish: false",,,,,,JavaScript
5258,https://github.com/krissiegel/msngr.js,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [4.x, 5.x, 6.x, 7.x, 8.x, 9.x, 10.x, 11.x, 12.x, 14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5259,https://github.com/stevenbenner/jquery-powertip,"name: Run tests
on:
  - push
  - pull_request

jobs:
  test:
    name: Node ${{matrix.node}} on ${{matrix.os}}

    strategy:
      matrix:
        os: [ ubuntu-latest ]
        node: [ 18.x ]

    runs-on: ${{matrix.os}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js ${{matrix.node}}
        uses: actions/setup-node@v3
        with:
          node-version: ${{matrix.node}}

      - name: Install npm dependencies
        run: npm install

      - name: Test
        run: npm test
",,,,,,JavaScript
5260,https://github.com/rii-mango/nifti-reader-js,"# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: test-linux-node18

on:
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: ""npm""
      - run: rm package-lock.json
      - run: npm install
      - run: npm run build --if-present
      - run: npm run test
      - run: npm run test-js",,,,,,JavaScript
5262,https://github.com/morungos/node-word-extractor,"# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - run: yarn test

",,,,,,JavaScript
5265,https://github.com/levelgraph/levelgraph,"name: Tests

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - '*'

jobs:

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

  coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm run coverage
      env:
        CI: true
",,,,,,JavaScript
5266,https://github.com/sakitam-fdd/ol-plot,"name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

jobs:
  test:
    if: ""!contains(github.event.head_commit.message, 'ci skip')""

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [18.x]

    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache ~/.pnpm-store
        uses: actions/cache@v2
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-test-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-test-
            ${{ runner.os }}-
      - name: Install pnpm
        run: npm i -g pnpm@8.6.5

      - name: Install deps
        run: pnpm i

      # Runs a set of commands using the runners shell
      - name: Build and Test
        run: pnpm test && pnpm coverage
#      - name: Coveralls
#        uses: coverallsapp/github-action@master
#        with:
#          # https://github.com/coverallsapp/github-action/issues/81
#          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
#          git-branch: master
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          flag-name: ${{matrix.os}}-node-${{ matrix.node }}
#          parallel: true

  release:
    runs-on: ubuntu-latest
    needs: ['test']
    if: ""!contains(github.event.head_commit.message, 'skip-release') && !contains(github.event.head_commit.message, 'skip-ci') && github.event_name != 'pull_request'""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache ~/.pnpm-store
        uses: actions/cache@v3
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-release-
            ${{ runner.os }}-
      - run: npm i -g pnpm@8.6.5
      - run: pnpm i

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@master
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
          commit: 'chore(release): publish'
          title: Publish next versions
        env:
          GITHUB_TOKEN: ${{ secrets.PKG_DEPLOY_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_PKG_PUBLIC_TOKEN }}

  docs:
    runs-on: ubuntu-latest
    needs: [ 'test' ]
    if: ""!contains(github.event.head_commit.message, 'skip-release') && !contains(github.event.head_commit.message, 'skip-ci') && github.event_name != 'pull_request'""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
      - name: Cache ~/.pnpm-store
        uses: actions/cache@v3
        env:
          cache-name: cache-pnpm-store
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-release-${{ env.cache-name }}-
            ${{ runner.os }}-${{ matrix.node-version }}-release-
            ${{ runner.os }}-
      - run: npm i -g pnpm@8.6.5
      - run: pnpm i
      - run: pnpm --filter ""./packages/ol-plot-vue"" build:vue3 && pnpm --filter ""./packages/**"" build
      # ???
      - run: pnpm i
      - run: pnpm --filter ""./playground/vue3"" build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PKG_DEPLOY_TOKEN }}
          publish_dir: playground/vue3/dist
          cname: blog.sakitam.com
",,,,,,JavaScript
5267,https://github.com/gruntjs/grunt-contrib-less,"name: Tests

on: [push, pull_request]

env:
  FORCE_COLOR: 2

jobs:
  run:
    name: Node ${{ matrix.node }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        node: [10, 12, 14]
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - name: Install npm dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      # We test multiple Windows shells because of prior stdout buffering issues
      # filed against Grunt. https://github.com/joyent/node/issues/3584
      - name: Run PowerShell tests
        run: ""npm test # PowerShell"" # Pass comment to PS for easier debugging
        shell: powershell
        if: startsWith(matrix.os, 'windows')
",,,,,,JavaScript
5268,https://github.com/pillarjs/parseurl,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: beautify-benchmark benchmark fast-url-parser nyc

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.3 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.3 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 10.x
          node-version: ""10.24""
          npm-i: mocha@8.4.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 12.x
          node-version: ""12.22""
          npm-i: mocha@9.2.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 13.x
          node-version: ""13.14""
          npm-i: mocha@9.2.2
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 14.x
          node-version: ""14.21""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 15.x
          node-version: ""15.14""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 16.x
          node-version: ""16.19""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 17.x
          node-version: ""17.9""
          npm-rm: beautify-benchmark benchmark fast-url-parser

        - name: Node.js 18.x
          node-version: ""18.13""
          npm-rm: beautify-benchmark benchmark fast-url-parser

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls nyc | grep -q nyc; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.nyc != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
",,,,,,JavaScript
5269,https://github.com/metalsmith/metalsmith-layouts,"name: CI
on:
  push:
    branches: ['**']
  pull_request:
    branches: ['master']

jobs:
  pre-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm run format:check
      - run: npm run lint:check

  branch-test:
    if: github.ref_name != 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          cache: 'npm'

      - run: npm install
      - run: npm test

  test:
    if: github.ref_name == 'master' && success()
    needs: pre-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node: ['14.14.0', '16.0', '18.0', '20.0']
    name: Testing Node ${{ matrix.node }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - run: npm install
      - run: npm test
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        run: npm run coverage
      - if: matrix.os == 'ubuntu-latest' && matrix.node == '20.0'
        uses: coverallsapp/github-action@v2
        with:
          file: ./coverage.info
          format: lcov
",,,,,,JavaScript
5270,https://github.com/kmalakoff/knockback,"name: CI
on:
  push:
    branches:
      - master
jobs:
  test:
    name: Node.js ${{ matrix.node-version }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [""latest""]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: git config --global user.name ""Github Actions""
      - run: git config --global user.email ""actions@users.noreply.github.com""
      - run: npm uninstall node-version-use -g
      - run: npm install node-version-use -g
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm test
      - run: npm run test:engines
",,,,,,JavaScript
5271,https://github.com/ember-cli/ember-ajax,"name: CI

on:
  push:
    branches:
      - main
      - master
      - 'v*'
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.4.0
      with:
        # necessary for commitlint-github-action
        fetch-depth: 0

    - uses: actions/setup-node@v2.4.1
      with:
        node-version: '6'
        cache: yarn

    - run: yarn install --frozen-lockfile
    - run: yarn lint:js
    - uses: wagoid/commitlint-github-action@v4
    - run: yarn ember ts:precompile

  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '6'
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: yarn test

  try-scenarios:
    name: ember-try
    runs-on: ubuntu-latest
    needs: [lint, test]

    strategy:
      fail-fast: false
      matrix:
        ember-try-scenario:
          - ember-lts-2.12
          - ember-lts-2.16
          - ember-lts-2.18
          - ember-lts-3.4
          - ember-lts-3.8
          # disabled because the Ember.js 4 scenarios are not passing yet
          # - ember-release
          # - ember-beta
          # - ember-canary
          # disabled for now because it fails with a strange ember-data
          # installation error
          #- fastboot-addon-tests

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/setup-node@v2.4.1
        with:
          # some of the unlocked dependency versions that ember-try installs
          # are incompatible with Node.js 6
          node-version: '10'
          cache: yarn

      - run: yarn install --frozen-lockfile
      - run: node_modules/.bin/ember try:one ${{ matrix.ember-try-scenario }}
",,,,,,JavaScript
5272,https://github.com/yapplabs/ember-radio-button,"name: CI

on:
  push:
    branches:
      - main
      - master
  pull_request: {}

concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: ""Tests""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
          cache: yarn
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Lint
        run: yarn lint
      - name: Run Tests
        run: yarn test:ember

  floating:
    name: ""Floating Dependencies""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 12.x
          cache: yarn
      - name: Install Dependencies
        run: yarn install --no-lockfile
      - name: Run Tests
        run: yarn test:ember

  try-scenarios:
    name: ${{ matrix.try-scenario }}
    runs-on: ubuntu-latest
    needs: ""test""

    strategy:
      fail-fast: false
      matrix:
        try-scenario:
          - ember-lts-3.20
          - ember-lts-3.24
          - ember-lts-3.28
          - ember-release
          - ember-beta
          - ember-canary
          - ember-classic
          - embroider-safe
          - embroider-optimized

    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
          cache: yarn
      - name: Install Dependencies
        run: yarn install --frozen-lockfile
      - name: Run Tests
        run: ./node_modules/.bin/ember try:one ${{ matrix.try-scenario }}
",,,,,,JavaScript
5273,https://github.com/typicode/react-fake-props,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5274,https://github.com/isaacs/sax-js,"name: CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x, 17.x]
        platform:
        - os: ubuntu-latest
          shell: bash
        - os: macos-latest
          shell: bash
        - os: windows-latest
          shell: bash
        - os: windows-latest
          shell: powershell
      fail-fast: false

    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1.1.0

      - name: Use Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm test -- -c -t0
",,,,,,JavaScript
5275,https://github.com/tyxla/remove-accents,"name: Unit tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 15.x, 16.x, 17.x, 18.x, 19.x, 20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5276,https://github.com/tylergaw/colorme,"# This workflow will do a clean install of node dependencies and run tests

name: CI
on: [pull_request]
jobs:
  build:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ""12""
      - run: yarn install
      - run: yarn test
",,,,,,JavaScript
5277,https://github.com/bameda/postcss-andalusian-stylesheets,"name: Node.js CI

on:
  push:
    branches: [ 'master' ]
  pull_request:
    branches: [ 'master' ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x, 15.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,JavaScript
5278,https://github.com/samclarke/robots-parser,"name: test
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        node: [ '12', '14', '15' ]
    name: Node ${{ matrix.node }} test
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm test

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          flag-name: run-${{ matrix.node }}
          parallel: true

  finish:
    name: Coveralls coverage
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true",,,,,,JavaScript
5280,https://github.com/jshttp/fresh,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: istanbul

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.3

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.3

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0

        - name: Node.js 10.x
          node-version: ""10.24""
          npm-i: mocha@8.4.0

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0

        - name: Node.js 12.x
          node-version: ""12.22""

        - name: Node.js 13.x
          node-version: ""13.14""

        - name: Node.js 14.x
          node-version: ""14.19""

        - name: Node.js 15.x
          node-version: ""15.14""

        - name: Node.js 16.x
          node-version: ""16.15""

        - name: Node.js 17.x
          node-version: ""17.9""

        - name: Node.js 18.x
          node-version: ""18.4""

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove non-test npm modules
      run: |
        echo beautify-benchmark benchmark | \
          xargs -n1 npm rm --silent --save-dev

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls istanbul | grep -q istanbul; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.istanbul != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
",,,,,,JavaScript
5282,https://github.com/choojs/hyperx,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: setup
        run: npm install
        
      # Runs a single command using the runners shell
      - name: tests
        run: npm test
",,,,,,JavaScript
5283,https://github.com/lukeed/trouter,"name: CI

on: [push, pull_request]

jobs:
  test:
    name: Node.js v${{ matrix.nodejs }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nodejs: [6, 8, 10, 12, 14, 16, 18]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.nodejs }}

    - name: (cache) restore
      uses: actions/cache@master
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}

    - name: Install
      run: npm install

    - name: (coverage) Install
      if: matrix.nodejs >= 18
      run: npm install -g nyc

    - name: Build
      run: npm run prepack

    - name: Test
      run: npm test
      if: matrix.nodejs < 18

    - name: (coverage) Test
      run: nyc --include=src npm test
      if: matrix.nodejs >= 18

    # - name: (coverage) Report
    #   if: matrix.nodejs >= 18
    #   run: |
    #     nyc report --reporter=text-lcov > coverage.lcov
    #     bash <(curl -s https://codecov.io/bash)
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
",,,,,,JavaScript
5284,https://github.com/lukeed/obj-str,"name: CI

on: [push, pull_request]

jobs:
  test:
    name: Node.js v${{ matrix.nodejs }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nodejs: [8, 10, 12]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.nodejs }}

    - name: (cache) restore
      uses: actions/cache@master
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}

    - name: Install
      run: npm install

    - name: (coverage) Install
      if: matrix.nodejs >= 12
      run: npm install -g nyc

    - name: Test
      run: npm test
      if: matrix.nodejs < 12

    - name: (coverage) Test
      run: nyc --include=src --include=babel-plugin-optimize-obj-str npm test
      if: matrix.nodejs >= 12

    - name: (coverage) Report
      if: matrix.nodejs >= 12
      run: |
        nyc report --reporter=text-lcov > coverage.lcov
        bash <(curl -s https://codecov.io/bash)
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
",,,,,,JavaScript
5285,https://github.com/derhuerst/tcp-over-websockets,"name: test

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14', '16', '18']

    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup Node v${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install

    - run: npm run lint
    - run: npm test
",,,,,,JavaScript
5286,https://github.com/auditdrivencrypto/secret-handshake,"name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5287,https://github.com/fregante/supports-webp,"env:
  IMPORT_TEXT: import supportsWebP from
  NPM_MODULE_NAME: supports-webp

# FILE GENERATED WITH: npx ghat fregante/ghatemplates/esm-lint
# SOURCE: https://github.com/fregante/ghatemplates

name: ESM
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master
      - main
jobs:
  Pack:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: npm install
      - run: npm run build --if-present
      - run: npm pack --dry-run
      - run: npm pack | tail -1 | xargs -n1 tar -xzf
      - uses: actions/upload-artifact@v3
        with:
          path: package
  Webpack:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: webpack --entry ./index.js
      - run: cat dist/main.js
  Parcel:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npx parcel@2 build index.js
      - run: cat dist/index.js
  Rollup:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact rollup@2 @rollup/plugin-node-resolve
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npx rollup -p node-resolve index.js
  Vite:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact
      - run: >-
          echo '<script type=""module"">${{ env.IMPORT_TEXT }} ""${{
          env.NPM_MODULE_NAME }}""</script>' > index.html
      - run: npx vite build
      - run: cat dist/assets/*
  esbuild:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: echo '{}' > package.json
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.js
      - run: npm install ./artifact
      - run: npx esbuild --bundle index.js
  TypeScript:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - run: npm install ./artifact && npm install @types/estree
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.ts
      - run: tsc index.ts
      - run: cat index.js
  Node:
    runs-on: ubuntu-latest
    needs: Pack
    steps:
      - uses: actions/download-artifact@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - run: echo ""${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'"" > index.mjs
      - run: npm install ./artifact
      - run: node index.mjs
",,,,,,JavaScript
5289,https://github.com/robotwebtools/ros2djs,"name: CI

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.node_version }}
    if: ${{ github.actor != 'RWT-bot' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node_version: [16, 18]
    steps:
    - uses: actions/checkout@v4
      env:
        TOKEN: ""${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.node_version == 18 && secrets.RWT_BOT_PAT || github.token }}""
      with:
        token: ${{ env.TOKEN }}
    - uses: actions/setup-node@v4
      with:
        cache: npm
        node-version: ${{ matrix.node_version }}
    - name: Install grunt-cli
      run: npm install -g grunt-cli
    - name: Install
      run: npm install
    - name: Build
      run: npm run build
    - uses: stefanzweifel/git-auto-commit-action@v5
      if: ${{ github.event_name == 'push' && endsWith(github.ref, 'develop') && matrix.node_version == 18 }}
      with:
        commit_message: Update Build
        file_pattern: 'build/*.js'
",,,,,,JavaScript
5290,https://github.com/vadimdemedes/reconciled,"name: test
on: [push, pull_request]
jobs:
  nodejs:
    name: Node.js
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm test
",,,,,,JavaScript
5291,https://github.com/pillarjs/csrf,"name: ci

on:
- pull_request
- push

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 0.12
        - io.js 1.x
        - io.js 2.x
        - io.js 3.x
        - Node.js 4.x
        - Node.js 5.x
        - Node.js 6.x
        - Node.js 7.x
        - Node.js 8.x
        - Node.js 9.x
        - Node.js 10.x
        - Node.js 11.x
        - Node.js 12.x
        - Node.js 13.x
        - Node.js 14.x
        - Node.js 15.x
        - Node.js 16.x
        - Node.js 17.x
        - Node.js 18.x

        include:
        - name: Node.js 0.8
          node-version: ""0.8""
          npm-i: mocha@2.5.3
          npm-rm: beautify-benchmark benchmark nyc

        - name: Node.js 0.10
          node-version: ""0.10""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 0.12
          node-version: ""0.12""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 1.x
          node-version: ""1.8""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 2.x
          node-version: ""2.5""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: io.js 3.x
          node-version: ""3.3""
          npm-i: mocha@3.5.3 nyc@10.3.2
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 4.x
          node-version: ""4.9""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 5.x
          node-version: ""5.12""
          npm-i: mocha@5.2.0 nyc@11.9.0
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 6.x
          node-version: ""6.17""
          npm-i: mocha@6.2.2 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 7.x
          node-version: ""7.10""
          npm-i: mocha@6.2.2 nyc@14.1.1
          npm-rm: beautify-benchmark benchmark

        - name: Node.js 8.x
          node-version: ""8.17""
          npm-i: mocha@7.2.0

        - name: Node.js 9.x
          node-version: ""9.11""
          npm-i: mocha@7.2.0

        - name: Node.js 10.x
          node-version: ""10.23""
          npm-i: mocha@8.4.0

        - name: Node.js 11.x
          node-version: ""11.15""
          npm-i: mocha@8.4.0

        - name: Node.js 12.x
          node-version: ""12.22""

        - name: Node.js 13.x
          node-version: ""13.14""

        - name: Node.js 14.x
          node-version: ""14.20""

        - name: Node.js 15.x
          node-version: ""15.14""

        - name: Node.js 16.x
          node-version: ""16.17""

        - name: Node.js 17.x
          node-version: ""17.7""

        - name: Node.js 18.x
          node-version: ""18.7""

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ ""${{ matrix.node-version }}"" == 0.* && ""$(cut -d. -f2 <<< ""${{ matrix.node-version }}"")"" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          nvm use ${{ matrix.node-version }}
          sed -i '1s;^.*$;'""$(printf '#!%q' ""$(nvm which npm)"")""';' ""$(readlink -f ""$(which npm)"")""
          npm config set strict-ssl false
        fi
        dirname ""$(nvm which ${{ matrix.node-version }})"" >> ""$GITHUB_PATH""

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 12
        if [[ ""$(cut -d. -f1 <<< ""${{ matrix.node-version }}"")"" -lt 12 ]]; then
          node -pe 'Object.keys(require(""./package"").devDependencies).join(""\n"")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo ""node@$(node -v)""
        echo ""npm@$(npm -v)""
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print ""::set-output name="" $2 ""::"" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls nyc | grep -q nyc; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.nyc != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true
",,,,,,JavaScript
121,https://github.com/splitwise/tokenautocomplete,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        device-split: [
          {model: ""NexusLowRes"", version: 23},
          {model: ""NexusLowRes"", version: 24},
          {model: ""NexusLowRes"", version: 25},
          {model: ""NexusLowRes"", version: 26},
          {model: ""NexusLowRes"", version: 27},
          {model: ""NexusLowRes"", version: 28},
          {model: ""NexusLowRes"", version: 29},
          {model: ""NexusLowRes"", version: 30},

          {model: ""oriole"", version: 31},
          {model: ""oriole"", version: 32},
          {model: ""oriole"", version: 33}
        ]

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
    - name: Build integration test target
      run: ./gradlew assembleAndroidTest
    - name: Configure Google Cloud credentials
      env:
        GOOGLE_CLOUD_SERVICE_KEY: ${{secrets.GOOGLE_CLOUD_SERVICE_KEY}}
        GOOGLE_PROJECT_ID: ${{secrets.GOOGLE_PROJECT_ID}}
      run: |
        echo $GOOGLE_CLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project $GOOGLE_PROJECT_ID
    - name: Run Instrumented Tests with Firebase Test Lab
      run: gcloud firebase test android run --type instrumentation --app example/build/outputs/apk/debug/example-debug.apk --test example/build/outputs/apk/androidTest/debug/example-debug-androidTest.apk --device model=$DEVICE,version=$API_VERSION,locale=en,orientation=portrait --timeout 30m
      env:
        API_VERSION: ${{ matrix.device-split.version }}
        DEVICE: ${{ matrix.device-split.model }}
",,,,,,Kotlin
162,https://github.com/jetbrains/idea-gitignore,"# GitHub Actions Workflow is created for testing and preparing the plugin release in the following steps:
# - Validate Gradle Wrapper.
# - Run 'test' and 'verifyPlugin' tasks.
# - Run Qodana inspections.
# - Run the 'buildPlugin' task and prepare artifact for further tests.
# - Run the 'runPluginVerifier' task.
# - Create a draft release.
#
# The workflow is triggered on push and pull_request events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g., for dependabot pull requests)
  push:
    branches: [ main ]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Prepare environment and build the plugin
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.1.0

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests and upload a code coverage report
  test:
    name: Test
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Upload the Kover report to CodeCov
      - name: Upload Code Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/build/reports/kover/report.xml

  # Run Qodana inspections and provide report
  inspectCode:
    name: Inspect code
    needs: [ build ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Run Qodana inspections
      - name: Qodana - Code Inspection
        uses: JetBrains/qodana-action@v2023.2.6
        with:
          cache-default-branch-only: true

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          large-packages: false

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, inspectCode, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
            submodules: true

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 17

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin
166,https://github.com/jakewharton/byteunits,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin
167,https://github.com/openmrs/openmrs-contrib-android-client,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]
    types:
      - opened
      - synchronize

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew buildDebug
",,,,,,Kotlin
170,https://github.com/kronicdeth/intellij-elixir,"name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: 24.3.4.6
          elixir-version: 1.13.0
      - name: Export OTP_RELEASE
        run: echo ""OTP_RELEASE=24.3.4.6"" >> $GITHUB_ENV
      - name: Export ERLANG_SDK_HOME
        run: echo ""ERLANG_SDK_HOME=`erl -eval 'io:format(""~s"", [code:root_dir()]).' -noshell -run init stop`"" >> $GITHUB_ENV
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Compile Tests with Gradle
        run: ./gradlew --stacktrace compileTestJava
      - name: Get Elixir Source
        run: ./gradlew --stacktrace getElixir
      - name: Release Quoter
        run: ./gradlew --stacktrace releaseQuoter
      - name: Test with Gradle
        run: ./gradlew --stacktrace test
  runPluginVerifier:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run Plugin Verifier
        run: ./gradlew --stacktrace runPluginVerifier
  release:
    needs: [ test, runPluginVerifier ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew buildPlugin
      - name: Export ASSET_PATH
        run: echo ""ASSET_PATH=`ls -1 build/distributions/intellij-elixir-*.zip`"" >> $GITHUB_ENV
      - name: Export ASSET_NAME
        run: echo ""ASSET_NAME=${ASSET_PATH#build/distributions/}"" >> $GITHUB_ENV
      - name: Export TAG
        run: |
          version_suffix_zip=${ASSET_NAME#intellij-elixir-}
          echo ""TAG=v${version_suffix_zip%.zip}"" >> $GITHUB_ENV
      - name: Tag Commit
        uses: hole19/git-tag-action@master
        env:
          # TAG set above with `set-env name=TAG`
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}
          prerelease: true
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/zip
      - name: Publish
        env:
          JET_BRAINS_MARKETPLACE_TOKEN: ${{ secrets.JetBrainsMarketplaceToken }}
        run: ./gradlew --stacktrace publishPlugin
",,,,,,Kotlin
175,https://github.com/square/moshi,"name: CI

on: [push, pull_request]

jobs:
  build:
    name: 'Test Mode ${{ matrix.kotlin-test-mode }}'
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        kotlin-test-mode: [ 'REFLECT', 'KSP', 'KAPT' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'
          cache: 'gradle'

      - name: Test
        run: ./gradlew build check --stacktrace -PkotlinTestMode=${{ matrix.kotlin-test-mode }}

      - name: Publish (default branch only)
        if: github.repository == 'square/moshi' && github.ref == 'refs/heads/master' && matrix.kotlin-test-mode == 'reflect'
        run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}
",,,,,,Kotlin
189,https://github.com/coolerfall/android-httpdownloadmanager,"name: Android CI

on:
  pull_request:
    branches: [ develop]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
226,https://github.com/googlesamples/android-custom-lint-rules,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # AGP 8.2 requires 34.0.0-rc3 - see https://issuetracker.google.com/issues/236167971#comment36
      # and https://github.com/actions/runner-images/issues/7506#issuecomment-1533097084
      # TODO: Remove when AGP updates Build Tools to 34.0.0 and pre-installed in the runner
      #- name: Install Android Build Tools 34.0.0-rc3
      #  run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager ""build-tools;34.0.0-rc3""
      #  shell: bash
      - name: Build with Gradle
        run: ./gradlew build test
",,,,,,Kotlin
243,https://github.com/bailuk/aat,"name: Build on ubuntu

on:
  push:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 17

    - name: Build with Gradle
      run: ./gradlew build

    - name: Collect files for distribution
      run: ci/collect-artifacts.sh

    - name: Upload artifacts (gtk)
      uses: actions/upload-artifact@v2
      with:
        name: aat-gtk
        path: dist/gtk
        if-no-files-found: error

    - name: Upload artifacts (android)
      uses: actions/upload-artifact@v2
      with:
        name: aat-android
        path: dist/android
        if-no-files-found: error
",,,,,,Kotlin
257,https://github.com/ben-gibson/gitlink,"# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run 'test' and 'verifyPlugin' tasks,
# - run Qodana inspections,
# - run 'buildPlugin' task and prepare artifact for the further tests,
# - run 'runPluginVerifier' task,
# - create a draft release.
#
# Workflow is triggered on push and PULL_REQUEST events.
#
# GitHub Actions reference: https://help.github.com/en/actions
#
## JBIJPPTPL

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
      pluginVerifierHomeDir: ${{ steps.properties.outputs.pluginVerifierHomeDir }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES=""$(./gradlew properties --console=plain -q)""
          VERSION=""$(echo ""$PROPERTIES"" | grep ""^version:"" | cut -f2- -d ' ')""
          CHANGELOG=""$(./gradlew getChangelog --unreleased --no-header --console=plain -q)""

          echo ""version=$VERSION"" >> $GITHUB_OUTPUT
          echo ""pluginVerifierHomeDir=~/.pluginVerifier"" >> $GITHUB_OUTPUT
          
          echo ""changelog<<EOF"" >> $GITHUB_OUTPUT
          echo ""$CHANGELOG"" >> $GITHUB_OUTPUT
          echo ""EOF"" >> $GITHUB_OUTPUT

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Build plugin
      - name: Build plugin
        run: ./gradlew buildPlugin

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip ""$FILENAME"" -d content

          echo ""filename=${FILENAME:0:-4}"" >> $GITHUB_OUTPUT

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Run tests
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Run tests
      - name: Run Tests
        run: ./gradlew check

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

  # Run plugin structure verification along with IntelliJ Plugin Verifier
  verify:
    name: Verify plugin
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.build.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ needs.build.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release draft
    if: github.event_name != 'pull_request'
    needs: [ build, test, verify ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title ""v${{ needs.build.outputs.version }}"" \
            --notes ""$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )""
",,,,,,Kotlin
301,https://github.com/tommyettinger/gdx-liftoff,"name: build

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [8, 11, 17]

    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: JDK setup
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java-version }}
          distribution: temurin
      - name: Gradle setup
        uses: gradle/gradle-build-action@v2
      - name: Gradle wrapper validation
        uses: gradle/wrapper-validation-action@v1
      - name: Build
        run: ./gradlew build check
      - name: Generate sample project
        run: ./gradlew sample
",,,,,,Kotlin
316,https://github.com/theredspy15/ltecleanerfoss,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
332,https://github.com/burhanrashid52/photoeditor,"name: UI test in android emulator CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches:
      - master
      - kotlin-conversion

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
    - name: Build with Gradle
      run: ./gradlew build

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Run all checks
        run: ./gradlew check --stacktrace

  ui-test:
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: run ui tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
",,,,,,Kotlin
333,https://github.com/instacart/truetime-android,"name: CI
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Spotless checks
        run: ./gradlew spotlessCheck --stacktrace
      - name: Build the app
        run: ./gradlew build
",,,,,,Kotlin
339,https://github.com/gotify/android,"on: [push, pull_request]

name: Build

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 17
      - if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: ./gradlew build --stacktrace
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          export RELEASE_STORE_FILE=$(pwd)/gotfy-release-key.jks
          echo $RELEASE_KEY | base64 -d > $RELEASE_STORE_FILE
          ./gradlew -Psign build --stacktrace
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Gotify.apk
        env:
          RELEASE_KEY: ${{ secrets.RELEASE_KEY }}
          RELEASE_STORE_PASSWORD: ${{ secrets.STOREPASS }}
          RELEASE_KEY_ALIAS: gotify-release-key
          RELEASE_KEY_PASSWORD: ${{ secrets.KEYPASS }}
      - if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: app/build/outputs/apk/release/Gotify.apk
          tag: ${{ github.ref }}
          overwrite: true
",,,,,,Kotlin
347,https://github.com/mediathekview/zapp,"name: Build and test
on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2
        
    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1
  
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'
        java-version: 17
        cache: 'gradle'
        
    - name: Build and test with Gradle
      run: ./gradlew build test -Pci
      
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  ",,,,,,Kotlin
368,https://github.com/esafirm/android-image-picker,"name: Android CI

on:
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v2.4.0
        with:
          distribution: adopt-openj9
          java-version: '11'

      - name: Cache Gradle
        uses: actions/cache@v2
        env:
          cache-name: gradle
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('build.gradle') }}
          restore-keys: |
            gradle-${{ hashFiles('build.gradle') }}
            gradle-

      - name: Build with Gradle
        run: ./gradlew build -x lint

      - name: Build test
        run: ./gradlew sample:assembleAndroidTest

      - name: Run tests on Firebase Test Lab
        uses: asadmansr/Firebase-Test-Lab-Action@v1.0
        if: github.ref == 'refs/heads/master'
        with:
          arg-spec: 'firebasetest.yml:android-pixel-4'
        env:
          SERVICE_ACCOUNT: ${{ secrets.SERVICE_ACCOUNT }}
",,,,,,Kotlin
378,https://github.com/taboolib/taboolib,"name: build
on:
  push:
    branches:
      - master
jobs:
  build:
    if: ""contains(github.event.head_commit.message, 'dev')""
    runs-on: ubuntu-latest
    steps:
      # 环境配置
      - name: checkout repository
        uses: actions/checkout@v2
      - name: cache gradle packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
      - name: validate gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: setup jdk 8.0
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 8.0

      # 设置权限
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew

      # 编译测试
      - name: build test
        id: publish_1
        continue-on-error: true
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: ./gradlew build -Pbuild=$GITHUB_RUN_NUMBER -PtaboolibUsername=$NEXUS_USERNAME -PtaboolibPassword=$NEXUS_PASSWORD",,,,,,Kotlin
406,https://github.com/jetbrains-research/astminer,"name: Build with lint

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

  build:
    needs: setup
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build astminer
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-report
          path: build/astminer/reports/tests/**/*

      - name: Upload Detekt Report
        uses: github/codeql-action/upload-sarif@v1
        if: ${{ always() }}
        with:
          sarif_file: build/astminer/reports/detekt/detekt.sarif

  run-on-configs:
    needs: build
    runs-on: ubuntu-latest
    container: voudy/astminer

    steps:
      - uses: actions/checkout@v2

      - name: Prepare shadowJar
        run: ./gradlew shadowJar

      - name: Run antlr_java_js_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_java_js_ast.yaml

      - name: Run antlr_python_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/antlr_python_paths.yaml

      - name: Run gumtree_java_ast.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_ast.yaml

      - name: Run gumtree_java_function_names_paths.yaml
        run: java -jar build/shadow/astminer.jar configs/gumtree_java_function_names_paths.yaml
",,,,,,Kotlin
545,https://github.com/skydoves/baserecyclerviewadapter,"name: Android CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin
546,https://github.com/vanniktech/gradle-dependency-graph-generator-plugin,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [11]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
547,https://github.com/hashlin/rally,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
548,https://github.com/semper-viventem/material-backdrop,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
549,https://github.com/ntrrgc/ts-generator,"# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
550,https://github.com/madrapps/pikolo,"name: Publish

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Check
        run: ./gradlew check --stacktrace

      - name: Build
        run: ./gradlew build --stacktrace

      - name: Publish Artifact
        run: ./gradlew pikolo:publishReleasePublicationToSonatypeRepository --max-workers=1 closeAndReleaseSonatypeStagingRepository --stacktrace
        env:
          OSS_USERNAME: ${{ secrets.OSS_USERNAME }}
          OSS_PASSWORD: ${{ secrets.OSS_PASSWORD }}
          OSS_STAGING_PROFILE_ID: ${{ secrets.OSS_STAGING_PROFILE_ID }}
          OSS_SIGNING_KEY_ID: ${{ secrets.OSS_SIGNING_KEY_ID }}
          OSS_SIGNING_PASSWORD: ${{ secrets.OSS_SIGNING_PASSWORD }}
          OSS_SIGNING_KEY: ${{ secrets.OSS_SIGNING_KEY }}
",,,,,,Kotlin
551,https://github.com/skydoves/chamber,"name: Android CI

on:
 push:
  branches:
   - master
  pull_request:
   branches:
   - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin
552,https://github.com/commit451/resourcespoet,"name: Build

on: [push, pull_request]

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 11

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Test
        run: ./gradlew build",,,,,,Kotlin
553,https://github.com/skydoves/lazybones,"name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Spotless check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: spotless
        run: ./gradlew spotlessCheck

  api_check:
    name: API check
    runs-on: ubuntu-18.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: API check
        run: ./gradlew apiCheck

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache Gradle and wrapper
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build",,,,,,Kotlin
554,https://github.com/afollestad/drag-select-recyclerview,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
555,https://github.com/afollestad/assent,"name: Android CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.1.0
    - name: Setup JDK 11
      uses: actions/setup-java@v3.6.0
      with:
        distribution: adopt
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
556,https://github.com/saschpe/android-customtabs,"name: Gradle Build
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        with:
          lfs: true
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Android problem matchers
        uses: jonasb/android-problem-matchers-action@v1
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
557,https://github.com/afollestad/inline-activity-result,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
558,https://github.com/vanniktech/gradle-code-quality-tools-plugin,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
559,https://github.com/afollestad/rxkprefs,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
560,https://github.com/afollestad/ulfberht,"name: Android CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3.1.0
    - name: set up JDK 11
      uses: actions/setup-java@v3.6.0
      with:
        distribution: adopt
        java-version: 11
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
561,https://github.com/afollestad/viewpagerdots,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
562,https://github.com/bnorm/ktor-retrofit,"name: Project Build

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
563,https://github.com/martinstyk/androidapkanalyzer,"name: Release

on:
  workflow_dispatch:
    inputs:
      versionNumber:
        description: 'Version number'
        required: true
      versionName:
        description: 'Version name'
        required: true

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: gradle

    - name: Create google-services.json
      uses: 1arp/create-a-file-action@0.2
      with:
        path: app
        file: google-services.json
        content: ${{secrets.GOOGLE_SERVICES}}

    - name: Set app version
      uses: chkfung/android-version-actions@v1.1
      with:
       gradlePath: app/build.gradle.kts
       versionCode: ${{ github.event.inputs.versionNumber }}
       versionName: ${{ github.event.inputs.versionName }}

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build Project
      run: ./gradlew buildFreeRelease

    - name: Bundle Release AAB
      run: ./gradlew bundleFreeRelease

    - name: Sign AAB
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/bundle/freeRelease
        signingKeyBase64: ${{ secrets.SIGN_KEY }}
        alias: ${{ secrets.SIGN_KEY_ALIAS }}
        keyStorePassword: ${{ secrets.SIGN_KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.SIGN_KEY_PASSWORD }}

    - name: Deploy to Play Store
      uses: r0adkll/upload-google-play@v1.0.16
      with:
        serviceAccountJsonPlainText: ${{secrets.GOOGLE_SERVICE_ACCOUNT}}
        packageName: sk.styk.martin.apkanalyzer
        releaseFiles: ${{ steps.sign_app.outputs.signedReleaseFile }}
        mappingFile: app/build/outputs/mapping/freeRelease/mapping.txt
        track: beta
        status: completed
        releaseName: ${{ github.event.inputs.versionNumber }} (${{ github.event.inputs.versionName }})
    
    - name: Push current release tag
      uses: thejeff77/action-push-tag@v1.0.0
      with:
        tag: ${{ github.event.inputs.versionNumber }}

    - name: Create Github release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ github.event.inputs.versionName }}
        tag_name:  ${{ github.event.inputs.versionNumber }}

        
",,,,,,Kotlin
564,https://github.com/cottacush/hiddencam,"name: ci

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Build and Run Tests with Gradle
        run: ./gradlew build",,,,,,Kotlin
565,https://github.com/dragneelfps/realworld-kotlin-ktor,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 18
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build test
    - name: Integration tests
      env:
        APIURL:  http://localhost:8080/api
      run: |
        chmod +x postman_tests/run-api-tests.sh
        ./gradlew run &
        ./postman_tests/run-api-tests.sh
        ./gradlew --stop
",,,,,,Kotlin
566,https://github.com/minecrell/plugin-yml,"name: Build
on: [ push, pull_request ]

jobs:
  build:
    # Only run on PRs if the source branch is on someone else's repo
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 8, 11, 17 ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v2.3.5
      - uses: gradle/wrapper-validation-action@v1
      - name: JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.3.1
        with:
          java-version: ${{ matrix.java }}
          cache: 'gradle'
          distribution: 'temurin'
      - name: build
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
567,https://github.com/rumboalla/apkupdater,"name: Android Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java 17
      uses: actions/setup-java@v2
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
568,https://github.com/ftomassetti/langsandbox,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: ./gradlew build",,,,,,Kotlin
569,https://github.com/chrisvin/rubberpicker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
570,https://github.com/vanniktech/lint-rules,"name: Build

on: [push, pull_request]

jobs:
  build:
    name: JDK ${{ matrix.java_version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java_version: [17]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup gradle
        uses: gradle/gradle-build-action@v2

      - name: Install JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java_version }}

      - name: Build with Gradle
        run: ./gradlew build --stacktrace
",,,,,,Kotlin
571,https://github.com/mumayank/airlocation,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
572,https://github.com/mozilla/rust-android-gradle,"name: CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events, but only for the `master` branch (generally) or the `citest`
# branch (for testing).
on:
  push:
    branches: [master, citest]
  pull_request:
    branches: [master]

jobs:
  generate_versions:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Gradle test
        run: |
          ./gradlew -p plugin generateTestTasksJson

      - id: setup-matrix
        run: echo ""::set-output name=matrix::$(cat plugin/build/build-resources/androidTestTasks.json)""

      - name: debug
        run: echo ${{ steps.setup-matrix.outputs.matrix }}

    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}

  samples:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Assemble samples/app
        run: |
          ./gradlew -p samples/app :assembleDebug --info --warning-mode all

      - name: Assemble samples/library
        run: |
          ./gradlew -p samples/library :assembleDebug --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_unversioned_tests:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE for the job.
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin test --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop

  android_version_tests:
    needs: [generate_versions] # , sanity_check]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        androidTestTask: ${{ fromJson(needs.generate_versions.outputs.matrix) }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Rust
        run: |
          rustup toolchain install stable
          rustup target add x86_64-linux-android
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-linux-android

      # Use Java 8
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
          cache: 'gradle'

      - name: Gradle setup
        run: |
          ./gradlew -p plugin tasks --warning-mode all

      - name: Gradle test
        run: |
          ./gradlew -p plugin ${{ matrix.androidTestTask }} --info --warning-mode all

      # Work around https://github.com/actions/cache/issues/454.
      - name: Gradle stop
        run: |
          ./gradlew --stop
",,,,,,Kotlin
573,https://github.com/yariksoffice/venom,"name: Build

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  jvm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.2.2
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Assemble and test
        run: ./gradlew build --stacktrace

  android:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.2.2
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/master' }}

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Run all device checks
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck --stacktrace
",,,,,,Kotlin
574,https://github.com/jetbrains/ideolog,"name: Run tests 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  check:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build with Gradle
      run: ./gradlew build
    - name: Run unit tests
      run: ./gradlew test
",,,,,,Kotlin
575,https://github.com/afollestad/date-picker,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
576,https://github.com/chimbori/crux,"name: Gradle Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Source
      uses: actions/checkout@v2
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run Gradle Checks
      run: ./gradlew check --info
",,,,,,Kotlin
577,https://github.com/wrbug/developerhelper,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
578,https://github.com/yariksoffice/lingver,"name: Build

on:
  push:
    branches:
      - master

  pull_request:
    branches:
      - master

jobs:
  jvm:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Assemble and test
        run: ./gradlew build --stacktrace",,,,,,Kotlin
579,https://github.com/cottacush/currencyedittext,"name: ci

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Build and Run Tests with Gradle
        run: ./gradlew build",,,,,,Kotlin
580,https://github.com/gridstone/debugdrawer,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Setup variables for versions
      run: |
        VERSION_NAME=`cat gradle.properties | grep ""VERSION_NAME"" | cut -d'=' -f2`
        IS_SNAPSHOT=$( [[ ""$VERSION_NAME"" == *""SNAPSHOT""* ]] && echo ""true"" || echo ""false"" )
        IS_NEW_VERSION=$( git tag -l | grep -q ""^$VERSION_NAME$"" && echo ""false"" || echo ""true"" )
        echo ""VERSION_NAME=$VERSION_NAME"" >> $GITHUB_ENV
        echo ""IS_SNAPSHOT=$IS_SNAPSHOT"" >> $GITHUB_ENV
        echo ""IS_NEW_VERSION=$IS_NEW_VERSION"" >> $GITHUB_ENV

    - name: Generate release notes
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false'  }}
      run: ./gradlew -q getChangelog >> RELEASE_NOTES.md

    - name: Release on Github
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' && env.IS_NEW_VERSION == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION_NAME }}
        body_path: RELEASE_NOTES.md
        files: |
          debugdrawer/build/outputs/aar/debugdrawer-debug.aar
          debugdrawer-leakcanary/build/outputs/aar/debugdrawer-leakcanary-release.aar
          debugdrawer-okhttp-logger/build/outputs/aar/debugdrawer-okhttp-logger-release.aar
          debugdrawer-retrofit/build/outputs/aar/debugdrawer-retrofit-release.aar
          debugdrawer-timber/build/outputs/aar/debugdrawer-timber-release.aar

    - name: Publish to sonatype
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        echo signingInMemoryKeyPassword=""${GPG_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        echo signingInMemoryKey=""${GPG_KEY}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralUsername=""${MAVEN_CENTRAL_USERNAME}"" >> ""$HOME/.gradle/gradle.properties""
        echo mavenCentralPassword=""${MAVEN_CENTRAL_PASSWORD}"" >> ""$HOME/.gradle/gradle.properties""
        ./gradlew androidSourcesJar androidJavadocJar publish --info --no-daemon --no-parallel
      env:
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GPG_KEY: ${{ secrets.GPG_KEY }}
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        
    - name: Close and release repository
      if: ${{ github.event_name != 'pull_request' && env.IS_SNAPSHOT == 'false' }}
      run: |
        ./gradlew closeAndReleaseRepository --info --no-daemon --no-parallel
      env:
        MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
",,,,,,Kotlin
581,https://github.com/nhaarman/mockito-kotlin,"#
# CI build that assembles artifacts and runs tests.
# If validation is successful this workflow releases from the main dev branch.
#
# - skipping CI: add [skip ci] to the commit message
# - skipping release: add [skip release] to the commit message
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - 5.*
  pull_request:
    branches:
      - main

jobs:

  #
  # SINGLE-JOB
  #
  verify:
    runs-on:  ubuntu-latest
    if: ""! contains(toJSON(github.event.commits.*.message), '[skip ci]')""

    steps:

      - name: 1. Check out code
        uses: actions/checkout@v2 # https://github.com/actions/checkout

      - name: 2. Set up Java 11
        uses: actions/setup-java@v1 # https://github.com/actions/setup-java
        with:
          java-version: 11

      - name: 3. Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1 # https://github.com/gradle/wrapper-validation-action

  #
  # Main build job
  #
  build:
    needs: [verify]
    runs-on:  ubuntu-latest

    # Definition of the build matrix
    strategy:
      matrix:
        mock-maker: ['mock-maker-default', 'mock-maker-inline']
        kotlin: ['1.3.50', '1.4.21']
        # Note that the old Travis CI referenced other Kotlin versions: '1.0.7', '1.1.61', '1.2.50'
        # However, those versions of Kotlin don't work with latest Gradle

    steps:

    - name: 1. Check out code
      uses: actions/checkout@v2 # https://github.com/actions/checkout

    - name: 2. Set up Java 11
      uses: actions/setup-java@v1 # https://github.com/actions/setup-java
      with:
        java-version: 11

    - name: 3. Build with Kotlin ${{ matrix.kotlin }} and mock-maker ${{ matrix.mock-maker }}
      run: |
        ops/mockMakerInline.sh
        ./gradlew build
      env:
        KOTLIN_VERSION: ${{ matrix.kotlin }}
        MOCK_MAKER: ${{ matrix.mock-maker }}

  #
  # Release job, only for pushes to the main development branch
  #
  release:
    runs-on: ubuntu-latest
    needs: [build] # build job must pass before we can release

    if: github.event_name == 'push'
        && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/5.'))
        && github.repository == 'mockito/mockito-kotlin'
        && !contains(toJSON(github.event.commits.*.message), '[skip release]')

    steps:

    - name: Check out code
      uses: actions/checkout@v2 # https://github.com/actions/checkout
      with:
        fetch-depth: '0' # https://github.com/shipkit/shipkit-changelog#fetch-depth-on-ci

    - name: Set up Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build and release
      run: ./gradlew githubRelease publishToSonatype closeAndReleaseStagingRepository releaseSummary
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        NEXUS_TOKEN_USER: ${{secrets.NEXUS_TOKEN_USER}}
        NEXUS_TOKEN_PWD: ${{secrets.NEXUS_TOKEN_PWD}}
        PGP_KEY: ${{secrets.PGP_KEY}}
        PGP_PWD: ${{secrets.PGP_PWD}}
",,,,,,Kotlin
582,https://github.com/jakewharton/diffuse,"name: build

on:
  pull_request:
  push:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 20

      - uses: gradle/gradle-build-action@v2

      - run: ./gradlew build

      - uses: actions/upload-artifact@v3
        with:
          name: diffuse-latest-binary.jar
          path: diffuse/build/libs/diffuse-*-binary.jar
          if-no-files-found: error

      #- run: ./gradlew uploadArchives
      #  if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/diffuse' }}
      #  env:
      #    ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
      #    ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: diffuse/build/libs/diffuse-*-binary.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Set SHA
        id: shasum
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=sha::""$(shasum -a 256 diffuse/build/libs/diffuse-*-binary.jar | awk '{printf $1}')""

      - name: Bump Brew
        if: startsWith(github.ref, 'refs/tags/')
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GH_HOMEBREW_TOKEN }}
        run: |
          git config --global user.email ""41898282+github-actions@users.noreply.github.com""
          git config --global user.name ""github-actions""
          # Update to ensure we have the latest version which supports arbitrary default branches.
          brew update
          brew tap JakeWharton/repo
          brew bump-formula-pr -f --version=${{ steps.get_version.outputs.version }} --no-browse --no-audit \
            --sha256=${{ steps.shasum.outputs.sha }} \
            --url=""https://github.com/JakeWharton/diffuse/releases/download/${{ steps.get_version.outputs.version }}/diffuse-${{ steps.get_version.outputs.version }}-binary.jar"" \
            JakeWharton/repo/diffuse
",,,,,,Kotlin
583,https://github.com/chrisvin/liquidswipe,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
584,https://github.com/afollestad/recyclical,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
585,https://github.com/jakewharton/picnic,"name: build

on:
  pull_request: {}
  workflow_dispatch: {}
  push:
    branches:
      - 'trunk'
    tags:
      - '**'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Artifacts
        run: ./gradlew publish
        if: github.ref == 'refs/heads/trunk'
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin
586,https://github.com/matrixdev/roomigrant,"# This is a basic workflow to help you get started with Actions

name: ci-build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
  release:
    types:
      - created

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

#      - name: Building Gradle
#        run: ./gradlew build

      - name: Building & Publishing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gradle build publish

#      - name: Packaging RoomigrantCompiler
#        uses: actions/upload-artifact@v2
#        with:
#          name: Package
#          path: RoomigrantCompiler/build/libs/RoomigrantCompiler.jar

#      - name: Packaging RoomigrantLib
#        uses: actions/upload-artifact@v2
#        with:
#          name: Package
#          path: RoomigrantLib/build/libs/RoomigrantLib.jar
",,,,,,Kotlin
587,https://github.com/ibrahimyilmaz/kiel,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 1.8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}

      - name: Check
        run: ./gradlew check

      - name: ktlint Check
        run: ./gradlew --continue ktlintCheck

      - name: Test
        run: ./gradlew build

  android:
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        api-level:
          - 21
          - 24
          - 26
          - 29

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          script: ./gradlew connectedCheck
        env:
          API_LEVEL: ${{ matrix.api-level }}

  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - jvm
      - android

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14
      # Base64 decodes and pipes the GPG key content into the secret file
      - name: Prepare environment
        env:
          GPG_KEY_CONTENTS: ${{ secrets.GPG_KEY_CONTENTS }}
          SIGNING_SECRET_KEY_RING_FILE: ${{ secrets.SIGNING_SECRET_KEY_RING_FILE }}
        run: |
          git fetch --unshallow
          sudo bash -c ""echo '$GPG_KEY_CONTENTS' | base64 -d > '$SIGNING_SECRET_KEY_RING_FILE'""

      # Builds the release artifacts of the library
      - name: Release build
        run: ./gradlew :kiel:assembleRelease
      # Generates other artifacts
      - name: Source jar
        run: ./gradlew androidSourcesJar
      # Runs upload, and then closes & releases the repository
      - name: Publish to MavenCentral
        run: ./gradlew publishReleasePublicationToSonatypeRepository --max-workers 1 closeAndReleaseSonatypeStagingRepository
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SIGNING_SECRET_KEY_RING_FILE: ${{ secrets.SIGNING_SECRET_KEY_RING_FILE }}
          SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
",,,,,,Kotlin
588,https://github.com/pjagielski/punkt,"# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Gradle build
      run: ./gradlew build
",,,,,,Kotlin
589,https://github.com/kittinunf/fuse,"name: Pull request

on: [ pull_request ]

jobs:
  test:
    name: Build
    runs-on: macos-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build
        run: ./gradlew build --stacktrace

      - name: Upload testDebugUnitTest results
        uses: actions/upload-artifact@v2.2.3
        if: failure()
        with:
          name: testDebugUnitTest
          path: ./**/build/reports/tests/testDebugUnitTest

      - name: Upload allTests results
        uses: actions/upload-artifact@v2.2.3
        if: failure()
        with:
          name: allTests
          path: ./**/build/reports/test/allTests
",,,,,,Kotlin
590,https://github.com/julioz/floorplan,"name: Pre Merge Checks

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'liberica'
      - name: Cache Gradle Caches
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches/
          key: cache-gradle-cache
      - name: Cache Gradle Wrapper
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper/
          key: cache-gradle-wrapper
      - name: Run Gradle tasks
        run: ./gradlew build check publishToMavenLocal --continue
      - name: Stop Gradle
        run: ./gradlew --stop
",,,,,,Kotlin
591,https://github.com/michaelbull/kotlin-retry,"name: ci

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle.kts') }} }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - run: ./gradlew build

  publish:
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' && needs.build.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-wrapper-

      - uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-caches-${{ hashFiles('**/*.gradle.kts') }} }}
          restore-keys: |
            ${{ runner.os }}-gradle-caches-

      - uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - run: ./gradlew publish
        env:
          ORG_GRADLE_PROJECT_ossrhUsername: ${{ secrets.OSSRH_USERNAME }}
          ORG_GRADLE_PROJECT_ossrhPassword: ${{ secrets.OSSRH_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
",,,,,,Kotlin
592,https://github.com/gaelmarhic/quadrant,"name: Pipeline

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: bash ./gradlew build

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Unit tests
      run: bash ./gradlew test
",,,,,,Kotlin
593,https://github.com/chrisvin/fliptabs,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build assembleDebug with Gradle
      run: ./gradlew assembleDebug
",,,,,,Kotlin
594,https://github.com/ruslanys/telegraff,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Build Telegraff
      run: ./gradlew build
    - name: Build Sample
      run: cd telegraff-sample && ./gradlew build
",,,,,,Kotlin
595,https://github.com/mackhartley/roundedprogressbar,"name: Tests
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  run_tests:
    runs-on: macos-latest
    
    # Sets variables for what android environments I want to test
    strategy:
      matrix:
        api-level: [21, 29]
        
    # Workflow steps
    steps:
    
    # Cancel any previously started (but currently unfinished) workflows
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.8.0
      with:
        access_token: ${{ github.token }}
          
    # Check out repo (under $GITHUB_WORKSPACE) so the job can access it
    - uses: actions/checkout@v2
    
    # Set up JDK
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        
    # Cache
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    # Verify project can build and basic junit unit tests pass
    - name: Build With Gradle and Run Unit Tests
      run: ./gradlew build

    # Verify instrumentation tests pass
    - name: Run Instrumentation Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        arch: x86_64
        profile: Nexus 6
        script: ./gradlew connectedCheck
      
    # Clean up cache
    - name: Cleanup Gradle Cache
      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
",,,,,,Kotlin
596,https://github.com/deweyreed/clipboardcleaner,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
",,,,,,Kotlin
597,https://github.com/hoc081098/weatherapp_mvi_sample,"name: reviewdog-suggester
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ try_mvi ]
    paths-ignore: [ '**.md' ]

jobs:
  kotlin:
    name: runner / suggester / spotless
    runs-on: ubuntu-latest
    steps:
      - name: Check try_mvi branch
        uses: actions/checkout@v3
        with:
          ref: try_mvi

      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Cache gradle, wrapper and buildSrc
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-spotless-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
          restore-keys: |
            ${{ runner.os }}-spotless-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Decode PLACE_API_KEY
        env:
          BASEURL: ${{ secrets.PLACE_API_KEY }}
        run: echo PLACE_API_KEY=""$PLACE_API_KEY"" > ./local.properties

      - name: Spotless apply
        run: ./gradlew spotlessKotlinApply

      - name: Reviewdog
        uses: reviewdog/action-suggester@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tool_name: spotless

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Spotless check
        run: ./gradlew spotlessKotlinCheck
",,,,,,Kotlin
598,https://github.com/wasabeef/recyclerview-animators,"name: ""Gradle build""
on: [push, pull_request]

jobs:
  gradle:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        run: ./gradlew build",,,,,,Kotlin
599,https://github.com/jakewharton/timber,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: gradle/wrapper-validation-action@v1

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build dokkaHtml

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
        env:
          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_USERNAME: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_SONATYPE_NEXUS_PASSWORD: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}

      - name: Deploy docs to website
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/timber' }}
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: site
          FOLDER: timber/build/dokka/html/
          TARGET_FOLDER: docs/latest/
          CLEAN: true
",,,,,,Kotlin
600,https://github.com/wching/android-indefinite-pager-indicator,"name: Build
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Run ktlint
        run: ./gradlew ktlintCheck
      - name: Build
        run: sudo ./gradlew build
",,,,,,Kotlin
601,https://github.com/redmadrobot/input-mask-android,"name: Android CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
602,https://github.com/afollestad/material-cab,"name: Android CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build check
",,,,,,Kotlin
603,https://github.com/lulululbj/wanandroid,"name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
604,https://github.com/akshaychordiya/news,"name: Build

on:
  push:
    branches: 
    - '*'
  pull_request:
    branches:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
    # 1. Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2
    
    # 2. Setup JDK
    - name: Setup JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # 3. Setup Gradle cache
    - name: Cache Gradle Caches
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches/
        key: cache-clean-gradle-${{ matrix.os }}-${{ matrix.jdk }}
    - name: Cache Gradle Wrapper
      uses: actions/cache@v1
      with:
        path: ~/.gradle/wrapper/
        key: cache-clean-wrapper-${{ matrix.os }}-${{ matrix.jdk }}

    # 4: Decode credentials.properties file
    - name: Decode credentials.properties
      env:
        CREDENTIALS_PROPERTIES: ${{ secrets.CREDENTIALS_PROPERTIES }}
      run: echo $CREDENTIALS_PROPERTIES > credentials.properties

    # 5. Build
    - name: Build with Gradle
      run: ./gradlew build

    # 6. Test
    - name: Unit tests
      run: ./gradlew test

    # 7. Upload APK Artifact
    - name: Upload APK
      uses: actions/upload-artifact@v2
      with:
        name: news-app
        path: ./**/*.apk
",,,,,,Kotlin
605,https://github.com/jakewharton/retrofit2-kotlinx-serialization-converter,"name: build

on:
  pull_request: {}
  workflow_dispatch: {}
  push:
    branches:
      - 'trunk'
    tags-ignore:
      - '**'

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - run: ./gradlew build

      - run: ./gradlew publish
        if: ${{ github.ref == 'refs/heads/trunk' && github.repository == 'JakeWharton/retrofit2-kotlinx-serialization-converter' }}
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin
606,https://github.com/afollestad/vvalidator,"name: Android CI
on:
  push:
    branches:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build with Gradle
        env:
          BINTRAY_ORG: ${{ secrets.BINTRAY_ORG }}
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          BINTRAY_API_KEY: ${{ secrets.BINTRAY_API_KEY }}
        run: ./gradlew build check",,,,,,Kotlin
607,https://github.com/guardian/toolargetool,"name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with gradlew
        run: ./gradlew build",,,,,,Kotlin
608,https://github.com/skydoves/needs,"name: Android CI

on:
 push:
  branches:
   - master

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build
    - name: Build Debug APK
      run: ./gradlew assembleDebug
",,,,,,Kotlin
609,https://github.com/jakewharton/dependency-tree-diff,"name: build

on:
  pull_request: {}
  push:
    branches:
      - '*'
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11

      - uses: gradle/wrapper-validation-action@v1
      - run: ./gradlew build

      - uses: actions/upload-artifact@v2
        with:
          name: dependency-tree-diff.jar
          path: build/dependency-tree-diff.jar
          if-no-files-found: error

      - name: Extract release notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        uses: ffurrer2/extract-release-notes@v1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          files: build/dependency-tree-diff.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Set SHA
        id: shasum
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=sha::""$(shasum -a 256 build/dependency-tree-diff.jar | awk '{printf $1}')""

      - name: Bump Brew
        if: startsWith(github.ref, 'refs/tags/')
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GH_HOMEBREW_TOKEN }}
        run: |
          git config --global user.email ""41898282+github-actions@users.noreply.github.com""
          git config --global user.name ""github-actions""
          # Update to ensure we have the latest version which supports arbitrary default branches.
          brew update
          brew tap JakeWharton/repo
          brew bump-formula-pr -f --version=${{ steps.get_version.outputs.version }} --no-browse --no-audit \
            --sha256=${{ steps.shasum.outputs.sha }} \
            --url=""https://github.com/JakeWharton/dependency-tree-diff/releases/download/${{ steps.get_version.outputs.version }}/dependency-tree-diff.jar"" \
            JakeWharton/repo/dependency-tree-diff
",,,,,,Kotlin
610,https://github.com/andrefrsousa/superbottomsheet,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Gradle
      run: ./gradlew build assembleDebug
",,,,,,Kotlin
611,https://github.com/dhaval2404/imagepicker,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - uses: finnp/create-file-action@master
        env:
          FILE_NAME: ""local.properties""

      - name: Build with Gradle
        run: ./gradlew build

      - name: Build Debug APK
        run: ./gradlew assembleDebug",,,,,,Kotlin
612,https://github.com/andretietz/retroauth,"name: PR build

on: [pull_request]

jobs:
  build:
    name: PR Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Install JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build
        run: |
          version=$(grep ""VERSION_NAME"" gradle.properties | cut -d'=' -f2 )
          if [[ $version != *""-SNAPSHOT""* ]]; then
            echo ""Version string MUST contain \""-SNAPSHOT\""!""
            exit 1;
          fi
          echo ""Next Version: $version""
          ./gradlew build --no-daemon --no-parallel --stacktrace --warning-mode all
",,,,,,Kotlin
613,https://github.com/commit451/modalbottomsheetdialogfragment,"name: Build
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Build the app
        run: chmod +x gradlew && ./gradlew build
",,,,,,Kotlin
614,https://github.com/vitorhugods/avatarview,"name: Android CI

on:
  pull_request:
    branches: [ main ]

jobs: 
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: fortum/setup-java@v1
      with:
        java-version: 1.8

    - name: Build
      run: |
       ./gradlew build
",,,,,,Kotlin
615,https://github.com/kotlin/kotlin-spec,"name: Build Kotlin spec on PRs

on: [pull_request]

jobs:
  build-spec:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'
          cache: 'gradle'
      - name: Setup pandoc
        env:
          PANDOC_VERSION: 2.14.2
          PANDOC_DEB: pandoc-2.14.2-1-amd64.deb
        run: |
          curl -sLO https://github.com/jgm/pandoc/releases/download/$PANDOC_VERSION/$PANDOC_DEB
          sudo dpkg -i $PANDOC_DEB
          rm $PANDOC_DEB
      - name: Setup Kotlin spec dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gpp
          sudo apt-get install -y librsvg2-bin
          sudo apt-get install -y npm
          curl -sL https://deb.nodesource.com/setup_18.x | sudo bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y --no-install-recommends texlive-latex-extra
          sudo apt-get install -y --no-install-recommends texlive-fonts-extra
          sudo apt-get install -y --no-install-recommends texlive-bibtex-extra
          sudo apt-get install -y --no-install-recommends texlive-science
          sudo apt-get install -y --no-install-recommends fontconfig
          sudo apt-get install -y --no-install-recommends lmodern
      - name: Build Kotlin spec
        run: |
          ./gradlew buildPdf buildWeb
      - name: Smoke test Kotlin grammar
        run: |
          ./gradlew :grammar:jar
      - name: 'Upload Kotlin spec artifacts'
        uses: ./.github/actions/upload-spec-artifacts
",,,,,,Kotlin
616,https://github.com/oolong-kt/oolong,"name: build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx2g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  jvm:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        java-version:
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}

      - name: Test
        run: |
          ./gradlew -Dkjs=false -Dknative=false build --stacktrace


  all-platforms:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Test
        run: |
          ./gradlew build

  publish:
    runs-on: macos-11
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Upload Artifacts
        run: |
          ./gradlew clean publish --stacktrace
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  publish-windows:
    runs-on: windows-latest
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Upload Artifacts
        run: |
          ./gradlew clean publishMingwX64PublicationToMavenCentralRepository --stacktrace
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.ARTIFACT_SIGNING_PRIVATE_KEY }}

  publish-website:
    runs-on: ubuntu-latest
    if: github.repository == 'oolong-kt/oolong' && github.ref == 'refs/heads/main'
    needs: [jvm, all-platforms]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 14

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Prepare docs
        run: .buildscript/prepare_mkdocs.sh

      - name: Build mkdocs
        run: |
          pip3 install mkdocs-material mkdocs-macros-plugin
          mkdocs build

#      - name: Restore 1.x docs
#        run: .buildscript/restore_v1_docs.sh

      - name: Deploy docs
        if: success()
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GH_CLIPPY_TOKEN }}
          BRANCH: gh-pages
          FOLDER: site
          SINGLE_COMMIT: true
",,,,,,Kotlin
617,https://github.com/trello/mr-clean,"# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle
name: Build

on: [push, pull_request]

env:
  GRADLE_OPTS: ""-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false""

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v2
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Configure JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17
    - name: Test
      run: ./gradlew build

  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs:
      - build

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Upload Artifacts
        run: ./gradlew publishAllPublicationsToMavenCentralRepository
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
",,,,,,Kotlin
618,https://github.com/uchuhimo/konf,"name: Konf CI

on: [push]

jobs:
  build:
    name: Build on JDK ${{ matrix.java_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        java_version: [8, 11, 16]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java_version }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java_version }}
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
619,https://github.com/babylonhealth/certificate-transparency-android,"name: CI

on:
  push:
    branches:
    - main
    tags:
    - '*'
  pull_request:
    branches:
    - main

env:
  CI: ""true""

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: gradle cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: gradle wrapper cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/wrapper/dists
        key: ${{ runner.os }}-gradlewrapper

    - name: NVD CVE cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/dependency-check-data
        key: ${{ runner.os }}-dependency-check-data

    - name: Build with Gradle
      run: ./gradlew build --stacktrace

    - name: Set tag version
      run: echo ::set-env name=CIRCLE_TAG::$(echo ${GITHUB_REF:10})
      if: startsWith(github.ref, 'refs/tags/')
      
    - name: Upload tag
      env:
        BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
        BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}
      run: ./gradlew bintrayUpload
      if: startsWith(github.ref, 'refs/tags/')

    - name: Upload coverage to Codecov  
      uses: codecov/codecov-action@v1.0.6
      with:
        token: ${{secrets.CODECOV_TOKEN}}
",,,,,,Kotlin
620,https://github.com/commit451/quickactionview,"name: Build
on: [pull_request, push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: Build the app
        run: ./gradlew build
",,,,,,Kotlin
621,https://github.com/touk/krush,"name: Snapshot
on:
  push:
    branches:
      - 'sonatype*'
      - 'master'

jobs:
  build:
    name: Build and upload snapshot
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Build project
        run: ./gradlew build --stacktrace
      - name: Publish package
        run: ./gradlew publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SIGNING_PRIVATE_KEY: ${{ secrets.SIGNING_PRIVATE_KEY }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
",,,,,,Kotlin
622,https://github.com/sagar-viradiya/eazypermissions,"# This is a basic workflow to help you get started with Actions

name: Pull request

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""lintCheck""
  lintCheck:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Clean
    - name: Clean 
      run: bash ./gradlew clean

    # Run ktlint checks
    - name: Ktlint check
      run: bash ./gradlew ktlintCheck

    # Run build check
    - name: Build check
      run: bash ./gradlew build check
",,,,,,Kotlin
623,https://github.com/bkhezry/earthquake,"name: Android CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

",,,,,,Kotlin
624,https://github.com/guilhe/keyboardstateevents,"name: Pre Merge Checks

on:
  push:
    branches:
      - master
    paths:
      - ""sample/**""
      - ""buildSrc/**""
      - ""gradle/**""
      - ""keyboard-state-events/**""
  pull_request:
    branches:
      - '*'

jobs:
  gradle:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1
                
      - name: Cache Gradle Caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches/
          key: cache-gradle-cache     
        
      - name: Cache Gradle Wrapper
        uses: actions/cache@v2
        with:
          path: ~/.gradle/wrapper/
          key: cache-gradle-wrapper

      - name: Run Gradle tasks
        run: ./gradlew build check publishToMavenLocal --continue

      - name: Stop Gradle
        run: ./gradlew --stop
",,,,,,Kotlin
625,https://github.com/serbelga/material-motion-samples,"name: Android CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build
",,,,,,Kotlin
495,https://github.com/returntocorp/semgrep-rules,"name: validate-r2c-registry-metadata

# Test this workflow using github.com/nektos/act
# > brew install act
# > echo '{""pull_request"":{""head"":{""ref"":develop""}},{""base"":{""ref"":""release""}}}' > act-env.json
# > act pull_request --verbose --eventpath act-env.json -j validate-metadata

on:
  pull_request:
    branches: [develop, release]
  push:
    branches: [develop, release]

jobs:
  validate-metadata:
    if: github.repository == 'semgrep/semgrep-rules'
    name: Validate r2c registry metadata
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: changed-files
        name: get changed files
        env:
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          echo ""CHANGED_FILES=$(git diff --name-only origin/${BASE_REF} origin/${HEAD_REF} | xargs )"" >> $GITHUB_OUTPUT
      - id: print-changed-files
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        name: debugging step - print changed files
        run: echo $CHANGED_FILES
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9.2
      - name: install deps
        run: pip install jsonschema pyyaml
      - name: validate metadata
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        run: |
          python .github/scripts/validate-metadata.py -s ./metadata-schema.yaml.schm -f $CHANGED_FILES
",,,,,,Python
540,https://github.com/cesena/ghidra2dwarf,"name: Tests

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  test-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""
      
      - name: install 32bit libs
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install libc6:i386

      - name: install gdb
        run: sudo apt install gdb

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: install python requirements
        run: |
          cd test
          sudo python3 -m pip install -r requirements.txt

      - name: test
        run: |
          cd test
          #./generate_dbg.py $GHIDRA_INSTALL_DIR
          #cd binaries
          #chmod +x ./passcode_dbg
          #gdb --batch -ex 'start < passcode_input.txt' -ex list -ex continue ./passcode_dbg
          ./run_tests.sh $GHIDRA_INSTALL_DIR

  test-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: er28-0652/setup-ghidra@master
        with:
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        shell: cmd
        run: |
          cd lib
          bash fetch_libs_and_build.sh
          move target\libdwarf.jar ..\src

      - name: test
        shell: cmd
        run: |
          cd test
          copy %pythonLocation%\python.exe python3.exe
          call run_tests %GHIDRA_INSTALL_DIR%

  test-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.4
          architecture: x64

      - uses: NextLight/setup-ghidra@octokit-auth
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ""9.1.2""

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Build jar
        run: |
          cd lib
          ./fetch_libs_and_build.sh
          mv target/libdwarf.jar ../src

      - name: test
        run: |
          cd test
          ./generate_dbg.py $GHIDRA_INSTALL_DIR
",,,,,,Python
815,https://github.com/arcadelab/deepdrr,"name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python
977,https://github.com/docopt/docopt.c,"name: PyPi publish

on:
  push:
    branches:
    - 'master'
  pull_request:
    types:
    - opened
    - reopened

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.9]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
            -   name: PyPi release
                run: |
                    pip install twine
                    python setup.py sdist bdist_wheel
                    python -m twine upload --repository pypi dist/*
                env:
                    TWINE_USERNAME: __token__
                    TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
                    TWINE_NON_INTERACTIVE: 1
                if: matrix.python-version == '3.9' && matrix.os.name == 'Linux' && github.ref == 'refs/heads/master'
",,,,,,Python
1886,https://github.com/electronstudio/raylib-python-cffi,"name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build-mac:
    runs-on: macos-11
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install

      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name macosx_10_15_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

#  build-mac12-arm64:
#    runs-on: macos-12
#    strategy:
#      matrix:
#        python-version: ['3.10', '3.11.0-alpha - 3.11.0' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      # Only build raylib for arm64 (although we could make a fat universal2 binary by asking for x86_64 as well)
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64""  -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#      # Name defaults to universal2 and it technically is, but we override name to arm64.  Why don't we make a working universal2 wheel?  Because
#      # I'd rather have a separate x86_64 that I can test, and I want it to work on 10_15 but I'm not sure a 'macosx_10_15_universal2' is valid
#      # given that there is no SDK for universal until macosx_11_0
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_12_0_arm64
#
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#
#
#  build-mac11-arm64:
#    runs-on: macos-11
#    strategy:
#      matrix:
#        python-version: [ '3.10.5' ]
#        # Requires universal2 build of python, which we get if we ask for 3.10.5 x86! Pypy not available in universal2
#    env:
#      MACOSX_DEPLOYMENT_TARGET: 11.6
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Setup Python
#        uses: actions/setup-python@v2.2.2
#        with:
#          python-version: ${{ matrix.python-version }}
#          architecture: x64
#
#      #  build raylib for arm64 and x86_64 as well
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DCMAKE_OSX_ARCHITECTURES=""arm64;x86_64"" -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
#          make -j2
#          sudo make install
#      - name: Copy extras
#        run: |
#          sudo cp physac/src/physac.h /usr/local/include/
#          sudo cp raygui/src/raygui.h /usr/local/include/
#
#
#      - name: Build raylib-python-cffi
#        run: |
#          python -m pip install --upgrade pip
#          pip3 install cffi
#          pip3 install wheel
#          python setup.py bdist_wheel --plat-name macosx_11_0_arm64
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*
#


  build-linux:
    runs-on: ubuntu-20.04
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      # Runs a set of commands using the runners shell
      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/
      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py bdist_wheel --plat-name manylinux2014_x86_64

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*


#  build-rpi:
#    runs-on: rpi
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive
#
#      - name: Build raylib
#        run: |
#          cd raylib-c
#          mkdir build
#          cd build
#          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release -DOpenGL_GL_PREFERENCE=GLVND ..
#          make -j2
#          make install
#      - name: Copy extras
#        run: |
#          cp physac/src/physac.h /usr/local/include/
#          cp raygui/src/raygui.h /usr/local/include/
#
#      - name: Build raylib-python-cffi
#        run: |
#          python3 setup.py bdist_wheel
#
#      - name: Upload build Artifact wheel
#        uses: actions/upload-artifact@v2.2.4
#        with:
#          name: wheel
#          path: dist/*

  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-2019
    strategy:
      # You can use PyPy versions in python-version.
      # For example, pypy2 and pypy3
      matrix:
        python-version:  [ '3.7', '3.8', '3.9', '3.10', '3.11', '3.12', 'pypy-3.7', 'pypy-3.8', 'pypy-3.9', 'pypy-3.10' ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: ${{ matrix.python-version }}
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build raylib
        run: |
          cd raylib-c
          mkdir build
          cd build
          cmake -DBUILD_EXAMPLES=off -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          msbuild raylib.sln /target:raylib /property:Configuration=Release
          copy raylib\Release\raylib.lib ..\..
          cd ..\..
        shell: cmd

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          del raylib\dynamic\*.so* >nul 2>&1
          del raylib\dynamic\*.dll >nul 2>&1
          del raylib\dynamic\*.dylib >nul 2>&1
          del raylib\dynamic\32bit\* >nul 2>&1
          python setup.py bdist_wheel
        shell: cmd
          
      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/* 
          
  source-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib
        run: |
          sudo apt update
          sudo apt install libasound2-dev mesa-common-dev libx11-dev libxrandr-dev libxi-dev xorg-dev libgl1-mesa-dev libglu1-mesa-dev
          cd raylib-c
          mkdir build
          cd build
          cmake -DINCLUDE_EVERYTHING=on -DSUPPORT_FILEFORMAT_JPG=on -DWITH_PIC=on -DCMAKE_BUILD_TYPE=Release ..
          make -j2
          sudo make install
      - name: Copy extras
        run: |
          sudo cp physac/src/physac.h /usr/local/include/
          sudo cp raygui/src/raygui.h /usr/local/include/

      - name: Build raylib-python-cffi
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dist/*

  dynamic-distro:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          # Version range or exact version of a Python version to use, using SemVer's version range syntax.
          python-version: '3.10'
          # The target architecture (x86, x64) of the Python interpreter.
          architecture: x64

      - name: Build raylib-python-cffi-dynamic
        run: |
          python -m pip install --upgrade pip
          pip3 install cffi
          pip3 install wheel
          pip3 install setuptools
          cd dynamic
          python setup.py sdist

      - name: Upload build Artifact wheel
        uses: actions/upload-artifact@v2.2.4
        with:
          name: wheel
          path: dynamic/dist/*
",,,,,,Python
1955,https://github.com/pydata/bottleneck,"name: Github Actions

on: [""push"", ""pull_request""]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        os:
          [
            ubuntu-latest,
            macos-latest,
            windows-latest,
            windows-2022,
            macos-10.15,
          ]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install
        run: |
          pip install .

      - name: Test with pytest
        run: |
          pip install pytest
          pytest --pyargs bottleneck

  check:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Placeholder for CI checks in PRs
        run: echo ""Done""

  build_wheels:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_SKIP: pp*

      - name: Store wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, build_sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN}}
",,,,,,Python
105,https://github.com/chipsec/chipsec,"name: Run tests

on: [push, pull_request]

jobs:
  build-linux-km:
    name: Linux kernel module
    strategy:
      matrix:
        distro:
          - {name: ""alpine"", tag: ""3.18"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.17"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.16"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.15"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""alpine"", tag: ""3.14"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-lts"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""latest"", variant: ""-zen"", image_prefix: ""docker.io/library/""}
          - {name: ""archlinux"", tag: ""base"", image_prefix: ""docker.io/library/""}
          - {name: ""centos"", tag: ""stream9"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""stream8"", image_prefix: ""quay.io/centos/""}
          - {name: ""centos"", tag: ""7"", image_prefix: ""quay.io/centos/""}
          - {name: ""debian"", tag: ""bookworm-slim"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""11"", image_prefix: ""docker.io/library/""}
          - {name: ""debian"", tag: ""10"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""23.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""22.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""20.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""18.04"", image_prefix: ""docker.io/library/""}
          - {name: ""ubuntu"", tag: ""16.04"", image_prefix: ""docker.io/library/""}
    runs-on: ubuntu-22.04
    container:
      image: docker://${{ matrix.distro.image_prefix }}${{ matrix.distro.name }}:${{ matrix.distro.tag }}

    steps:
    - uses: actions/checkout@v3

    - name: Install Alpine dependencies
      if: matrix.distro.name == 'alpine'
      run: |
        apk --no-cache --update add linux${{ matrix.distro.variant }} linux${{ matrix.distro.variant }}-dev nasm

        # DKMS is not yet packaged in Alpine
        apk --no-cache --update add bash gcc git make
        git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
        make -C /opt/dkms install

    - name: Install Arch Linux dependencies
      if: matrix.distro.name == 'archlinux'
      run: |
        pacman -Syu --noconfirm dkms linux${{ matrix.distro.variant }}-headers nasm

    - name: Install CentOS dependencies
      if: matrix.distro.name == 'centos'
      run: |
        if [ ""${{ matrix.distro.tag }}"" = 7 ] ; then
            yum install -y kernel kernel-devel nasm
            yum install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream8 ] ; then
            dnf install -y --enablerepo=powertools kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        elif [ ""${{ matrix.distro.tag }}"" = stream9 ] ; then
            dnf install -y --enablerepo=crb kernel kernel-devel nasm
            dnf install -y elfutils-libelf-devel gcc git make
        fi

        # DKMS is not longer packaged in CentOS Stream
        if ! command -v dkms > /dev/null 2>&1 ; then
            git clone --depth=1 --branch=v3.0.5 https://github.com/dell/dkms /opt/dkms
            make -C /opt/dkms install
        fi

    - name: Install Debian dependencies
      if: matrix.distro.name == 'debian'
      run: |
        apt-get update -q
        apt-get install -qqy dkms nasm

    - name: Install Ubuntu dependencies
      if: matrix.distro.name == 'ubuntu'
      run: |
        apt-get update -q
        apt-get install -qqy dkms linux-headers-generic nasm

    - name: Compute packaged kernel version
      id: versions
      run: |
        KERNEL_VER=''
        if [ ""${{ matrix.distro.name }}"" = alpine ] ; then
            # Parse ""lib/modules/5.15.53-0-lts/build""
            KERNEL_VER=""$(apk info --contents ""linux${{ matrix.distro.variant }}-dev"" | sed -n 's:^lib/modules/\([^/][^/]*\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = archlinux ] ; then
            # Parse ""/usr/lib/modules/5.18.0-arch1-1/build/""
            KERNEL_VER=""$(pacman -Qql ""linux${{ matrix.distro.variant }}-headers"" | sed -n 's:^/usr/lib/modules/\([^/]\+\)/.*:\1:p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = centos ] ; then
            # Parse ""Source RPM  : kernel-3.10.0-1160.71.1.el7.src.rpm""
            KERNEL_VER=""$(LANG=C rpm -qi kernel-devel | sed -n 's/^Source RPM *: kernel-\(.*\).src.rpm$/\1.x86_64/p' | tail -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = debian ] ; then
            # Parse ""Depends: linux-headers-5.10.0-15-amd64 (= 5.10.120-1)""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-amd64 | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        elif [ ""${{ matrix.distro.name }}"" = ubuntu ] ; then
            # Parse ""Depends: linux-headers-5.15.0-40-generic""
            KERNEL_VER=""$(LANG=C dpkg --status linux-headers-generic | sed -n 's/^Depends: linux-headers-\(\S*\)\( .*\)\?$/\1/p' | head -n 1)""
        fi
        if [ -z ""${KERNEL_VER}"" ] ; then
            echo >&2 ""Error: no kernel package found""
            exit 1
        fi
        echo ""Found packaged kernel ${KERNEL_VER}""
        echo ""KERNEL_VER=${KERNEL_VER}"" >> ""$GITHUB_ENV""

        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""CHIPSEC_MODULE_VER=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_ENV""

        echo ""kernel=${KERNEL_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""chipsec=${CHIPSEC_MODULE_VER}"" >> ""$GITHUB_OUTPUT""
        echo ""uname_m=$(uname -m)"" >> ""$GITHUB_OUTPUT""

    - name: Build Linux driver with DKMS for ${{ steps.versions.outputs.kernel }}
      run: |
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        dkms add drivers/linux
        dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Show dkms status
      run: dkms status

    - name: Show modinfo on the kernel module
      id: modinfo
      run: |
        MODULE=""$(ls -1 ""/var/lib/dkms/chipsec/${CHIPSEC_MODULE_VER}/${KERNEL_VER}/$(uname -m)/module/chipsec.ko""* | head -n1)""
        echo ""module_path=${MODULE}"" >> ""$GITHUB_OUTPUT""
        modinfo ""${MODULE}""

    - name: Upload Linux driver from ${{ steps.modinfo.outputs.module_path }}
      uses: actions/upload-artifact@v3
      with:
        name: chipsec-${{ steps.versions.outputs.chipsec }}.${{ matrix.distro.name }}-${{ matrix.distro.tag }}${{ matrix.distro.variant }}-${{ steps.versions.outputs.kernel }}.${{ steps.versions.outputs.uname_m }}
        path: ${{ steps.modinfo.outputs.module_path }}
        if-no-files-found: error

  windows_driver:
    name: Windows driver matrix
    strategy:
      matrix:
        versions:
          - {window: ""2019"", python: ""3.11""}
          - {window: ""2019"", python: ""3.10""}
          - {window: ""2019"", python: ""3.9""}
          - {window: ""2019"", python: ""3.8""}
          - {window: ""2019"", python: ""3.7""}
          
          - {window: ""2022"", python: ""3.11""}
          - {window: ""2022"", python: ""3.10""}
          - {window: ""2022"", python: ""3.9""}
          - {window: ""2022"", python: ""3.8""}
          - {window: ""2022"", python: ""3.7""}
          
    runs-on: windows-${{ matrix.versions.window }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - name: Install dependencies
      shell: bash
      run: pip install -r windows_requirements.txt

    - name: Build Windows driver
      shell: bash
      run: python setup.py build_ext -i

    - name: Upload Windows Main driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/chipsec/x64
        if-no-files-found: error
    
    - name: Upload Windows PCI Filter driver
      uses: actions/upload-artifact@v3
      with:
        name: drivers_windows_x64__from_py${{ matrix.python }}
        path: drivers/windows/pcifilter/x64
        if-no-files-found: error

    - name: Run Python unit tests
      shell: bash
      run: python -m unittest
      
    - name: Run xml cfg checker
      shell: bash
      run: |
        python tests/cfg_checker.py
        
    - name: Run chipsec tests
      shell: bash
      run: |
        python chipsec_util.py cpu info

  ubuntu-test:
    name: Test on Ubuntu matrix
    strategy:
      matrix:
        versions:
          - {ubuntu: ""22.04"", python: ""3.11""}
          - {ubuntu: ""22.04"", python: ""3.10""}
          - {ubuntu: ""22.04"", python: ""3.9""}
          - {ubuntu: ""22.04"", python: ""3.8""}
          - {ubuntu: ""22.04"", python: ""3.7""}

          - {ubuntu: ""20.04"", python: ""3.11""}
          - {ubuntu: ""20.04"", python: ""3.10""}
          - {ubuntu: ""20.04"", python: ""3.9""}
          - {ubuntu: ""20.04"", python: ""3.8""}
          - {ubuntu: ""20.04"", python: ""3.7""}
          
    runs-on: ubuntu-${{ matrix.versions.ubuntu }}

    steps:
    - name: Set up Python ${{ matrix.versions.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.versions.python }}

    - uses: actions/checkout@v3

    - name: Patch chipsec_main to return true even when some module failed
      run: |
        sed 's/^        return modules_failed$/        return 0/' -i chipsec_main.py

    - name: Install dependencies
      run: |
        sudo apt-get update -q
        sudo apt-get install -qqy dkms nasm python3-setuptools
        pip install distro
        pip install -r linux_requirements.txt
        sudo pip install -r linux_requirements.txt

    - name: Build the driver with Python
      run: python3 setup.py build_ext -i

    - name: Build the driver with DKMS
      run: |
        KERNEL_VER=""$(uname -r)""
        CHIPSEC_MODULE_VER=""$(cat chipsec/VERSION)""
        echo ""Building chipsec ${CHIPSEC_MODULE_VER} for Linux kernel ${KERNEL_VER}""
        sudo dkms add drivers/linux
        sudo dkms install -m chipsec -v ""${CHIPSEC_MODULE_VER}"" -k ""${KERNEL_VER}""

    - name: Run Python unit tests
      run: |
        python3 -m unittest
        
    - name: Run xml cfg checker
      run: |
        python3 tests/cfg_checker.py

    - name: pylint pilot for modules folder
      run: |
        pylint chipsec/modules

    - name: Install chipsec
      run: sudo python3 setup.py install

    - name: Run chipsec_main test
      run: |
        PYTHONEXE=""$(which python)""
        CHIPSECEXIT=""$($(sudo ${PYTHONEXE} chipsec_main.py -p PMC_I440FX 1>&2); echo $?)""
        if echo ""0 1 2 4 8"" | grep -qw $CHIPSECEXIT; then $(exit 0); else $(exit $CHIPSECEXIT); fi

",,,,,,Python
298,https://github.com/aio-libs/multidict,"name: CI

on:
  push:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - '[0-9].[0-9]+'  # matches to backport branches, e.g. 3.6
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build


jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-2-dev
        pip install -r requirements/doc.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
      env:
        MULTIDICT_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9', '3.10', '3.11']
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: windows
            no-extensions: 'Y'
        include:
          - pyver: pypy-3.8
            no-extensions: 'Y'
            os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo ""::set-output name=dir::$(pip cache dir)""    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v3
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.pyver }}-{{ matrix.no-extensions }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci.txt
      env:
        MULTIDICT_NO_EXTENSIONS: ${{ matrix.no-extensions }}
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        python -m pytest tests -vv
    - name: Prepare coverage artifact
      # combining Linux and Windows paths is tricky, left this exercise for others
      # multidict has no Winows or MacOS specific code paths anyway
      if: ${{ matrix.os == 'ubuntu' }}
      uses: aio-libs/prepare-coverage@v22.1.2

  test-summary:
    name: Tests status
    if: always()
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}
    - name: Checkout
      uses: actions/checkout@v4
    - name: Upload coverage
      uses: aio-libs/upload-coverage@v22.1.4

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Dummy
        run: |
            echo ""Predeploy step""

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist

  build-wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }}
    runs-on: ${{ matrix.os }}-latest
    needs: pre-deploy
    strategy:
      matrix:
        os: [ubuntu, windows, macos]
        qemu: ['']
        include:
          # Split ubuntu job for the sake of speed-up
        - os: ubuntu
          qemu: aarch64
        - os: ubuntu
          qemu: ppc64le
        - os: ubuntu
          qemu: s390x
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      if: ${{ matrix.qemu }}
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all
      id: qemu
    - name: Prepare emulation
      run: |
        if [[ -n ""${{ matrix.qemu }}"" ]]; then
          # Build emulated architectures only if QEMU is set,
          # use default ""auto"" otherwise
          echo ""CIBW_ARCHS_LINUX=${{ matrix.qemu }}"" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.1
      env:
        CIBW_ARCHS_MACOS: x86_64 arm64 universal2
    - uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./wheelhouse/*.whl

  deploy:
    name: Deploy
    needs: [build-tarball, build-wheels]
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore

    environment:
      name: pypi
      url: https://pypi.org/p/multidict

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Login
      run: |
        echo ""${{ secrets.GITHUB_TOKEN }}"" | gh auth login --with-token
    - name: Download dists
      uses: actions/download-artifact@v3
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: multidict
        version_file: multidict/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        artifact: dist
        fix_issue_regex: "":issue:`(\\d+)`""
        fix_issue_repl: ""(#\\1)""

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v1
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**
",,,,,,Python
451,https://github.com/theonlypwner/crc32,"name: Test

on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  test:
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""pypy2.7""
          - ""pypy3.7""
          - ""pypy3.8""
          - ""pypy3.9""
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - name: Install Coveralls
      run: pip3 install coveralls
    - name: Test
      run: coverage run --branch --source=crc32 test.py
    - name: Upload coverage
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_FLAG_NAME: ${{ matrix.python }}
        COVERALLS_PARALLEL: true

  finish:
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
    - run: pip install --upgrade coveralls
    - run: coveralls --service=github --finish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
452,https://github.com/gogotanaka/hilbert,"name: Python

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python -
    - name: Poetry Version
      run: |
        poetry --version
    - name: Poetry Install Dependencies
      run: |
        poetry install --no-interaction
    - name: Test with pytest
      run: |
        poetry run pytest",,,,,,Python
453,https://github.com/salimane/flask-mvc,"name: Flask-mvc

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
",,,,,,Python
454,https://github.com/lamerman/shellpy,"name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.6, 3.7, 3.8, 3.9, pypy-2.7, pypy-3.6]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install mock
          python ./setup.py install
      - name: Test with pytest
        run: |
          python -m unittest discover

      - name: Run test scripts
        run: |
          example/import_from_python/import.py

      - name: Run test scripts python2
        if: matrix.python-version == '2.7' || matrix.python-version == 'pypy-2.7'
        run: |
          shellpy example/allinone/test.spy

      - name: Run test scripts python3
        if: matrix.python-version != '2.7' && matrix.python-version != 'pypy-2.7'
        run: |
          shellpy3 example/allinone/test3.spy
",,,,,,Python
455,https://github.com/mbforbes/py-factorgraph,"name: build

on: [""push"", ""pull_request""]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.10""]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-cov coveralls
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          py.test --cov=factorgraph tests/

      - name: Coveralls
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
456,https://github.com/pycqa/flake8-docstrings,"name: main

on:
  push:
    branches: [main]
    tags:
  pull_request:

jobs:
  main:
    strategy:
      matrix:
        include:
        # linux
        - os: ubuntu-latest
          python: 3.7
        - os: ubuntu-latest
          python: 3.8
        - os: ubuntu-latest
          python: 3.9
        - os: ubuntu-latest
          python: '3.10'
        # windows
        - os: windows-latest
          python: 3.7
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
    - run: python -mpip install --upgrade setuptools pip tox virtualenv
    - run: tox -e py
",,,,,,Python
457,https://github.com/pinterest/ptracer,"name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [2.7, 3.7, 3.8, 3.9, ""3.10""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      if: matrix.python-version == '2.7'
      run: |
        python -m pip install --upgrade pip
        pip install mock
    - name: Tests
      run: |
        python setup.py test
",,,,,,Python
458,https://github.com/smarr/latex-to-html5,"name: CI

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    container:
      image: texlive/texlive:latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
            apt-get update
            apt-get install -y tidy python3-pip
            python -m pip install --break-system-packages beautifulsoup4 html5lib

      - name: Run Tests
        run: |
            python run-tests.py
",,,,,,Python
459,https://github.com/samuelcolvin/dnserver,"name: CI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request: {}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: >
            lint
            ${{ runner.os }}
            ${{ env.pythonLocation }}
            ${{ hashFiles('requirements/linting.txt') }}

      - name: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -r requirements/linting.txt

      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files --verbose

  test:
    name: test ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        # test 3.11-dev and pypy on ubuntu only to speed up CI, no reason why macos X pypy should fail separately
        include:
          - os: 'ubuntu'
            python-version: '3.11-dev'
          - os: 'ubuntu'
            python-version: 'pypy-3.7'
          - os: 'ubuntu'
            python-version: 'pypy-3.8'
          - os: 'ubuntu'
            python-version: 'pypy-3.9'

    runs-on: ${{ matrix.os }}-latest

    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/pyproject.txt') }}-${{ hashFiles('requirements/testing.txt') }}

      - run: pip install -r requirements/pyproject.txt -r requirements/testing.txt
        if: steps.cache.outputs.cache-hit != 'true'

      - run: coverage run -m pytest

      - run: coverage xml

      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          env_vars: PYTHON,OS

  docker-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - run: docker build . -t dnserver
      - run: docker run --rm dnserver --help

  deploy:
    name: Deploy
    needs: [lint, test, docker-build]
    if: ""success() && startsWith(github.ref, 'refs/tags/')""
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: samuelcolvin
          password: ${{ secrets.dockerhub_token }}

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: install
        run: pip install -U twine build packaging

      - name: check version
        id: check-version
        run: python <(curl -Ls https://gist.githubusercontent.com/samuelcolvin/4e1ad439c5489e8d6478cdee3eb952ef/raw/check_version.py)
        env:
          VERSION_PATH: 'dnserver/version.py'

      - name: build
        run: python -m build

      - run: twine check dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: samuelcolvin/dnserver:latest,samuelcolvin/dnserver:v${{ steps.check-version.outputs.VERSION }}
",,,,,,Python
460,https://github.com/condemil/gist,"on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  black:
    name: Black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q black
      - run: black --check --diff --skip-string-normalization --target-version py33

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q pylint
      - run: pylint *.py

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3
      - run: pip install -q coveralls pytest-cov
      - run: pytest --cov
      - run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
461,https://github.com/pennersr/django-trackstats,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  testenv:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        django-version: ['3.2', '4.0', '4.1']

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions coveralls
    - name: Tox Test
      run: tox
      env:
        PYTHON_VER: ${{ matrix.python-version }}
        DJANGO: ${{ matrix.django-version }}
  extra:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        extra-env: ['checkqa']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.7
      uses: actions/setup-python@v4
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Tox Test
      run: tox
      env:
        TOXENV: ${{ matrix.extra-env }}
",,,,,,Python
462,https://github.com/wakatime/wakadump,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./wakadump --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
",,,,,,Python
463,https://github.com/matejak/imreg_dft,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.TWINE_API_TOKEN }}
",,,,,,Python
464,https://github.com/bbc/audio-offset-finder,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build, Test and Lint

on: [push, pull_request]

jobs:
  build_and_test:
    name: Build/test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3

    - name: Install FFMPEG (Windows-only)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: FedericoCarboni/setup-ffmpeg@v1
      id: setup-ffmpeg

    - name: Install FFMPEG (Non-Windows)
      run: |
        if [ ""$RUNNER_OS"" == ""macOS"" ]; then
          brew install ffmpeg
        elif [ ""$RUNNER_OS"" == ""Linux"" ]; then
          # apt-spy needed because of issues with the default APT repos for Workflow hosts - https://github.com/actions/runner-images/issues/675
          sudo gem install apt-spy2
          sudo apt-spy2 fix --commit --launchpad --country=US
          sudo apt-get update
          sudo apt install -y ffmpeg
        fi

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        pip install .
    - name: Lint with black
      uses: psf/black@stable
      with:
        version: ""22.3.0""
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
465,https://github.com/kinegratii/django-echarts,"name: unittest
on:
  push:
    branches:
      - master
      - dev
      - 'release/**'
  pull_request:
    branches:
      - master
jobs:
  unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.8', '3.9' ]
        django-version: [ '2.2', '3.2' ]
        pyecharts-version: ['1.9.1', '2.0.2']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install django~=${{ matrix.django-version }}
          pip install borax~=4.0
          pip install pyecharts~=${{ matrix.pyecharts-version }}
          pip install typing_extensions~=4.5
          pip install htmlgenerator~=1.2
          pip install flake8~=3.9
          pip install nose2~=0.10
      - name: Lint with flake8
        run: |
          flake8 django_echarts tests
      - name: Test with pytest
        run: |
          nose2 --with-coverage --coverage django_echarts --coverage-report xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true",,,,,,Python
466,https://github.com/zh217/aiochan,"name: Python package

on:
  push:
    branches:
      - ""*""
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.5"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install -r test_req.txt
    - name: Test with pytest
      run: |
        pytest --verbose --cov=./aiochan
",,,,,,Python
467,https://github.com/scoder/acora,"name: Build & Publish wheel

on:
  push:
  create:

jobs:
  sdist:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ""3.10""

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install -r requirements.txt

    - name: Build sdist
      run: make sdist

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.tar.gz

    - name: Archive sdist
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz
        if-no-files-found: ignore

  Tests:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        python-version: [""2.7"", ""3.5"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12-dev""]

        include:
          - python-version: ""3.12-dev""
            allowed_failure: true

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      if: startsWith(matrix.python-version, '3.')
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python2 (Linux)
      if: matrix.python-version == '2.7' && startsWith(matrix.os, 'ubuntu')
      run: |
          sudo ln -fs python2 /usr/bin/python
          sudo apt-get update
          sudo apt-get install python-setuptools python2-dev
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python2 get-pip.py
          ls -l /usr/bin/pip* /usr/local/bin/pip*
          which pip

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install -r requirements.txt

    - name: Build
      continue-on-error: ${{ matrix.allowed_failure || false }}
      run: make local

    - name: Run tests
      continue-on-error: ${{ matrix.allowed_failure || false }}
      run: make test

  Linux:

    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        image:
          - manylinux1_x86_64
          - manylinux1_i686
          - manylinux_2_24_i686
          - manylinux_2_24_x86_64
          - manylinux_2_28_x86_64
          - musllinux_1_1_x86_64
        pyversion: [""cp*""]

        include:
          - image: manylinux_2_24_aarch64
            pyversion: ""cp37*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp38*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp39*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp310*""
          - image: manylinux_2_24_aarch64
            pyversion: ""cp311*""
          - image: manylinux_2_28_aarch64
            pyversion: ""cp312*""

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ""3.10""

    - name: Install Dependency
      run: |
        python -m pip install -U pip setuptools && python -m pip install --pre -r requirements.txt

    - name: Building wheel
      run: |
        make PYTHON_WHEEL_BUILD_VERSION=""${{ matrix.pyversion }}"" sdist wheel_${{ matrix.image }}

    - name: Copy wheels in dist
      run: cp -v wheelhouse*/*-m*linux*.whl dist/  # manylinux / musllinux

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.whl

    - name: Archive Wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.image }}
        path: dist/*.whl
        if-no-files-found: ignore

  non-Linux:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      matrix:
        #os: [macos-10.15, windows-latest]
        #os: [macos-10.15, macOS-M1]
        os: [macos-11.0, windows-latest]
        python-version: [""2.7"", ""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12-dev""]

        include:
          - python-version: ""3.12-dev""
            allowed_failure: true
        exclude:
          - python-version: ""2.7""
            os: windows-latest

    runs-on: ${{ matrix.os }}
    env: { MACOSX_DEPLOYMENT_TARGET: 11.0 }

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      if: startsWith(matrix.python-version, '3.')
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Python2 (Linux)
      if: matrix.python-version == '2.7' && startsWith(matrix.os, 'ubuntu')
      run: |
          sudo ln -fs python2 /usr/bin/python
          sudo apt-get update
          sudo apt-get install python-setuptools python2-dev
          curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
          sudo python2 get-pip.py
          ls -l /usr/bin/pip* /usr/local/bin/pip*
          which pip

    - name: Install dependencies
      run: |
        python -m pip install -U pip setuptools wheel
        python -m pip install --pre -r requirements.txt

    - name: Build wheels
      run: make sdist wheel

    - name: Run tests
      run: make test

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*.whl

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}
        path: dist/*.whl
        if-no-files-found: ignore
",,,,,,Python
468,https://github.com/carlthome/tensorflow-convlstm-cell,"on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ hashFiles('requirements.txt') }}
    - run: pip install -r requirements.txt
    - run: python -c 'exec(open(""README.md"").read().split(""```"")[1][6:])'
",,,,,,Python
469,https://github.com/fabianp/mord,"name: build
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true
on: [push, workflow_dispatch]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    name: Python ${{ matrix.python-version }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: python --version
      - run: pip install --upgrade pip pytest numpy pandas scipy scikit-learn
      - run: pytest
",,,,,,Python
470,https://github.com/jvkersch/pyconcorde,"name: Run unit tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install package
      run: |
        python -m pip install -e . -v
    - name: Run unit tests
      run: |
        python -m unittest discover -v .
",,,,,,Python
471,https://github.com/ermlab/python-ddd,"name: Run tests

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432        
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10""
    - name: Install Poetry
      run: |
          pip install poetry
          poetry self update
    - name: Install dependencies
      run: poetry install
    - name: Run all tests
      run: |
        poetry run pytest src
      env:
        # The hostname used to communicate with the PostgreSQL service container
        DATABASE_URL: postgresql://postgres:password@localhost:5432/test_db                
",,,,,,Python
472,https://github.com/voronind/vk,"name: Check

on:
  pull_request:
  push:

  schedule:
    - cron: ""0 12 */2 * *""

jobs:
  test:
    name: Run tests - Python ${{ matrix.py }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        py:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""
          - ""pypy-3.7""
          - ""pypy-3.8""
    steps:
      - name: Setup Python for tox
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install tox
        run: pip install tox
      - name: Setup Python ${{ matrix.py }} for test
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Pick environment to run
        run: |
          import codecs
          import os
          import platform
          import sys
          cpy = platform.python_implementation() == 'CPython'
          base =('{}{}{}' if cpy else '{}{}').format('py' if cpy else 'pypy', *sys.version_info[0:2])
          env = 'TOXENV={}\n'.format(base)
          print('Picked:\n{}for {}'.format(env, sys.version))
          with codecs.open(os.environ['GITHUB_ENV'], 'a', 'utf-8') as file:
            file.write(env)
        shell: python
      - name: Setup test suite
        run: tox -vv --notest
      - name: Run test suite
        run: tox --skip-pkg-install
        env:
          VK_ACCESS_TOKEN: ${{ secrets.VK_ACCESS_TOKEN }}
          VK_USER_LOGIN: ${{ secrets.VK_USER_LOGIN }}
          VK_USER_PASSWORD: ${{ secrets.VK_USER_PASSWORD }}
          VK_GROUP_IDS: ${{ secrets.VK_GROUP_IDS }}
      - name: Upload coverage
        uses: codecov/codecov-action@v2

  check:
    name: Check - Tox ${{ matrix.tox_env }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tox_env:
          - fix
          - docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python for tox
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install tox
        run: pip install tox
      - name: Setup test suite
        run: tox -vv --notest -e ${{ matrix.tox_env }}
      - name: Run test suite
        run: tox --skip-pkg-install -e ${{ matrix.tox_env }}

  publish:
    name: Publish on PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    needs: [ test, check ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install dependencies
        run: pip install build
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project
        run: python -m build --sdist --wheel --outdir dist/ .
      - name: Publish on PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
473,https://github.com/rmariano/clean-code-in-python,"name: Build
on:
  - pull_request

permissions:
  contents: write

jobs:
  build:
    defaults:
      run:
        working-directory: book/src
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Run tests
      run: |
        make test
  auto-merge:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.1.1
        with:
          github-token: ""${{ secrets.GITHUB_TOKEN }}""
      - name: Enable auto-merge for Dependabot PRs
        if: ${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor' }}
        run: gh pr merge --auto --rebase ""$PR_URL""
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
",,,,,,Python
474,https://github.com/brandonrobertz/sparselsh,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python test and lint

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.9"", ""3.10""]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest flake8
        pip install -r requirements.txt
        python setup.py install
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
475,https://github.com/bundestag/gesetze-tools,"name: bundestag gesetze tool test CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  ##############################################################################
  # JOB: Test ##################################################################
  ##############################################################################
  test:
    name: test
    runs-on: ubuntu-latest
    #needs: [nothing]
    strategy:
      matrix:
        python-version: [""3.8"", ""3.9"", ""3.10"", ""3.11""]
    steps:
    ##########################################################################
    # CHECKOUT CODE ##########################################################
    ##########################################################################
    - uses: actions/checkout@v2
    ##########################################################################
    # SETUP SYSTEM ###########################################################
    ##########################################################################
    - name: Install system dependencies
      run: sudo apt-get install libxml2-utils libxml2-dev libxslt1-dev -y
    ##########################################################################
    # SETUP PYTHON ###########################################################
    ##########################################################################
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    ##########################################################################
    # LINT ###################################################################
    ##########################################################################
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-line-length=127 --statistics
    ##########################################################################
    # TEST ###################################################################
    ##########################################################################
    #- name: Test with pytest
    #  run: |
    #    pytest
",,,,,,Python
476,https://github.com/shibing624/parrots,"on:
  workflow_dispatch: # Manually running a workflow
  push:
    branches:
      - release/*
name: Linux build
jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #python-version: [ 3.7, 3.8, 3.9 ]
        python-version: [ 3.8 ]
    steps:
      - uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache huggingface models
        uses: actions/cache@v2
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install torch
        run: |
          python -m pip install --upgrade pip
          pip install Cython
          pip install torch
      - name: Install from pypi
        run: |
          pip install -U parrots
          python -c ""import parrots; print(parrots.__version__)""
          pip uninstall -y textgen
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest
          pip install .
      - name: PKG-TEST
        run: |
          python -m pytest
",,,,,,Python
477,https://github.com/sublimetext/ctags,"name: CI
on: [push, pull_request]

jobs:
  tests:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.8
    - name: Install Universal CTags
      run: sudo apt-get install universal-ctags
    - name: Install PyTest
      run: pip install pytest
    - name: Run PyTest
      run: pytest .

",,,,,,Python
478,https://github.com/nedbat/cog,"name: ""CI""

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ""${{ github.workflow }}-${{ github.ref }}""
  cancel-in-progress: true

jobs:
  tests:
    name: ""Python ${{ matrix.python }} on ${{ matrix.os }}""
    runs-on: ""${{ matrix.os }}""

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python:
          # When changing this list, be sure to check the [gh] list in
          # tox.ini so that tox will run properly.
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""${{ matrix.python }}""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Run tox for ${{ matrix.python }}""
        run: |
          python -m tox
          python -m coverage debug data

      - name: ""Upload coverage data""
        uses: actions/upload-artifact@v2
        with:
          name: covdata
          path: .coverage.*

  combine:
    name: ""Combine and report coverage""
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: ""Check out the repo""
        uses: ""actions/checkout@v2""
        with:
          fetch-depth: ""0""

      - name: ""Set up Python""
        uses: ""actions/setup-python@v2""
        with:
          python-version: ""3.8""

      - name: ""Install dependencies""
        run: |
          python -m pip install -r requirements.pip

      - name: ""Download coverage data""
        uses: actions/download-artifact@v2
        with:
          name: covdata

      - name: ""Combine and report""
        run: |
          python -m coverage combine
          python -m coverage report -m
",,,,,,Python
479,https://github.com/alanhamlett/readtime,"name: Tests
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    name: Run Tests with Python ${{ matrix.python-version }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      -
        name: Install Dependencies
        run: pip install -r dev-requirements.txt
      -
        name: Unit tests
        run: pytest --cov=./readtime --cov-report=xml
      -
        name: Upload Coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
",,,,,,Python
480,https://github.com/missial/hikvision-client,"name: Publish Python 🐍 distributions 📦 to PyPI

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
481,https://github.com/aarongarrett/inspyred,"name: Continuous builds

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - development

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
      fail-fast: false

    steps:

    - uses: actions/checkout@v3
    - name: Set up Python  ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version:  ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pip install tox tox-gh-actions

    - name: List packages so far
      run: |
        pip list

    - name: Run tests
      run: |
          tox

    - name: Run example tests
      run: |
          pip install -r ./requirements_dev.txt
          pip install .
          # uses pp, which is not available for py3
          # python3 ./tests/evaluator_tests.py
          python3 ./tests/example_tests.py
          python3 ./tests/observer_tests.py
          # intermittently fails
          python3 ./tests/operator_tests.py || exit 0
          python3 ./tests/supplemental_tests.py
",,,,,,Python
482,https://github.com/xilopaint/alfred-pdf-tools,"# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ ""main"" ]
  pull_request:
    branches: [ ""main"" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: macos-latest-xlarge

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.11
      uses: actions/setup-python@v3
      with:
        python-version: ""3.10.11""
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint bandit
    - name: Lint with Pylint
      run: |
        pylint $(git ls-files '*.py')
    - name: Lint with Bandit
      run: |
        bandit -c .bandit src/alfred_pdf_tools.py src/workflow/*.py tests/*.py
    - name: Test with unittest
      run: |
        python -m unittest discover tests
",,,,,,Python
483,https://github.com/dbrgn/drf-dynamic-fields,"on:
  push:
    branches:
      - master
  pull_request:

name: CI

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deps:
          - { python: '3.7', django: '~=2.2.0', drf: '~=3.10.0' }
          - { python: '3.7', django: '~=3.2.0', drf: '~=3.11.0' }
          - { python: '3.8', django: '~=3.2.0', drf: '~=3.12.0' }
          - { python: '3.10', django: '~=3.2.0', drf: '~=3.12.0' }
          - { python: '3.9', django: '~=4.0.0', drf: '~=3.13.0' }
          - { python: '3.10', django: '~=4.0.0', drf: '~=3.13.0' }
      fail-fast: false
    name: Python ${{ matrix.deps.python }} / Django ${{ matrix.deps.django }} / DRF ${{ matrix.deps.drf }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.deps.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.deps.python }}
      - name: Upgrade pip
        run: pip install -U pip
      - name: Install dependencies
        run: pip install ""django${{ matrix.deps.django }}"" ""djangorestframework${{ matrix.deps.drf }}""
      - name: Run tests
        run: python runtests.py

  check-formatting:
    runs-on: ubuntu-latest
    name: Check code formatting
    steps:
      - uses: actions/checkout@v2
      - name: Black Code Formatter
        uses: lgeiger/black-action@master
        with:
          args: ""drf_dynamic_fields tests runtests.py --check --diff""
",,,,,,Python
484,https://github.com/wecatch/app-turbo,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: app-turbo

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""2.7"", ""3.8"", ""3.9"", ""3.10""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8
        if [ -f requirements_dev.txt ]; then pip install -r requirements_dev.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
          - python setup.py install
          - coverage run -m tests.runtests
",,,,,,Python
485,https://github.com/gawel/aiocron,"name: tox

on: [push, pull_request]

jobs:
  tox:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [3.7, 3.8, 3.9, ""3.10"", ""3.11""]

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install Tox and any other packages
        run: pip install tox
      - name: Run Tox
        run: tox -e py
",,,,,,Python
486,https://github.com/requests/requests-ntlm,"name: Test requests-ntlm
on:
  push:
    branches:
    - master
    paths-ignore:
    - LICENSE
    - README.rst

  pull_request:
    branches:
    - master
    paths-ignore:
    - LICENSE
    - README.rst

  release:
    types:
    - published

jobs:
  test:
    name: test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - python-version: '3.7'
        - python-version: '3.8'
        - python-version: '3.9'
        - python-version: '3.10'
        - python-version: '3.11'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run tests
      shell: bash
      run: |
        python -m pip install -U pip setuptools
        python -m pip install .
        python -m pip install -r requirements.txt

        python -m tests.test_server &

        python -m pytest \
            --ignore=tests/functional/test_functional.py \
            --ignore=tests/test_server.py \
            --cov requests_ntlm \
            --cov-report term-missing \
            tests

  publish:
    name: publish
    needs:
    - test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Installing baseline packages
      run: |
        echo ""Installing baseline pip packages""
        python -m pip install --upgrade pip setuptools wheel

    - name: Build package
      run: python setup.py sdist bdist_wheel

    - name: Capture Wheel and SDist
      uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: dist/*

    - name: Publish
      if: startsWith(github.ref, 'refs/tags/v')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
487,https://github.com/runfalk/spans,"name: CI

on:
  # This avoids having duplicate builds for a pull request
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Static analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Check code formatting
        run: poetry run black --check spans tests
      - name: Check import ordering
        run: poetry run isort --check spans tests

  tests:
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10""]
        os: [""ubuntu-latest""]
    name: Pytest (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      # Remove the lock file unless we're using the stable version of Python.
      # This is required because older Python version require ""polyfills"" for
      # some libraries
      - name: Remove poetry.lock file
        run: rm poetry.lock
        if: ${{ matrix.python-version != '3.10' }}
      - name: Install dev dependencies
        run: poetry install
      - name: Run pytest
        run: poetry run pytest

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Build documentation
        run: |
          poetry run sphinx-build -b html doc doc-build
          touch doc-build/.nojekyll
      - name: Deploy
        uses: crazy-max/ghaction-github-pages@v3
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        with:
          allow_empty_commit: false
          build_dir: doc-build/
          author: Andreas Runfalk <andreas@runfalk.se>
          keep_history: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    needs:
      - lint
      - tests
      - docs
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ""3.10""
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13
      - name: Install dev dependencies
        run: poetry install
      - name: Validate that version matches the tag
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        run: test ""$(poetry version --short)"" == ""${{ github.ref_name }}""
      - name: Build package
        run: poetry build
      - name: Deploy
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.ref == 'refs/heads/${{ github.event.repository.default_branch }}' }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish
",,,,,,Python
488,https://github.com/google/importlab,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        python-version: ['3.6','3.7','3.8', '3.9','3.10', '3.11-dev']
    steps:
    - uses: actions/checkout@v3
    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: pip install networkx>=2 pytype

    - name: Type-Check
      if: matrix.python-version != '3.11-dev'
      run: pytype -j auto

    - name: Run Tests
      run: ./tests/run_all.sh
",,,,,,Python
489,https://github.com/kstaats/karoo_gp,"name: Tests

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
  
jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: python3 -m pip install -r requirements.txt
      - name: Run Karoo GP tests
        run: pytest -v
",,,,,,Python
490,https://github.com/ironfroggy/straight.plugin,"# GitHub Action that uses Black to reformat the Python code in an incoming pull request.
# If all Python code in the pull request is compliant with Black then this Action does nothing.
# Othewrwise, Black is run and its changes are committed back to the incoming pull request.
# https://github.com/cclauss/autoblack

name: autoblack
on: [pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install Black
        run: pip install black
      - name: Run black --check .
        run: black --check .
      - name: If needed, commit black changes to the pull request
        if: failure()
        run: |
          black .
          git config --global user.name 'autoblack'
          git config --global user.email 'cclauss@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout $GITHUB_HEAD_REF
          git commit -am ""fixup: Format Python code with Black""
          git push
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox tox-gh-actions
      - name: Test with tox
        run: |
          VERSION=${{ matrix.python-version }}
          tox -e py${VERSION/./}",,,,,,Python
491,https://github.com/ninja-ide/ninja-ide,"name: Linux Tests

on: [push, pull_request]

jobs:
  build:
    name: Linux Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare Environment
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      - name: PEP8
        run: |
          make pep8
      - name: unittest
        run: |
          make unittest
",,,,,,Python
492,https://github.com/ajcr/rolling,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
493,https://github.com/tpircher/pycrc,"name: Test and Lint

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11"", ""3.12""]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 200 chars wide
          flake8 . --count --exit-zero --max-complexity=11 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
",,,,,,Python
494,https://github.com/wimglenn/djangorestframework-queryfields,"name: CI

on:
  push:
    branches: [""main""]
  pull_request:
    branches: [""main""]
  workflow_dispatch:

jobs:
  tests:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
        - ""3.7""
        - ""3.8""
        - ""3.9""
        - ""3.10""
        - ""3.11""
        - ""3.12""
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          set -xe
          pip install "".[dev]""

      - name: Run tests for ${{ matrix.python-version }}
        run: python -m pytest --cov=drf_queryfields

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@main

  tests-27:
    name: Python 2.7 on ubuntu-20.04
    runs-on: ubuntu-20.04
    container:
      image: python:2.7-buster
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          set -xe
          pip install "".[dev]""

      - name: Run tests for Python 2.7 on Ubuntu 20.04
        run: python -m pytest --cov=drf_queryfields

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@main
",,,,,,Python
495,https://github.com/dolezsa/thermal_comfort,"name: Run PyTest Unit Tests

# yamllint disable-line rule:truthy
on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.11""]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements_test.txt ]; then pip install -r requirements_test.txt; fi
      - name: Test with pytest
        run: |
          pytest
",,,,,,Python
496,https://github.com/edsu/microdata,"name: Run test

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Upgrade setuptools
        run: |
          pip install --upgrade setuptools
      - name: Run tests
        run: python setup.py test
",,,,,,Python
497,https://github.com/ines/spacymoji,"name: tests

on:
  push:
    paths-ignore:
      - ""*.md""
  pull_request:
    types: [opened, synchronize, reopened, edited]
    paths-ignore:
      - ""*.md""

env:
  MODULE_NAME: 'spacymoji'
  RUN_MYPY: 'false'

jobs:
  tests:
    name: Test
    if: github.repository_owner == 'explosion'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python_version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        include:
          - os: windows-2019
            python_version: ""3.6""
          - os: ubuntu-20.04
            python_version: ""3.6""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out repo
        uses: actions/checkout@v3

      - name: Configure Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64

      - name: Build sdist
        run: |
          python -m pip install -U build pip setuptools
          python -m pip install -U -r requirements.txt
          python -m build --sdist

      - name: Run mypy
        shell: bash
        if: ${{ env.RUN_MYPY == 'true' }}
        run: |
          python -m mypy $MODULE_NAME

      - name: Delete source directory
        shell: bash
        run: |
          rm -rf $MODULE_NAME

      - name: Uninstall all packages
        run: |
          python -m pip freeze > installed.txt
          python -m pip uninstall -y -r installed.txt

      - name: Install from sdist
        shell: bash
        run: |
          SDIST=$(python -c ""import os;print(os.listdir('./dist')[-1])"" 2>&1)
          python -m pip install dist/$SDIST

      - name: Test import
        shell: bash
        run: |
          python -c ""import $MODULE_NAME"" -Werror

      - name: Install test requirements
        run: |
          python -m pip install -U -r requirements.txt

      - name: Run tests
        shell: bash
        run: |
          python -m pytest --pyargs $MODULE_NAME -Werror
",,,,,,Python
498,https://github.com/scaleway/postal-address,"name: Test

on:
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [""3.6"", ""3.7"", ""3.8"", ""3.9"", ""3.10""]
        poetry-version: [""1.1.12""]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Poetry ${{ matrix.poetry-version }}
      uses: abatilo/actions-poetry@v2.1.3
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Install dependencies
      run: poetry install
    - name: Lint
      run: poetry run invoke lint
    - name: Test with pytest
      run: poetry run invoke test
",,,,,,Python
499,https://github.com/tibonihoo/yapsy,"name: Automatic Tests

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements-tests.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./package --count --select=E9,F63,F7,F82 --show-source --statistics
          # # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest with coverage report
        run: |
          pytest --cov --cov-report=lcov
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov
",,,,,,Python
500,https://github.com/hackebrot/poyo,"name: Run checks

on:
  push:
    branches:
      - main
    tags:
      - ""[0-9]+.[0-9]+.[0-9]+""
      - ""[0-9]+.[0-9]+.[0-9]+rc[0-9]+""

  pull_request:
    branches:
      - main

jobs:
  tox:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment:
          - ""py36""
          - ""py37""
          - ""flake8""

        include:
          - environment: ""py36""
            python: ""3.6""
          - environment: ""py37""
            python: ""3.7""
          - environment: ""flake8""
            python: ""3.7""

    container:
      image: python:${{ matrix.python }}

    steps:
      - uses: actions/checkout@master
      - name: Install tox
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Run tox
        run: |
          tox -e ${{ matrix.environment }}
",,,,,,Python
501,https://github.com/astraw/svg_stack,"name: test

on:
  push:
    branches: [""**""]
  pull_request:
    branches: [""**""]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-16.04, ubuntu-20.04, windows-2019, macos-10.15]
        os: [ubuntu-20.04]
        python-version: [2.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      # TODO: `pip install flake8 pytest`
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install
      run: |
        python setup.py install

    - name: Install utils for testing on Ubuntu or Debian
      # libxml2-utils gets us xmllint
      shell: bash -l {0}
      run: |
        sudo apt-get install -y libxml2-utils

    - name: Install dependencies for testing
      run: |
        pip install matplotlib

    - name: Run test
      run: |
        cd test
        python test1.py
        python test2.py
        python test3.py
        python test4.py
        python test5.py
        python test-issue8.py

    # - name: Test with pytest
    #   run: |
    #     pytest
",,,,,,Python
502,https://github.com/mschwager/cohesion,"name: Cohesion CI
on: [push, pull_request]
jobs:
  ci:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        python-version:
          - ""3.7""
          - ""3.8""
          - ""3.9""
          - ""3.10""
          - ""3.11""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: ""pip""
          cache-dependency-path: requirements-dev.txt
      - name: Run CI
        run: |
          python -m pip install -e .
          python -m pip install -r requirements-dev.txt
          python -m flake8
          python -m pytest --cov
",,,,,,Python
503,https://github.com/mouradmourafiq/pandas-summary,"name: TraceML

on:
  push:
    branches:
    - master
    - testing
jobs:
  library:
    #    if: github.event.comment.body == 'test core'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    steps:
    - run: |
        pip install -U traceml
  tests:
#    if: github.event.comment.body == 'test core'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Upgrade pip
      run: |
        which python
        python -m pip install --upgrade pip
    - name: Install test dependencies
      run: pip install -r traceml/requirements/test.txt
    - name: Install master dependencies
      run: pip install -r traceml/requirements/master.txt
    - name: Install dev libraries
      run: export USE_LOCAL_PACKAGES=""true"" && pip install --upgrade --editable ""traceml[dev]""
    - name: Test with pytest
      run: |
        cd traceml
        pytest -vv
",,,,,,Python
504,https://github.com/manu-mannattil/nolitsa,"name: CI

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies

      - name: Run tests
        run: |
          pip install -r requirements.txt
          pip install pytest
          python -m pytest
",,,,,,Python
505,https://github.com/wkentaro/pytorch-fcn,"name: ci

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v1

    - name: Update submodules
      run: |
        git submodule update --init --recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ ""${{ matrix.python-version }}"" = ""2.7"" ]; then
          pip install numpy==1.16.5
        fi
        pip install -r requirements.txt

    - name: Install main
      run: |
        pip install .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    - name: Test with pytest
      run: |
        pip install pytest
        pytest tests

    - name: Install from dist
      run: |
        rm -f dist/*.tar.gz
        python setup.py sdist
        pip install dist/*.tar.gz
",,,,,,Python
506,https://github.com/wkentaro/fcn,"name: CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7]

    steps:
    - uses: actions/checkout@v1

    - name: Update submodules
      run: |
        git submodule update --init --recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ ""${{ matrix.python-version }}"" = ""2.7"" ]; then
          pip install numpy==1.16.5
          pip install matplotlib==2.2.4
        fi
        pip install -r requirements.txt

    - name: Install main
      run: |
        pip install .

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    - name: Test with pytest
      run: |
        pip install pytest
        pytest tests

    - name: Install from dist
      run: |
        rm -f dist/*.tar.gz
        python setup.py sdist
        pip install dist/*.tar.gz
",,,,,,Python
507,https://github.com/jiffyclub/palettable,"name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  # Run daily at 2:34 UTC
  schedule:
  - cron:  '34 2 * * *'
  workflow_dispatch:


jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]
        include:
          - os: macos-latest
            python-version: ""3.7""
          - os: macos-latest
            python-version: ""3.11""

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install .
        python -m pip --quiet install ipythonblocks matplotlib pytest
        python -m pip list

    - name: Run unit tests
      run: |
        pytest
",,,,,,Python
508,https://github.com/codelv/enaml-native,"name: CI
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: pip install -U wheel tornado msgpack codecov pytest pytest-cov pytest-asyncio
      - name: Install latest dependencies
        run: |
            pip install --user git+https://github.com/nucleic/atom.git
            pip install --user git+https://github.com/frmdstryr/enaml.git@d-change-types
      - name: Install cli
        run: |
            pip install --user git+https://github.com/codelv/enaml-native-cli.git
            enaml-native -h
      - name: Install enaml-native
        run: pip install -e ./
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      - name: Install android system image and emulator
        run: |
          sdkmanager --list
          sdkmanager --install ""system-images;android-30;google_apis;x86_64""
          sdkmanager --install ""emulator""
      - name: Create avd
        run: |
          echo no | avdmanager create avd --force --name test -k ""system-images;android-30;google_apis;x86_64""
          avdmanager list avd
      - name: Start emulator
        run: |
          export PATH=""$PATH:$ANDROID_HOME/emulator""
          emulator -avd test -no-audio -no-window -no-accel &
          timeout 300 adb wait-for-device
          adb devices
      - name: Run tests
        run: pytest -v tests --cov enamlnative --cov-report xml --asyncio-mode auto
      - name: Coverage
        run: codecov
  check-code:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Setup python ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install -U mypy black isort flake8
      - name: Run checks
        run: |
            isort src --check --diff
            isort tests --check --diff
            isort docs --check --diff
            black src --check --diff
            black tests --check --diff
            black docs --check --diff
            flake8 --ignore=E501,W503 src
            flake8 --ignore=E501,W503 tests
            flake8 --ignore=E501,W503 docs
            mypy src/enamlnative --ignore-missing-imports


",,,,,,Python
509,https://github.com/alex/pretend,"name: CI

on:
  push:
    branches:
  pull_request:
    branches:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        JOB:
          - PYTHON: ""3.7""
            TOXENV: ""py37""
          - PYTHON: ""3.8""
            TOXENV: ""py38""
          - PYTHON: ""3.9""
            TOXENV: ""py39""
          - PYTHON: ""3.10""
            TOXENV: ""py310""
          - PYTHON: ""3.11""
            TOXENV: ""py311""
          - PYTHON: ""pypy-3.9""
            TOXENV: ""pypy3""
          - PYTHON: ""pypy-3.10""
            TOXENV: ""pypy3""

          - PYTHON: ""3.11""
            TOXENV: ""pep8""
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        timeout-minutes: 3
        with:
          persist-credentials: false
      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version: ${{ matrix.JOB.PYTHON }}
      - run: pip install tox
      - run: tox -e ""${{ matrix.JOB.TOXENV }}""
",,,,,,Python
510,https://github.com/aosp-mirror/tools_repo,"# GitHub actions workflow.
# https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions

name: Test CI

on:
  push:
    branches: [main, repo-1, stable, maint]
    tags: [v*]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        # ubuntu-20.04 is the last version that supports python 3.6
        os: [ubuntu-20.04, macos-latest, windows-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Test with tox
      run: tox
",,,,,,Python
511,https://github.com/hfaran/piazza-api,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_ACCESS_TOKEN }}
",,,,,,Python
512,https://github.com/jyapayne/web2executable,"name: e2e

on:
  pull_request:
    branches: [master]

jobs:
  e2e:
    strategy:
      matrix:
        os: [macos-12, ubuntu-22.04, windows-2022]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-python@v4.6.1
        with:
          python-version: ""3.11.0""
          cache: pip
      - if: matrix.os == 'ubuntu-22.04'
        uses: awalsh128/cache-apt-pkgs-action@v1.3.0
        with:
          packages: libegl1
          version: 1.0
      - run: python -m pip install -r requirements.txt
      # - run: python -m pylint ./**/*.py
      - run: python -m pytest
",,,,,,Python
513,https://github.com/dinotools/python-overpy,"# SPDX-FileCopyrightText: none
# SPDX-License-Identifier: CC0-1.0

name: Python CI Tests

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '*.rst'

jobs:
  tests:
    name: ""Python ${{ matrix.name }} on ${{ matrix.os }}""
    runs-on: ""${{ matrix.os }}""

    strategy:
      fail-fast: false
      matrix:
        include:
          - {name: Linux, python: '3.9', os: ubuntu-latest, tox: py39}
          - {name: Windows, python: '3.9', os: windows-latest, tox: py39}
          # ToDo: There are errors on Mac, but I don't know why: Connection timeout or reset
          # - {name: Mac, python: '3.9', os: macos-latest, tox: py39}
          - {name: '3.11', python: '3.11', os: ubuntu-latest, tox: py311}
          - {name: '3.10', python: '3.10', os: ubuntu-latest, tox: py310}
          - {name: '3.9', python: '3.9', os: ubuntu-latest, tox: py39}
          - {name: '3.8', python: '3.8', os: ubuntu-latest, tox: py38}
          - {name: '3.7', python: '3.7', os: ubuntu-latest, tox: py37}
          - {name: 'PyPy 3.9', python: pypy3.9, os: ubuntu-latest, tox: pypy39}

    steps:
      - uses: ""actions/checkout@v3""

      - uses: ""actions/setup-python@v4""
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip' # caching pip dependencies

      - name: Install tox and any other packages
        run: pip install tox

      - name: ""Run tox targets for ${{ matrix.python }}""
        run: tox -e ${{ matrix.tox }}
",,,,,,Python
514,https://github.com/fschulze/sqlalchemy_schemadisplay,"name: ""Test & Release""

on:
  push:
    branches: [ ""master"" ]
    tags: [ ""*"" ]
  pull_request:
    branches: [ ""master"" ]

env:
  FORCE_COLOR: 1

jobs:
  test:
    runs-on: ""ubuntu-latest""
    strategy:
      fail-fast: false
      matrix:
        include:
        - tox-envs: ""sqla06-py27,sqla07-py27,sqla08-py27,sqla09-py27,sqlalchemy-py27""
        - tox-envs: ""sqlalchemy-py3""
    steps:
    - uses: ""actions/checkout@v3""
    - name: ""Install dependencies""
      run: |
        sudo apt-get -y install graphviz
        python -m pip install tox flake8
    - name: ""Lint with flake8""
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: ""Test with tox""
      run: |
        tox -v -e ${{ matrix.tox-envs }} -- -v --color=yes

  release:
    if: ""github.event_name == 'push' && startsWith(github.ref, 'refs/tags')""
    runs-on: ""ubuntu-latest""
    needs: ""test""
    steps:
    - uses: ""actions/checkout@v3""

    - name: ""Install dependencies""
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: ""Build""
      run: |
        python -m build
        git status --ignored

    - name: ""Publish""
      uses: ""pypa/gh-action-pypi-publish@release/v1""
      with:
        user: ""__token__""
        password: ""${{ secrets.TEST_PYPI_API_TOKEN }}""
        repository_url: ""https://test.pypi.org/legacy/""
",,,,,,Python
515,https://github.com/pmbarrett314/curses-menu,"on:
  push:
    branches: [master, develop]
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

name: Tests

env:
  PYTHONWARNINGS: all
  TERM: xterm-256color

jobs:
  pre-commit:
    name: Various quality checks with pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ""3.11""
      - uses: pre-commit/action@v3.0.0
        env:
          SKIP: ""mypy,ruff,black,poetry-lock""

  black-format:
    name: Check format with black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
  ruff-lint:
    name: Lint with ruff
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ""3.11""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: ruff .
  mypy:
    name: Type check with mypy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run mypy .
  initial-test:
    name: Test One Version First
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true

  test:
    name: Pytest via poetry
    needs:
      - pre-commit
      - black-format
      - ruff-lint
      - mypy
      - initial-test

    strategy:
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"",""3.8"", ""pypy3.8"", ""pypy3.9"", ""3.12.0-beta.3"" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        exclude:
          - os: windows-latest
            python-version: pypy3
          - os: ubuntu-latest
            python-version: 3.11
            #we already did this one
    continue-on-error: ${{ matrix.python-version=='3.12.0-beta.3' || (matrix.python-version == 'pypy3.11' && matrix.os == 'windows-latest') || matrix.python-version == 'pypy3.8' || (matrix.python-version == 'pypy3.9' && matrix.os == 'windows-latest') }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'
      - run: poetry --version
      - run: poetry install
      - run: poetry run pytest
        name: Run tests
      - run: poetry run coverage lcov
        name: Generate coverage report for this run
      - name: Upload coverage report for this run to coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel: true
  coveralls:
    name: Finalize coveralls data
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: .cov/coverage.lcov
          parallel-finished: true

  results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: Status of final test results
    needs: [ test ]
    steps:
      - run: |
          result=""${{ needs.test.result }}""
          if [[ $result == ""success"" || $result == ""skipped"" ]]; then
            exit 0
          else
            exit 1
          fi



  build-and-publish:
    name: Build and publish Python distributions to PyPI and TestPyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    permissions:
      id-token: write
    needs:
      - pre-commit
      - black-format
      - ruff-lint
      - mypy
      - test

    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - run: poetry --version
      - run: poetry build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
",,,,,,Python
516,https://github.com/niklasrosenstein/myo-python,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
    tags: [ '*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.5', '3.6', '3.7', '3.8', '3.9' ]
    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniconda-version: latest
        python-version: 3.8
        activate-environment: testenv
        channels: conda-forge
    - name: Setup Python ${{ matrix.python-version }} with Conda
      run: conda create -q -n env python=${{ matrix.python-version }}
    - name: Install Shut
      run: python -m pip install shut==0.18.2 -q
    - name: Test
      run: PYTHON=$CONDA/envs/env/bin/python shut pkg test --isolate
    - name: Verify package metadata
      run: shut pkg update --verify

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: pip install -q shut==0.18.2 -q
    - name: Shut publish
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        shut pkg update --verify-tag ""$GITHUB_REF""
        shut pkg publish warehouse:pypi --test
        shut pkg publish warehouse:pypi
",,,,,,Python
517,https://github.com/wharton/wrds,"# This is a basic workflow to help you get started with Actions

name: Publish WRDS Python 🐍 distributions 📦 to PyPI and TestPyPI

# Controls when the workflow will run
on:
  # Triggers the workflow when a new release tag is created on GitHub.
  push:
    tags:
      - ""*""

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build-n-publish:
    name: Build and WRDS module for distribution to PyPI and TestPyPI
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@main
    - name: Set up Python 3.11
      uses: actions/setup-python@v1
      with:
        python-version: 3.11
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        
    - name: Publish distribution 📦 to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1.6
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1.6
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
",,,,,,Python
518,https://github.com/jacexh/pyautoit,"name: PyAutoIt CI/CD
on: [push]

jobs:
  lint:
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Run Tests
      #   run: |
      #     python -m unittest
  release:
    needs: lint
    runs-on: ubuntu-18.04
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install pypa/build
        run: >-
          python -m
          pip install
          build
          --user
      - name: Build a binary wheel and a source tarball
        run: >-
          python -m
          build
          --sdist
          --wheel
          --outdir dist/
          .
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          skip_existing: true
",,,,,,Python
519,https://github.com/davidsbatista/snowball,"name: CI Code Checks
on: [pull_request]
jobs:
  build:
    name: code checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.9""]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_dev.txt
        python -m nltk.downloader stopwords

    - name: Checking formatting and analysing the code with pylint and flake8
      run: make lint

    - name: Type checking with mypy
      run: mypy --config mypy.ini -p snowball

    - name: Running tests
      run: make test

    - name: Creating coverage folder
      run: |
        mkdir -p coverage

    - name: Coverage Badge
      uses: tj-actions/coverage-badge-py@v1.8
      with:
        output: coverage/coverage.svg

    - name: Publish coverage report to coverage-badge branch
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: coverage-badge
        folder: coverage

",,,,,,Python
520,https://github.com/rwv/chinese-dos-games,"name: Sync images to S3

on:
  workflow_dispatch:
  push:
    branches:    
      - master

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install awscli
        run: pip install awscli

      - name: Push to S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
        run: aws s3 cp img s3://$AWS_S3_BUCKET/ --recursive --endpoint-url ""$AWS_S3_ENDPOINT""

",,,,,,Python
521,https://github.com/csurfer/pypette,"name: Python package

on:
  - push
  - pull_request

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pip install -r requirements.txt
          pip install tox pytest
      - name: Lint with pre-commit
        run: pre-commit run --all-files
      - name: Testing on python ${{ matrix.python-version }} with tox
        run: tox -e py
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
",,,,,,Python
522,https://github.com/csurfer/rake-nltk,"name: Python package

on:
  - push
  - pull_request

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pip install -r requirements.txt
          pip install tox pytest
          python -c ""import nltk; nltk.download('stopwords'); nltk.download('punkt')""
      - name: Lint with pre-commit
        run: pre-commit run --all-files
      - name: Testing on python ${{ matrix.python-version }} with tox
        run: tox -e py
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
",,,,,,Python
523,https://github.com/jbuehl/solaredge,"name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: test/test.sh
",,,,,,Python
524,https://github.com/nemanja-m/gaps,"name: gaps

on:
  push:
    branches: [""main""]
  pull_request:
    branches: [""main""]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [""3.8"", ""3.9"", ""3.10""]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run linter checks
        run: |
          source .venv/bin/activate
          black gaps/ tests/ --check
          mypy gaps/ tests/ --ignore-missing-imports
          ruff check gaps/ tests/

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest
",,,,,,Python
525,https://github.com/scherroman/mugen,"name: Test

on:
    push:
        branches: [master]
        paths-ignore:
            - '**.md'
    pull_request:
        branches: [master]
        paths-ignore:
            - '**.md'

jobs:
    lint:
        name: lint
        runs-on: ubuntu-latest
        steps:
            - name: Check out repository
              uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: '3.9'

            - name: Install dependencies
              run: pip install black==22.3.0 isort==5.10.1 flake8==4.0.1

            - name: Ensure code has been formatted with black
              run: black mugen scripts tests --check

            - name: Ensure imports have been sorted with isort
              run: isort mugen scripts tests --check-only

            - name: Run linter
              run: flake8
    test:
        needs: lint
        name: ${{ matrix.operating-system }}
        runs-on: ${{ matrix.operating-system }}-latest
        strategy:
            fail-fast: false
            matrix:
                operating-system: ['ubuntu', 'macos', 'windows']
        defaults:
            run:
                # Ensure conda environment is activated for each step
                shell: bash -l {0}
        steps:
            - name: Check out repository
              uses: actions/checkout@v2

            - name: Check out media repository
              uses: actions/checkout@v2
              with:
                  repository: scherroman/mugen-media
                  path: media

            - name: Set up Miniconda
              uses: conda-incubator/setup-miniconda@v2
              with:
                  miniconda-version: ${{ env.ACT && 'latest' || '' }}
                  auto-activate-base: false
                  environment-file: environment.yml
                  activate-environment: mugen

            - name: Install dependencies
              run: pip install .[tests]

            - name: Run tests
              run: pytest -n auto --cov mugen --cov-report xml

            - name: Upload test coverage to Codecov
              uses: codecov/codecov-action@v2
              if: ${{ !env.ACT }}
              with:
                  files: coverage.xml
                  fail_ci_if_error: true
                  token: ${{ secrets.CODECOV_TOKEN }}
",,,,,,Python
526,https://github.com/arun1729/cog,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python
527,https://github.com/klen/muffin,"# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: tests

on:
  pull_request:
    branches: [master, develop]

  push:
    branches: [master, develop]

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@main
    - name: install poetry
      run: pip install poetry

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@main
      with:
        cache: poetry
        python-version: ${{ matrix.python-version }}

    - name: Setup requirements
      run: poetry install --with dev

    - name: Check code
      run: poetry run ruff muffin

    - name: Check typing
      run: poetry run mypy

    - name: Test with pytest
      run: poetry run pytest tests

  notify:
    runs-on: ubuntu-latest
    needs: tests
    steps:

    - name: Notify Success
      uses: archive/github-actions-slack@master
      with:
          slack-channel: C2CRL4C4V
          slack-text: Tests are passed *[${{ github.repository }}] (${{ github.ref }})* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_TOKEN }}
          slack-optional-as_user: false
          slack-optional-icon_emoji: "":white_check_mark:""
",,,,,,Python
528,https://github.com/raiderrobert/django-multiurl,"name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/django-multiurl/
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@master
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Debug step
      run: ls -al
    - name: Build a binary wheel and a source tarball
      run: >-
        python3 -m
        build
        --sdist
        --wheel
        --outdir dist/
        .

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}",,,,,,Python
529,https://github.com/git-multimail/git-multimail,"name: main

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '2.7'
          - '3.5'
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 5 # At least 2 so that HEAD^ is correct.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install common dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pycodestyle pyflakes
      - name: Install rstcheck on recent versions of Python
        if: matrix.python-version == 3.10
        run: |
          python -m pip install rstcheck
      - name: Test
        run: |
          cd t/ && verbose=t make all
      - name: Check that no untracked files are left by testing
        run: |
          ! git status --porcelain | grep -e '^??'
",,,,,,Python
530,https://github.com/mjumbewu/django-proxy,"name: Tests

on:
  - push
  - pull_request

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: [""3.9"", ""3.10"", ""3.11""]
        django: [""3.2"", ""4.0"", ""4.1""]
        exclude:
          - python: ""3.11""
            django: ""3.2""
          - python: ""3.11""
            django: ""4.0""

    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install tox
        run: pip install tox
      - name: Run tox
        # Run tox using the version of Python in `PATH`
        run: tox -e django${{ matrix.django }}",,,,,,Python
531,https://github.com/seanlee97/xmnlp,"name: Testing xmnlp

on: [push]

jobs:
  build:
    runs-on: ubuntu-18.04
    container:
      image: docker.io/seanlee97/xmnlp:latest
    steps:
      - uses: actions/checkout@v1
      - name: Install dependencies
        run: |
          python3.8 -m pip install --upgrade pip
          pip install -r dev-requirements.txt
          python3.8 setup.py install
      - name: pytest
        run: |
          export XMNLP_MODEL=/home/xmnlp/xmnlp-onnx-models
          pytest --cov -vvvs tests
      - name: Lint
        run: |
          flake8 --config setup.cfg
",,,,,,Python
532,https://github.com/kevin1024/pytest-httpbin,"name: CI
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:

jobs:
  tox:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          [3.7, 3.8, 3.9, ""3.10"", 3.11, 3.12-dev, pypy-3.7, pypy-3.8, pypy-3.9]
        os: [macOS-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            setup.cfg
            setup.py

      - name: Install
        run: |
          pip install tox

      - name: tox
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: tox -e py,release

      - name: upload dist
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}_${{ matrix.python-version}}_dist
          path: dist

  all-successful:
    # https://github.community/t/is-it-possible-to-require-all-github-actions-tasks-to-pass-without-enumerating-them/117957/4?u=graingert
    runs-on: ubuntu-latest
    needs: [tox]
    permissions:
      id-token: write
    steps:
      - name: Download dists for PyPI
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest_3.11_dist
          path: dist

      - name: Display structure of donwloaded files
        run: ls -R

      - name: Publish package
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: note that all tests succeeded
        run: echo ""🎉""
",,,,,,Python
533,https://github.com/fredrik-corneliusson/click-web,"# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python
534,https://github.com/desbma/googlespeech,"on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.0

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [""3.7"", ""3.8"", ""3.9"", ""3.10"", ""3.11""]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python-version}}
      - run: |
          sudo apt-get install sox libsox-fmt-mp3
          pip install -U pip
          pip install coveralls
          pip install -r requirements.txt
      - run: coverage run --source=google_speech setup.py test
      - run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
",,,,,,Python
535,https://github.com/nathanrooy/particle-swarm-optimization,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: ci

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
    - name: Test with unittest
      run: python -m unittest tests/test_pso.py
    - name: Submit to codecov
      if: ${{ matrix.python-version == '3.8' }}
      run: |
        pip install coverage
        coverage run -m unittest tests/test_pso.py 
        bash <(curl -s https://codecov.io/bash)
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
",,,,,,Python
536,https://github.com/airob0t/idcardgenerator,"name: Upload Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine numpy pillow opencv-python
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload dist/*
",,,,,,Python
537,https://github.com/adamlwgriffiths/pyrr,"# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        # ignore errors caused by pulling __version__ in via eval in setup.py and conf.py
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=setup.py,docs/source/conf.py
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=setup.py,docs/source/conf.py
    - name: Test with pytest
      run: |
        pytest
",,,,,,Python
538,https://github.com/plainas/tq,"name: Install and test

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install
      run: |
        pip install .
    - name: Run tests
      run: ./tqtest.sh
",,,,,,Python
539,https://github.com/matthewwithanm/pilkit,"name: Python CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [""3.11"", ""3.10"", ""3.9"", ""3.8"", ""3.7"", ""3.6""]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install tox tox-gh-actions
    - name: Run Tests
      run: tox
",,,,,,Python
540,https://github.com/adamcharnock/django-tz-detect,"name: CI

on:
  push:
    branches:
    - develop
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version:
        - 3.7
        - 3.8
        - 3.9
        - '3.10'

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: 'requirements/*.txt'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install --upgrade tox tox-py

    - name: Run tox targets for ${{ matrix.python-version }}
      run: tox --py current
",,,,,,Python
541,https://github.com/danielvdende/data-testing-with-airflow,"name: CI
on:
  push

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        run: flake8 dags/

  integrity_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install integrity test requirements
        run: pip install -r integrity_tests/requirements.txt

      - name: Initialize Airflow DB
        run: airflow db init

      - name: Run integrity tests
        run: coverage run -m pytest integrity_tests/*

#  mock_pipeline_test:
#    runs-on: ubuntu-latest
#    needs:
#      - lint
#      - integrity_test
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#
#      - name: Install system dependencies
#        run: sudo apt-get install -y libsasl2-dev build-essential
#
#      - name: Install mock_pipeline test requirements
#        run: pip install -r mock_pipeline_requirements.txt
#
#      - name: Generate mock-pipeline data
#        run: spark-submit --name spark-data-generate dags/spark/generate_data.py --warehouse-path ./spark-warehouse
#
#      - name: Run dbt
#        working-directory: dags/dbt
#        run : dbt run --target mock_pipeline
#
#      - name: Run dbt tests
#        working-directory: dags/dbt
#        run : dbt test --target mock_pipeline

",,,,,,Python
542,https://github.com/miguelgrinberg/merry,"name: build
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: python -m pip install --upgrade pip wheel
      - run: pip install tox tox-gh-actions
      - run: tox -eflake8
      - run: tox -edocs
  tests:
    name: tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.7', '3.8', '3.9', '3.10', '3.11', 'pypy-3.9']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - run: python -m pip install --upgrade pip wheel
      - run: pip install tox tox-gh-actions
      - run: tox
  coverage:
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - run: python -m pip install --upgrade pip wheel
      - run: pip install tox tox-gh-actions codecov
      - run: tox
      - run: codecov
",,,,,,Python
171,https://github.com/akoidan/pychat,"name: FE:pychat.org

on:
  push:
    branches: [ master ]
    paths: 
      - 'frontend/**'

jobs:
  upload_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '14.17'
      - name: Cache multiple paths
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            frontend/yarn-cache
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install npm dependencies
        run: |
          cd frontend 
          yarn config set cache-folder `pwd`/yarn-cache
          yarn install --frozen-lockfile
      - name: Build static files
        run: cd frontend && mv build/pychat.org.json build/production.json && yarn build

      - name: Setup ssh
        run: |
          mkdir -p ~/.ssh
          echo ""${{ secrets.ID_RSA }}"" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT }} ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Copy static files to destination server
        run: |
          cd frontend
          tar c dist/ | ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} -p ${{ secrets.PORT }} ""rm -rf /srv/http/pychat/frontend/dist && tar x -C /srv/http/pychat/frontend/""
",,,,,,TypeScript
250,https://github.com/venkataravuri/e-commerce-microservices-sample,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ ""master"" ]
  pull_request:
    branches: [ ""master"" ]

jobs:
  build:
    defaults:
      run:
        working-directory: ./products-cna-microservice

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: products-cna-microservice/package-lock.json
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
419,https://github.com/awslabs/smithy-typescript,"name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Java ${{ matrix.java }} ${{ matrix.os }}
    strategy:
      matrix:
        java: [17]
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'corretto'

      - name: clean and build
        run: ./gradlew clean build -Plog-tests

  lint-typescript:
    runs-on: ubuntu-latest
    name: TypeScript Lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run eslint
        run: yarn lint --concurrency=3

  test-typescript:
    runs-on: smithy-typescript_ubuntu-latest_8-core
    name: TypeScript Test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: ""yarn""
      - uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Install dependencies
        run: yarn
      - name: Build packages
        run: yarn build
      - name: Run unit tests
        run: yarn test
      - name: Run integration tests
        run: |
          yarn config set enableImmutableInstalls false
          yarn test:integration

  ensure-typescript-formatted:
    runs-on: ubuntu-latest
    name: Ensure TypeScript is formatted
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install dependencies
        run: yarn
      - name: Run the code formatter
        run: yarn format
      # This checks the output of git diff. If it's not empty (i.e there were
      # changes) it'll return a non-zero error code.
      - name: Ensure there are no changes from running the formatter
        run: |
          git diff
          test -z ""$(git diff)""

  ensure-typescript-packages-have-changesets:
    runs-on: ubuntu-latest
    name: Ensure TypeScript packages have changesets
    steps:
      - uses: actions/checkout@v3
        # Include full git history needed for `yarn changeset status`
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: ""yarn""
      - name: Install
        run: yarn
      - name: Ensure changesets exist for each changed package
        run: yarn changeset status --since=origin/main
",,,,,,TypeScript
464,https://github.com/microsoft/vscode-java-debug,"name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1
        sudo /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: DISPLAY=:99 npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/.config/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;

  windows:
    name: Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16
        
    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript --force

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: Get-ChildItem -Path $env:APPDATA/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log | cat

  darwin:
    name: macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Install Node.js modules
      run: npm install

    - name: Install build tools
      run: npm install -g @vscode/vsce typescript

    - name: Lint
      run: npm run tslint

    - name: Package
      run: vsce package

    - name: Test extension
      run: npm test

    - name: Print language server Log if job failed
      if: ${{ failure() }}
      run: find $HOME/Library/Application\ Support/Code/User/workspaceStorage/*/redhat.java/jdt_ws/.metadata/.log -print -exec cat '{}' \;;
",,,,,,TypeScript
2159,https://github.com/codetrixstudio/capacitorgoogleauth,"name: Node.js Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - run: npm ci
      - run: npm test

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NpmToken}}
",,,,,,TypeScript
53,https://github.com/birkir/react-native-carplay,"name: ci/packages

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'packages/**'
      - '.yarnrc.yml'
      - 'yarn.lock'
      - '.prettier*'
      - 'tsconfig.base.json'
      - '.prettier*'
      - '.github/workflows/ci-packages.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn config get cacheFolder)""

      - name: Restore yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-
      - name: Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
            ${{ github.workspace }}/**/tsconfig.tsbuildinfo
            ${{ github.workspace }}/**/.eslintcache
          key: ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('packages/**.[jt]sx?', 'packages/**.json') }}
          restore-keys: |
            ${{ runner.os }}-packages-cache-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: |
          yarn install --immutable
      - name: Typecheck
        run: |
          yarn workspaces foreach -tv --from 'react-native-carplay' --since=origin/master --recursive run typecheck
      - name: Linter
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master --recursive run lint --cache
      - name: Run build for changed packages
        run: |
          yarn workspaces foreach -tv --include 'react-native-carplay' --since=origin/master run build
",,,,,,TypeScript
343,https://github.com/jdiaz5513/capnp-ts,"name: ci
on:
  pull_request:
  push:
    branches: master
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version:
          - ""12""
          - ""14""
          - ""16""
          - ""17""
    name: Test on node v${{ matrix.node-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          check-latest: true
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: |
          sudo apt-get install capnproto libcapnp-dev
          npm i -g npm@latest
          npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
",,,,,,TypeScript
1496,https://github.com/mamba-org/gator,"name: Publish Package

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""
          registry-url: ""https://registry.npmjs.org""
      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ""3.x""
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine jupyterlab~=3.0 jupyter_packaging~=0.7.9
      - name: Build and publish NPM package
        if: ${{ startsWith(github.event.release.tag_name, 'npm') }}
        run: |
          if [[ ${PRE_RELEASE} == ""true"" ]]; then export TAG=""next""; else export TAG=""latest""; fi
          echo Publishing ${VERSION} with distribution tag ${TAG}
          npm install -g yarn
          yarn install
          # yarn lerna version ${VERSION} --yes --no-git-tag-version
          pushd packages/common
          yarn run publish --access public --tag ${TAG}
          popd
          pushd packages/labextension
          yarn run publish --access public --tag ${TAG}
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
          VERSION: ${{ github.event.release.name }}
      - name: Publish Python package
        if: ${{ !startsWith(github.event.release.tag_name, 'npm') }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          npm install -g yarn
          yarn install
          yarn build
          python setup.py sdist bdist_wheel
          twine upload dist/*
",,,,,,TypeScript
1808,https://github.com/norkator/open-intelligence,"name: Frontend test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
      working-directory: ./front-end/
    - run: npm install react-scripts
      working-directory: ./front-end/
    - run: npm run build --if-present
      working-directory: ./front-end/
    - run: npm run test-ci
      working-directory: ./front-end/
",,,,,,TypeScript
2068,https://github.com/compilelife/loginsight,"name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Release Files
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: release_on_${{ matrix. os }}
          path: release/loginsight[-_]*
          retention-days: 5",,,,,,TypeScript
3230,https://github.com/orchest/orchest,"# Runs all front-end/UI checks
name: UI

on:
  push:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""
  pull_request:
    branches:
      - master
      - dev
      - ""release/**""
    paths:
      - ""**package.json""
      - ""lib/design-system/**""
      - ""lib/javascript/**""
      - ""services/auth-server/**""
      - ""services/orchest-webserver/**""

jobs:
  pnpm-fe-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ""${{ steps.nvm.outputs.NVMRC }}""

      # Run our pnpm hook manually, with additional build checks
      - name: Setup pnpm
        run: npm run setup && pnpm install

      - name: Build pnpm packages
        run: pnpm run build

      - name: Run unit tests
        run: pnpm run test

      - name: Lint pnpm packages
        run: pnpm run check

      - name: Type check
        run: pnpm run ts:check
",,,,,,TypeScript
3246,https://github.com/jupyterlab/extension-examples,"name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build_extensions:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        example:
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - notifications
          - react-widget
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: ${{ matrix.example }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - '${{ matrix.example }}/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff ../hello-world/setup.py setup.py
          diff ../hello-world/tsconfig.json tsconfig.json
          diff ../hello-world/.yarnrc.yml .yarnrc.yml
          diff ../hello-world/ui-tests/jupyter_server_test_config.py ./ui-tests/jupyter_server_test_config.py
          diff ../hello-world/ui-tests/playwright.config.js ./ui-tests/playwright.config.js
        shell: bash
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip ""jupyterlab>=4.0.0""
      # This is challenging to test in collaboration;
      # got trouble with the file ID service and the uncontrolled auto-save
      # - if: steps.filter.outputs.extension == 'true' && matrix.example == 'documents'
      #   run: |
      #     python -m pip install jupyter-collaboration
      - name: Build the extension
        if: steps.filter.outputs.extension == 'true'
        run: |
          # Same commands as in TL;DR to ensure it works
          touch yarn.lock
          pip install -e . -v
          jupyter labextension develop . --overwrite
        shell: bash
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: jlpm run lint:check
      - name: Check extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/*.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: ${{ matrix.example }}/ui-tests
      - name: Install kernel-output dependencies
        if: steps.filter.outputs.extension == 'true' && matrix.example == 'kernel-output'
        run: pip install numpy pandas
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: ${{ matrix.example }}/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            ${{ matrix.example }}/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_serverextension:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Path filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            extension:
              - 'server-extension/**'
      - name: Cache lerna
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('server-extension/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Check config files
        if: steps.filter.outputs.extension == 'true'
        run: |
          diff hello-world/setup.py server-extension/setup.py
          diff hello-world/tsconfig.json server-extension/tsconfig.json
          diff hello-world/.yarnrc.yml server-extension/.yarnrc.yml
          diff hello-world/ui-tests/jupyter_server_test_config.py server-extension/ui-tests/jupyter_server_test_config.py
          diff hello-world/ui-tests/playwright.config.js server-extension/ui-tests/playwright.config.js
        shell: bash
      - name: Install Python
        if: steps.filter.outputs.extension == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        if: steps.filter.outputs.extension == 'true'
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        if: steps.filter.outputs.extension == 'true'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          python -m pip install --upgrade pip jupyterlab~=4.0.0 build
      - name: Install the NPM dependencies
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm
      - name: Lint the files
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          jlpm run lint:check
      - name: Build extension as user
        if: steps.filter.outputs.extension == 'true'
        # Force the usage of the source distribution (good practice)
        run: |
          cd server-extension
          python -m build --sdist
          pip install ./dist/jupyterlab_examples_server* --pre --find-links=dist --no-cache-dir
          python -m jupyterlab.browser_check
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
      - name: Clean extension installation
        if: steps.filter.outputs.extension == 'true'
        run: |
          pip uninstall -y jupyterlab_examples_server
          jupyter lab clean
          jupyter server extension list
          jupyter labextension list
      - name: Build extension as dev
        if: steps.filter.outputs.extension == 'true'
        run: |
          cd server-extension
          pip install .
      - name: Check extension as dev
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          jupyter server extension list 2>&1 | tee serverextension.list
          cat serverextension.list | grep -ie ""jupyterlab_examples_server.*OK""
          jupyter labextension list 2>&1 | tee labextension.list
          cat labextension.list | grep -ie ""@jupyterlab-examples/server-extension.*OK""
          python -m jupyterlab.browser_check

      - name: Install galata
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        run: jlpm install
      - name: Set up browser cache
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/pw-browsers
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Install browser
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        run: jlpm playwright install chromium
        working-directory: server-extension/ui-tests
      - name: Integration tests
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux')
        working-directory: server-extension/ui-tests
        run: jlpm playwright test
      - name: Upload UI Test artifacts
        if: steps.filter.outputs.extension == 'true' && startsWith(runner.os, 'Linux') && always()
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-output
          path: |
            server-extension/ui-tests/test-results
      - name: Uninstall extension
        if: steps.filter.outputs.extension == 'true' && ( startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS') )
        run: |
          export NAME=`python -c ""import tomllib; print(tomllib.load(open('server-extension/pyproject.toml', 'rb'))['project']['name'])""`
          pip uninstall -y ${NAME}

  build_all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache lerna
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo ""dir=$(pip cache dir)"" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyterlab~=4.0.0 pytest pytest-check-links ""pytest-jupyter[server]>=0.6.0""
      - name: Bootstrap the jlpm deps
        run: jlpm
      - name: Build all the extensions
        run: |
          # Check embedded snippets
          jlpm lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in main)
          jlpm run lerna exec --concurrency 4 -- ""pytest --check-links""
",,,,,,TypeScript
3351,https://github.com/bashleigh/nestjs-blog,"# This is a basic workflow to help you get started with Actions

name: Tests

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      COMPOSE_FILE: ./docker-compose.yml

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: env sync
        run: cp .env.dist .env && export $(cat ./.env | xargs)  

      # Runs a single command using the runners shell
      - name: build docker db
        run: docker-compose up -d
      
      - name: install
        run: yarn install --ignore-scripts
      
      - name: build
        run: yarn build

      - name: check docker
        run: docker-compose up -d

      - name: docker logs
        run: docker-compose logs && docker-compose ps

      # Runs a set of commands using the runners shell
      - name: tests
        run: yarn test --coverage
",,,,,,TypeScript
3352,https://github.com/rhysd/shiba,"name: Watchdogs
on: [push, pull_request]
env:
  TERM: xterm
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1
defaults:
  run:
    working-directory: v2

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - run: sudo bash ./scripts/install_apt_deps.bash
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: npm ci
      - run: npm run bundle
      - run: cargo clippy --all --benches --tests -- -D warnings
      - run: cargo test
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Clippy runs on each platforms in `test` job
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target
      - uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: npm
          cache-dependency-path: v2/package-lock.json
      - uses: actions/setup-python@v4
        with:
          python-version: '3'
      - run: pip install yamllint
      - run: sudo bash ./scripts/install_apt_deps.bash
      - run: npm ci
      - run: npm run lint:tsc
      - run: npm run lint:prettier
      - run: npm run lint:eslint
      - run: npm run lint:stylelint
      - run: cargo fmt --all --check
      - run: shellcheck ./scripts/gen_macos_app.bash ./scripts/install_apt_deps.bash
      - run: yamllint --strict ./src/assets/default_config.yml
",,,,,,TypeScript
3353,https://github.com/ganlvtech/phaser-catch-the-cat,"name: Build and Deploy
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2.3.1

      - name: Install and Build 🔧 # This example project is built using npm and outputs the result to the 'build' folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.
        run: |
          npm install
          npm run build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: dist # The folder the action should deploy.",,,,,,TypeScript
3354,https://github.com/vercel/uid-promise,"name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    name: Node.js ${{ matrix.node }} on ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16, 18, 20]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use pnpm
        run: corepack enable pnpm && pnpm --version
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm test
      - name: Maybe Release
        if: matrix.os == 'ubuntu-latest' && matrix.node == 16 && github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN_ELEVATED }}
        run: pnpm dlx semantic-release@19.0.5
",,,,,,TypeScript
3355,https://github.com/tb/ng2-nouislider,"name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install
      - run: pnpm test
",,,,,,TypeScript
3356,https://github.com/chenshenhai/pictool,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 15.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build
    - run: npm test
",,,,,,TypeScript
3357,https://github.com/sfeir-open-source/angular-search-experience,"name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: ""upload""
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: ""/"" # App source code path
          api_location: """" # Api source code path - optional
          output_location: ""dist/angular-search-experience"" # Built app content directory - optional
          app_build_command: ""npm run build:prod""
          ###### End of Repository/Build Configurations ######

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_RED_OCEAN_09358AF03 }}
          action: ""close""
",,,,,,TypeScript
3358,https://github.com/lzghzr/mdr_proxy,"name: Download Firmware

on:
  workflow_dispatch:

  schedule:
    - cron:  '0 8 * * *'

jobs:
  download:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Caching npm dependencies
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
      
      - name: Download
        run: npm run download

      - name: Commit files
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add firmware/* mdrdownload.json
          updated_service_ids=`git status -s | grep ""^A "" | awk '{print $2}' | xargs -i sh -c 'basename $(dirname $(dirname {}))' | grep -v ""\."" | sort -u | sed -z 's/\n/, /g' | sed 's/, $//'`
          git diff-index --cached --quiet HEAD -- || (git commit -m ""Auto download firmware (${updated_service_ids})"" && git push)
",,,,,,TypeScript
3360,https://github.com/thlorenz/spok,"name: Node CI 

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install, lint and test
      run: |
        yarn install
        yarn lint
        yarn build
        yarn test-main
      env:
        CI: true
",,,,,,TypeScript
3361,https://github.com/cloudflare/db-connect,"name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        node_version: [8, 10, 12]
        os: [ubuntu-latest, windows-latest, macOS-latest]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          version: ${{matrix.node_version}}
      - run: npm ci
      - run: npm test
",,,,,,TypeScript
3362,https://github.com/kriasoft/universal-router,"name: Node.js CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm ci
    - name: Lint
      run: npm run lint
    - name: Test
      run: npm run test -- --coverage --verbose --ci
    - name: Build
      run: npm run build
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
",,,,,,TypeScript
3363,https://github.com/mrmartineau/design-system-utils,"name: Test

on:
  push:
    branches:
    - master
    - develop
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - run: yarn install
    - run: yarn test
      env:
        CI: true
",,,,,,TypeScript
3364,https://github.com/microsoft/fluent-ui-react,"name: Screener
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master

jobs:
  test:
    name: Test visuals on Screener
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 10
      - run: yarn install
      - run: yarn test:visual
        env:
          CI: true
          SCREENER_API_KEY: ${{secrets.SCREENER_API_KEY}}
",,,,,,TypeScript
3365,https://github.com/gcanti/newtype-ts,"name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3366,https://github.com/loomnetwork/loom-js,"name: CI

on:
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ""1.10.2""
      - uses: actions/checkout@v2
      - uses: actions/setup-node@master
        with:
          node-version: ""16.x""

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo ""::set-output name=dir::$(yarn cache dir)""
      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-

      - name: Setup protoc3
        run: ./scripts/ci_install_protoc3.sh

      - run: yarn install
      - run: xvfb-run --auto-servernum yarn test:browser
      - run: yarn test:node
      # e2e tests currently sporadically fail with Error: Failed to check for transaction receipt
      # which originates from the test contract deployment, re-enable once the underlying issue is
      # resolved
      #- run: chmod +x ./e2e_tests.sh
      #- run: ./e2e_tests.sh
      #  working-directory: "".""
      #  env:
      #    BUILD_ID: build-1346
",,,,,,TypeScript
3367,https://github.com/joule-labs/webln,"name: Build package

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: Install dependencies
        run: npm install
      - name: Build
        run: npm run build
      - name: Package
        run: npm pack
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: webln
          path: ""*.tgz""
",,,,,,TypeScript
3368,https://github.com/umijs/umi-next,"name: CI

env:
  NODE_OPTIONS: --max-old-space-size=6144

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'examples/**'
      - 'docs/**'
      - '**/*.md'
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo ""::set-output name=pnpm_cache_dir::$(pnpm store path)""

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-node${{ matrix.node-version }}-

      # We use week in the turbo cache key to keep the cache from infinitely growing
      - name: Get cache expires mark
        id: get-week
        run: echo ::set-output name=WEEK::$(date +%U)

      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-
            turbo-${{ github.job }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ github.ref_name }}-${{ steps.get-week.outputs.WEEK }}-

      - name: Install dependencies
        run: pnpm i

      - run: pnpm build
      - run: pnpm tsc --noEmit
      - run: pnpm test
        env:
          CI: true
          NODE_ENV: test
",,,,,,TypeScript
3369,https://github.com/macfire10/react-shortcuts-hook,"name: Node.js CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install --save-dev react react-dom
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true
",,,,,,TypeScript
3370,https://github.com/gcanti/retry-ts,"name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3371,https://github.com/niklasvh/css-line-break,"name: CI

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
      - name: Tests
        run: npm run test
  publish:
    runs-on: ubuntu-latest
    name: Publish
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
      - name: Npm install
        run: npm ci
      - name: Build
        run: npm run build
      - name: NPM Publish
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,TypeScript
3372,https://github.com/telesoho/vscode-markdown-paste-image,"name: Run Tests

on:
  push:
  pull_request:
    branches: [master]

jobs:
  build:
    name: ""(${{ matrix.os }})""
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node v${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup XVFB
        if: matrix.os == 'ubuntu-latest'
        run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Setup ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y xclip

      - name: npm install
        run: npm install

      - name: npm lint
        run: npm run lint

      - name: npm test
        run: npm test
        env:
          CI: true
          ELECTRON_NO_ATTACH_CONSOLE: 1
          DISPLAY: "":99.0""
",,,,,,TypeScript
3373,https://github.com/jetbridge/axios-jwt,"name: Build, lint and test

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: Run prettier
        run: ./node_modules/.bin/prettier -c ./src

      - name: Run eslint
        run: ./node_modules/.bin/eslint ./src --color --max-warnings 0

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage@1.15.17 axios@1.4.0

      - name: 'Build Project'
        id: build
        run: npm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: 'Install Dependencies'
        id: install
        run: npm install && npm install @react-native-async-storage/async-storage axios@1.4.0

      - name: Run rests
        run: npm run test
",,,,,,TypeScript
3374,https://github.com/theintern/leadfoot,"name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        node: [12, 14, 16]
        include:
          - node: 16
            os: ubuntu-latest
            full-ci: true

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - run: npm ci
      - run: npm run build
      - if: ${{ matrix.full-ci }}
        run: npm test config=@ci
        env:
          # Please get your own free key if you want to test yourself
          BROWSERSTACK_USERNAME: sitepenlabs1
          BROWSERSTACK_ACCESS_KEY: xm1uYrJuV3gZMJqCyZJX
      - if: ${{ ! matrix.full-ci }}
        run: npm test
      - if: ${{ matrix.full-ci }}
        uses: codecov/codecov-action@v2
",,,,,,TypeScript
3375,https://github.com/formatjs/formatjs-old,"name: Node CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
        fetch-depth: 110
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: yarn install
      run: |
        yarn install --frozen-lockfile
      env:
        CI: true
    - name: yarn build
      run: |
        yarn build
      env:
        CI: true
    - name: yarn test
      run: |
        yarn test
      env:
        CI: true
",,,,,,TypeScript
3376,https://github.com/davfoundation/missioncontrol,"name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v1

      - name: Login to Image Registry
        run: echo ""${{ secrets.GITHUB_TOKEN }}"" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Node Setup
        uses: actions/setup-node@v1
        with:
          node-version: ""11.x""

      - name: NPM Install
        run: |
          npm i

      - name: Test/Verify
        run: |
          make tslint tsc jest

      - name: Get current time
        uses: srfrnk/current-time@master
        id: current-time
        with:
          format: YYYYMMDD-HHmm

      - name: Build
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make build

      - name: Push Images
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          REGISTRY=docker.pkg.github.com/davfoundation/missioncontrol TIMESTAMP=$TIMESTAMP make --always-make push-images

      - name: Commit distribution files
        env:
          TIMESTAMP: ""${{ steps.current-time.outputs.formattedTime }}""
        run: |
          git config --local user.email ""action@github.com""
          git config --local user.name ""GitHub Action""
          git add k8s/dist/.
          git commit -m ""Version Distribution $TIMESTAMP"" -a

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,TypeScript
3377,https://github.com/ethereumjs/ethereumjs-blockchain,"name: blockchain-test
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x, 13.x]

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - uses: actions/checkout@v1
      - run: npm install
      - run: npm test
        env:
          CI: true
",,,,,,TypeScript
3378,https://github.com/mdevils/css-selector-parser,"name: build
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci --prefer-offline --no-audit --no-update-notifier
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - run: npm run test:dist
",,,,,,TypeScript
3379,https://github.com/jamiemason/imageoptim-cli,"name: verify

on:
  pull_request:
  push:

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: yarn
          node-version: 20.x

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build
        run: yarn build
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color

      - name: Lint
        run: yarn lint
        env:
          FORCE_COLOR: 3
          TERM: xterm-256color
",,,,,,TypeScript
3380,https://github.com/wessouza/calendar-base,"# ⚠️ WARNING
# This file is auto-generated by https://github.com/WesSouza/wes-cli

name: Lint, Type Check, Test, Build

on:
  pull_request:
  push:

jobs:
  check:
    name: Using Node ${{ matrix.node }}/${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: ['16.x', '18.x']
        os: [ubuntu-latest, macOS-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install wes-cli
        run: |
          npm i -g wes-cli@3.0.0
          wes install

      - name: Use Node ${{ matrix.node }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Lint
        run: yarn lint

      - name: Check Types
        run: yarn check:types

      - name: Test
        run: yarn test:ci

      - name: Build
        run: yarn build
",,,,,,TypeScript
3381,https://github.com/idered/typescript-expect-plugin,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
",,,,,,TypeScript
3382,https://github.com/ember-fastboot/simple-dom,"name: CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request: {}

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 12.x
          cache: yarn
      - name: install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: linting
        run: yarn lint
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 12.x
          cache: yarn
      - name: install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: linting
        run: yarn test
",,,,,,TypeScript
3383,https://github.com/seth-brown/formd,"name: Build Status

on: [push]

jobs:
  github:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v1
      - name: setup node
        uses: actions/setup-node@v1
      - name: install deps
        run: |
          npm install
      - name: run tests
        run: |
          npm test
      - name: build
        run: |
          npm run build
",,,,,,TypeScript
3384,https://github.com/fent/timequeue.js,"name: Node CI

on: [push, pull_request]

jobs:
  test:
    name: Test on node ${{ matrix.node-version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm test

    - uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
",,,,,,TypeScript
3385,https://github.com/reedsy/quill-cursors,"name: Test

on:
  push:
    branches:
    - main
    - lint
  pull_request:
    branches:
    - main

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://npm.pkg.github.com'
    - name: Install
      # Skip post-install to avoid malicious scripts stealing PAT
      run: npm install --ignore-script
      env:
        # GITHUB_TOKEN can't access packages hosted in private repos,
        # even within the same organisation
        NODE_AUTH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    - name: Post-install
      run: npm rebuild && npm run prepare --if-present
    - name: Build
      run: npm run build
    - name: Test
      run: npm test
",,,,,,TypeScript
3386,https://github.com/ryanelian/ts-polyfill,"name: Node CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, build, and test
      run: |
        npm install -g yarn
        yarn
        yarn build
        # npm test
      env:
        CI: true
",,,,,,TypeScript
3387,https://github.com/axetroy/vscode-deno,"name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [""12.16.1""]
        deno: [""0.35.0""]
        os: [ubuntu-latest, macOS-latest, windows-latest]
    name: test in ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Deno
        uses: denolib/setup-deno@master
        with:
          deno-version: ${{ matrix.deno }}

      - name: Environment
        run: |
          node -v
          npm -v
          yarn --version
          deno --version

      - name: Install
        run: yarn

      - name: Check code format
        run: npm run check

      - name: Lint
        run: npm run lint

      - name: Test and Coveralls
        if: runner.os == 'macOS' && github.event_name != 'pull_request'
        env:
          COVERALLS_REPO_TOKEN: ""${{ secrets.COVERALLS_REPO_TOKEN }}""
          COVERALLS_GIT_BRANCH: ""${{ github.ref }}""
        run: npm run test-coveralls

      - name: Test
        if: github.event_name == 'pull_request'
        run: npm run test

      - name: Compile
        run: |
          npm run compile

      - name: Package
        run: npm run build

      - uses: actions/upload-artifact@v1
        if: runner.os == 'macOS'
        with:
          name: package
          path: ./vscode-deno.vsix

  release:
    runs-on: ubuntu-latest
    name: ""Release to vscode market and github""
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: package

      - uses: actions/setup-node@v1
        with:
          node-version: ""12.x""

      - name: publish to vscode market
        # require Azure DevOps Personal Access Token
        run: npx vsce publish --packagePath ./package/vscode-deno.vsix --pat ${{ secrets.ADO_TOKEN }}

      - uses: softprops/action-gh-release@v1
        name: publish to Github
        env:
          # require Github Personal Access Token
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            ./package/vscode-deno.vsix
          draft: false
",,,,,,TypeScript
3388,https://github.com/gcanti/fp-ts-routing,"name: Node.js CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm test
",,,,,,TypeScript
3389,https://github.com/ethereum/js-ethereum-cryptography,"name: Node CI

on: [push]
env:
  FORCE_COLOR: 2
jobs:
  test:
    name: v${{ matrix.node }} @ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [18, 20]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node }}
    - run: npm install
    - name: Build and run tests
      run: |
        npm run build --if-present
        npm test
    - name: Run browser tests and lint
      run: |
        npm run browser-tests
        npm run lint
",,,,,,TypeScript
3390,https://github.com/bromne/typescript-optional,"# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: Node.js Package

on:
  push:
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          cache: npm 
      - run: npm ci
      - run: npm run lint
      - run: npm run test:coverage
      - run: npm run codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  publish-npm:
    if: github.ref_type == 'tag'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/
          cache: npm 
      - run: npm run build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
",,,,,,TypeScript
3391,https://github.com/fwouts/prmonitor,"on: [push, pull_request]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: [14]
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          version: ${{ matrix.node_version }}
      - run: yarn install --frozen-lockfile
      - name: yarn build and test
        run: |
          yarn build
          yarn test
          yarn lint:check
",,,,,,TypeScript
3392,https://github.com/yortus/asyncawait,"name: Node CI

on: [push]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-18.04]
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install, build, and test
      run: |
        npm ci
        npm run build --if-present
        npm test
      env:
        CI: true
",,,,,,TypeScript
3393,https://github.com/stbui/angular-material-app,"name: deploy
on:
  release:
    types: [published]
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@next

      - name: install
        run: yarn

      - name: build
        run: npm run build:github

      - name: deploy
        uses: peaceiris/actions-gh-pages@v2
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          PUBLISH_BRANCH: gh-pages
        with:
          emptyCommits: false
",,,,,,TypeScript
3394,https://github.com/midwayjs/midway-faas,"name: Node.js CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install && npm install codecov
    - run: npm run bootstrap
    - run: npm run lint
    - run: npm run build --if-present
    - run: npm run cov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1


  # build-windows:
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       node-version: [10.x, 12.x]

  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #   - run: npm install
  #   - run: npm run bootstrap
  #   - run: npm run build --if-present
  #   - run: npm run cov
",,,,,,TypeScript
3395,https://github.com/hustcc/xmorse,"name: build

on: [push]

jobs:
  build:

    runs-on: macOS-latest

    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]

    steps:
      - uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: ci
        run: |
          npm install
          npm run build
          npm run test
      - name: coverall
        if: success()
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,TypeScript
3396,https://github.com/jgranstrom/zipson,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - run: npm ci
      - run: npm test
",,,,,,TypeScript
3397,https://github.com/mattlewis92/angular-confirmation-popover,"name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      - run: pnpm install
      - run: pnpm test
      - uses: codecov/codecov-action@v3
",,,,,,TypeScript
3398,https://github.com/citycide/trilogy,"name: Test
on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        node: [14, 12, 10, 8]
    name: Node ${{ matrix.node }}
    steps:
      - uses: actions/checkout@master
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - run: npm install
      - run: npm test
",,,,,,TypeScript
3399,https://github.com/simonhoiberg/hue-debugger-ui,"name: Install and test

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [8.x, 10.x, 12.x]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: npm install and test
      run: |
        npm install
        npm test --watchAll=false
      env:
        CI: true
",,,,,,TypeScript
3400,https://github.com/manfredsteyer/angular-crud,"name: Angular CRUD CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 16]
        app:
          - demo
          - demo-bootstrap
          - demo-material
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.7.0
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install latest Chrome
      run: |
        sudo apt update
        sudo apt --only-upgrade install google-chrome-stable
        google-chrome --version
    - name: npm install, build, and test
      run: |
        npm ci
        npm run build --if-present
        npm test
        npm run coverage
      working-directory: ./angular-crud
    - name: package angular-crud
      run: npm pack
      working-directory: ./angular-crud
    - name: generate CRUD and run tests
      run: |
        npm i -g @angular/cli
        npm i
        npm i --no-save ../angular-crud/*.tgz
        mkdir -p src/app/hotel
        mv model.json src/app/hotel/.
        ng g angular-crud:crud-module hotel
        xvfb-run npm test -- --watch=false
      working-directory: ./${{ matrix.app }}
      env:
        CI: true
",,,,,,TypeScript
3401,https://github.com/manekinekko/angular-web-bluetooth,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Angular CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci --legacy-peer-deps
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3402,https://github.com/fjc0k/tbify,"name: Test

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: test
        run: |
          yarn
          npm test
",,,,,,TypeScript
3403,https://github.com/xiph/aomanalyzer,"# Workflow to run on pull request and push to master

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node-version:
          - 10
          - 12
          - 14
        architecture:
          - x64

    name: Node ${{ matrix.node_version }} - ${{ matrix.os }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}

      - name: Install Packages
        run: npm install

      - name: Check linting
        run: npm run check-lint

      - name: It can build successfully
        run: npm run build

      - name: It can package into electron app
        run: |
          npm run package-darwin
          npm run package-linux
          npm run package-win32",,,,,,TypeScript
3404,https://github.com/viadee/sonarquest,"# This is the CI Action for SonarQuest to automatically build Docker images on master push and release.

name: SonarQuest-CI

# Controls when the action will run. 
on:
  push:
  release:
    types: [ released, prereleased, edited ]
  workflow_dispatch:

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build backend with Maven
        run: mvn -f ./sonarQuest-backend/pom.xml --batch-mode --update-snapshots verify 
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker image - Release
        uses: docker/build-push-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          context: ./sonarQuest-backend
          push: true
          tags: | 
            ghcr.io/viadee/sonarquest-backend:latest
            ghcr.io/viadee/sonarquest-backend:${{ github.event.release.tag_name }}
      - name: Build and push Docker image - Nightly
        uses: docker/build-push-action@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          context: ./sonarQuest-backend
          push: true
          tags: ghcr.io/viadee/sonarquest-backend:nightly
            
          
        
  frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup node.js
      uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    - name: Install dependencies
      run: |
        cd sonarQuest-frontend
        npm ci
    - name: Build Angular app
      run: |
        cd sonarQuest-frontend
        npm run build:prod
    - name: Test
      run: |
        cd sonarQuest-frontend
        npm test
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      if: ${{ github.event_name == 'release' || (github.event_name == 'push' && github.ref == 'refs/heads/master') }}
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push Docker image - Release
      uses: docker/build-push-action@v2
      if: ${{ github.event_name == 'release' }}
      with:
        context: ./sonarQuest-frontend
        push: true
        tags: | 
            ghcr.io/viadee/sonarquest-frontend:latest
            ghcr.io/viadee/sonarquest-frontend:${{ github.event.release.tag_name }}
    - name: Build and push Docker image - Nightly
      uses: docker/build-push-action@v2
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
      with:
        context: ./sonarQuest-frontend
        push: true
        tags: ghcr.io/viadee/sonarquest-frontend:nightly
  
",,,,,,TypeScript
3405,https://github.com/polymerlabs/lit-ssr,"# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Tests

on: [push, pull_request]

jobs:
  tests:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build
    - run: npm test
",,,,,,TypeScript
3406,https://github.com/ngneat/dirty-check-forms,"name: CI
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: use cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm i -g npm@7.15.0
      - run: npm i
      - run: npm run build:lib
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: use cache
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            */*/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm i -g npm@7.15.0
      - run: npm i
      - run: npm run test:lib
",,,,,,TypeScript
3407,https://github.com/nilsmehlhorn/ngx-operators,"name: ngx-operators
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'
      - run: npm ci
      - run: npm run lint
      - run: npm run build
      - run: npm run test:ci
      - uses: codecov/codecov-action@v3
        with:
          files: ./projects/ngx-operators/coverage/lcov.info
          fail_ci_if_error: true
",,,,,,TypeScript
3408,https://github.com/thekashey/used-styles,"name: Node.js CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v3
    - name: Run tests [Node.js ${{ matrix.node-version }}]
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: yarn --frozen-lockfile
    - run: yarn test:ci",,,,,,TypeScript
3409,https://github.com/kohheepeace/docusaurus-pdf,"name: Test

on:
  [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ matrix.node-version }}-
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install NPM Packages
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test -- --ci
",,,,,,TypeScript
3410,https://github.com/aykutkardas/json-function,"name: Test

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn install
      - run: yarn test
        env:
          CI: true
",,,,,,TypeScript
3411,https://github.com/43081j/id3,"name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build
    - run: npm run lint
    - run: npm test
",,,,,,TypeScript
3412,https://github.com/kkemple/graphql-auth,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Lint
        run: yarn lint
        env:
          CI: true

      - name: Test
        run: yarn test --ci --coverage --maxWorkers=2
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
",,,,,,TypeScript
3413,https://github.com/alexreardon/tiny-invariant,"name: Unit tests

on:
  push:
    branches: [master]
  pull_request:
    branches: ['**/**']

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  jest:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          # Using node action to manage caching node_modules
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test
",,,,,,TypeScript
3414,https://github.com/react-native-toolkit/react-native-responsive-dimensions,"name: build
on:
  push:
    branches:
      - master
    tags:
      - ""!*"" # Do not execute on tags
    paths:
      - src/*
      - test/*
      - __tests__/*
      - ""*.json""
      - yarn.lock
      - .github/**/*.yml
  pull_request:
    paths:
      - ""!*.MD""
jobs:
  test:
    strategy:
      matrix:
        platform: [ubuntu-latest, macOS-latest]
        node: [""12"", ""10""]
    name: test/node ${{ matrix.node }}/${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node }}
      - run: npm install -g yarn
      - run: yarn install
      - run: yarn test
  coverage:
    needs: [test]
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: ""12""
      - run: npm install -g yarn
      - run: yarn install
      - uses: paambaati/codeclimate-action@v2.5.3
        env:
          CC_TEST_REPORTER_ID: ${{secrets.CC_TEST_REPORTER_ID}}
        with:
          coverageCommand: yarn coverage
          debug: true
",,,,,,TypeScript
3415,https://github.com/samhh/bukubrow-webext,"name: Code Quality
on: [push]
jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache Yarn dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-yarn
        with:
          path: ~/.cache/yarn/
          key: yarn-${{ hashFiles('./yarn.lock') }}
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ""15.x""
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Typecheck
        run: yarn typecheck
      - name: Lint
        run: yarn lint
      - name: Test
        run: yarn test
      - name: Check formatting
        run: yarn fmt-check
",,,,,,TypeScript
3416,https://github.com/albert-gao/micro-aws-lambda,"name: Publish to NPM registry

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
      - run: npm ci --silent
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
",,,,,,TypeScript
3417,https://github.com/benlesh/rxjs-for-await,"# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
",,,,,,TypeScript
3418,https://github.com/app-outlet/app-outlet,"name: Pipeline

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch dependencies
        run: npm install

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test:coverage

      - name: Upload code coverage report
        uses: paambaati/codeclimate-action@v3.0.0
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: coverage/lcov.info:lcov

      - name: Generage changelog
        run: npx standard-changelog -r 2 -v -o CHANGELOG.txt
        if: startsWith(github.ref, 'refs/tags/')

      - name: Print changelog
        run: cat CHANGELOG.txt
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build
        run: npm run build
        if: startsWith(github.ref, 'refs/tags/')

      - name: Deploy to releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release/App Outlet-*.AppImage
            release/app-outlet-*.tar.gz
            release/app-outlet_*_amd64.deb
            release/app-outlet-*.x86_64.rpm
          body_path: CHANGELOG.txt
          token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,TypeScript
3419,https://github.com/custom-cards/decluttering-card,"name: CI

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18.x
      - name: Cache Node.js modules
        uses: actions/cache@v3.3.1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-18.x-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-18.x
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Lint the code
        run: npm run lint --if-present
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache Node.js modules
        uses: actions/cache@v3.3.1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.OS }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-${{ matrix.node-version }}
            ${{ runner.OS }}-
      - name: Install dependencies
        run: npm ci
      - name: Build the project
        run: npm run build --if-present",,,,,,TypeScript
3420,https://github.com/ryuugan/sol-merger,"# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build

  testPublish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run test-docker

  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run lint

  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm test

  dryPublish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build
    - run: npm publish --dry-run
",,,,,,TypeScript
3421,https://github.com/open-draft/until,"name: ci

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          always-auth: true
          registry-url: https://registry.npmjs.org

      - name: Setup Git
        run: |
          git config --local user.name ""Artem Zakharchenko""
          git config --local user.email ""kettanaito@gmail.com""

      - uses: pnpm/action-setup@v2
        with:
          version: 7.12

      - name: Install dependencies
        run: pnpm install

      - name: Test
        run: pnpm test

      - name: Build
        run: pnpm build

      - name: Release
        if: github.ref == 'refs/heads/main'
        run: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,TypeScript
3422,https://github.com/nolanus/ngx-page-scroll,"name: CI

# Controls when the action will run.
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:

  pull_request:
    branches:
      - main

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called ""build""
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: wagoid/commitlint-github-action@v3

      # Install Chrome Browser
      - name: Setup Chrome
        # You may pin to the exact commit or the version.
        # uses: browser-actions/setup-chrome@4fa655aad48f56911cad16db9252399a9e592848
        uses: browser-actions/setup-chrome@latest
        with:
          # The Chromium version to install and use.
          chrome-version: stable

      - name: Print chrome version
        run: chrome --version

      # Install NodeJS
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Runs npm install
      - name: Install dependencies
        run: npm install

      - name: Lint files
        run: npm run lint

      - name: Build lib
        run: npm run build:lib

      - name: Run tests
        run: npm run test -- --watch false --browsers ChromeHeadless

      - name: Run e2e tests
        run: npm run e2e -- --protractor-config='e2e/protractor.ci.conf.js'
",,,,,,TypeScript
3423,https://github.com/deepkit/deepkit-ml,"name: CI

on:
  push:
    branches:
      - master

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
#  build:
#    runs-on: [ubuntu-latest]
#    steps:
#      - uses: actions/checkout@v2
#      - run: git fetch --prune --unshallow
#      - run: git fetch --tags
#      - run: echo ""::set-env name=VERSION::`sh ./release-version.sh`""
#      - run: echo ""::set-env name=VERSION_FILE_PATH::`sh ./release-version-file-path.sh`""
#      - run: |
#          if [ ""${{runner.os}}"" = ""macOS"" ]; then
#           echo ::set-env name=PLATFORM::darwin
#          fi
#          if [ ""${{runner.os}}"" = ""Linux"" ]; then
#           echo ::set-env name=PLATFORM::linux
#          fi
#      - uses: actions/setup-node@v1
#        with:
#          node-version: '12.x'
#      - name: Cache ~/.npm
#        uses: actions/cache@v1
#        with:
#          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
#
#      - name: Cache node_modules core
#        uses: actions/cache@v1
#        with:
#          path: packages/core/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/core/package-lock.json') }}
#      - name: Cache node_modules core-node
#        uses: actions/cache@v1
#        with:
#          path: packages/core-node/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/core-node/package-lock.json') }}
#
#      - name: Cache node_modules cli
#        uses: actions/cache@v1
#        with:
#          path: packages/cli/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/cli/package-lock.json') }}
#      - name: Cache node_modules server
#        uses: actions/cache@v1
#        with:
#          path: packages/server/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/server/package-lock.json') }}
#      - name: Cache node_modules deepkit
#        uses: actions/cache@v1
#        with:
#          path: packages/deepkit/node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('packages/deepkit/package-lock.json') }}
#      - name: Cache build
#        uses: actions/cache@v1
#        with:
#          path: build
#          key: build-${{env.VERSION}}
#
#      - name: Setup
#        run: npm install -g lerna@3.20.2 npm-local-development
#        shell: bash
#      - name: Lerna bootstrap
#        run: |
#          if [ ! -d packages/core/node_modules ] || [ ! -d packages/core-node/node_modules ] || [ ! -d packages/cli/node_modules ] || [ ! -d packages/deepkit/node_modules ] || [ ! -d packages/server/node_modules ] || [ ! -d packages/electron/node_modules ]; then
#            lerna bootstrap --nohoist \* --ignore @deepkit/website
#          fi
#          npm-local-development --no-watcher
#
#      - name: Build
#        run: |
#          mkdir -p build/cli
#          mkdir -p build/server
#          mkdir -p build/frontend
#
#          if [ ! -f build/cli/main.js ]; then
#              echo ""build now build/cli""
#              cd packages/cli && npm run build && cd - && mv packages/cli/dist/main.js build/cli/
#          fi
#          if [ ! -f build/server/main.js ]; then
#              echo ""build now build/server""
#              cd packages/server && npm run build && cd - && mv packages/server/dist/main.js build/server/
#          fi
#          if [ ! -f build/frontend/index.html ]; then
#              echo ""build now build/frontend""
#              rm -rf build/frontend
#              cd packages/deepkit && npm run build && cd - && mv packages/deepkit/dist/deepkit build/frontend
#              rm build/frontend/emoji_apple_32.*.png
#              rm build/frontend/statistics.html
#          fi
#
#      - name: Package cli Linux
#        run: |
#          mkdir -p build/linux/cli/
#          cp packages/cli/package.json build/linux/cli/
#          cp build/cli/main.js build/linux/cli/
#          cd build/linux/cli/ && npm version ${{env.VERSION}} && cd -
#          if [ ! -d build/linux/cli/node_modules ]; then
#              cp packages/cli/package-lock.json build/linux/cli/
#              cd build/linux/cli/ && npm install --only=prod --unsafe --scripts-prepend-node-path && cd -
#              rm build/linux/cli/package-lock.json
#          fi
#          make build/linux/cli/bin
#
#          tar -C build/linux/cli -czf build/linux/deepkit-cli-linux.tar.gz .
#          rm -rf build/linux/cli
#
#      - name: Package server Linux
#        run: |
#          mkdir -p build/${{env.PLATFORM}}/server/
#          cp build/server/main.js build/${{env.PLATFORM}}/server/
#          cp packages/server/package.json build/${{env.PLATFORM}}/server/
#          cd build/${{env.PLATFORM}}/server/ && npm version ${{env.VERSION}} && cd -
#          if [ ! -d build/${{env.PLATFORM}}/server/node_modules ]; then
#              cp packages/server/package-lock.json build/${{env.PLATFORM}}/server/
#              cd build/${{env.PLATFORM}}/server/ && npm install --only=prod --unsafe --scripts-prepend-node-path && cd -
#              rm build/${{env.PLATFORM}}/server/package-lock.json
#          fi
#          make build/${{env.PLATFORM}}/server/libs
#          make build/${{env.PLATFORM}}/server/bin
#
#          cp -r build/frontend build/linux/server/frontend
#          mkdir -p build/linux/server/build/linux/
#          cp build/linux/deepkit-cli-linux.tar.gz build/linux/server/build/linux/deepkit-cli-linux.tar.gz
#
#      - name: Build app.deepkit.ai
#        if: runner.os == 'Linux' && success()
#        run: |
#          cp -r build/linux/server prebuild-server
#          docker build -t docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}} -f docker-build/app.Dockerfile .;
#
#          echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
#          docker push docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}}
#          docker tag docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}} docker.pkg.github.com/deepkit/deepkit/app:latest
#          docker push docker.pkg.github.com/deepkit/deepkit/app:latest
#
#      - name: Deploy app.deepkit.ai
#        uses: appleboy/ssh-action@master
#        with:
#          host: marcjschmidt.de
#          username: deploy
#          password: ${{secrets.SSH_PW}}
#          script_stop: true
#          script: |
#            echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
#            docker pull docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}}
#            docker stop deepkit-app || true;
#            docker rm -f deepkit-app || true;
#            docker run -d --name deepkit-app -v /root/deepkit/app.deepkit.ai-fs:/app/data/fs -v /root/deepkit/app.deepkit.ai-project-git:/app/data/project-git -v /root/deepkit/app.deepkit.ai-mongo:/app/data/mongo -e DEEPKIT_VERSION=${{env.VERSION}} --restart=unless-stopped --network nginx-proxy -e VIRTUAL_HOST=app.deepkit.ai -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=app.deepkit.ai docker.pkg.github.com/deepkit/deepkit/app:${{env.VERSION_FILE_PATH}};

  website:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow
      - run: git fetch --tags
      - run: echo ""::set-env name=VERSION::`sh ./release-version.sh`""
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Cache ~/.npm
        uses: actions/cache@v1
        with:
          path: ~/.npm # npm cache files are stored in `~/.npm` on Linux/macOS
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - name: Setup
        run: npm install -g lerna@3.20.2 npm-local-development @angular/cli@9
        shell: bash
      - name: Lerna bootstrap
        run: lerna bootstrap --nohoist \* --ci --scope @deepkit/website
      - name: Image build
        run: |
          echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
          COMMIT=$(git log -n 1 --pretty=format:%h packages/website)
          VERSION=$(git describe --tag $COMMIT)

          docker build -t docker.pkg.github.com/deepkit/deepkit/website:latest -f docker-build/website.Dockerfile .;

          docker push docker.pkg.github.com/deepkit/deepkit/website:latest

      - name: Deploy website
        uses: appleboy/ssh-action@master
        with:
          host: marcjschmidt.de
          username: deploy
          password: ${{secrets.SSH_PW}}
          script_stop: true
          script: |
            echo ""${{secrets.GITHUB_TOKEN}}"" | docker login docker.pkg.github.com --username \$GITHUB_ACTOR  --password-stdin
            docker pull docker.pkg.github.com/deepkit/deepkit/website:latest
            docker rm -f deepkit-website || true;
            docker rm -f next-deepkit-website || true;
            docker run -d --name deepkit-website --restart=unless-stopped --network nginx-proxy -e CONTENTFUL_ACCESS_TOKEN=""${{secrets.CONTENTFUL_ACCESS_TOKEN}}"" -e VIRTUAL_HOST=ml.deepkit.io -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=ml.deepkit.io docker.pkg.github.com/deepkit/deepkit/website:latest;
#            docker run -d --name next-deepkit-website --restart=unless-stopped --network nginx-proxy -e VIRTUAL_HOST=next.deepkit.ai -e VIRTUAL_PORT=80 -e LETSENCRYPT_HOST=next.deepkit.ai docker.pkg.github.com/deepkit/deepkit/website:latest;
",,,,,,TypeScript
3424,https://github.com/disjukr/croquis.js,"name: Deploy GitHub Pages

on:
  push:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - run: yarn
    - run: yarn build
    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        personal_token: ${{ secrets.ACCESS_TOKEN }}
        publish_dir: packages/website/out
        publish_branch: gh-pages
        cname: croquisjs.0xabcdef.com
        enable_jekyll: false
        keep_files: false
",,,,,,TypeScript
3425,https://github.com/mtraynham/lodash-joins,"name: test
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 17.x, 18.x, 19.x, 20.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run lint
    - run: npm run build
    - run: npm test
      env:
        CI: true
",,,,,,TypeScript
3426,https://github.com/tc39/proposal-array-unique,"name: CI & CD
on:
    push:
        tags:
            - v*
jobs:
    Build-and-Publish:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Use Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: 14
                  registry-url: https://registry.npmjs.org
                  cache: yarn
            - name: Install packages
              run: yarn
            - name: Test & Build
              if: ${{ !secrets.NPM_TOKEN }}
              run: npm test  &&  yarn build
            - name: Publish
              if: ${{ secrets.NPM_TOKEN }}
              run: yarn publish
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
",,,,,,TypeScript
3427,https://github.com/emeraldpay/hashicon,"name: Unit Tests

on:
  # if pushed directly to the master
  push:
    branches:
      - master
  # on a pull request
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ""12.x""

      - name: Instal JS dependencies
        run: yarn install

      - name: Build Sources
        run: yarn build
",,,,,,TypeScript
3428,https://github.com/microsoft/code-push,"name: Сode-push CI

on:
  pull_request:
    branches:
      - master

jobs:
  Run-tests:
    name: Test code-push-sdk
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup NodeJs
        uses: actions/setup-node@v1
        with:
          node-version: ""14.x""
      - name: Setup dependencies
        run: npm run setup
      - name: Build
        run: npm run build
      - name: Run tests
        run: npm run test
",,,,,,TypeScript
3429,https://github.com/yangshun/lago,"name: CI
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Begin CI...
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          CI: true

      - name: Lint
        run: yarn lint
        env:
          CI: true

      - name: Test
        run: yarn test --ci --coverage --maxWorkers=2
        env:
          CI: true

      - name: Build
        run: yarn build
        env:
          CI: true
",,,,,,TypeScript
3430,https://github.com/cipchk/ngx-weui,"name: Ci

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run build

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run test
          cat ./coverage/lcov.info | ./node_modules/.bin/codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@master

      - name: install
        run: npm install

      - name: run
        run: |
          npm run lint
",,,,,,TypeScript
3431,https://github.com/data-uri/datauri,"name: DataURI
on:
  push:
    branches:
      - main
  pull_request_target:
    types: [assigned, opened, synchronize, reopened]
jobs:
  check-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['10', '12', '14', '16']
    name: Check package on Node.js ${{ matrix.node }}
    steps:
      - uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
        if: ${{ github.event_name == 'pull_request_target' }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Build and test
        run: |
          npm ci --prefer-offline --no-audit
          npm test
",,,,,,TypeScript
3432,https://github.com/probot/smee-client,"name: Release
""on"":
  push:
    branches:
      - master
      - next
      - beta
      - ""*.x""
jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
      - run: npm ci
      - run: npm run build
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.PROBOTBOT_NPM_TOKEN }}",,,,,,TypeScript
3433,https://github.com/davguij/rxios,"name: CI
on: [push]

jobs:
  lint_test:
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Install peer dependencies
        run: npm i axios rxjs --no-save
        env:
          CI: true

      - name: Test
        run: npm test
        env:
          CI: true

  build:
    runs-on: ubuntu-latest
    name: Build
    needs: lint_test
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Use cached node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodeModules-

      - name: Install dependencies
        run: npm ci
        env:
          CI: true

      - name: Install peer dependencies
        run: npm i axios rxjs --no-save
        env:
          CI: true

      - name: Build
        run: npm run build
        env:
          CI: true

      - uses: actions/upload-artifact@v2
        name: Store dist folder to artifacts
        with:
          name: dist
          path: dist/ # or path/to/artifact

  release:
    runs-on: ubuntu-latest
    name: Release version to npm registry
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Use Node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - uses: actions/download-artifact@v2
        name: Load dist folder from artifacts
        with:
          name: dist
          path: dist

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
",,,,,,TypeScript
3434,https://github.com/vadimdemedes/ink-spinner,"name: test
on: [push, pull_request]

jobs:
  test:
    name: Node.js ${{ matrix.node_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version: [14, 16, 18]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - run: npm install --global npm@latest
      - run: npm install
      - run: npm test
",,,,,,TypeScript
3435,https://github.com/jason3s/rx-stream,"name: ""build-test""
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main

jobs:
  test-node-versions:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        node-version:
          - 14.x
          - 16.x
          - 18.x

        os:
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: |
          npm install
          npm test

  test-os:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          # - ubuntu-latest
          - windows-latest
          - macos-latest

        node-version:
          - 18.x

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: |
          npm install
          npm test
",,,,,,TypeScript
3436,https://github.com/reactivando/validations-br,"name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    - name: Install dependencies
      run: yarn

    - name: Check tests
      run: yarn test --coverage

    - name: Check linting
      run: yarn lint

    - name: Coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
",,,,,,TypeScript
3437,https://github.com/grrowl/react-keyed-flatten-children,"name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - run: yarn install

      - run: yarn test
",,,,,,TypeScript
3438,https://github.com/dotlottie/player-component,"name: main
on:
  push:
    branches:
      - 'master'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v2

      - name: ⎔ Setup pnpm@v8
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup Node@18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 📥 Download deps
        run: pnpm install

      - name: 🏗 Build
        run: pnpm build

      - name: 🔍 Verify types
        run: pnpm type-check

      - name: 💅 Verify format (`pnpm format` committed?)
        run: pnpm format --check --no-write

      - name: 🕵️ Lint
        run: pnpm lint

      - name: 🛡️ Test
        run: pnpm test

      - name: 📏 Report bundle size
        uses: andresz1/size-limit-action@v1
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'dotlottie/player-component' && github.event_name == 'push' }}
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: ⎔ Setup pnpm@v8
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: ⎔ Setup Node@18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 📥 Download deps
        run: pnpm install

      - name: 🏗 Build
        run: pnpm build

      - name: 🚀 Release
        uses: changesets/action@v1
        with:
          commit: 'chore: 🤖 update versions'
          title: 'chore: 🤖 update versions'
          publish: pnpm release:publish
          version: pnpm release:version
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPMJS_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_TOKEN }}

      - name: 🌐Publish Playground
        if: success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          publish_dir: ./apps/dotlottie-playground/dist
",,,,,,TypeScript
3439,https://github.com/eduardoborges/use-mask-input,"name: CI

on:
  pull_request_target:
    branches:
      - main
      - beta
    types:
      - synchronize
      - edited
      - opened

permissions:
  pull-requests: write

jobs:
  semantic_pr:
    runs-on: ""ubuntu-latest""
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Semantic Pull Request
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ github.token }}

  health_check:
    needs: semantic_pr
    runs-on: ""ubuntu-latest""
    strategy:
      fail-fast: false
      matrix:
        node: [16, 18, 20]
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          cache: ""npm""
          node-version: ${{ matrix.node }}

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm run test

      - name: Run Lint
        run: npm run lint

      - name: Run Build
        run: npm run build
",,,,,,TypeScript