const { generate_pipeline, update_pipeline } = require("./src/chat-gpt");

/**
 * This is the main entrypoint to your Probot app
 * @param {import('probot').Probot} app
 */
module.exports = (app) => {

  app.on("issue_comment.created", async (context) => {
    if (context.payload.comment.body.startsWith("@devops-llm-bot") && context.payload.issue.pull_request!=null) {
      const repo = context.payload.repository.name;
      const owner = context.payload.repository.owner.login;

      const PRDetails = await context.octokit.pulls.get({
        owner,
        repo,
        pull_number: context.payload.issue.number,
      });

      const branch = PRDetails.data.head.ref;

      const fileDetail = await context.octokit.repos.getContent({
        owner,
        repo,
        path: ".github/workflows/build-autogenerated.yml",
        ref: branch,
      });

      let bufferObj = Buffer.from(fileDetail.data.content, 'base64')
      let fileContent = bufferObj.toString('utf-8');

      const user_comment = context.payload.comment.body;

      const response = await update_pipeline (fileContent, user_comment);

      await context.octokit.repos.createOrUpdateFileContents({
        repo,
        owner,
        path: ".github/workflows/build-autogenerated.yml", // the path to your config file
        message: "Updating workflow file based on PR comments", // a commit message
        content: Buffer.from(response).toString("base64"),
        // the content of your file, must be base64 encoded
        branch, // the branch name we used when creating a Git reference
        sha: fileDetail.data.sha,
      });

      const issueComment = context.issue({
        body: "Updated the workflow to reflect the changes you requested.",
      });
      return context.octokit.issues.createComment(issueComment);
    }
  });

  app.on("issues.opened", async (context) => {
    if (context.payload.issue.title.startsWith("@devops-llm-bot")) {
      const issueComment = context.issue({
        body: "The bot is generating the build pipeline for this issue! \n Once generated, you will see a PR with the pipeline.",
      });
      context.octokit.issues.createComment(issueComment);

      const branch = `devops-llm-bot-${Math.floor(Math.random() * 9999)}`;
      const repo = context.payload.repository.name;
      const owner = context.payload.repository.owner.login;

      const repoContext = await context.octokit.repos.get({
        owner,
        repo,
      });

      const defaultBranch = repoContext.data.default_branch;;

      // Get current reference in Git
      const reference = await context.octokit.git.getRef({
        repo, // the repo
        owner, // the owner of the repo
        ref: "heads/" + defaultBranch,
      });
      // Create a branch
      await context.octokit.git.createRef({
        repo,
        owner,
        ref: `refs/heads/${branch}`,
        sha: reference.data.object.sha, // accesses the sha from the heads/master reference we got
      });

      const repositoryTree = await context.octokit.git.getTree({
        repo,
        owner,
        tree_sha: "heads/" + defaultBranch,
      });
  
      const repoTree = repositoryTree.data.tree.map((item) => item.path);
  
      const languages = await context.octokit.repos.listLanguages({
        repo,
        owner,
      });
  
      const languages_array = Object.keys(languages.data);

      const user_comment = context.payload.issue.body;

      const response = await generate_pipeline (repoTree, languages_array, '', user_comment);

      // create a new file
      await context.octokit.repos.createOrUpdateFileContents({
        repo,
        owner,
        path: ".github/workflows/build-autogenerated.yml", // the path to your config file
        message: "Adding build workflow", // a commit message
        content: Buffer.from(response).toString("base64"),
        // the content of your file, must be base64 encoded
        branch, // the branch name we used when creating a Git reference
      });
      // create a PR from that branch with the commit of our added file
      await context.octokit.pulls.create({
        repo,
        owner,
        title: "GitHub Build Workflow", // the title of the PR
        head: branch, // the branch our chances are on
        base: defaultBranch, // the branch to which you want to merge your changes
        body: "Adding build workflow for application", // the body of your PR,
        maintainer_can_modify: true, // allows maintainers to edit your app's PR
      });
    }
  });
};