const { generate_pipeline, update_pipeline } = require("./src/chat-gpt");
const { createIssueComment, getDefaultBranch, createBranch, getLanguages, getRepositoryTree, getDependencies, getFileDetails, getPreviousConversations } = require("./src/github");

/**
 * This is the main entrypoint to your Probot app
 * @param {import('probot').Probot} app
 */
module.exports = (app) => {

  app.on("issues.opened", async (context) => {
    if (context.payload.issue.title.startsWith("@devops")) {
      const branch = `devops-llm-bot-${Math.floor(Math.random() * 9999)}`;
      const workflow_file_name = `build-autogenerated.yml`
      const repo = context.payload.repository.name;
      const owner = context.payload.repository.owner.login;
      const default_branch = await getDefaultBranch(context, owner, repo);

      const issueCommentContent = "Generating build and test workflow for the repository! \n \
        Once generated, you will see a PR created with the workflow contents."
      
      // Create a comment on the issue
      await createIssueComment(context, issueCommentContent);

      // Create a branch
      await createBranch(context, owner, repo, branch, default_branch);

      // Get the repository tree
      const repoTree = await getRepositoryTree(context, owner, repo, default_branch);
  
      // Get languages used in the repo
      const languages_array = await getLanguages(context, owner, repo);

      // Get dependencies used in the repo
      const dependencies_array = await getDependencies(context, owner, repo);

      // Get the user provided comment
      const user_comment = context.payload.issue.body;

      // Generate the workflow file
      const response = await generate_pipeline (repoTree, languages_array, dependencies_array, user_comment, default_branch);

      // create a new file with the content of the workflow
      await context.octokit.repos.createOrUpdateFileContents({
        repo,
        owner,
        path: `.github/workflows/${workflow_file_name}`,
        message: "Adding build workflow", // a commit message
        content: Buffer.from(response).toString("base64"),
        // the content of your file, must be base64 encoded
        branch, // the branch name we used when creating a Git reference
      });

      // create a PR from that branch with the commit of our added file
      return await context.octokit.pulls.create({
        repo,
        owner,
        head: branch, // the branch our chances are on
        base: default_branch, // the branch to which you want to merge your changes
        body: "Adding auto generated build workflow for application", // the body of your PR,
        maintainer_can_modify: true, // allows maintainers to edit your app's PR
        issue: context.payload.issue.number,
      });
    }
  });

  app.on("issue_comment.created", async (context) => {
    if (context.payload.comment.body.startsWith("@devops-llm-bot") && context.payload.issue.pull_request!=null) {
      const repo = context.payload.repository.name;
      const owner = context.payload.repository.owner.login;
      const workflow_file_name = `build-autogenerated.yml`

      const PRDetails = await context.octokit.pulls.get({
        owner,
        repo,
        pull_number: context.payload.issue.number,
      });

      const branch = PRDetails.data.head.ref;

      const fileDetail = await getFileDetails (context, owner, repo, branch, `.github/workflows/${workflow_file_name}`);
      let bufferObj = Buffer.from(fileDetail.data.content, 'base64')
      let fileContent = bufferObj.toString('utf-8');

      const user_comment = context.payload.comment.body;

      const previous_conversations = await getPreviousConversations(context, owner, repo, context.payload.issue.number);

      const response = await update_pipeline (fileContent, user_comment, previous_conversations);

      await context.octokit.repos.createOrUpdateFileContents({
        repo,
        owner,
        path: ".github/workflows/build-autogenerated.yml", // the path to your config file
        message: "Updating workflow file based on PR comments", // a commit message
        content: Buffer.from(response).toString("base64"),
        // the content of your file, must be base64 encoded
        branch, // the branch name we used when creating a Git reference
        sha: fileDetail.data.sha,
      });

      const issueCommentContent = "Updating the workflow file based on the PR comments!";
      return await createIssueComment(context, issueCommentContent);
    }
  });
};